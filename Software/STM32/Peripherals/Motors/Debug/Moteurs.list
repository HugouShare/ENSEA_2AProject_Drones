
Moteurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd0  08003bd0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd8  08003bd8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00004bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003be0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000068  08003c48  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08003c48  00005338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a735  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b59  00000000  00000000  0000f7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00011328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095b  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e49  00000000  00000000  000128c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1d5  00000000  00000000  0003970c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9fb  00000000  00000000  000468e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001352dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  00135320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00138ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b28 	.word	0x08003b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003b28 	.word	0x08003b28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <System_Init>:
h_motor_t motor2;
h_motor_t motor3;
h_motor_t motor4;

// Motors Initialization
void System_Init() {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    motor1.htim = &htim1;
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <System_Init+0x50>)
 8000276:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <System_Init+0x54>)
 8000278:	601a      	str	r2, [r3, #0]
    motor1.channel = TIM_CHANNEL_1;
 800027a:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <System_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	605a      	str	r2, [r3, #4]
    motor2.htim = &htim2;
 8000280:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <System_Init+0x58>)
 8000282:	4a12      	ldr	r2, [pc, #72]	@ (80002cc <System_Init+0x5c>)
 8000284:	601a      	str	r2, [r3, #0]
    motor2.channel = TIM_CHANNEL_2;
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <System_Init+0x58>)
 8000288:	2204      	movs	r2, #4
 800028a:	605a      	str	r2, [r3, #4]
    motor3.htim = &htim3;
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <System_Init+0x60>)
 800028e:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <System_Init+0x64>)
 8000290:	601a      	str	r2, [r3, #0]
    motor3.channel = TIM_CHANNEL_3;
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <System_Init+0x60>)
 8000294:	2208      	movs	r2, #8
 8000296:	605a      	str	r2, [r3, #4]
    motor4.htim = &htim4;
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <System_Init+0x68>)
 800029a:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <System_Init+0x6c>)
 800029c:	601a      	str	r2, [r3, #0]
    motor4.channel = TIM_CHANNEL_4;
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <System_Init+0x68>)
 80002a0:	220c      	movs	r2, #12
 80002a2:	605a      	str	r2, [r3, #4]

    motor_Init(&motor1);
 80002a4:	4806      	ldr	r0, [pc, #24]	@ (80002c0 <System_Init+0x50>)
 80002a6:	f000 fa2b 	bl	8000700 <motor_Init>
    motor_Init(&motor2);
 80002aa:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <System_Init+0x58>)
 80002ac:	f000 fa28 	bl	8000700 <motor_Init>
    motor_Init(&motor3);
 80002b0:	4807      	ldr	r0, [pc, #28]	@ (80002d0 <System_Init+0x60>)
 80002b2:	f000 fa25 	bl	8000700 <motor_Init>
    motor_Init(&motor4);
 80002b6:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <System_Init+0x68>)
 80002b8:	f000 fa22 	bl	8000700 <motor_Init>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200001b4 	.word	0x200001b4
 80002c4:	20000084 	.word	0x20000084
 80002c8:	200001c0 	.word	0x200001c0
 80002cc:	200000d0 	.word	0x200000d0
 80002d0:	200001cc 	.word	0x200001cc
 80002d4:	2000011c 	.word	0x2000011c
 80002d8:	200001d8 	.word	0x200001d8
 80002dc:	20000168 	.word	0x20000168

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fba9 	bl	8000a3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f82a 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f92e 	bl	800054c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002f0:	f000 f86c 	bl	80003cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  System_Init(); // Motors Initialization
 80002f4:	f7ff ffbc 	bl	8000270 <System_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  motor_SetPower(&motor1, 25);
 80002f8:	2119      	movs	r1, #25
 80002fa:	4810      	ldr	r0, [pc, #64]	@ (800033c <main+0x5c>)
 80002fc:	f000 f986 	bl	800060c <motor_SetPower>
  HAL_Delay(2000);
 8000300:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000304:	f000 fc0e 	bl	8000b24 <HAL_Delay>
  motor_SetPower(&motor1, 50);
 8000308:	2132      	movs	r1, #50	@ 0x32
 800030a:	480c      	ldr	r0, [pc, #48]	@ (800033c <main+0x5c>)
 800030c:	f000 f97e 	bl	800060c <motor_SetPower>
  HAL_Delay(2000);
 8000310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000314:	f000 fc06 	bl	8000b24 <HAL_Delay>
  motor_SetPower(&motor1, 80);
 8000318:	2150      	movs	r1, #80	@ 0x50
 800031a:	4808      	ldr	r0, [pc, #32]	@ (800033c <main+0x5c>)
 800031c:	f000 f976 	bl	800060c <motor_SetPower>
  HAL_Delay(2000);
 8000320:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000324:	f000 fbfe 	bl	8000b24 <HAL_Delay>
  motor_SetPower(&motor1, 100);
 8000328:	2164      	movs	r1, #100	@ 0x64
 800032a:	4804      	ldr	r0, [pc, #16]	@ (800033c <main+0x5c>)
 800032c:	f000 f96e 	bl	800060c <motor_SetPower>
  HAL_Delay(2000);
 8000330:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000334:	f000 fbf6 	bl	8000b24 <HAL_Delay>
  motor_SetPower(&motor1, 25);
 8000338:	bf00      	nop
 800033a:	e7dd      	b.n	80002f8 <main+0x18>
 800033c:	200001b4 	.word	0x200001b4

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b096      	sub	sp, #88	@ 0x58
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	2244      	movs	r2, #68	@ 0x44
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fdd3 	bl	8002efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000362:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000366:	f000 fe9f 	bl	80010a8 <HAL_PWREx_ControlVoltageScaling>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000370:	f000 f904 	bl	800057c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000374:	2310      	movs	r3, #16
 8000376:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000378:	2301      	movs	r3, #1
 800037a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000380:	2360      	movs	r3, #96	@ 0x60
 8000382:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000384:	2300      	movs	r3, #0
 8000386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fee1 	bl	8001154 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000398:	f000 f8f0 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b0:	463b      	mov	r3, r7
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 faa9 	bl	800190c <HAL_RCC_ClockConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003c0:	f000 f8dc 	bl	800057c <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	3758      	adds	r7, #88	@ 0x58
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b096      	sub	sp, #88	@ 0x58
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	222c      	movs	r2, #44	@ 0x2c
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 fd7e 	bl	8002efa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fe:	4b51      	ldr	r3, [pc, #324]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000400:	4a51      	ldr	r2, [pc, #324]	@ (8000548 <MX_TIM1_Init+0x17c>)
 8000402:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000404:	4b4f      	ldr	r3, [pc, #316]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000406:	2203      	movs	r2, #3
 8000408:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040a:	4b4e      	ldr	r3, [pc, #312]	@ (8000544 <MX_TIM1_Init+0x178>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000410:	4b4c      	ldr	r3, [pc, #304]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000412:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b4a      	ldr	r3, [pc, #296]	@ (8000544 <MX_TIM1_Init+0x178>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041e:	4b49      	ldr	r3, [pc, #292]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000424:	4b47      	ldr	r3, [pc, #284]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800042a:	4846      	ldr	r0, [pc, #280]	@ (8000544 <MX_TIM1_Init+0x178>)
 800042c:	f001 fcbb 	bl	8001da6 <HAL_TIM_PWM_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 f8a1 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800043a:	4842      	ldr	r0, [pc, #264]	@ (8000544 <MX_TIM1_Init+0x178>)
 800043c:	f001 fc52 	bl	8001ce4 <HAL_TIM_OC_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000446:	f000 f899 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000456:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800045a:	4619      	mov	r1, r3
 800045c:	4839      	ldr	r0, [pc, #228]	@ (8000544 <MX_TIM1_Init+0x178>)
 800045e:	f002 fb2f 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000468:	f000 f888 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046c:	2360      	movs	r3, #96	@ 0x60
 800046e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000474:	2300      	movs	r3, #0
 8000476:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000478:	2300      	movs	r3, #0
 800047a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000488:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	482c      	ldr	r0, [pc, #176]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000492:	f001 fe5f 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800049c:	f000 f86e 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004a4:	2204      	movs	r2, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4826      	ldr	r0, [pc, #152]	@ (8000544 <MX_TIM1_Init+0x178>)
 80004aa:	f001 fe53 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80004b4:	f000 f862 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004c0:	2208      	movs	r2, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	481f      	ldr	r0, [pc, #124]	@ (8000544 <MX_TIM1_Init+0x178>)
 80004c6:	f001 fdcb 	bl	8002060 <HAL_TIM_OC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80004d0:	f000 f854 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d4:	2360      	movs	r3, #96	@ 0x60
 80004d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004dc:	220c      	movs	r2, #12
 80004de:	4619      	mov	r1, r3
 80004e0:	4818      	ldr	r0, [pc, #96]	@ (8000544 <MX_TIM1_Init+0x178>)
 80004e2:	f001 fe37 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80004ec:	f000 f846 	bl	800057c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4807      	ldr	r0, [pc, #28]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000526:	f002 fb53 	bl	8002bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000530:	f000 f824 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000534:	4803      	ldr	r0, [pc, #12]	@ (8000544 <MX_TIM1_Init+0x178>)
 8000536:	f000 f93b 	bl	80007b0 <HAL_TIM_MspPostInit>

}
 800053a:	bf00      	nop
 800053c:	3758      	adds	r7, #88	@ 0x58
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000084 	.word	0x20000084
 8000548:	40012c00 	.word	0x40012c00

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_PWM 1000 // µs, basic value for 0%
#define MAX_PWM 2000 // µs, basic value for 100%

void motor_ArmESC(h_motor_t* h_motor) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 8000590:	2100      	movs	r1, #0
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f83a 	bl	800060c <motor_SetPower>
    HAL_Delay(3000);
 8000598:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800059c:	f000 fac2 	bl	8000b24 <HAL_Delay>

    motor_SetPower(h_motor, 5); // Low value to not have a violent start
 80005a0:	2105      	movs	r1, #5
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f832 	bl	800060c <motor_SetPower>
    HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f000 faba 	bl	8000b24 <HAL_Delay>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    if (percentage < 0) percentage = 0; // Minimal value
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	da01      	bge.n	80005ca <percentageToMicrosecondsAtHighState+0x12>
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
    if (percentage > 100) percentage = 100; // Maximal value
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b64      	cmp	r3, #100	@ 0x64
 80005ce:	dd01      	ble.n	80005d4 <percentageToMicrosecondsAtHighState+0x1c>
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	607b      	str	r3, [r7, #4]

    int pulse_length = MIN_PWM + ((MAX_PWM - MIN_PWM) * percentage) / 100; // Convert percentage into µs
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005e2:	60fb      	str	r3, [r7, #12]
    return (pulse_length * COUNTER_PERIOD) / 20000;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <percentageToMicrosecondsAtHighState+0x50>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1352      	asrs	r2, r2, #13
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	68db8bad 	.word	0x68db8bad

0800060c <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int targetPercentage) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
    int step = (targetPercentage > h_motor->PercentageOfTotalPower) ? 1 : -1; // Determine direction
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	ee07 3a90 	vmov	s15, r3
 800061c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	edd3 7a02 	vldr	s15, [r3, #8]
 8000626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062e:	dd01      	ble.n	8000634 <motor_SetPower+0x28>
 8000630:	2301      	movs	r3, #1
 8000632:	e001      	b.n	8000638 <motor_SetPower+0x2c>
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	613b      	str	r3, [r7, #16]
    int currentPercentage = h_motor->PercentageOfTotalPower;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000644:	ee17 3a90 	vmov	r3, s15
 8000648:	617b      	str	r3, [r7, #20]

    // Gradually adjust the power percentage to the target value
    while (currentPercentage != targetPercentage) {
 800064a:	e04d      	b.n	80006e8 <motor_SetPower+0xdc>
        currentPercentage += step;
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4413      	add	r3, r2
 8000652:	617b      	str	r3, [r7, #20]

        // Convert the current power percentage to PWM pulse width
        int microsecondsAtHighState = percentageToMicrosecondsAtHighState(currentPercentage);
 8000654:	6978      	ldr	r0, [r7, #20]
 8000656:	f7ff ffaf 	bl	80005b8 <percentageToMicrosecondsAtHighState>
 800065a:	60f8      	str	r0, [r7, #12]

        // Set the PWM duty cycle
        __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d105      	bne.n	8000670 <motor_SetPower+0x64>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	e02c      	b.n	80006ca <motor_SetPower+0xbe>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d105      	bne.n	8000684 <motor_SetPower+0x78>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6393      	str	r3, [r2, #56]	@ 0x38
 8000682:	e022      	b.n	80006ca <motor_SetPower+0xbe>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b08      	cmp	r3, #8
 800068a:	d105      	bne.n	8000698 <motor_SetPower+0x8c>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000696:	e018      	b.n	80006ca <motor_SetPower+0xbe>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2b0c      	cmp	r3, #12
 800069e:	d105      	bne.n	80006ac <motor_SetPower+0xa0>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006aa:	e00e      	b.n	80006ca <motor_SetPower+0xbe>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d105      	bne.n	80006c0 <motor_SetPower+0xb4>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006be:	e004      	b.n	80006ca <motor_SetPower+0xbe>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

        // Store the new power level
        h_motor->PercentageOfTotalPower = currentPercentage;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	edc3 7a02 	vstr	s15, [r3, #8]

        // Print the new power level for debugging
        printf("Motor power set to %d%%\n", currentPercentage);
 80006da:	6979      	ldr	r1, [r7, #20]
 80006dc:	4807      	ldr	r0, [pc, #28]	@ (80006fc <motor_SetPower+0xf0>)
 80006de:	f002 fbb7 	bl	8002e50 <iprintf>

        // Small delay to create the ramp effect
        HAL_Delay(200); // Adjust the delay for smoother or faster transitions
 80006e2:	20c8      	movs	r0, #200	@ 0xc8
 80006e4:	f000 fa1e 	bl	8000b24 <HAL_Delay>
    while (currentPercentage != targetPercentage) {
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d1ad      	bne.n	800064c <motor_SetPower+0x40>
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	08003b40 	.word	0x08003b40

08000700 <motor_Init>:


void motor_Init(h_motor_t* h_motor) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f001 fb9e 	bl	8001e54 <HAL_TIM_PWM_Start>
	motor_ArmESC(h_motor);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff35 	bl	8000588 <motor_ArmESC>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	@ 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	@ 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <HAL_TIM_PWM_MspInit+0x38>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10b      	bne.n	800079a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800078c:	6613      	str	r3, [r2, #96]	@ 0x60
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40012c00 	.word	0x40012c00
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <HAL_TIM_MspPostInit+0x68>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d11d      	bne.n	800080e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_TIM_MspPostInit+0x6c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <HAL_TIM_MspPostInit+0x6c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_TIM_MspPostInit+0x6c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80007ea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80007ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f000 fa95 	bl	8000d38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40012c00 	.word	0x40012c00
 800081c:	40021000 	.word	0x40021000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 f935 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e00a      	b.n	80008a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000890:	f3af 8000 	nop.w
 8000894:	4601      	mov	r1, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	60ba      	str	r2, [r7, #8]
 800089c:	b2ca      	uxtb	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf0      	blt.n	8000890 <_read+0x12>
  }

  return len;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e009      	b.n	80008de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	60ba      	str	r2, [r7, #8]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbf1      	blt.n	80008ca <_write+0x12>
  }
  return len;
 80008e6:	687b      	ldr	r3, [r7, #4]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_close>:

int _close(int file)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000918:	605a      	str	r2, [r3, #4]
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_isatty>:

int _isatty(int file)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f002 fb06 	bl	8002f98 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20018000 	.word	0x20018000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200001e4 	.word	0x200001e4
 80009c0:	20000338 	.word	0x20000338

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	@ (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	@ (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 fac5 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fc61 	bl	80002e0 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a2c:	08003be0 	.word	0x08003be0
  ldr r2, =_sbss
 8000a30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a34:	20000338 	.word	0x20000338

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f943 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f80e 	bl	8000a6c <HAL_InitTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5c:	f7ff fe64 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_InitTick+0x70>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f941 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d809      	bhi.n	8000abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f919 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_InitTick+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e007      	b.n	8000acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	200001e8 	.word	0x200001e8

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200001e8 	.word	0x200001e8

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	@ (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	@ 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	@ 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5c 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e17f      	b.n	8001048 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8171 	beq.w	8001042 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x40>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d118      	bne.n	8000e18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	6939      	ldr	r1, [r7, #16]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80ac 	beq.w	8001042 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b5f      	ldr	r3, [pc, #380]	@ (8001068 <HAL_GPIO_Init+0x330>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a5e      	ldr	r2, [pc, #376]	@ (8001068 <HAL_GPIO_Init+0x330>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8001068 <HAL_GPIO_Init+0x330>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f02:	4a5a      	ldr	r2, [pc, #360]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f2c:	d025      	beq.n	8000f7a <HAL_GPIO_Init+0x242>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4f      	ldr	r2, [pc, #316]	@ (8001070 <HAL_GPIO_Init+0x338>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01f      	beq.n	8000f76 <HAL_GPIO_Init+0x23e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4e      	ldr	r2, [pc, #312]	@ (8001074 <HAL_GPIO_Init+0x33c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x23a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	@ (8001078 <HAL_GPIO_Init+0x340>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x236>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	@ (800107c <HAL_GPIO_Init+0x344>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x232>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	@ (8001080 <HAL_GPIO_Init+0x348>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x22e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4a      	ldr	r2, [pc, #296]	@ (8001084 <HAL_GPIO_Init+0x34c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x22a>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f62:	2307      	movs	r3, #7
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x244>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8c:	4937      	ldr	r1, [pc, #220]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe8:	4a27      	ldr	r2, [pc, #156]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001012:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <HAL_GPIO_Init+0x350>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_GPIO_Init+0x350>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_GPIO_Init+0x350>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa22 f303 	lsr.w	r3, r2, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f ae78 	bne.w	8000d48 <HAL_GPIO_Init+0x10>
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48001000 	.word	0x48001000
 8001080:	48001400 	.word	0x48001400
 8001084:	48001800 	.word	0x48001800
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000

080010a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010b6:	d130      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b8:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c4:	d038      	beq.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2232      	movs	r2, #50	@ 0x32
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ec:	e002      	b.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001100:	d102      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f2      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001114:	d110      	bne.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e00f      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	d007      	beq.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001136:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40007000 	.word	0x40007000
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83

08001154 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e3ca      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001166:	4b97      	ldr	r3, [pc, #604]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001170:	4b94      	ldr	r3, [pc, #592]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80e4 	beq.w	8001350 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <HAL_RCC_OscConfig+0x4a>
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b0c      	cmp	r3, #12
 8001192:	f040 808b 	bne.w	80012ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 8087 	bne.w	80012ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800119e:	4b89      	ldr	r3, [pc, #548]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_RCC_OscConfig+0x62>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e3a2      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	4b82      	ldr	r3, [pc, #520]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_RCC_OscConfig+0x7c>
 80011c6:	4b7f      	ldr	r3, [pc, #508]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ce:	e005      	b.n	80011dc <HAL_RCC_OscConfig+0x88>
 80011d0:	4b7c      	ldr	r3, [pc, #496]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011dc:	4293      	cmp	r3, r2
 80011de:	d223      	bcs.n	8001228 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fd1d 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e383      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f4:	4b73      	ldr	r3, [pc, #460]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a72      	ldr	r2, [pc, #456]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b70      	ldr	r3, [pc, #448]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	496d      	ldr	r1, [pc, #436]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001212:	4b6c      	ldr	r3, [pc, #432]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4968      	ldr	r1, [pc, #416]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
 8001226:	e025      	b.n	8001274 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001228:	4b66      	ldr	r3, [pc, #408]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a65      	ldr	r2, [pc, #404]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b63      	ldr	r3, [pc, #396]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4960      	ldr	r1, [pc, #384]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001246:	4b5f      	ldr	r3, [pc, #380]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	495b      	ldr	r1, [pc, #364]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fcdd 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e343      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001274:	f000 fc4a 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b52      	ldr	r3, [pc, #328]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4950      	ldr	r1, [pc, #320]	@ (80013c8 <HAL_RCC_OscConfig+0x274>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	4a4e      	ldr	r2, [pc, #312]	@ (80013cc <HAL_RCC_OscConfig+0x278>)
 8001292:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001294:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <HAL_RCC_OscConfig+0x27c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fbe7 	bl	8000a6c <HAL_InitTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d052      	beq.n	800134e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	e327      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d032      	beq.n	800131a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b4:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a42      	ldr	r2, [pc, #264]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc24 	bl	8000b0c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc20 	bl	8000b0c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e310      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012da:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a36      	ldr	r2, [pc, #216]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4931      	ldr	r1, [pc, #196]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	492c      	ldr	r1, [pc, #176]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e01a      	b.n	8001350 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001326:	f7ff fbf1 	bl	8000b0c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132e:	f7ff fbed 	bl	8000b0c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e2dd      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x1da>
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800134e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d074      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x21a>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d10e      	bne.n	8001386 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d10b      	bne.n	8001386 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d064      	beq.n	8001444 <HAL_RCC_OscConfig+0x2f0>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d160      	bne.n	8001444 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e2ba      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x24a>
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e026      	b.n	80013ec <HAL_RCC_OscConfig+0x298>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013a6:	d115      	bne.n	80013d4 <HAL_RCC_OscConfig+0x280>
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a02      	ldr	r2, [pc, #8]	@ (80013c4 <HAL_RCC_OscConfig+0x270>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e014      	b.n	80013ec <HAL_RCC_OscConfig+0x298>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	08003b5c 	.word	0x08003b5c
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004
 80013d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb8a 	bl	8000b0c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb86 	bl	8000b0c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	@ 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e276      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	4b92      	ldr	r3, [pc, #584]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2a8>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fb76 	bl	8000b0c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fb72 	bl	8000b0c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e262      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001436:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d0>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d060      	beq.n	8001514 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b04      	cmp	r3, #4
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x310>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d119      	bne.n	8001492 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001464:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x328>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e23f      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b76      	ldr	r3, [pc, #472]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	4973      	ldr	r1, [pc, #460]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001490:	e040      	b.n	8001514 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d023      	beq.n	80014e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149a:	4b6f      	ldr	r3, [pc, #444]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6e      	ldr	r2, [pc, #440]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb31 	bl	8000b0c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fb2d 	bl	8000b0c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e21d      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c0:	4b65      	ldr	r3, [pc, #404]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b62      	ldr	r3, [pc, #392]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	495f      	ldr	r1, [pc, #380]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e018      	b.n	8001514 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80014e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fb0d 	bl	8000b0c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fb09 	bl	8000b0c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1f9      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001508:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03c      	beq.n	800159a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01c      	beq.n	8001562 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001528:	4b4b      	ldr	r3, [pc, #300]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152e:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fae8 	bl	8000b0c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fae4 	bl	8000b0c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1d4      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ef      	beq.n	8001540 <HAL_RCC_OscConfig+0x3ec>
 8001560:	e01b      	b.n	800159a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff facb 	bl	8000b0c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fac7 	bl	8000b0c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1b7      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ef      	bne.n	800157a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	4b21      	ldr	r3, [pc, #132]	@ (800165c <HAL_RCC_OscConfig+0x508>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d118      	bne.n	8001612 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <HAL_RCC_OscConfig+0x508>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_RCC_OscConfig+0x508>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fa8e 	bl	8000b0c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff fa8a 	bl	8000b0c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e17a      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x508>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_RCC_OscConfig+0x4d8>
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800162a:	e029      	b.n	8001680 <HAL_RCC_OscConfig+0x52c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d115      	bne.n	8001660 <HAL_RCC_OscConfig+0x50c>
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164a:	4a03      	ldr	r2, [pc, #12]	@ (8001658 <HAL_RCC_OscConfig+0x504>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x52c>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	4b9c      	ldr	r3, [pc, #624]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	4a9b      	ldr	r2, [pc, #620]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001670:	4b98      	ldr	r3, [pc, #608]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001676:	4a97      	ldr	r2, [pc, #604]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fa40 	bl	8000b0c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fa3c 	bl	8000b0c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e12a      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b8b      	ldr	r3, [pc, #556]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ed      	beq.n	8001690 <HAL_RCC_OscConfig+0x53c>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa29 	bl	8000b0c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa25 	bl	8000b0c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e113      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	4b7f      	ldr	r3, [pc, #508]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ed      	bne.n	80016be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b7a      	ldr	r3, [pc, #488]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	4a79      	ldr	r2, [pc, #484]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80fe 	beq.w	80018fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	2b02      	cmp	r3, #2
 8001704:	f040 80d0 	bne.w	80018a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001708:	4b72      	ldr	r3, [pc, #456]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	429a      	cmp	r2, r3
 800171a:	d130      	bne.n	800177e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	3b01      	subs	r3, #1
 8001728:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d127      	bne.n	800177e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001738:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d11f      	bne.n	800177e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001748:	2a07      	cmp	r2, #7
 800174a:	bf14      	ite	ne
 800174c:	2201      	movne	r2, #1
 800174e:	2200      	moveq	r2, #0
 8001750:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001752:	4293      	cmp	r3, r2
 8001754:	d113      	bne.n	800177e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	3b01      	subs	r3, #1
 8001764:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d06e      	beq.n	800185c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d069      	beq.n	8001858 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001790:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0ad      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a0:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80017a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ac:	f7ff f9ae 	bl	8000b0c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f9aa 	bl	8000b0c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e09a      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d2:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <HAL_RCC_OscConfig+0x784>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017e2:	3a01      	subs	r2, #1
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017ec:	0212      	lsls	r2, r2, #8
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f4:	0852      	lsrs	r2, r2, #1
 80017f6:	3a01      	subs	r2, #1
 80017f8:	0552      	lsls	r2, r2, #21
 80017fa:	4311      	orrs	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001800:	0852      	lsrs	r2, r2, #1
 8001802:	3a01      	subs	r2, #1
 8001804:	0652      	lsls	r2, r2, #25
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800180c:	0912      	lsrs	r2, r2, #4
 800180e:	0452      	lsls	r2, r2, #17
 8001810:	430a      	orrs	r2, r1
 8001812:	4930      	ldr	r1, [pc, #192]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2d      	ldr	r2, [pc, #180]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001824:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001830:	f7ff f96c 	bl	8000b0c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f968 	bl	8000b0c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e058      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001856:	e050      	b.n	80018fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e04f      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185c:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d148      	bne.n	80018fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800186e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001872:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001880:	f7ff f944 	bl	8000b0c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f940 	bl	8000b0c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e030      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x734>
 80018a6:	e028      	b.n	80018fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d023      	beq.n	80018f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_RCC_OscConfig+0x780>)
 80018b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f927 	bl	8000b0c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e00c      	b.n	80018dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f923 	bl	8000b0c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d905      	bls.n	80018dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e013      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_OscConfig+0x7b0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ec      	bne.n	80018c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_RCC_OscConfig+0x7b0>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4905      	ldr	r1, [pc, #20]	@ (8001904 <HAL_RCC_OscConfig+0x7b0>)
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_RCC_OscConfig+0x7b4>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
 80018f4:	e001      	b.n	80018fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	feeefffc 	.word	0xfeeefffc

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0e7      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d910      	bls.n	8001950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0207 	bic.w	r2, r3, #7
 8001936:	4970      	ldr	r1, [pc, #448]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0cf      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001968:	429a      	cmp	r2, r3
 800196a:	d908      	bls.n	800197e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b63      	ldr	r3, [pc, #396]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4960      	ldr	r1, [pc, #384]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04c      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b5a      	ldr	r3, [pc, #360]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d121      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0a6      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	4b54      	ldr	r3, [pc, #336]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e09a      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c2:	4b4e      	ldr	r3, [pc, #312]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e08e      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d2:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e086      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4943      	ldr	r1, [pc, #268]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f4:	f7ff f88a 	bl	8000b0c <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f886 	bl	8000b0c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e06e      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d208      	bcs.n	8001a52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	492b      	ldr	r1, [pc, #172]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d210      	bcs.n	8001a82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0207 	bic.w	r2, r3, #7
 8001a68:	4923      	ldr	r1, [pc, #140]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e036      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4918      	ldr	r1, [pc, #96]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4910      	ldr	r1, [pc, #64]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac0:	f000 f824 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	490b      	ldr	r1, [pc, #44]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1fc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe ffc1 	bl	8000a6c <HAL_InitTick>
 8001aea:	4603      	mov	r3, r0
 8001aec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aee:	7afb      	ldrb	r3, [r7, #11]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	08003b5c 	.word	0x08003b5c
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	@ 0x24
 8001b10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b24:	4b3b      	ldr	r3, [pc, #236]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x34>
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d121      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d11e      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b40:	4b34      	ldr	r3, [pc, #208]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b4c:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e005      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b68:	4a2b      	ldr	r2, [pc, #172]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10d      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e004      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d134      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d003      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb4:	617b      	str	r3, [r7, #20]
      break;
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bba:	617b      	str	r3, [r7, #20]
      break;
 8001bbc:	e002      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	617b      	str	r3, [r7, #20]
      break;
 8001bc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	fb03 f202 	mul.w	r2, r3, r2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	0e5b      	lsrs	r3, r3, #25
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c04:	69bb      	ldr	r3, [r7, #24]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08003b6c 	.word	0x08003b6c
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200

08001c24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c3c:	f7ff fa26 	bl	800108c <HAL_PWREx_GetVoltageRange>
 8001c40:	6178      	str	r0, [r7, #20]
 8001c42:	e014      	b.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff fa16 	bl	800108c <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a1d      	ldr	r2, [pc, #116]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c74:	d10b      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	@ 0x80
 8001c7a:	d919      	bls.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c80:	d902      	bls.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c82:	2302      	movs	r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e013      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e010      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	@ 0x80
 8001c92:	d902      	bls.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c94:	2303      	movs	r3, #3
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e00a      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b80      	cmp	r3, #128	@ 0x80
 8001c9e:	d102      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e004      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b70      	cmp	r3, #112	@ 0x70
 8001caa:	d101      	bne.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	4909      	ldr	r1, [pc, #36]	@ (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e049      	b.n	8001d8a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f841 	bl	8001d92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 fb2a 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e049      	b.n	8001e4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d106      	bne.n	8001dd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7fe fccf 	bl	8000770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f000 fac9 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_TIM_PWM_Start+0x24>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e03c      	b.n	8001ef2 <HAL_TIM_PWM_Start+0x9e>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d109      	bne.n	8001e92 <HAL_TIM_PWM_Start+0x3e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	e02f      	b.n	8001ef2 <HAL_TIM_PWM_Start+0x9e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d109      	bne.n	8001eac <HAL_TIM_PWM_Start+0x58>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e022      	b.n	8001ef2 <HAL_TIM_PWM_Start+0x9e>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d109      	bne.n	8001ec6 <HAL_TIM_PWM_Start+0x72>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	e015      	b.n	8001ef2 <HAL_TIM_PWM_Start+0x9e>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d109      	bne.n	8001ee0 <HAL_TIM_PWM_Start+0x8c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e008      	b.n	8001ef2 <HAL_TIM_PWM_Start+0x9e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e09c      	b.n	8002034 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_TIM_PWM_Start+0xb6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f08:	e023      	b.n	8001f52 <HAL_TIM_PWM_Start+0xfe>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_PWM_Start+0xc6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f18:	e01b      	b.n	8001f52 <HAL_TIM_PWM_Start+0xfe>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d104      	bne.n	8001f2a <HAL_TIM_PWM_Start+0xd6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f28:	e013      	b.n	8001f52 <HAL_TIM_PWM_Start+0xfe>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d104      	bne.n	8001f3a <HAL_TIM_PWM_Start+0xe6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f38:	e00b      	b.n	8001f52 <HAL_TIM_PWM_Start+0xfe>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d104      	bne.n	8001f4a <HAL_TIM_PWM_Start+0xf6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f48:	e003      	b.n	8001f52 <HAL_TIM_PWM_Start+0xfe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fd8a 	bl	8002a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a35      	ldr	r2, [pc, #212]	@ (800203c <HAL_TIM_PWM_Start+0x1e8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x13e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <HAL_TIM_PWM_Start+0x1ec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x13e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a32      	ldr	r2, [pc, #200]	@ (8002044 <HAL_TIM_PWM_Start+0x1f0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x13e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a31      	ldr	r2, [pc, #196]	@ (8002048 <HAL_TIM_PWM_Start+0x1f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x13e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800204c <HAL_TIM_PWM_Start+0x1f8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PWM_Start+0x142>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_TIM_PWM_Start+0x144>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a22      	ldr	r2, [pc, #136]	@ (800203c <HAL_TIM_PWM_Start+0x1e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d018      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a22      	ldr	r2, [pc, #136]	@ (8002050 <HAL_TIM_PWM_Start+0x1fc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <HAL_TIM_PWM_Start+0x200>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <HAL_TIM_PWM_Start+0x204>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_TIM_PWM_Start+0x1ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x19e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_TIM_PWM_Start+0x1f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d115      	bne.n	800201e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_TIM_PWM_Start+0x208>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b06      	cmp	r3, #6
 8002002:	d015      	beq.n	8002030 <HAL_TIM_PWM_Start+0x1dc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200a:	d011      	beq.n	8002030 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201c:	e008      	b.n	8002030 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e000      	b.n	8002032 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40013400 	.word	0x40013400
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	00010007 	.word	0x00010007

08002060 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_TIM_OC_ConfigChannel+0x1e>
 800207a:	2302      	movs	r3, #2
 800207c:	e066      	b.n	800214c <HAL_TIM_OC_ConfigChannel+0xec>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b14      	cmp	r3, #20
 800208a:	d857      	bhi.n	800213c <HAL_TIM_OC_ConfigChannel+0xdc>
 800208c:	a201      	add	r2, pc, #4	@ (adr r2, 8002094 <HAL_TIM_OC_ConfigChannel+0x34>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020e9 	.word	0x080020e9
 8002098:	0800213d 	.word	0x0800213d
 800209c:	0800213d 	.word	0x0800213d
 80020a0:	0800213d 	.word	0x0800213d
 80020a4:	080020f7 	.word	0x080020f7
 80020a8:	0800213d 	.word	0x0800213d
 80020ac:	0800213d 	.word	0x0800213d
 80020b0:	0800213d 	.word	0x0800213d
 80020b4:	08002105 	.word	0x08002105
 80020b8:	0800213d 	.word	0x0800213d
 80020bc:	0800213d 	.word	0x0800213d
 80020c0:	0800213d 	.word	0x0800213d
 80020c4:	08002113 	.word	0x08002113
 80020c8:	0800213d 	.word	0x0800213d
 80020cc:	0800213d 	.word	0x0800213d
 80020d0:	0800213d 	.word	0x0800213d
 80020d4:	08002121 	.word	0x08002121
 80020d8:	0800213d 	.word	0x0800213d
 80020dc:	0800213d 	.word	0x0800213d
 80020e0:	0800213d 	.word	0x0800213d
 80020e4:	0800212f 	.word	0x0800212f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f9ea 	bl	80024c8 <TIM_OC1_SetConfig>
      break;
 80020f4:	e025      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa73 	bl	80025e8 <TIM_OC2_SetConfig>
      break;
 8002102:	e01e      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 faf6 	bl	80026fc <TIM_OC3_SetConfig>
      break;
 8002110:	e017      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fb77 	bl	800280c <TIM_OC4_SetConfig>
      break;
 800211e:	e010      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fbda 	bl	80028e0 <TIM_OC5_SetConfig>
      break;
 800212c:	e009      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fc37 	bl	80029a8 <TIM_OC6_SetConfig>
      break;
 800213a:	e002      	b.n	8002142 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
      break;
 8002140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800216e:	2302      	movs	r3, #2
 8002170:	e0ff      	b.n	8002372 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b14      	cmp	r3, #20
 800217e:	f200 80f0 	bhi.w	8002362 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	080021dd 	.word	0x080021dd
 800218c:	08002363 	.word	0x08002363
 8002190:	08002363 	.word	0x08002363
 8002194:	08002363 	.word	0x08002363
 8002198:	0800221d 	.word	0x0800221d
 800219c:	08002363 	.word	0x08002363
 80021a0:	08002363 	.word	0x08002363
 80021a4:	08002363 	.word	0x08002363
 80021a8:	0800225f 	.word	0x0800225f
 80021ac:	08002363 	.word	0x08002363
 80021b0:	08002363 	.word	0x08002363
 80021b4:	08002363 	.word	0x08002363
 80021b8:	0800229f 	.word	0x0800229f
 80021bc:	08002363 	.word	0x08002363
 80021c0:	08002363 	.word	0x08002363
 80021c4:	08002363 	.word	0x08002363
 80021c8:	080022e1 	.word	0x080022e1
 80021cc:	08002363 	.word	0x08002363
 80021d0:	08002363 	.word	0x08002363
 80021d4:	08002363 	.word	0x08002363
 80021d8:	08002321 	.word	0x08002321
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f970 	bl	80024c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0204 	bic.w	r2, r2, #4
 8002206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6999      	ldr	r1, [r3, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	619a      	str	r2, [r3, #24]
      break;
 800221a:	e0a5      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f9e0 	bl	80025e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
      break;
 800225c:	e084      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fa49 	bl	80026fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0208 	orr.w	r2, r2, #8
 8002278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0204 	bic.w	r2, r2, #4
 8002288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
      break;
 800229c:	e064      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fab1 	bl	800280c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69d9      	ldr	r1, [r3, #28]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	021a      	lsls	r2, r3, #8
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	61da      	str	r2, [r3, #28]
      break;
 80022de:	e043      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fafa 	bl	80028e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800231e:	e023      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fb3e 	bl	80029a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002360:	e002      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
      break;
 8002366:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002370:	7dfb      	ldrb	r3, [r7, #23]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop

0800237c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a46      	ldr	r2, [pc, #280]	@ (80024a8 <TIM_Base_SetConfig+0x12c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239a:	d00f      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a43      	ldr	r2, [pc, #268]	@ (80024ac <TIM_Base_SetConfig+0x130>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00b      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a42      	ldr	r2, [pc, #264]	@ (80024b0 <TIM_Base_SetConfig+0x134>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a41      	ldr	r2, [pc, #260]	@ (80024b4 <TIM_Base_SetConfig+0x138>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a40      	ldr	r2, [pc, #256]	@ (80024b8 <TIM_Base_SetConfig+0x13c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d108      	bne.n	80023ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a35      	ldr	r2, [pc, #212]	@ (80024a8 <TIM_Base_SetConfig+0x12c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023dc:	d01b      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a32      	ldr	r2, [pc, #200]	@ (80024ac <TIM_Base_SetConfig+0x130>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d017      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <TIM_Base_SetConfig+0x134>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <TIM_Base_SetConfig+0x138>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <TIM_Base_SetConfig+0x13c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2e      	ldr	r2, [pc, #184]	@ (80024bc <TIM_Base_SetConfig+0x140>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <TIM_Base_SetConfig+0x144>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0x9a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <TIM_Base_SetConfig+0x148>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d108      	bne.n	8002428 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800241c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <TIM_Base_SetConfig+0x12c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00f      	beq.n	8002474 <TIM_Base_SetConfig+0xf8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <TIM_Base_SetConfig+0x13c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00b      	beq.n	8002474 <TIM_Base_SetConfig+0xf8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <TIM_Base_SetConfig+0x140>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <TIM_Base_SetConfig+0xf8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a16      	ldr	r2, [pc, #88]	@ (80024c0 <TIM_Base_SetConfig+0x144>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <TIM_Base_SetConfig+0xf8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <TIM_Base_SetConfig+0x148>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]
  }
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40000c00 	.word	0x40000c00
 80024b8:	40013400 	.word	0x40013400
 80024bc:	40014000 	.word	0x40014000
 80024c0:	40014400 	.word	0x40014400
 80024c4:	40014800 	.word	0x40014800

080024c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 0201 	bic.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a2c      	ldr	r2, [pc, #176]	@ (80025d4 <TIM_OC1_SetConfig+0x10c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00f      	beq.n	8002548 <TIM_OC1_SetConfig+0x80>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a2b      	ldr	r2, [pc, #172]	@ (80025d8 <TIM_OC1_SetConfig+0x110>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00b      	beq.n	8002548 <TIM_OC1_SetConfig+0x80>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a2a      	ldr	r2, [pc, #168]	@ (80025dc <TIM_OC1_SetConfig+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_OC1_SetConfig+0x80>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <TIM_OC1_SetConfig+0x118>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_OC1_SetConfig+0x80>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a28      	ldr	r2, [pc, #160]	@ (80025e4 <TIM_OC1_SetConfig+0x11c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d10c      	bne.n	8002562 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 0308 	bic.w	r3, r3, #8
 800254e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <TIM_OC1_SetConfig+0x10c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00f      	beq.n	800258a <TIM_OC1_SetConfig+0xc2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <TIM_OC1_SetConfig+0x110>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00b      	beq.n	800258a <TIM_OC1_SetConfig+0xc2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <TIM_OC1_SetConfig+0x114>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_OC1_SetConfig+0xc2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <TIM_OC1_SetConfig+0x118>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <TIM_OC1_SetConfig+0xc2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <TIM_OC1_SetConfig+0x11c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	621a      	str	r2, [r3, #32]
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40013400 	.word	0x40013400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0210 	bic.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0320 	bic.w	r3, r3, #32
 8002636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <TIM_OC2_SetConfig+0x100>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_OC2_SetConfig+0x6c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <TIM_OC2_SetConfig+0x104>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10d      	bne.n	8002670 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800265a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800266e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <TIM_OC2_SetConfig+0x100>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00f      	beq.n	8002698 <TIM_OC2_SetConfig+0xb0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1c      	ldr	r2, [pc, #112]	@ (80026ec <TIM_OC2_SetConfig+0x104>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00b      	beq.n	8002698 <TIM_OC2_SetConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <TIM_OC2_SetConfig+0x108>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <TIM_OC2_SetConfig+0xb0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <TIM_OC2_SetConfig+0x10c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_OC2_SetConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a19      	ldr	r2, [pc, #100]	@ (80026f8 <TIM_OC2_SetConfig+0x110>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d113      	bne.n	80026c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800269e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40013400 	.word	0x40013400
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800272e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <TIM_OC3_SetConfig+0xfc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <TIM_OC3_SetConfig+0x6a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a26      	ldr	r2, [pc, #152]	@ (80027fc <TIM_OC3_SetConfig+0x100>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10d      	bne.n	8002782 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800276c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <TIM_OC3_SetConfig+0xfc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00f      	beq.n	80027aa <TIM_OC3_SetConfig+0xae>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <TIM_OC3_SetConfig+0x100>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00b      	beq.n	80027aa <TIM_OC3_SetConfig+0xae>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1a      	ldr	r2, [pc, #104]	@ (8002800 <TIM_OC3_SetConfig+0x104>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <TIM_OC3_SetConfig+0xae>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <TIM_OC3_SetConfig+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_OC3_SetConfig+0xae>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a18      	ldr	r2, [pc, #96]	@ (8002808 <TIM_OC3_SetConfig+0x10c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d113      	bne.n	80027d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	621a      	str	r2, [r3, #32]
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40013400 	.word	0x40013400
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800

0800280c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800285a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	031b      	lsls	r3, r3, #12
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <TIM_OC4_SetConfig+0xc0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00f      	beq.n	8002890 <TIM_OC4_SetConfig+0x84>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <TIM_OC4_SetConfig+0xc4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <TIM_OC4_SetConfig+0x84>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <TIM_OC4_SetConfig+0xc8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_OC4_SetConfig+0x84>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a15      	ldr	r2, [pc, #84]	@ (80028d8 <TIM_OC4_SetConfig+0xcc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_OC4_SetConfig+0x84>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <TIM_OC4_SetConfig+0xd0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d109      	bne.n	80028a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800

080028e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <TIM_OC5_SetConfig+0xb4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_OC5_SetConfig+0x7a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a16      	ldr	r2, [pc, #88]	@ (8002998 <TIM_OC5_SetConfig+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_OC5_SetConfig+0x7a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <TIM_OC5_SetConfig+0xbc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_OC5_SetConfig+0x7a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <TIM_OC5_SetConfig+0xc0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_OC5_SetConfig+0x7a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <TIM_OC5_SetConfig+0xc4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d109      	bne.n	800296e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40013400 	.word	0x40013400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800

080029a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a18      	ldr	r2, [pc, #96]	@ (8002a60 <TIM_OC6_SetConfig+0xb8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00f      	beq.n	8002a24 <TIM_OC6_SetConfig+0x7c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <TIM_OC6_SetConfig+0xbc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_OC6_SetConfig+0x7c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <TIM_OC6_SetConfig+0xc0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_OC6_SetConfig+0x7c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <TIM_OC6_SetConfig+0xc4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_OC6_SetConfig+0x7c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <TIM_OC6_SetConfig+0xc8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d109      	bne.n	8002a38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40013400 	.word	0x40013400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800

08002a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e068      	b.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d018      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10c      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40013400 	.word	0x40013400
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40014000 	.word	0x40014000

08002bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e065      	b.n	8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d115      	bne.n	8002ca6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40013400 	.word	0x40013400

08002ccc <std>:
 8002ccc:	2300      	movs	r3, #0
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cda:	6083      	str	r3, [r0, #8]
 8002cdc:	8181      	strh	r1, [r0, #12]
 8002cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ce0:	81c2      	strh	r2, [r0, #14]
 8002ce2:	6183      	str	r3, [r0, #24]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	305c      	adds	r0, #92	@ 0x5c
 8002cea:	f000 f906 	bl	8002efa <memset>
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <std+0x58>)
 8002cf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <std+0x5c>)
 8002cf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <std+0x60>)
 8002cf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <std+0x64>)
 8002cfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <std+0x68>)
 8002d00:	6224      	str	r4, [r4, #32]
 8002d02:	429c      	cmp	r4, r3
 8002d04:	d006      	beq.n	8002d14 <std+0x48>
 8002d06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d0a:	4294      	cmp	r4, r2
 8002d0c:	d002      	beq.n	8002d14 <std+0x48>
 8002d0e:	33d0      	adds	r3, #208	@ 0xd0
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d105      	bne.n	8002d20 <std+0x54>
 8002d14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d1c:	f000 b966 	b.w	8002fec <__retarget_lock_init_recursive>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	bf00      	nop
 8002d24:	08002e75 	.word	0x08002e75
 8002d28:	08002e97 	.word	0x08002e97
 8002d2c:	08002ecf 	.word	0x08002ecf
 8002d30:	08002ef3 	.word	0x08002ef3
 8002d34:	200001ec 	.word	0x200001ec

08002d38 <stdio_exit_handler>:
 8002d38:	4a02      	ldr	r2, [pc, #8]	@ (8002d44 <stdio_exit_handler+0xc>)
 8002d3a:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <stdio_exit_handler+0x10>)
 8002d3c:	4803      	ldr	r0, [pc, #12]	@ (8002d4c <stdio_exit_handler+0x14>)
 8002d3e:	f000 b869 	b.w	8002e14 <_fwalk_sglue>
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	08003889 	.word	0x08003889
 8002d4c:	2000001c 	.word	0x2000001c

08002d50 <cleanup_stdio>:
 8002d50:	6841      	ldr	r1, [r0, #4]
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <cleanup_stdio+0x34>)
 8002d54:	4299      	cmp	r1, r3
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
 8002d5a:	d001      	beq.n	8002d60 <cleanup_stdio+0x10>
 8002d5c:	f000 fd94 	bl	8003888 <_fflush_r>
 8002d60:	68a1      	ldr	r1, [r4, #8]
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <cleanup_stdio+0x38>)
 8002d64:	4299      	cmp	r1, r3
 8002d66:	d002      	beq.n	8002d6e <cleanup_stdio+0x1e>
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f000 fd8d 	bl	8003888 <_fflush_r>
 8002d6e:	68e1      	ldr	r1, [r4, #12]
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <cleanup_stdio+0x3c>)
 8002d72:	4299      	cmp	r1, r3
 8002d74:	d004      	beq.n	8002d80 <cleanup_stdio+0x30>
 8002d76:	4620      	mov	r0, r4
 8002d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d7c:	f000 bd84 	b.w	8003888 <_fflush_r>
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	bf00      	nop
 8002d84:	200001ec 	.word	0x200001ec
 8002d88:	20000254 	.word	0x20000254
 8002d8c:	200002bc 	.word	0x200002bc

08002d90 <global_stdio_init.part.0>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <global_stdio_init.part.0+0x30>)
 8002d94:	4c0b      	ldr	r4, [pc, #44]	@ (8002dc4 <global_stdio_init.part.0+0x34>)
 8002d96:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <global_stdio_init.part.0+0x38>)
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2104      	movs	r1, #4
 8002da0:	f7ff ff94 	bl	8002ccc <std>
 8002da4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002da8:	2201      	movs	r2, #1
 8002daa:	2109      	movs	r1, #9
 8002dac:	f7ff ff8e 	bl	8002ccc <std>
 8002db0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002db4:	2202      	movs	r2, #2
 8002db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dba:	2112      	movs	r1, #18
 8002dbc:	f7ff bf86 	b.w	8002ccc <std>
 8002dc0:	20000324 	.word	0x20000324
 8002dc4:	200001ec 	.word	0x200001ec
 8002dc8:	08002d39 	.word	0x08002d39

08002dcc <__sfp_lock_acquire>:
 8002dcc:	4801      	ldr	r0, [pc, #4]	@ (8002dd4 <__sfp_lock_acquire+0x8>)
 8002dce:	f000 b90e 	b.w	8002fee <__retarget_lock_acquire_recursive>
 8002dd2:	bf00      	nop
 8002dd4:	2000032d 	.word	0x2000032d

08002dd8 <__sfp_lock_release>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	@ (8002de0 <__sfp_lock_release+0x8>)
 8002dda:	f000 b909 	b.w	8002ff0 <__retarget_lock_release_recursive>
 8002dde:	bf00      	nop
 8002de0:	2000032d 	.word	0x2000032d

08002de4 <__sinit>:
 8002de4:	b510      	push	{r4, lr}
 8002de6:	4604      	mov	r4, r0
 8002de8:	f7ff fff0 	bl	8002dcc <__sfp_lock_acquire>
 8002dec:	6a23      	ldr	r3, [r4, #32]
 8002dee:	b11b      	cbz	r3, 8002df8 <__sinit+0x14>
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	f7ff bff0 	b.w	8002dd8 <__sfp_lock_release>
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <__sinit+0x28>)
 8002dfa:	6223      	str	r3, [r4, #32]
 8002dfc:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <__sinit+0x2c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f5      	bne.n	8002df0 <__sinit+0xc>
 8002e04:	f7ff ffc4 	bl	8002d90 <global_stdio_init.part.0>
 8002e08:	e7f2      	b.n	8002df0 <__sinit+0xc>
 8002e0a:	bf00      	nop
 8002e0c:	08002d51 	.word	0x08002d51
 8002e10:	20000324 	.word	0x20000324

08002e14 <_fwalk_sglue>:
 8002e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e18:	4607      	mov	r7, r0
 8002e1a:	4688      	mov	r8, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	2600      	movs	r6, #0
 8002e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e24:	f1b9 0901 	subs.w	r9, r9, #1
 8002e28:	d505      	bpl.n	8002e36 <_fwalk_sglue+0x22>
 8002e2a:	6824      	ldr	r4, [r4, #0]
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	d1f7      	bne.n	8002e20 <_fwalk_sglue+0xc>
 8002e30:	4630      	mov	r0, r6
 8002e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e36:	89ab      	ldrh	r3, [r5, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d907      	bls.n	8002e4c <_fwalk_sglue+0x38>
 8002e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e40:	3301      	adds	r3, #1
 8002e42:	d003      	beq.n	8002e4c <_fwalk_sglue+0x38>
 8002e44:	4629      	mov	r1, r5
 8002e46:	4638      	mov	r0, r7
 8002e48:	47c0      	blx	r8
 8002e4a:	4306      	orrs	r6, r0
 8002e4c:	3568      	adds	r5, #104	@ 0x68
 8002e4e:	e7e9      	b.n	8002e24 <_fwalk_sglue+0x10>

08002e50 <iprintf>:
 8002e50:	b40f      	push	{r0, r1, r2, r3}
 8002e52:	b507      	push	{r0, r1, r2, lr}
 8002e54:	4906      	ldr	r1, [pc, #24]	@ (8002e70 <iprintf+0x20>)
 8002e56:	ab04      	add	r3, sp, #16
 8002e58:	6808      	ldr	r0, [r1, #0]
 8002e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e5e:	6881      	ldr	r1, [r0, #8]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f000 f9e9 	bl	8003238 <_vfiprintf_r>
 8002e66:	b003      	add	sp, #12
 8002e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e6c:	b004      	add	sp, #16
 8002e6e:	4770      	bx	lr
 8002e70:	20000018 	.word	0x20000018

08002e74 <__sread>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	460c      	mov	r4, r1
 8002e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7c:	f000 f868 	bl	8002f50 <_read_r>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	bfab      	itete	ge
 8002e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e86:	89a3      	ldrhlt	r3, [r4, #12]
 8002e88:	181b      	addge	r3, r3, r0
 8002e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e8e:	bfac      	ite	ge
 8002e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e92:	81a3      	strhlt	r3, [r4, #12]
 8002e94:	bd10      	pop	{r4, pc}

08002e96 <__swrite>:
 8002e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9a:	461f      	mov	r7, r3
 8002e9c:	898b      	ldrh	r3, [r1, #12]
 8002e9e:	05db      	lsls	r3, r3, #23
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	4616      	mov	r6, r2
 8002ea6:	d505      	bpl.n	8002eb4 <__swrite+0x1e>
 8002ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eac:	2302      	movs	r3, #2
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f000 f83c 	bl	8002f2c <_lseek_r>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ebe:	81a3      	strh	r3, [r4, #12]
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eca:	f000 b853 	b.w	8002f74 <_write_r>

08002ece <__sseek>:
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed6:	f000 f829 	bl	8002f2c <_lseek_r>
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	89a3      	ldrh	r3, [r4, #12]
 8002ede:	bf15      	itete	ne
 8002ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eea:	81a3      	strheq	r3, [r4, #12]
 8002eec:	bf18      	it	ne
 8002eee:	81a3      	strhne	r3, [r4, #12]
 8002ef0:	bd10      	pop	{r4, pc}

08002ef2 <__sclose>:
 8002ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef6:	f000 b809 	b.w	8002f0c <_close_r>

08002efa <memset>:
 8002efa:	4402      	add	r2, r0
 8002efc:	4603      	mov	r3, r0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d100      	bne.n	8002f04 <memset+0xa>
 8002f02:	4770      	bx	lr
 8002f04:	f803 1b01 	strb.w	r1, [r3], #1
 8002f08:	e7f9      	b.n	8002efe <memset+0x4>
	...

08002f0c <_close_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4d06      	ldr	r5, [pc, #24]	@ (8002f28 <_close_r+0x1c>)
 8002f10:	2300      	movs	r3, #0
 8002f12:	4604      	mov	r4, r0
 8002f14:	4608      	mov	r0, r1
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	f7fd fcea 	bl	80008f0 <_close>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d102      	bne.n	8002f26 <_close_r+0x1a>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	b103      	cbz	r3, 8002f26 <_close_r+0x1a>
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
 8002f28:	20000328 	.word	0x20000328

08002f2c <_lseek_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	4d07      	ldr	r5, [pc, #28]	@ (8002f4c <_lseek_r+0x20>)
 8002f30:	4604      	mov	r4, r0
 8002f32:	4608      	mov	r0, r1
 8002f34:	4611      	mov	r1, r2
 8002f36:	2200      	movs	r2, #0
 8002f38:	602a      	str	r2, [r5, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f7fd fcff 	bl	800093e <_lseek>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_lseek_r+0x1e>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_lseek_r+0x1e>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000328 	.word	0x20000328

08002f50 <_read_r>:
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	4d07      	ldr	r5, [pc, #28]	@ (8002f70 <_read_r+0x20>)
 8002f54:	4604      	mov	r4, r0
 8002f56:	4608      	mov	r0, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	602a      	str	r2, [r5, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f7fd fc8d 	bl	800087e <_read>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_read_r+0x1e>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_read_r+0x1e>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000328 	.word	0x20000328

08002f74 <_write_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4d07      	ldr	r5, [pc, #28]	@ (8002f94 <_write_r+0x20>)
 8002f78:	4604      	mov	r4, r0
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	2200      	movs	r2, #0
 8002f80:	602a      	str	r2, [r5, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7fd fc98 	bl	80008b8 <_write>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_write_r+0x1e>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_write_r+0x1e>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20000328 	.word	0x20000328

08002f98 <__errno>:
 8002f98:	4b01      	ldr	r3, [pc, #4]	@ (8002fa0 <__errno+0x8>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000018 	.word	0x20000018

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8002fdc <__libc_init_array+0x38>)
 8002fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe0 <__libc_init_array+0x3c>)
 8002faa:	1b64      	subs	r4, r4, r5
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	2600      	movs	r6, #0
 8002fb0:	42a6      	cmp	r6, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe4 <__libc_init_array+0x40>)
 8002fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002fe8 <__libc_init_array+0x44>)
 8002fb8:	f000 fdb6 	bl	8003b28 <_init>
 8002fbc:	1b64      	subs	r4, r4, r5
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	42a6      	cmp	r6, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fcc:	4798      	blx	r3
 8002fce:	3601      	adds	r6, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd6:	4798      	blx	r3
 8002fd8:	3601      	adds	r6, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	08003bd8 	.word	0x08003bd8
 8002fe0:	08003bd8 	.word	0x08003bd8
 8002fe4:	08003bd8 	.word	0x08003bd8
 8002fe8:	08003bdc 	.word	0x08003bdc

08002fec <__retarget_lock_init_recursive>:
 8002fec:	4770      	bx	lr

08002fee <__retarget_lock_acquire_recursive>:
 8002fee:	4770      	bx	lr

08002ff0 <__retarget_lock_release_recursive>:
 8002ff0:	4770      	bx	lr
	...

08002ff4 <_free_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d041      	beq.n	8003080 <_free_r+0x8c>
 8002ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003000:	1f0c      	subs	r4, r1, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	bfb8      	it	lt
 8003006:	18e4      	addlt	r4, r4, r3
 8003008:	f000 f8e0 	bl	80031cc <__malloc_lock>
 800300c:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <_free_r+0x90>)
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	b933      	cbnz	r3, 8003020 <_free_r+0x2c>
 8003012:	6063      	str	r3, [r4, #4]
 8003014:	6014      	str	r4, [r2, #0]
 8003016:	4628      	mov	r0, r5
 8003018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800301c:	f000 b8dc 	b.w	80031d8 <__malloc_unlock>
 8003020:	42a3      	cmp	r3, r4
 8003022:	d908      	bls.n	8003036 <_free_r+0x42>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	1821      	adds	r1, r4, r0
 8003028:	428b      	cmp	r3, r1
 800302a:	bf01      	itttt	eq
 800302c:	6819      	ldreq	r1, [r3, #0]
 800302e:	685b      	ldreq	r3, [r3, #4]
 8003030:	1809      	addeq	r1, r1, r0
 8003032:	6021      	streq	r1, [r4, #0]
 8003034:	e7ed      	b.n	8003012 <_free_r+0x1e>
 8003036:	461a      	mov	r2, r3
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b10b      	cbz	r3, 8003040 <_free_r+0x4c>
 800303c:	42a3      	cmp	r3, r4
 800303e:	d9fa      	bls.n	8003036 <_free_r+0x42>
 8003040:	6811      	ldr	r1, [r2, #0]
 8003042:	1850      	adds	r0, r2, r1
 8003044:	42a0      	cmp	r0, r4
 8003046:	d10b      	bne.n	8003060 <_free_r+0x6c>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	4401      	add	r1, r0
 800304c:	1850      	adds	r0, r2, r1
 800304e:	4283      	cmp	r3, r0
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	d1e0      	bne.n	8003016 <_free_r+0x22>
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	6053      	str	r3, [r2, #4]
 800305a:	4408      	add	r0, r1
 800305c:	6010      	str	r0, [r2, #0]
 800305e:	e7da      	b.n	8003016 <_free_r+0x22>
 8003060:	d902      	bls.n	8003068 <_free_r+0x74>
 8003062:	230c      	movs	r3, #12
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	e7d6      	b.n	8003016 <_free_r+0x22>
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	1821      	adds	r1, r4, r0
 800306c:	428b      	cmp	r3, r1
 800306e:	bf04      	itt	eq
 8003070:	6819      	ldreq	r1, [r3, #0]
 8003072:	685b      	ldreq	r3, [r3, #4]
 8003074:	6063      	str	r3, [r4, #4]
 8003076:	bf04      	itt	eq
 8003078:	1809      	addeq	r1, r1, r0
 800307a:	6021      	streq	r1, [r4, #0]
 800307c:	6054      	str	r4, [r2, #4]
 800307e:	e7ca      	b.n	8003016 <_free_r+0x22>
 8003080:	bd38      	pop	{r3, r4, r5, pc}
 8003082:	bf00      	nop
 8003084:	20000334 	.word	0x20000334

08003088 <sbrk_aligned>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4e0f      	ldr	r6, [pc, #60]	@ (80030c8 <sbrk_aligned+0x40>)
 800308c:	460c      	mov	r4, r1
 800308e:	6831      	ldr	r1, [r6, #0]
 8003090:	4605      	mov	r5, r0
 8003092:	b911      	cbnz	r1, 800309a <sbrk_aligned+0x12>
 8003094:	f000 fcb4 	bl	8003a00 <_sbrk_r>
 8003098:	6030      	str	r0, [r6, #0]
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	f000 fcaf 	bl	8003a00 <_sbrk_r>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d103      	bne.n	80030ae <sbrk_aligned+0x26>
 80030a6:	f04f 34ff 	mov.w	r4, #4294967295
 80030aa:	4620      	mov	r0, r4
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
 80030ae:	1cc4      	adds	r4, r0, #3
 80030b0:	f024 0403 	bic.w	r4, r4, #3
 80030b4:	42a0      	cmp	r0, r4
 80030b6:	d0f8      	beq.n	80030aa <sbrk_aligned+0x22>
 80030b8:	1a21      	subs	r1, r4, r0
 80030ba:	4628      	mov	r0, r5
 80030bc:	f000 fca0 	bl	8003a00 <_sbrk_r>
 80030c0:	3001      	adds	r0, #1
 80030c2:	d1f2      	bne.n	80030aa <sbrk_aligned+0x22>
 80030c4:	e7ef      	b.n	80030a6 <sbrk_aligned+0x1e>
 80030c6:	bf00      	nop
 80030c8:	20000330 	.word	0x20000330

080030cc <_malloc_r>:
 80030cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d0:	1ccd      	adds	r5, r1, #3
 80030d2:	f025 0503 	bic.w	r5, r5, #3
 80030d6:	3508      	adds	r5, #8
 80030d8:	2d0c      	cmp	r5, #12
 80030da:	bf38      	it	cc
 80030dc:	250c      	movcc	r5, #12
 80030de:	2d00      	cmp	r5, #0
 80030e0:	4606      	mov	r6, r0
 80030e2:	db01      	blt.n	80030e8 <_malloc_r+0x1c>
 80030e4:	42a9      	cmp	r1, r5
 80030e6:	d904      	bls.n	80030f2 <_malloc_r+0x26>
 80030e8:	230c      	movs	r3, #12
 80030ea:	6033      	str	r3, [r6, #0]
 80030ec:	2000      	movs	r0, #0
 80030ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031c8 <_malloc_r+0xfc>
 80030f6:	f000 f869 	bl	80031cc <__malloc_lock>
 80030fa:	f8d8 3000 	ldr.w	r3, [r8]
 80030fe:	461c      	mov	r4, r3
 8003100:	bb44      	cbnz	r4, 8003154 <_malloc_r+0x88>
 8003102:	4629      	mov	r1, r5
 8003104:	4630      	mov	r0, r6
 8003106:	f7ff ffbf 	bl	8003088 <sbrk_aligned>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	4604      	mov	r4, r0
 800310e:	d158      	bne.n	80031c2 <_malloc_r+0xf6>
 8003110:	f8d8 4000 	ldr.w	r4, [r8]
 8003114:	4627      	mov	r7, r4
 8003116:	2f00      	cmp	r7, #0
 8003118:	d143      	bne.n	80031a2 <_malloc_r+0xd6>
 800311a:	2c00      	cmp	r4, #0
 800311c:	d04b      	beq.n	80031b6 <_malloc_r+0xea>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	eb04 0903 	add.w	r9, r4, r3
 8003128:	f000 fc6a 	bl	8003a00 <_sbrk_r>
 800312c:	4581      	cmp	r9, r0
 800312e:	d142      	bne.n	80031b6 <_malloc_r+0xea>
 8003130:	6821      	ldr	r1, [r4, #0]
 8003132:	1a6d      	subs	r5, r5, r1
 8003134:	4629      	mov	r1, r5
 8003136:	4630      	mov	r0, r6
 8003138:	f7ff ffa6 	bl	8003088 <sbrk_aligned>
 800313c:	3001      	adds	r0, #1
 800313e:	d03a      	beq.n	80031b6 <_malloc_r+0xea>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	442b      	add	r3, r5
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	f8d8 3000 	ldr.w	r3, [r8]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	bb62      	cbnz	r2, 80031a8 <_malloc_r+0xdc>
 800314e:	f8c8 7000 	str.w	r7, [r8]
 8003152:	e00f      	b.n	8003174 <_malloc_r+0xa8>
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	1b52      	subs	r2, r2, r5
 8003158:	d420      	bmi.n	800319c <_malloc_r+0xd0>
 800315a:	2a0b      	cmp	r2, #11
 800315c:	d917      	bls.n	800318e <_malloc_r+0xc2>
 800315e:	1961      	adds	r1, r4, r5
 8003160:	42a3      	cmp	r3, r4
 8003162:	6025      	str	r5, [r4, #0]
 8003164:	bf18      	it	ne
 8003166:	6059      	strne	r1, [r3, #4]
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	bf08      	it	eq
 800316c:	f8c8 1000 	streq.w	r1, [r8]
 8003170:	5162      	str	r2, [r4, r5]
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	4630      	mov	r0, r6
 8003176:	f000 f82f 	bl	80031d8 <__malloc_unlock>
 800317a:	f104 000b 	add.w	r0, r4, #11
 800317e:	1d23      	adds	r3, r4, #4
 8003180:	f020 0007 	bic.w	r0, r0, #7
 8003184:	1ac2      	subs	r2, r0, r3
 8003186:	bf1c      	itt	ne
 8003188:	1a1b      	subne	r3, r3, r0
 800318a:	50a3      	strne	r3, [r4, r2]
 800318c:	e7af      	b.n	80030ee <_malloc_r+0x22>
 800318e:	6862      	ldr	r2, [r4, #4]
 8003190:	42a3      	cmp	r3, r4
 8003192:	bf0c      	ite	eq
 8003194:	f8c8 2000 	streq.w	r2, [r8]
 8003198:	605a      	strne	r2, [r3, #4]
 800319a:	e7eb      	b.n	8003174 <_malloc_r+0xa8>
 800319c:	4623      	mov	r3, r4
 800319e:	6864      	ldr	r4, [r4, #4]
 80031a0:	e7ae      	b.n	8003100 <_malloc_r+0x34>
 80031a2:	463c      	mov	r4, r7
 80031a4:	687f      	ldr	r7, [r7, #4]
 80031a6:	e7b6      	b.n	8003116 <_malloc_r+0x4a>
 80031a8:	461a      	mov	r2, r3
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	d1fb      	bne.n	80031a8 <_malloc_r+0xdc>
 80031b0:	2300      	movs	r3, #0
 80031b2:	6053      	str	r3, [r2, #4]
 80031b4:	e7de      	b.n	8003174 <_malloc_r+0xa8>
 80031b6:	230c      	movs	r3, #12
 80031b8:	6033      	str	r3, [r6, #0]
 80031ba:	4630      	mov	r0, r6
 80031bc:	f000 f80c 	bl	80031d8 <__malloc_unlock>
 80031c0:	e794      	b.n	80030ec <_malloc_r+0x20>
 80031c2:	6005      	str	r5, [r0, #0]
 80031c4:	e7d6      	b.n	8003174 <_malloc_r+0xa8>
 80031c6:	bf00      	nop
 80031c8:	20000334 	.word	0x20000334

080031cc <__malloc_lock>:
 80031cc:	4801      	ldr	r0, [pc, #4]	@ (80031d4 <__malloc_lock+0x8>)
 80031ce:	f7ff bf0e 	b.w	8002fee <__retarget_lock_acquire_recursive>
 80031d2:	bf00      	nop
 80031d4:	2000032c 	.word	0x2000032c

080031d8 <__malloc_unlock>:
 80031d8:	4801      	ldr	r0, [pc, #4]	@ (80031e0 <__malloc_unlock+0x8>)
 80031da:	f7ff bf09 	b.w	8002ff0 <__retarget_lock_release_recursive>
 80031de:	bf00      	nop
 80031e0:	2000032c 	.word	0x2000032c

080031e4 <__sfputc_r>:
 80031e4:	6893      	ldr	r3, [r2, #8]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	b410      	push	{r4}
 80031ec:	6093      	str	r3, [r2, #8]
 80031ee:	da08      	bge.n	8003202 <__sfputc_r+0x1e>
 80031f0:	6994      	ldr	r4, [r2, #24]
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	db01      	blt.n	80031fa <__sfputc_r+0x16>
 80031f6:	290a      	cmp	r1, #10
 80031f8:	d103      	bne.n	8003202 <__sfputc_r+0x1e>
 80031fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031fe:	f000 bb6b 	b.w	80038d8 <__swbuf_r>
 8003202:	6813      	ldr	r3, [r2, #0]
 8003204:	1c58      	adds	r0, r3, #1
 8003206:	6010      	str	r0, [r2, #0]
 8003208:	7019      	strb	r1, [r3, #0]
 800320a:	4608      	mov	r0, r1
 800320c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003210:	4770      	bx	lr

08003212 <__sfputs_r>:
 8003212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003214:	4606      	mov	r6, r0
 8003216:	460f      	mov	r7, r1
 8003218:	4614      	mov	r4, r2
 800321a:	18d5      	adds	r5, r2, r3
 800321c:	42ac      	cmp	r4, r5
 800321e:	d101      	bne.n	8003224 <__sfputs_r+0x12>
 8003220:	2000      	movs	r0, #0
 8003222:	e007      	b.n	8003234 <__sfputs_r+0x22>
 8003224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003228:	463a      	mov	r2, r7
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff ffda 	bl	80031e4 <__sfputc_r>
 8003230:	1c43      	adds	r3, r0, #1
 8003232:	d1f3      	bne.n	800321c <__sfputs_r+0xa>
 8003234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003238 <_vfiprintf_r>:
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	460d      	mov	r5, r1
 800323e:	b09d      	sub	sp, #116	@ 0x74
 8003240:	4614      	mov	r4, r2
 8003242:	4698      	mov	r8, r3
 8003244:	4606      	mov	r6, r0
 8003246:	b118      	cbz	r0, 8003250 <_vfiprintf_r+0x18>
 8003248:	6a03      	ldr	r3, [r0, #32]
 800324a:	b90b      	cbnz	r3, 8003250 <_vfiprintf_r+0x18>
 800324c:	f7ff fdca 	bl	8002de4 <__sinit>
 8003250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003252:	07d9      	lsls	r1, r3, #31
 8003254:	d405      	bmi.n	8003262 <_vfiprintf_r+0x2a>
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	059a      	lsls	r2, r3, #22
 800325a:	d402      	bmi.n	8003262 <_vfiprintf_r+0x2a>
 800325c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800325e:	f7ff fec6 	bl	8002fee <__retarget_lock_acquire_recursive>
 8003262:	89ab      	ldrh	r3, [r5, #12]
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	d501      	bpl.n	800326c <_vfiprintf_r+0x34>
 8003268:	692b      	ldr	r3, [r5, #16]
 800326a:	b99b      	cbnz	r3, 8003294 <_vfiprintf_r+0x5c>
 800326c:	4629      	mov	r1, r5
 800326e:	4630      	mov	r0, r6
 8003270:	f000 fb70 	bl	8003954 <__swsetup_r>
 8003274:	b170      	cbz	r0, 8003294 <_vfiprintf_r+0x5c>
 8003276:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003278:	07dc      	lsls	r4, r3, #31
 800327a:	d504      	bpl.n	8003286 <_vfiprintf_r+0x4e>
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	b01d      	add	sp, #116	@ 0x74
 8003282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	0598      	lsls	r0, r3, #22
 800328a:	d4f7      	bmi.n	800327c <_vfiprintf_r+0x44>
 800328c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800328e:	f7ff feaf 	bl	8002ff0 <__retarget_lock_release_recursive>
 8003292:	e7f3      	b.n	800327c <_vfiprintf_r+0x44>
 8003294:	2300      	movs	r3, #0
 8003296:	9309      	str	r3, [sp, #36]	@ 0x24
 8003298:	2320      	movs	r3, #32
 800329a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800329e:	f8cd 800c 	str.w	r8, [sp, #12]
 80032a2:	2330      	movs	r3, #48	@ 0x30
 80032a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003454 <_vfiprintf_r+0x21c>
 80032a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032ac:	f04f 0901 	mov.w	r9, #1
 80032b0:	4623      	mov	r3, r4
 80032b2:	469a      	mov	sl, r3
 80032b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032b8:	b10a      	cbz	r2, 80032be <_vfiprintf_r+0x86>
 80032ba:	2a25      	cmp	r2, #37	@ 0x25
 80032bc:	d1f9      	bne.n	80032b2 <_vfiprintf_r+0x7a>
 80032be:	ebba 0b04 	subs.w	fp, sl, r4
 80032c2:	d00b      	beq.n	80032dc <_vfiprintf_r+0xa4>
 80032c4:	465b      	mov	r3, fp
 80032c6:	4622      	mov	r2, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	4630      	mov	r0, r6
 80032cc:	f7ff ffa1 	bl	8003212 <__sfputs_r>
 80032d0:	3001      	adds	r0, #1
 80032d2:	f000 80a7 	beq.w	8003424 <_vfiprintf_r+0x1ec>
 80032d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032d8:	445a      	add	r2, fp
 80032da:	9209      	str	r2, [sp, #36]	@ 0x24
 80032dc:	f89a 3000 	ldrb.w	r3, [sl]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 809f 	beq.w	8003424 <_vfiprintf_r+0x1ec>
 80032e6:	2300      	movs	r3, #0
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032f0:	f10a 0a01 	add.w	sl, sl, #1
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9307      	str	r3, [sp, #28]
 80032f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80032fe:	4654      	mov	r4, sl
 8003300:	2205      	movs	r2, #5
 8003302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003306:	4853      	ldr	r0, [pc, #332]	@ (8003454 <_vfiprintf_r+0x21c>)
 8003308:	f7fc ff62 	bl	80001d0 <memchr>
 800330c:	9a04      	ldr	r2, [sp, #16]
 800330e:	b9d8      	cbnz	r0, 8003348 <_vfiprintf_r+0x110>
 8003310:	06d1      	lsls	r1, r2, #27
 8003312:	bf44      	itt	mi
 8003314:	2320      	movmi	r3, #32
 8003316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800331a:	0713      	lsls	r3, r2, #28
 800331c:	bf44      	itt	mi
 800331e:	232b      	movmi	r3, #43	@ 0x2b
 8003320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003324:	f89a 3000 	ldrb.w	r3, [sl]
 8003328:	2b2a      	cmp	r3, #42	@ 0x2a
 800332a:	d015      	beq.n	8003358 <_vfiprintf_r+0x120>
 800332c:	9a07      	ldr	r2, [sp, #28]
 800332e:	4654      	mov	r4, sl
 8003330:	2000      	movs	r0, #0
 8003332:	f04f 0c0a 	mov.w	ip, #10
 8003336:	4621      	mov	r1, r4
 8003338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800333c:	3b30      	subs	r3, #48	@ 0x30
 800333e:	2b09      	cmp	r3, #9
 8003340:	d94b      	bls.n	80033da <_vfiprintf_r+0x1a2>
 8003342:	b1b0      	cbz	r0, 8003372 <_vfiprintf_r+0x13a>
 8003344:	9207      	str	r2, [sp, #28]
 8003346:	e014      	b.n	8003372 <_vfiprintf_r+0x13a>
 8003348:	eba0 0308 	sub.w	r3, r0, r8
 800334c:	fa09 f303 	lsl.w	r3, r9, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	9304      	str	r3, [sp, #16]
 8003354:	46a2      	mov	sl, r4
 8003356:	e7d2      	b.n	80032fe <_vfiprintf_r+0xc6>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	1d19      	adds	r1, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	9103      	str	r1, [sp, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	bfbb      	ittet	lt
 8003364:	425b      	neglt	r3, r3
 8003366:	f042 0202 	orrlt.w	r2, r2, #2
 800336a:	9307      	strge	r3, [sp, #28]
 800336c:	9307      	strlt	r3, [sp, #28]
 800336e:	bfb8      	it	lt
 8003370:	9204      	strlt	r2, [sp, #16]
 8003372:	7823      	ldrb	r3, [r4, #0]
 8003374:	2b2e      	cmp	r3, #46	@ 0x2e
 8003376:	d10a      	bne.n	800338e <_vfiprintf_r+0x156>
 8003378:	7863      	ldrb	r3, [r4, #1]
 800337a:	2b2a      	cmp	r3, #42	@ 0x2a
 800337c:	d132      	bne.n	80033e4 <_vfiprintf_r+0x1ac>
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	1d1a      	adds	r2, r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	9203      	str	r2, [sp, #12]
 8003386:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800338a:	3402      	adds	r4, #2
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003464 <_vfiprintf_r+0x22c>
 8003392:	7821      	ldrb	r1, [r4, #0]
 8003394:	2203      	movs	r2, #3
 8003396:	4650      	mov	r0, sl
 8003398:	f7fc ff1a 	bl	80001d0 <memchr>
 800339c:	b138      	cbz	r0, 80033ae <_vfiprintf_r+0x176>
 800339e:	9b04      	ldr	r3, [sp, #16]
 80033a0:	eba0 000a 	sub.w	r0, r0, sl
 80033a4:	2240      	movs	r2, #64	@ 0x40
 80033a6:	4082      	lsls	r2, r0
 80033a8:	4313      	orrs	r3, r2
 80033aa:	3401      	adds	r4, #1
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b2:	4829      	ldr	r0, [pc, #164]	@ (8003458 <_vfiprintf_r+0x220>)
 80033b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033b8:	2206      	movs	r2, #6
 80033ba:	f7fc ff09 	bl	80001d0 <memchr>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d03f      	beq.n	8003442 <_vfiprintf_r+0x20a>
 80033c2:	4b26      	ldr	r3, [pc, #152]	@ (800345c <_vfiprintf_r+0x224>)
 80033c4:	bb1b      	cbnz	r3, 800340e <_vfiprintf_r+0x1d6>
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	3307      	adds	r3, #7
 80033ca:	f023 0307 	bic.w	r3, r3, #7
 80033ce:	3308      	adds	r3, #8
 80033d0:	9303      	str	r3, [sp, #12]
 80033d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033d4:	443b      	add	r3, r7
 80033d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033d8:	e76a      	b.n	80032b0 <_vfiprintf_r+0x78>
 80033da:	fb0c 3202 	mla	r2, ip, r2, r3
 80033de:	460c      	mov	r4, r1
 80033e0:	2001      	movs	r0, #1
 80033e2:	e7a8      	b.n	8003336 <_vfiprintf_r+0xfe>
 80033e4:	2300      	movs	r3, #0
 80033e6:	3401      	adds	r4, #1
 80033e8:	9305      	str	r3, [sp, #20]
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0c0a 	mov.w	ip, #10
 80033f0:	4620      	mov	r0, r4
 80033f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f6:	3a30      	subs	r2, #48	@ 0x30
 80033f8:	2a09      	cmp	r2, #9
 80033fa:	d903      	bls.n	8003404 <_vfiprintf_r+0x1cc>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0c6      	beq.n	800338e <_vfiprintf_r+0x156>
 8003400:	9105      	str	r1, [sp, #20]
 8003402:	e7c4      	b.n	800338e <_vfiprintf_r+0x156>
 8003404:	fb0c 2101 	mla	r1, ip, r1, r2
 8003408:	4604      	mov	r4, r0
 800340a:	2301      	movs	r3, #1
 800340c:	e7f0      	b.n	80033f0 <_vfiprintf_r+0x1b8>
 800340e:	ab03      	add	r3, sp, #12
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	462a      	mov	r2, r5
 8003414:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <_vfiprintf_r+0x228>)
 8003416:	a904      	add	r1, sp, #16
 8003418:	4630      	mov	r0, r6
 800341a:	f3af 8000 	nop.w
 800341e:	4607      	mov	r7, r0
 8003420:	1c78      	adds	r0, r7, #1
 8003422:	d1d6      	bne.n	80033d2 <_vfiprintf_r+0x19a>
 8003424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003426:	07d9      	lsls	r1, r3, #31
 8003428:	d405      	bmi.n	8003436 <_vfiprintf_r+0x1fe>
 800342a:	89ab      	ldrh	r3, [r5, #12]
 800342c:	059a      	lsls	r2, r3, #22
 800342e:	d402      	bmi.n	8003436 <_vfiprintf_r+0x1fe>
 8003430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003432:	f7ff fddd 	bl	8002ff0 <__retarget_lock_release_recursive>
 8003436:	89ab      	ldrh	r3, [r5, #12]
 8003438:	065b      	lsls	r3, r3, #25
 800343a:	f53f af1f 	bmi.w	800327c <_vfiprintf_r+0x44>
 800343e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003440:	e71e      	b.n	8003280 <_vfiprintf_r+0x48>
 8003442:	ab03      	add	r3, sp, #12
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	462a      	mov	r2, r5
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <_vfiprintf_r+0x228>)
 800344a:	a904      	add	r1, sp, #16
 800344c:	4630      	mov	r0, r6
 800344e:	f000 f879 	bl	8003544 <_printf_i>
 8003452:	e7e4      	b.n	800341e <_vfiprintf_r+0x1e6>
 8003454:	08003b9c 	.word	0x08003b9c
 8003458:	08003ba6 	.word	0x08003ba6
 800345c:	00000000 	.word	0x00000000
 8003460:	08003213 	.word	0x08003213
 8003464:	08003ba2 	.word	0x08003ba2

08003468 <_printf_common>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	4616      	mov	r6, r2
 800346e:	4698      	mov	r8, r3
 8003470:	688a      	ldr	r2, [r1, #8]
 8003472:	690b      	ldr	r3, [r1, #16]
 8003474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003478:	4293      	cmp	r3, r2
 800347a:	bfb8      	it	lt
 800347c:	4613      	movlt	r3, r2
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003484:	4607      	mov	r7, r0
 8003486:	460c      	mov	r4, r1
 8003488:	b10a      	cbz	r2, 800348e <_printf_common+0x26>
 800348a:	3301      	adds	r3, #1
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	0699      	lsls	r1, r3, #26
 8003492:	bf42      	ittt	mi
 8003494:	6833      	ldrmi	r3, [r6, #0]
 8003496:	3302      	addmi	r3, #2
 8003498:	6033      	strmi	r3, [r6, #0]
 800349a:	6825      	ldr	r5, [r4, #0]
 800349c:	f015 0506 	ands.w	r5, r5, #6
 80034a0:	d106      	bne.n	80034b0 <_printf_common+0x48>
 80034a2:	f104 0a19 	add.w	sl, r4, #25
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	6832      	ldr	r2, [r6, #0]
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	42ab      	cmp	r3, r5
 80034ae:	dc26      	bgt.n	80034fe <_printf_common+0x96>
 80034b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	3b00      	subs	r3, #0
 80034b8:	bf18      	it	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	0692      	lsls	r2, r2, #26
 80034be:	d42b      	bmi.n	8003518 <_printf_common+0xb0>
 80034c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034c4:	4641      	mov	r1, r8
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c8      	blx	r9
 80034ca:	3001      	adds	r0, #1
 80034cc:	d01e      	beq.n	800350c <_printf_common+0xa4>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	6922      	ldr	r2, [r4, #16]
 80034d2:	f003 0306 	and.w	r3, r3, #6
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	bf02      	ittt	eq
 80034da:	68e5      	ldreq	r5, [r4, #12]
 80034dc:	6833      	ldreq	r3, [r6, #0]
 80034de:	1aed      	subeq	r5, r5, r3
 80034e0:	68a3      	ldr	r3, [r4, #8]
 80034e2:	bf0c      	ite	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	2500      	movne	r5, #0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfc4      	itt	gt
 80034ee:	1a9b      	subgt	r3, r3, r2
 80034f0:	18ed      	addgt	r5, r5, r3
 80034f2:	2600      	movs	r6, #0
 80034f4:	341a      	adds	r4, #26
 80034f6:	42b5      	cmp	r5, r6
 80034f8:	d11a      	bne.n	8003530 <_printf_common+0xc8>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e008      	b.n	8003510 <_printf_common+0xa8>
 80034fe:	2301      	movs	r3, #1
 8003500:	4652      	mov	r2, sl
 8003502:	4641      	mov	r1, r8
 8003504:	4638      	mov	r0, r7
 8003506:	47c8      	blx	r9
 8003508:	3001      	adds	r0, #1
 800350a:	d103      	bne.n	8003514 <_printf_common+0xac>
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	3501      	adds	r5, #1
 8003516:	e7c6      	b.n	80034a6 <_printf_common+0x3e>
 8003518:	18e1      	adds	r1, r4, r3
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	2030      	movs	r0, #48	@ 0x30
 800351e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003522:	4422      	add	r2, r4
 8003524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800352c:	3302      	adds	r3, #2
 800352e:	e7c7      	b.n	80034c0 <_printf_common+0x58>
 8003530:	2301      	movs	r3, #1
 8003532:	4622      	mov	r2, r4
 8003534:	4641      	mov	r1, r8
 8003536:	4638      	mov	r0, r7
 8003538:	47c8      	blx	r9
 800353a:	3001      	adds	r0, #1
 800353c:	d0e6      	beq.n	800350c <_printf_common+0xa4>
 800353e:	3601      	adds	r6, #1
 8003540:	e7d9      	b.n	80034f6 <_printf_common+0x8e>
	...

08003544 <_printf_i>:
 8003544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	7e0f      	ldrb	r7, [r1, #24]
 800354a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800354c:	2f78      	cmp	r7, #120	@ 0x78
 800354e:	4691      	mov	r9, r2
 8003550:	4680      	mov	r8, r0
 8003552:	460c      	mov	r4, r1
 8003554:	469a      	mov	sl, r3
 8003556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800355a:	d807      	bhi.n	800356c <_printf_i+0x28>
 800355c:	2f62      	cmp	r7, #98	@ 0x62
 800355e:	d80a      	bhi.n	8003576 <_printf_i+0x32>
 8003560:	2f00      	cmp	r7, #0
 8003562:	f000 80d1 	beq.w	8003708 <_printf_i+0x1c4>
 8003566:	2f58      	cmp	r7, #88	@ 0x58
 8003568:	f000 80b8 	beq.w	80036dc <_printf_i+0x198>
 800356c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003574:	e03a      	b.n	80035ec <_printf_i+0xa8>
 8003576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800357a:	2b15      	cmp	r3, #21
 800357c:	d8f6      	bhi.n	800356c <_printf_i+0x28>
 800357e:	a101      	add	r1, pc, #4	@ (adr r1, 8003584 <_printf_i+0x40>)
 8003580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035f1 	.word	0x080035f1
 800358c:	0800356d 	.word	0x0800356d
 8003590:	0800356d 	.word	0x0800356d
 8003594:	0800356d 	.word	0x0800356d
 8003598:	0800356d 	.word	0x0800356d
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	0800356d 	.word	0x0800356d
 80035a4:	0800356d 	.word	0x0800356d
 80035a8:	0800356d 	.word	0x0800356d
 80035ac:	0800356d 	.word	0x0800356d
 80035b0:	080036ef 	.word	0x080036ef
 80035b4:	0800361b 	.word	0x0800361b
 80035b8:	080036a9 	.word	0x080036a9
 80035bc:	0800356d 	.word	0x0800356d
 80035c0:	0800356d 	.word	0x0800356d
 80035c4:	08003711 	.word	0x08003711
 80035c8:	0800356d 	.word	0x0800356d
 80035cc:	0800361b 	.word	0x0800361b
 80035d0:	0800356d 	.word	0x0800356d
 80035d4:	0800356d 	.word	0x0800356d
 80035d8:	080036b1 	.word	0x080036b1
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6032      	str	r2, [r6, #0]
 80035e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035ec:	2301      	movs	r3, #1
 80035ee:	e09c      	b.n	800372a <_printf_i+0x1e6>
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	6031      	str	r1, [r6, #0]
 80035f8:	0606      	lsls	r6, r0, #24
 80035fa:	d501      	bpl.n	8003600 <_printf_i+0xbc>
 80035fc:	681d      	ldr	r5, [r3, #0]
 80035fe:	e003      	b.n	8003608 <_printf_i+0xc4>
 8003600:	0645      	lsls	r5, r0, #25
 8003602:	d5fb      	bpl.n	80035fc <_printf_i+0xb8>
 8003604:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003608:	2d00      	cmp	r5, #0
 800360a:	da03      	bge.n	8003614 <_printf_i+0xd0>
 800360c:	232d      	movs	r3, #45	@ 0x2d
 800360e:	426d      	negs	r5, r5
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003614:	4858      	ldr	r0, [pc, #352]	@ (8003778 <_printf_i+0x234>)
 8003616:	230a      	movs	r3, #10
 8003618:	e011      	b.n	800363e <_printf_i+0xfa>
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	0608      	lsls	r0, r1, #24
 8003620:	f853 5b04 	ldr.w	r5, [r3], #4
 8003624:	d402      	bmi.n	800362c <_printf_i+0xe8>
 8003626:	0649      	lsls	r1, r1, #25
 8003628:	bf48      	it	mi
 800362a:	b2ad      	uxthmi	r5, r5
 800362c:	2f6f      	cmp	r7, #111	@ 0x6f
 800362e:	4852      	ldr	r0, [pc, #328]	@ (8003778 <_printf_i+0x234>)
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	bf14      	ite	ne
 8003634:	230a      	movne	r3, #10
 8003636:	2308      	moveq	r3, #8
 8003638:	2100      	movs	r1, #0
 800363a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800363e:	6866      	ldr	r6, [r4, #4]
 8003640:	60a6      	str	r6, [r4, #8]
 8003642:	2e00      	cmp	r6, #0
 8003644:	db05      	blt.n	8003652 <_printf_i+0x10e>
 8003646:	6821      	ldr	r1, [r4, #0]
 8003648:	432e      	orrs	r6, r5
 800364a:	f021 0104 	bic.w	r1, r1, #4
 800364e:	6021      	str	r1, [r4, #0]
 8003650:	d04b      	beq.n	80036ea <_printf_i+0x1a6>
 8003652:	4616      	mov	r6, r2
 8003654:	fbb5 f1f3 	udiv	r1, r5, r3
 8003658:	fb03 5711 	mls	r7, r3, r1, r5
 800365c:	5dc7      	ldrb	r7, [r0, r7]
 800365e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003662:	462f      	mov	r7, r5
 8003664:	42bb      	cmp	r3, r7
 8003666:	460d      	mov	r5, r1
 8003668:	d9f4      	bls.n	8003654 <_printf_i+0x110>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d10b      	bne.n	8003686 <_printf_i+0x142>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07df      	lsls	r7, r3, #31
 8003672:	d508      	bpl.n	8003686 <_printf_i+0x142>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6861      	ldr	r1, [r4, #4]
 8003678:	4299      	cmp	r1, r3
 800367a:	bfde      	ittt	le
 800367c:	2330      	movle	r3, #48	@ 0x30
 800367e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003682:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003686:	1b92      	subs	r2, r2, r6
 8003688:	6122      	str	r2, [r4, #16]
 800368a:	f8cd a000 	str.w	sl, [sp]
 800368e:	464b      	mov	r3, r9
 8003690:	aa03      	add	r2, sp, #12
 8003692:	4621      	mov	r1, r4
 8003694:	4640      	mov	r0, r8
 8003696:	f7ff fee7 	bl	8003468 <_printf_common>
 800369a:	3001      	adds	r0, #1
 800369c:	d14a      	bne.n	8003734 <_printf_i+0x1f0>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b004      	add	sp, #16
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f043 0320 	orr.w	r3, r3, #32
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	4832      	ldr	r0, [pc, #200]	@ (800377c <_printf_i+0x238>)
 80036b2:	2778      	movs	r7, #120	@ 0x78
 80036b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	6831      	ldr	r1, [r6, #0]
 80036bc:	061f      	lsls	r7, r3, #24
 80036be:	f851 5b04 	ldr.w	r5, [r1], #4
 80036c2:	d402      	bmi.n	80036ca <_printf_i+0x186>
 80036c4:	065f      	lsls	r7, r3, #25
 80036c6:	bf48      	it	mi
 80036c8:	b2ad      	uxthmi	r5, r5
 80036ca:	6031      	str	r1, [r6, #0]
 80036cc:	07d9      	lsls	r1, r3, #31
 80036ce:	bf44      	itt	mi
 80036d0:	f043 0320 	orrmi.w	r3, r3, #32
 80036d4:	6023      	strmi	r3, [r4, #0]
 80036d6:	b11d      	cbz	r5, 80036e0 <_printf_i+0x19c>
 80036d8:	2310      	movs	r3, #16
 80036da:	e7ad      	b.n	8003638 <_printf_i+0xf4>
 80036dc:	4826      	ldr	r0, [pc, #152]	@ (8003778 <_printf_i+0x234>)
 80036de:	e7e9      	b.n	80036b4 <_printf_i+0x170>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f023 0320 	bic.w	r3, r3, #32
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	e7f6      	b.n	80036d8 <_printf_i+0x194>
 80036ea:	4616      	mov	r6, r2
 80036ec:	e7bd      	b.n	800366a <_printf_i+0x126>
 80036ee:	6833      	ldr	r3, [r6, #0]
 80036f0:	6825      	ldr	r5, [r4, #0]
 80036f2:	6961      	ldr	r1, [r4, #20]
 80036f4:	1d18      	adds	r0, r3, #4
 80036f6:	6030      	str	r0, [r6, #0]
 80036f8:	062e      	lsls	r6, r5, #24
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	d501      	bpl.n	8003702 <_printf_i+0x1be>
 80036fe:	6019      	str	r1, [r3, #0]
 8003700:	e002      	b.n	8003708 <_printf_i+0x1c4>
 8003702:	0668      	lsls	r0, r5, #25
 8003704:	d5fb      	bpl.n	80036fe <_printf_i+0x1ba>
 8003706:	8019      	strh	r1, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	4616      	mov	r6, r2
 800370e:	e7bc      	b.n	800368a <_printf_i+0x146>
 8003710:	6833      	ldr	r3, [r6, #0]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	6032      	str	r2, [r6, #0]
 8003716:	681e      	ldr	r6, [r3, #0]
 8003718:	6862      	ldr	r2, [r4, #4]
 800371a:	2100      	movs	r1, #0
 800371c:	4630      	mov	r0, r6
 800371e:	f7fc fd57 	bl	80001d0 <memchr>
 8003722:	b108      	cbz	r0, 8003728 <_printf_i+0x1e4>
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	6060      	str	r0, [r4, #4]
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	6123      	str	r3, [r4, #16]
 800372c:	2300      	movs	r3, #0
 800372e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003732:	e7aa      	b.n	800368a <_printf_i+0x146>
 8003734:	6923      	ldr	r3, [r4, #16]
 8003736:	4632      	mov	r2, r6
 8003738:	4649      	mov	r1, r9
 800373a:	4640      	mov	r0, r8
 800373c:	47d0      	blx	sl
 800373e:	3001      	adds	r0, #1
 8003740:	d0ad      	beq.n	800369e <_printf_i+0x15a>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	d413      	bmi.n	8003770 <_printf_i+0x22c>
 8003748:	68e0      	ldr	r0, [r4, #12]
 800374a:	9b03      	ldr	r3, [sp, #12]
 800374c:	4298      	cmp	r0, r3
 800374e:	bfb8      	it	lt
 8003750:	4618      	movlt	r0, r3
 8003752:	e7a6      	b.n	80036a2 <_printf_i+0x15e>
 8003754:	2301      	movs	r3, #1
 8003756:	4632      	mov	r2, r6
 8003758:	4649      	mov	r1, r9
 800375a:	4640      	mov	r0, r8
 800375c:	47d0      	blx	sl
 800375e:	3001      	adds	r0, #1
 8003760:	d09d      	beq.n	800369e <_printf_i+0x15a>
 8003762:	3501      	adds	r5, #1
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	9903      	ldr	r1, [sp, #12]
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	42ab      	cmp	r3, r5
 800376c:	dcf2      	bgt.n	8003754 <_printf_i+0x210>
 800376e:	e7eb      	b.n	8003748 <_printf_i+0x204>
 8003770:	2500      	movs	r5, #0
 8003772:	f104 0619 	add.w	r6, r4, #25
 8003776:	e7f5      	b.n	8003764 <_printf_i+0x220>
 8003778:	08003bad 	.word	0x08003bad
 800377c:	08003bbe 	.word	0x08003bbe

08003780 <__sflush_r>:
 8003780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	0716      	lsls	r6, r2, #28
 800378a:	4605      	mov	r5, r0
 800378c:	460c      	mov	r4, r1
 800378e:	d454      	bmi.n	800383a <__sflush_r+0xba>
 8003790:	684b      	ldr	r3, [r1, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	dc02      	bgt.n	800379c <__sflush_r+0x1c>
 8003796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	dd48      	ble.n	800382e <__sflush_r+0xae>
 800379c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800379e:	2e00      	cmp	r6, #0
 80037a0:	d045      	beq.n	800382e <__sflush_r+0xae>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037a8:	682f      	ldr	r7, [r5, #0]
 80037aa:	6a21      	ldr	r1, [r4, #32]
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	d030      	beq.n	8003812 <__sflush_r+0x92>
 80037b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	0759      	lsls	r1, r3, #29
 80037b6:	d505      	bpl.n	80037c4 <__sflush_r+0x44>
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037be:	b10b      	cbz	r3, 80037c4 <__sflush_r+0x44>
 80037c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c8:	6a21      	ldr	r1, [r4, #32]
 80037ca:	4628      	mov	r0, r5
 80037cc:	47b0      	blx	r6
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	d106      	bne.n	80037e2 <__sflush_r+0x62>
 80037d4:	6829      	ldr	r1, [r5, #0]
 80037d6:	291d      	cmp	r1, #29
 80037d8:	d82b      	bhi.n	8003832 <__sflush_r+0xb2>
 80037da:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <__sflush_r+0x104>)
 80037dc:	40ca      	lsrs	r2, r1
 80037de:	07d6      	lsls	r6, r2, #31
 80037e0:	d527      	bpl.n	8003832 <__sflush_r+0xb2>
 80037e2:	2200      	movs	r2, #0
 80037e4:	6062      	str	r2, [r4, #4]
 80037e6:	04d9      	lsls	r1, r3, #19
 80037e8:	6922      	ldr	r2, [r4, #16]
 80037ea:	6022      	str	r2, [r4, #0]
 80037ec:	d504      	bpl.n	80037f8 <__sflush_r+0x78>
 80037ee:	1c42      	adds	r2, r0, #1
 80037f0:	d101      	bne.n	80037f6 <__sflush_r+0x76>
 80037f2:	682b      	ldr	r3, [r5, #0]
 80037f4:	b903      	cbnz	r3, 80037f8 <__sflush_r+0x78>
 80037f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80037f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037fa:	602f      	str	r7, [r5, #0]
 80037fc:	b1b9      	cbz	r1, 800382e <__sflush_r+0xae>
 80037fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003802:	4299      	cmp	r1, r3
 8003804:	d002      	beq.n	800380c <__sflush_r+0x8c>
 8003806:	4628      	mov	r0, r5
 8003808:	f7ff fbf4 	bl	8002ff4 <_free_r>
 800380c:	2300      	movs	r3, #0
 800380e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003810:	e00d      	b.n	800382e <__sflush_r+0xae>
 8003812:	2301      	movs	r3, #1
 8003814:	4628      	mov	r0, r5
 8003816:	47b0      	blx	r6
 8003818:	4602      	mov	r2, r0
 800381a:	1c50      	adds	r0, r2, #1
 800381c:	d1c9      	bne.n	80037b2 <__sflush_r+0x32>
 800381e:	682b      	ldr	r3, [r5, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0c6      	beq.n	80037b2 <__sflush_r+0x32>
 8003824:	2b1d      	cmp	r3, #29
 8003826:	d001      	beq.n	800382c <__sflush_r+0xac>
 8003828:	2b16      	cmp	r3, #22
 800382a:	d11e      	bne.n	800386a <__sflush_r+0xea>
 800382c:	602f      	str	r7, [r5, #0]
 800382e:	2000      	movs	r0, #0
 8003830:	e022      	b.n	8003878 <__sflush_r+0xf8>
 8003832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003836:	b21b      	sxth	r3, r3
 8003838:	e01b      	b.n	8003872 <__sflush_r+0xf2>
 800383a:	690f      	ldr	r7, [r1, #16]
 800383c:	2f00      	cmp	r7, #0
 800383e:	d0f6      	beq.n	800382e <__sflush_r+0xae>
 8003840:	0793      	lsls	r3, r2, #30
 8003842:	680e      	ldr	r6, [r1, #0]
 8003844:	bf08      	it	eq
 8003846:	694b      	ldreq	r3, [r1, #20]
 8003848:	600f      	str	r7, [r1, #0]
 800384a:	bf18      	it	ne
 800384c:	2300      	movne	r3, #0
 800384e:	eba6 0807 	sub.w	r8, r6, r7
 8003852:	608b      	str	r3, [r1, #8]
 8003854:	f1b8 0f00 	cmp.w	r8, #0
 8003858:	dde9      	ble.n	800382e <__sflush_r+0xae>
 800385a:	6a21      	ldr	r1, [r4, #32]
 800385c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800385e:	4643      	mov	r3, r8
 8003860:	463a      	mov	r2, r7
 8003862:	4628      	mov	r0, r5
 8003864:	47b0      	blx	r6
 8003866:	2800      	cmp	r0, #0
 8003868:	dc08      	bgt.n	800387c <__sflush_r+0xfc>
 800386a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800387c:	4407      	add	r7, r0
 800387e:	eba8 0800 	sub.w	r8, r8, r0
 8003882:	e7e7      	b.n	8003854 <__sflush_r+0xd4>
 8003884:	20400001 	.word	0x20400001

08003888 <_fflush_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	4605      	mov	r5, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b913      	cbnz	r3, 8003898 <_fflush_r+0x10>
 8003892:	2500      	movs	r5, #0
 8003894:	4628      	mov	r0, r5
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	b118      	cbz	r0, 80038a2 <_fflush_r+0x1a>
 800389a:	6a03      	ldr	r3, [r0, #32]
 800389c:	b90b      	cbnz	r3, 80038a2 <_fflush_r+0x1a>
 800389e:	f7ff faa1 	bl	8002de4 <__sinit>
 80038a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f3      	beq.n	8003892 <_fflush_r+0xa>
 80038aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038ac:	07d0      	lsls	r0, r2, #31
 80038ae:	d404      	bmi.n	80038ba <_fflush_r+0x32>
 80038b0:	0599      	lsls	r1, r3, #22
 80038b2:	d402      	bmi.n	80038ba <_fflush_r+0x32>
 80038b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038b6:	f7ff fb9a 	bl	8002fee <__retarget_lock_acquire_recursive>
 80038ba:	4628      	mov	r0, r5
 80038bc:	4621      	mov	r1, r4
 80038be:	f7ff ff5f 	bl	8003780 <__sflush_r>
 80038c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038c4:	07da      	lsls	r2, r3, #31
 80038c6:	4605      	mov	r5, r0
 80038c8:	d4e4      	bmi.n	8003894 <_fflush_r+0xc>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	059b      	lsls	r3, r3, #22
 80038ce:	d4e1      	bmi.n	8003894 <_fflush_r+0xc>
 80038d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038d2:	f7ff fb8d 	bl	8002ff0 <__retarget_lock_release_recursive>
 80038d6:	e7dd      	b.n	8003894 <_fflush_r+0xc>

080038d8 <__swbuf_r>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	460e      	mov	r6, r1
 80038dc:	4614      	mov	r4, r2
 80038de:	4605      	mov	r5, r0
 80038e0:	b118      	cbz	r0, 80038ea <__swbuf_r+0x12>
 80038e2:	6a03      	ldr	r3, [r0, #32]
 80038e4:	b90b      	cbnz	r3, 80038ea <__swbuf_r+0x12>
 80038e6:	f7ff fa7d 	bl	8002de4 <__sinit>
 80038ea:	69a3      	ldr	r3, [r4, #24]
 80038ec:	60a3      	str	r3, [r4, #8]
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	071a      	lsls	r2, r3, #28
 80038f2:	d501      	bpl.n	80038f8 <__swbuf_r+0x20>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	b943      	cbnz	r3, 800390a <__swbuf_r+0x32>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 f82a 	bl	8003954 <__swsetup_r>
 8003900:	b118      	cbz	r0, 800390a <__swbuf_r+0x32>
 8003902:	f04f 37ff 	mov.w	r7, #4294967295
 8003906:	4638      	mov	r0, r7
 8003908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	6922      	ldr	r2, [r4, #16]
 800390e:	1a98      	subs	r0, r3, r2
 8003910:	6963      	ldr	r3, [r4, #20]
 8003912:	b2f6      	uxtb	r6, r6
 8003914:	4283      	cmp	r3, r0
 8003916:	4637      	mov	r7, r6
 8003918:	dc05      	bgt.n	8003926 <__swbuf_r+0x4e>
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f7ff ffb3 	bl	8003888 <_fflush_r>
 8003922:	2800      	cmp	r0, #0
 8003924:	d1ed      	bne.n	8003902 <__swbuf_r+0x2a>
 8003926:	68a3      	ldr	r3, [r4, #8]
 8003928:	3b01      	subs	r3, #1
 800392a:	60a3      	str	r3, [r4, #8]
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	6022      	str	r2, [r4, #0]
 8003932:	701e      	strb	r6, [r3, #0]
 8003934:	6962      	ldr	r2, [r4, #20]
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	429a      	cmp	r2, r3
 800393a:	d004      	beq.n	8003946 <__swbuf_r+0x6e>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	07db      	lsls	r3, r3, #31
 8003940:	d5e1      	bpl.n	8003906 <__swbuf_r+0x2e>
 8003942:	2e0a      	cmp	r6, #10
 8003944:	d1df      	bne.n	8003906 <__swbuf_r+0x2e>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f7ff ff9d 	bl	8003888 <_fflush_r>
 800394e:	2800      	cmp	r0, #0
 8003950:	d0d9      	beq.n	8003906 <__swbuf_r+0x2e>
 8003952:	e7d6      	b.n	8003902 <__swbuf_r+0x2a>

08003954 <__swsetup_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <__swsetup_r+0xa8>)
 8003958:	4605      	mov	r5, r0
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	460c      	mov	r4, r1
 800395e:	b118      	cbz	r0, 8003968 <__swsetup_r+0x14>
 8003960:	6a03      	ldr	r3, [r0, #32]
 8003962:	b90b      	cbnz	r3, 8003968 <__swsetup_r+0x14>
 8003964:	f7ff fa3e 	bl	8002de4 <__sinit>
 8003968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d422      	bmi.n	80039b6 <__swsetup_r+0x62>
 8003970:	06da      	lsls	r2, r3, #27
 8003972:	d407      	bmi.n	8003984 <__swsetup_r+0x30>
 8003974:	2209      	movs	r2, #9
 8003976:	602a      	str	r2, [r5, #0]
 8003978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	e033      	b.n	80039ec <__swsetup_r+0x98>
 8003984:	0758      	lsls	r0, r3, #29
 8003986:	d512      	bpl.n	80039ae <__swsetup_r+0x5a>
 8003988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800398a:	b141      	cbz	r1, 800399e <__swsetup_r+0x4a>
 800398c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003990:	4299      	cmp	r1, r3
 8003992:	d002      	beq.n	800399a <__swsetup_r+0x46>
 8003994:	4628      	mov	r0, r5
 8003996:	f7ff fb2d 	bl	8002ff4 <_free_r>
 800399a:	2300      	movs	r3, #0
 800399c:	6363      	str	r3, [r4, #52]	@ 0x34
 800399e:	89a3      	ldrh	r3, [r4, #12]
 80039a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	2300      	movs	r3, #0
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	b94b      	cbnz	r3, 80039ce <__swsetup_r+0x7a>
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c4:	d003      	beq.n	80039ce <__swsetup_r+0x7a>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 f84f 	bl	8003a6c <__smakebuf_r>
 80039ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d2:	f013 0201 	ands.w	r2, r3, #1
 80039d6:	d00a      	beq.n	80039ee <__swsetup_r+0x9a>
 80039d8:	2200      	movs	r2, #0
 80039da:	60a2      	str	r2, [r4, #8]
 80039dc:	6962      	ldr	r2, [r4, #20]
 80039de:	4252      	negs	r2, r2
 80039e0:	61a2      	str	r2, [r4, #24]
 80039e2:	6922      	ldr	r2, [r4, #16]
 80039e4:	b942      	cbnz	r2, 80039f8 <__swsetup_r+0xa4>
 80039e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039ea:	d1c5      	bne.n	8003978 <__swsetup_r+0x24>
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	0799      	lsls	r1, r3, #30
 80039f0:	bf58      	it	pl
 80039f2:	6962      	ldrpl	r2, [r4, #20]
 80039f4:	60a2      	str	r2, [r4, #8]
 80039f6:	e7f4      	b.n	80039e2 <__swsetup_r+0x8e>
 80039f8:	2000      	movs	r0, #0
 80039fa:	e7f7      	b.n	80039ec <__swsetup_r+0x98>
 80039fc:	20000018 	.word	0x20000018

08003a00 <_sbrk_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4d06      	ldr	r5, [pc, #24]	@ (8003a1c <_sbrk_r+0x1c>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	f7fc ffa4 	bl	8000958 <_sbrk>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_sbrk_r+0x1a>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_sbrk_r+0x1a>
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20000328 	.word	0x20000328

08003a20 <__swhatbuf_r>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	460c      	mov	r4, r1
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	b096      	sub	sp, #88	@ 0x58
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	461e      	mov	r6, r3
 8003a30:	da0d      	bge.n	8003a4e <__swhatbuf_r+0x2e>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2340      	movne	r3, #64	@ 0x40
 8003a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a44:	2000      	movs	r0, #0
 8003a46:	6031      	str	r1, [r6, #0]
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	b016      	add	sp, #88	@ 0x58
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
 8003a4e:	466a      	mov	r2, sp
 8003a50:	f000 f848 	bl	8003ae4 <_fstat_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	dbec      	blt.n	8003a32 <__swhatbuf_r+0x12>
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a62:	4259      	negs	r1, r3
 8003a64:	4159      	adcs	r1, r3
 8003a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6a:	e7eb      	b.n	8003a44 <__swhatbuf_r+0x24>

08003a6c <__smakebuf_r>:
 8003a6c:	898b      	ldrh	r3, [r1, #12]
 8003a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a70:	079d      	lsls	r5, r3, #30
 8003a72:	4606      	mov	r6, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	d507      	bpl.n	8003a88 <__smakebuf_r+0x1c>
 8003a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	2301      	movs	r3, #1
 8003a82:	6163      	str	r3, [r4, #20]
 8003a84:	b003      	add	sp, #12
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a88:	ab01      	add	r3, sp, #4
 8003a8a:	466a      	mov	r2, sp
 8003a8c:	f7ff ffc8 	bl	8003a20 <__swhatbuf_r>
 8003a90:	9f00      	ldr	r7, [sp, #0]
 8003a92:	4605      	mov	r5, r0
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	f7ff fb18 	bl	80030cc <_malloc_r>
 8003a9c:	b948      	cbnz	r0, 8003ab2 <__smakebuf_r+0x46>
 8003a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa2:	059a      	lsls	r2, r3, #22
 8003aa4:	d4ee      	bmi.n	8003a84 <__smakebuf_r+0x18>
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	f043 0302 	orr.w	r3, r3, #2
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	e7e2      	b.n	8003a78 <__smakebuf_r+0xc>
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	6020      	str	r0, [r4, #0]
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ac2:	b15b      	cbz	r3, 8003adc <__smakebuf_r+0x70>
 8003ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 f81d 	bl	8003b08 <_isatty_r>
 8003ace:	b128      	cbz	r0, 8003adc <__smakebuf_r+0x70>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	431d      	orrs	r5, r3
 8003ae0:	81a5      	strh	r5, [r4, #12]
 8003ae2:	e7cf      	b.n	8003a84 <__smakebuf_r+0x18>

08003ae4 <_fstat_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d07      	ldr	r5, [pc, #28]	@ (8003b04 <_fstat_r+0x20>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	f7fc ff09 	bl	8000908 <_fstat>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d102      	bne.n	8003b00 <_fstat_r+0x1c>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	b103      	cbz	r3, 8003b00 <_fstat_r+0x1c>
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	20000328 	.word	0x20000328

08003b08 <_isatty_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d06      	ldr	r5, [pc, #24]	@ (8003b24 <_isatty_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f7fc ff08 	bl	8000928 <_isatty>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_isatty_r+0x1a>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_isatty_r+0x1a>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000328 	.word	0x20000328

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
