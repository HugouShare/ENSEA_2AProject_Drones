
Ultrasound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005b9c  08005b9c  00006b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c44  08005c44  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c44  08005c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c4c  08005c4c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08005cb0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005cb0  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010368  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b2  00000000  00000000  000173f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000194a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b58  00000000  00000000  0001a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cdf  00000000  00000000  0001ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113cf  00000000  00000000  00041b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2570  00000000  00000000  00052f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014549e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  001454e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001496d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b84 	.word	0x08005b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005b84 	.word	0x08005b84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fca0 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f80e 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f9c6 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f994 	bl	800089c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000574:	f000 f8d2 	bl	800071c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000578:	f000 f942 	bl	8000800 <MX_TIM5_Init>
  MX_TIM2_Init();
 800057c:	f000 f856 	bl	800062c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  run();
 8000580:	f000 fa28 	bl	80009d4 <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <main+0x24>

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	@ 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	@ 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 fe74 	bl	8005284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ae:	f000 fffd 	bl	80015ac <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 fa06 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f834 	bl	8001658 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f9e7 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fbfc 	bl	8001e10 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f9d3 	bl	80009c8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3758      	adds	r7, #88	@ 0x58
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	@ 0x38
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065e:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000660:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000666:	4b2b      	ldr	r3, [pc, #172]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000668:	224f      	movs	r2, #79	@ 0x4f
 800066a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_TIM2_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000;
 8000672:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <MX_TIM2_Init+0xec>)
 8000676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_TIM2_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000684:	4823      	ldr	r0, [pc, #140]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000686:	f002 faa3 	bl	8002bd0 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000690:	f000 f99a 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800069e:	4619      	mov	r1, r3
 80006a0:	481c      	ldr	r0, [pc, #112]	@ (8000714 <MX_TIM2_Init+0xe8>)
 80006a2:	f003 f921 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006ac:	f000 f98c 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b0:	4818      	ldr	r0, [pc, #96]	@ (8000714 <MX_TIM2_Init+0xe8>)
 80006b2:	f002 fb4d 	bl	8002d50 <HAL_TIM_PWM_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006bc:	f000 f984 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4811      	ldr	r0, [pc, #68]	@ (8000714 <MX_TIM2_Init+0xe8>)
 80006d0:	f003 ff66 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006da:	f000 f975 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006de:	2360      	movs	r3, #96	@ 0x60
 80006e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80006e2:	230a      	movs	r3, #10
 80006e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4807      	ldr	r0, [pc, #28]	@ (8000714 <MX_TIM2_Init+0xe8>)
 80006f6:	f002 ffe3 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000700:	f000 f962 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000704:	4803      	ldr	r0, [pc, #12]	@ (8000714 <MX_TIM2_Init+0xe8>)
 8000706:	f000 fa5d 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 800070a:	bf00      	nop
 800070c:	3738      	adds	r7, #56	@ 0x38
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000078 	.word	0x20000078
 8000718:	00061a80 	.word	0x00061a80

0800071c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <MX_TIM4_Init+0xe0>)
 800074c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 800075c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000760:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800076e:	4822      	ldr	r0, [pc, #136]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 8000770:	f002 fa2e 	bl	8002bd0 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800077a:	f000 f925 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4619      	mov	r1, r3
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 800078c:	f003 f8ac 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000796:	f000 f917 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800079a:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 800079c:	f002 fc40 	bl	8003020 <HAL_TIM_IC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80007a6:	f000 f90f 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 80007ba:	f003 fef1 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80007c4:	f000 f900 	bl	80009c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80007c8:	230a      	movs	r3, #10
 80007ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_TIM4_Init+0xdc>)
 80007e0:	f002 fed1 	bl	8003586 <HAL_TIM_IC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80007ea:	f000 f8ed 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	@ 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000c4 	.word	0x200000c4
 80007fc:	40000800 	.word	0x40000800

08000800 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000820:	4a1d      	ldr	r2, [pc, #116]	@ (8000898 <MX_TIM5_Init+0x98>)
 8000822:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000826:	224f      	movs	r2, #79	@ 0x4f
 8000828:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_TIM5_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000832:	f04f 32ff 	mov.w	r2, #4294967295
 8000836:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_TIM5_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000846:	f002 f9c3 	bl	8002bd0 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000850:	f000 f8ba 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_TIM5_Init+0x94>)
 8000862:	f003 f841 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f8ac 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_TIM5_Init+0x94>)
 800087e:	f003 fe8f 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 f89e 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000110 	.word	0x20000110
 8000898:	40000c00 	.word	0x40000c00

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	f003 ff04 	bl	80046ec <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f86d 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000015c 	.word	0x2000015c
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a2a      	ldr	r2, [pc, #168]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a24      	ldr	r2, [pc, #144]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_GPIO_Init+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fdf1 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000984:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <MX_GPIO_Init+0xc8>)
 8000996:	f000 fc39 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f000 fc2a 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000800 	.word	0x48000800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <run>:
extern TIM_HandleTypeDef htim5;

extern UART_HandleTypeDef huart2;


void run(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
 80009da:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim5);
 80009dc:	4826      	ldr	r0, [pc, #152]	@ (8000a78 <run+0xa4>)
 80009de:	f002 f94f 	bl	8002c80 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	4825      	ldr	r0, [pc, #148]	@ (8000a7c <run+0xa8>)
 80009e6:	f002 fa15 	bl	8002e14 <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009ea:	2100      	movs	r1, #0
 80009ec:	4824      	ldr	r0, [pc, #144]	@ (8000a80 <run+0xac>)
 80009ee:	f002 fb79 	bl	80030e4 <HAL_TIM_IC_Start_IT>

    char message[1024] = {0};
 80009f2:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009f6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	3304      	adds	r3, #4
 8000a00:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fc3c 	bl	8005284 <memset>
	sprintf(message, "Starting...\n\r");
 8000a0c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000a10:	491c      	ldr	r1, [pc, #112]	@ (8000a84 <run+0xb0>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fc16 	bl	8005244 <siprintf>
	HAL_UART_Transmit(&huart2, &message, sizeof(message), 1000);
 8000a18:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8000a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a24:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <run+0xb4>)
 8000a26:	f003 feaf 	bl	8004788 <HAL_UART_Transmit>

    while(1){
        char message[1024] = {0};
 8000a2a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a2e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	3304      	adds	r3, #4
 8000a38:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fc20 	bl	8005284 <memset>
        sprintf(message, "Distance measured : %d cm\n\r", measure_cm);
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <run+0xb8>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4911      	ldr	r1, [pc, #68]	@ (8000a90 <run+0xbc>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 fbf9 	bl	8005244 <siprintf>
        HAL_UART_Transmit(&huart2, &message, sizeof(message), 1000);
 8000a52:	4639      	mov	r1, r7
 8000a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a5c:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <run+0xb4>)
 8000a5e:	f003 fe93 	bl	8004788 <HAL_UART_Transmit>
        pulse_duration = -1;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <run+0xc0>)
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	601a      	str	r2, [r3, #0]
        HAL_Delay(1000);  // delay 1 second between each measurement
 8000a6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a6e:	f000 fa97 	bl	8000fa0 <HAL_Delay>
    while(1){
 8000a72:	bf00      	nop
 8000a74:	e7d9      	b.n	8000a2a <run+0x56>
 8000a76:	bf00      	nop
 8000a78:	20000110 	.word	0x20000110
 8000a7c:	20000078 	.word	0x20000078
 8000a80:	200000c4 	.word	0x200000c4
 8000a84:	08005b9c 	.word	0x08005b9c
 8000a88:	2000015c 	.word	0x2000015c
 8000a8c:	200001e8 	.word	0x200001e8
 8000a90:	08005bac 	.word	0x08005bac
 8000a94:	200001e4 	.word	0x200001e4

08000a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	@ 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b00:	d10c      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0e:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b1a:	e046      	b.n	8000baa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a25      	ldr	r2, [pc, #148]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xd8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d130      	bne.n	8000b88 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <HAL_TIM_Base_MspInit+0xdc>)
 8000b72:	f000 fb4b 	bl	800120c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201e      	movs	r0, #30
 8000b7c:	f000 fb0f 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b80:	201e      	movs	r0, #30
 8000b82:	f000 fb28 	bl	80011d6 <HAL_NVIC_EnableIRQ>
}
 8000b86:	e010      	b.n	8000baa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xe0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10b      	bne.n	8000baa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9e:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xd4>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3730      	adds	r7, #48	@ 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40000800 	.word	0x40000800
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	40000c00 	.word	0x40000c00

08000bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be4:	d11c      	bne.n	8000c20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <HAL_TIM_MspPostInit+0x64>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <HAL_TIM_MspPostInit+0x64>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <HAL_TIM_MspPostInit+0x64>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f000 faf6 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2288      	movs	r2, #136	@ 0x88
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fb19 	bl	8005284 <memset>
  if(huart->Instance==USART2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_UART_MspInit+0xb0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d13b      	bne.n	8000cd4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 faf5 	bl	8002258 <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c74:	f7ff fea8 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c94:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f000 fa9c 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37b0      	adds	r7, #176	@ 0xb0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f911 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  if (rising == 0){
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <TIM4_IRQHandler+0x60>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <TIM4_IRQHandler+0x20>
    rising_time = htim5.Instance->CNT;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <TIM4_IRQHandler+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <TIM4_IRQHandler+0x68>)
 8000d5a:	601a      	str	r2, [r3, #0]
    rising = 1;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <TIM4_IRQHandler+0x60>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e01a      	b.n	8000d9a <TIM4_IRQHandler+0x56>
  }
  else{
    falling_time =  htim5.Instance->CNT;
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <TIM4_IRQHandler+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <TIM4_IRQHandler+0x6c>)
 8000d6e:	601a      	str	r2, [r3, #0]
    rising = 0;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <TIM4_IRQHandler+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
    pulse_duration = falling_time - rising_time;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <TIM4_IRQHandler+0x6c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <TIM4_IRQHandler+0x68>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <TIM4_IRQHandler+0x70>)
 8000d82:	6013      	str	r3, [r2, #0]
    measure_cm = pulse_duration / 58;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <TIM4_IRQHandler+0x70>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <TIM4_IRQHandler+0x74>)
 8000d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8e:	441a      	add	r2, r3
 8000d90:	1152      	asrs	r2, r2, #5
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <TIM4_IRQHandler+0x78>)
 8000d98:	6013      	str	r3, [r2, #0]

  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d9a:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <TIM4_IRQHandler+0x7c>)
 8000d9c:	f002 faec 	bl	8003378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  
  /* USER CODE END TIM4_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001ec 	.word	0x200001ec
 8000da8:	20000110 	.word	0x20000110
 8000dac:	200001f0 	.word	0x200001f0
 8000db0:	200001f4 	.word	0x200001f4
 8000db4:	200001e4 	.word	0x200001e4
 8000db8:	8d3dcb09 	.word	0x8d3dcb09
 8000dbc:	200001e8 	.word	0x200001e8
 8000dc0:	200000c4 	.word	0x200000c4

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f004 fa4e 	bl	8005294 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200001f8 	.word	0x200001f8
 8000e2c:	20000348 	.word	0x20000348

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 fa0d 	bl	80052a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fb6b 	bl	8000560 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e98:	08005c54 	.word	0x08005c54
  ldr r2, =_sbss
 8000e9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea0:	20000348 	.word	0x20000348

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_Init+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <HAL_Init+0x3c>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f962 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f80f 	bl	8000ee8 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e001      	b.n	8000eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed6:	f7ff fddf 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d023      	beq.n	8000f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_InitTick+0x70>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f96d 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10f      	bne.n	8000f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d809      	bhi.n	8000f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f937 	bl	800119e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_InitTick+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e007      	b.n	8000f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e004      	b.n	8000f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e001      	b.n	8000f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001fc 	.word	0x200001fc

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001fc 	.word	0x200001fc

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e17f      	b.n	800151c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8171 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d118      	bne.n	80012ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80ac 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <HAL_GPIO_Init+0x330>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001540 <HAL_GPIO_Init+0x334>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x242>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	@ (8001544 <HAL_GPIO_Init+0x338>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x23e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	@ (8001548 <HAL_GPIO_Init+0x33c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x23a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	@ (800154c <HAL_GPIO_Init+0x340>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x236>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	@ (8001550 <HAL_GPIO_Init+0x344>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x232>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	@ (8001554 <HAL_GPIO_Init+0x348>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x22e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	@ (8001558 <HAL_GPIO_Init+0x34c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x22a>
 8001432:	2306      	movs	r3, #6
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001436:	2307      	movs	r3, #7
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001460:	4937      	ldr	r1, [pc, #220]	@ (8001540 <HAL_GPIO_Init+0x334>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <HAL_GPIO_Init+0x350>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_GPIO_Init+0x350>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <HAL_GPIO_Init+0x350>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae78 	bne.w	800121c <HAL_GPIO_Init+0x10>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	48001800 	.word	0x48001800
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800157c:	e002      	b.n	8001584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40007000 	.word	0x40007000

080015ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ba:	d130      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	4b23      	ldr	r3, [pc, #140]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c8:	d038      	beq.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d2:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015da:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2232      	movs	r2, #50	@ 0x32
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f0:	e002      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001604:	d102      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f2      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001618:	d110      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e00f      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162a:	d007      	beq.n	800163c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000
 8001650:	20000000 	.word	0x20000000
 8001654:	431bde83 	.word	0x431bde83

08001658 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e3ca      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b97      	ldr	r3, [pc, #604]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b94      	ldr	r3, [pc, #592]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80e4 	beq.w	8001854 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4a>
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b0c      	cmp	r3, #12
 8001696:	f040 808b 	bne.w	80017b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b01      	cmp	r3, #1
 800169e:	f040 8087 	bne.w	80017b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	4b89      	ldr	r3, [pc, #548]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x62>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e3a2      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1a      	ldr	r2, [r3, #32]
 80016be:	4b82      	ldr	r3, [pc, #520]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <HAL_RCC_OscConfig+0x7c>
 80016ca:	4b7f      	ldr	r3, [pc, #508]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016d2:	e005      	b.n	80016e0 <HAL_RCC_OscConfig+0x88>
 80016d4:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d223      	bcs.n	800172c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fd55 	bl	8002198 <RCC_SetFlashLatencyFromMSIRange>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e383      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f8:	4b73      	ldr	r3, [pc, #460]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a72      	ldr	r2, [pc, #456]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b70      	ldr	r3, [pc, #448]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	496d      	ldr	r1, [pc, #436]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001716:	4b6c      	ldr	r3, [pc, #432]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4968      	ldr	r1, [pc, #416]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
 800172a:	e025      	b.n	8001778 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172c:	4b66      	ldr	r3, [pc, #408]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a65      	ldr	r2, [pc, #404]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b63      	ldr	r3, [pc, #396]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4960      	ldr	r1, [pc, #384]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174a:	4b5f      	ldr	r3, [pc, #380]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	495b      	ldr	r1, [pc, #364]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fd15 	bl	8002198 <RCC_SetFlashLatencyFromMSIRange>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e343      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001778:	f000 fc4a 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b52      	ldr	r3, [pc, #328]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	4950      	ldr	r1, [pc, #320]	@ (80018cc <HAL_RCC_OscConfig+0x274>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	4a4e      	ldr	r2, [pc, #312]	@ (80018d0 <HAL_RCC_OscConfig+0x278>)
 8001796:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001798:	4b4e      	ldr	r3, [pc, #312]	@ (80018d4 <HAL_RCC_OscConfig+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fba3 	bl	8000ee8 <HAL_InitTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d052      	beq.n	8001852 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	e327      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d032      	beq.n	800181e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017b8:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a42      	ldr	r2, [pc, #264]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbe0 	bl	8000f88 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017cc:	f7ff fbdc 	bl	8000f88 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e310      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017de:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a36      	ldr	r2, [pc, #216]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4931      	ldr	r1, [pc, #196]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001808:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	492c      	ldr	r1, [pc, #176]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e01a      	b.n	8001854 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a29      	ldr	r2, [pc, #164]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182a:	f7ff fbad 	bl	8000f88 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001832:	f7ff fba9 	bl	8000f88 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e2dd      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x1da>
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001852:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d074      	beq.n	800194a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b08      	cmp	r3, #8
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x21a>
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d10e      	bne.n	800188a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d064      	beq.n	8001948 <HAL_RCC_OscConfig+0x2f0>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d160      	bne.n	8001948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e2ba      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x24a>
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e026      	b.n	80018f0 <HAL_RCC_OscConfig+0x298>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018aa:	d115      	bne.n	80018d8 <HAL_RCC_OscConfig+0x280>
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a02      	ldr	r2, [pc, #8]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x298>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08005bc8 	.word	0x08005bc8
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004
 80018d8:	4ba0      	ldr	r3, [pc, #640]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a9f      	ldr	r2, [pc, #636]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9c      	ldr	r2, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb46 	bl	8000f88 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fb42 	bl	8000f88 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e276      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x2a8>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fb32 	bl	8000f88 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fb2e 	bl	8000f88 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e262      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x2d0>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d060      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x310>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d119      	bne.n	8001996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d116      	bne.n	8001996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001968:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x328>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e23f      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b76      	ldr	r3, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	4973      	ldr	r1, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001994:	e040      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d023      	beq.n	80019e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6e      	ldr	r2, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff faed 	bl	8000f88 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fae9 	bl	8000f88 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e21d      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	4b65      	ldr	r3, [pc, #404]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b62      	ldr	r3, [pc, #392]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	495f      	ldr	r1, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5c      	ldr	r2, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 80019ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fac9 	bl	8000f88 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fac5 	bl	8000f88 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1f9      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a32:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff faa4 	bl	8000f88 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff faa0 	bl	8000f88 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1d4      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ef      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3ec>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa87 	bl	8000f88 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fa83 	bl	8000f88 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1b7      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80a6 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10d      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a26      	ldr	r2, [pc, #152]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d118      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fa4a 	bl	8000f88 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af8:	f7ff fa46 	bl	8000f88 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e17a      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <HAL_RCC_OscConfig+0x508>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4d8>
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2e:	e029      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_OscConfig+0x50c>
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b3e:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4e:	4a03      	ldr	r2, [pc, #12]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6a:	4a9b      	ldr	r2, [pc, #620]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b74:	4b98      	ldr	r3, [pc, #608]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b7a:	4a97      	ldr	r2, [pc, #604]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d016      	beq.n	8001bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f9fc 	bl	8000f88 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f9f8 	bl	8000f88 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e12a      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ed      	beq.n	8001b94 <HAL_RCC_OscConfig+0x53c>
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f9e5 	bl	8000f88 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff f9e1 	bl	8000f88 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e113      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ed      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	4a79      	ldr	r2, [pc, #484]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80fe 	beq.w	8001dfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	f040 80d0 	bne.w	8001dac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c0c:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0203 	and.w	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d130      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d127      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11f      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c4c:	2a07      	cmp	r2, #7
 8001c4e:	bf14      	ite	ne
 8001c50:	2201      	movne	r2, #1
 8001c52:	2200      	moveq	r2, #0
 8001c54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d06e      	beq.n	8001d60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d069      	beq.n	8001d5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c94:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ad      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb0:	f7ff f96a 	bl	8000f88 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f966 	bl	8000f88 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e09a      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cca:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <HAL_RCC_OscConfig+0x784>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	0552      	lsls	r2, r2, #21
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d04:	0852      	lsrs	r2, r2, #1
 8001d06:	3a01      	subs	r2, #1
 8001d08:	0652      	lsls	r2, r2, #25
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d10:	0912      	lsrs	r2, r2, #4
 8001d12:	0452      	lsls	r2, r2, #17
 8001d14:	430a      	orrs	r2, r1
 8001d16:	4930      	ldr	r1, [pc, #192]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d28:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d34:	f7ff f928 	bl	8000f88 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f924 	bl	8000f88 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e058      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5a:	e050      	b.n	8001dfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04f      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d148      	bne.n	8001dfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d84:	f7ff f900 	bl	8000f88 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f8fc 	bl	8000f88 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e030      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x734>
 8001daa:	e028      	b.n	8001dfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d023      	beq.n	8001dfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001db8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f8e3 	bl	8000f88 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff f8df 	bl	8000f88 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d905      	bls.n	8001de0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e013      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_RCC_OscConfig+0x7b0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ec      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x7b0>)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4905      	ldr	r1, [pc, #20]	@ (8001e08 <HAL_RCC_OscConfig+0x7b0>)
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_RCC_OscConfig+0x7b4>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
 8001df8:	e001      	b.n	8001dfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	feeefffc 	.word	0xfeeefffc

08001e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0e7      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b75      	ldr	r3, [pc, #468]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b72      	ldr	r3, [pc, #456]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4970      	ldr	r1, [pc, #448]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b6e      	ldr	r3, [pc, #440]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0cf      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d908      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4960      	ldr	r1, [pc, #384]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d04c      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	4b5a      	ldr	r3, [pc, #360]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d121      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0a6      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eae:	4b54      	ldr	r3, [pc, #336]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e09a      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e08e      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e086      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4943      	ldr	r1, [pc, #268]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f846 	bl	8000f88 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f842 	bl	8000f88 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e06e      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b31      	ldr	r3, [pc, #196]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d208      	bcs.n	8001f56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	492b      	ldr	r1, [pc, #172]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f56:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d210      	bcs.n	8001f86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0207 	bic.w	r2, r3, #7
 8001f6c:	4923      	ldr	r1, [pc, #140]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f74:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_RCC_ClockConfig+0x1ec>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e036      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4918      	ldr	r1, [pc, #96]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4910      	ldr	r1, [pc, #64]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc4:	f000 f824 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	490b      	ldr	r1, [pc, #44]	@ (8002004 <HAL_RCC_ClockConfig+0x1f4>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	4a09      	ldr	r2, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <HAL_RCC_ClockConfig+0x1fc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ff7d 	bl	8000ee8 <HAL_InitTick>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
 8002004:	08005bc8 	.word	0x08005bc8
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b3e      	ldr	r3, [pc, #248]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x34>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d121      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11e      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002044:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002050:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002060:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800206c:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <HAL_RCC_GetSysClockFreq+0x10c>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d102      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e004      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d101      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x114>)
 8002096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d134      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d003      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0xac>
 80020b4:	e005      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x114>)
 80020be:	617b      	str	r3, [r7, #20]
      break;
 80020c0:	e002      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	617b      	str	r3, [r7, #20]
      break;
 80020c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	3301      	adds	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	0e5b      	lsrs	r3, r3, #25
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	3301      	adds	r3, #1
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002108:	69bb      	ldr	r3, [r7, #24]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08005be0 	.word	0x08005be0
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4904      	ldr	r1, [pc, #16]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08005bd8 	.word	0x08005bd8

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002170:	f7ff ffda 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4904      	ldr	r1, [pc, #16]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08005bd8 	.word	0x08005bd8

08002198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b0:	f7ff f9ee 	bl	8001590 <HAL_PWREx_GetVoltageRange>
 80021b4:	6178      	str	r0, [r7, #20]
 80021b6:	e014      	b.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	4a24      	ldr	r2, [pc, #144]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d0:	f7ff f9de 	bl	8001590 <HAL_PWREx_GetVoltageRange>
 80021d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e8:	d10b      	bne.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	@ 0x80
 80021ee:	d919      	bls.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021f4:	d902      	bls.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f6:	2302      	movs	r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e013      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e010      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b80      	cmp	r3, #128	@ 0x80
 8002206:	d902      	bls.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002208:	2303      	movs	r3, #3
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e00a      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b80      	cmp	r3, #128	@ 0x80
 8002212:	d102      	bne.n	800221a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e004      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b70      	cmp	r3, #112	@ 0x70
 800221e:	d101      	bne.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 0207 	bic.w	r2, r3, #7
 800222c:	4909      	ldr	r1, [pc, #36]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002234:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	40022000 	.word	0x40022000

08002258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002260:	2300      	movs	r3, #0
 8002262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002264:	2300      	movs	r3, #0
 8002266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002270:	2b00      	cmp	r3, #0
 8002272:	d041      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002278:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800227c:	d02a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800227e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002282:	d824      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002284:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002288:	d008      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800228a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800228e:	d81e      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002298:	d010      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800229a:	e018      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800229c:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a85      	ldr	r2, [pc, #532]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a8:	e015      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fabb 	bl	800282c <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ba:	e00c      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3320      	adds	r3, #32
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fba6 	bl	8002a14 <RCCEx_PLLSAI2_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022cc:	e003      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	74fb      	strb	r3, [r7, #19]
      break;
 80022d2:	e000      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022dc:	4b76      	ldr	r3, [pc, #472]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022ea:	4973      	ldr	r1, [pc, #460]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022f2:	e001      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d041      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002308:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800230c:	d02a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800230e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002312:	d824      	bhi.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002318:	d008      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800231e:	d81e      	bhi.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002328:	d010      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800232a:	e018      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800232c:	4b62      	ldr	r3, [pc, #392]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a61      	ldr	r2, [pc, #388]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002338:	e015      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fa73 	bl	800282c <RCCEx_PLLSAI1_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234a:	e00c      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3320      	adds	r3, #32
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fb5e 	bl	8002a14 <RCCEx_PLLSAI2_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800235c:	e003      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	74fb      	strb	r3, [r7, #19]
      break;
 8002362:	e000      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800236c:	4b52      	ldr	r3, [pc, #328]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237a:	494f      	ldr	r1, [pc, #316]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002382:	e001      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a0 	beq.w	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	4a40      	ldr	r2, [pc, #256]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023cc:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3a      	ldr	r2, [pc, #232]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fdd6 	bl	8000f88 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023de:	e009      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fdd2 	bl	8000f88 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d902      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	74fb      	strb	r3, [r7, #19]
        break;
 80023f2:	e005      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f4:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d15c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002406:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01f      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	d019      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002430:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002450:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fd91 	bl	8000f88 <HAL_GetTick>
 8002466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002468:	e00b      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fd8d 	bl	8000f88 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d902      	bls.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	74fb      	strb	r3, [r7, #19]
            break;
 8002480:	e006      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ec      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a6:	4904      	ldr	r1, [pc, #16]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024ae:	e009      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
 80024b4:	e006      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c4:	7c7b      	ldrb	r3, [r7, #17]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024e2:	4b98      	ldr	r3, [pc, #608]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	f023 0203 	bic.w	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	4994      	ldr	r1, [pc, #592]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002504:	4b8f      	ldr	r3, [pc, #572]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f023 020c 	bic.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002512:	498c      	ldr	r1, [pc, #560]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002526:	4b87      	ldr	r3, [pc, #540]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4983      	ldr	r1, [pc, #524]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002548:	4b7e      	ldr	r3, [pc, #504]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	497b      	ldr	r1, [pc, #492]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	4972      	ldr	r1, [pc, #456]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800258c:	4b6d      	ldr	r3, [pc, #436]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002592:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	496a      	ldr	r1, [pc, #424]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ae:	4b65      	ldr	r3, [pc, #404]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025bc:	4961      	ldr	r1, [pc, #388]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	4959      	ldr	r1, [pc, #356]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f2:	4b54      	ldr	r3, [pc, #336]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002600:	4950      	ldr	r1, [pc, #320]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002614:	4b4b      	ldr	r3, [pc, #300]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	4948      	ldr	r1, [pc, #288]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002636:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002644:	493f      	ldr	r1, [pc, #252]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d028      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002658:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002666:	4937      	ldr	r1, [pc, #220]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002678:	4b32      	ldr	r3, [pc, #200]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a31      	ldr	r2, [pc, #196]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002682:	60d3      	str	r3, [r2, #12]
 8002684:	e011      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800268e:	d10c      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f8c8 	bl	800282c <RCCEx_PLLSAI1_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d028      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b6:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	491f      	ldr	r1, [pc, #124]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a1a      	ldr	r2, [pc, #104]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e0:	60d3      	str	r3, [r2, #12]
 80026e2:	e011      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f899 	bl	800282c <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	4908      	ldr	r1, [pc, #32]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002732:	d109      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a02      	ldr	r2, [pc, #8]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	e014      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002750:	d10c      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f867 	bl	800282c <RCCEx_PLLSAI1_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02f      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002778:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002786:	4928      	ldr	r1, [pc, #160]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002796:	d10d      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f844 	bl	800282c <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d014      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
 80027b2:	e011      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3320      	adds	r3, #32
 80027c2:	2102      	movs	r1, #2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f925 	bl	8002a14 <RCCEx_PLLSAI2_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027f2:	490d      	ldr	r1, [pc, #52]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002816:	4904      	ldr	r1, [pc, #16]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800281e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000

0800282c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800283a:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002846:	4b72      	ldr	r3, [pc, #456]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d10d      	bne.n	8002872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
       ||
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800285e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
       ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d047      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e044      	b.n	8002902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d018      	beq.n	80028b2 <RCCEx_PLLSAI1_Config+0x86>
 8002880:	2b03      	cmp	r3, #3
 8002882:	d825      	bhi.n	80028d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002884:	2b01      	cmp	r3, #1
 8002886:	d002      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x62>
 8002888:	2b02      	cmp	r3, #2
 800288a:	d009      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x74>
 800288c:	e020      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800288e:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11d      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e01a      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d116      	bne.n	80028da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b0:	e013      	b.n	80028da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028be:	4b54      	ldr	r3, [pc, #336]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ce:	e006      	b.n	80028de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e004      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d6:	bf00      	nop
 80028d8:	e002      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028da:	bf00      	nop
 80028dc:	e000      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028de:	bf00      	nop
    }

    if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	430b      	orrs	r3, r1
 80028fc:	4944      	ldr	r1, [pc, #272]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d17d      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002908:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a40      	ldr	r2, [pc, #256]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002914:	f7fe fb38 	bl	8000f88 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800291a:	e009      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800291c:	f7fe fb34 	bl	8000f88 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d902      	bls.n	8002930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	73fb      	strb	r3, [r7, #15]
        break;
 800292e:	e005      	b.n	800293c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ef      	bne.n	800291c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d160      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002948:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	0211      	lsls	r1, r2, #8
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	0912      	lsrs	r2, r2, #4
 8002960:	0452      	lsls	r2, r2, #17
 8002962:	430a      	orrs	r2, r1
 8002964:	492a      	ldr	r1, [pc, #168]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	610b      	str	r3, [r1, #16]
 800296a:	e027      	b.n	80029bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d112      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002972:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800297a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	0211      	lsls	r1, r2, #8
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6912      	ldr	r2, [r2, #16]
 8002988:	0852      	lsrs	r2, r2, #1
 800298a:	3a01      	subs	r2, #1
 800298c:	0552      	lsls	r2, r2, #21
 800298e:	430a      	orrs	r2, r1
 8002990:	491f      	ldr	r1, [pc, #124]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	610b      	str	r3, [r1, #16]
 8002996:	e011      	b.n	80029bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6952      	ldr	r2, [r2, #20]
 80029ae:	0852      	lsrs	r2, r2, #1
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0652      	lsls	r2, r2, #25
 80029b4:	430a      	orrs	r2, r1
 80029b6:	4916      	ldr	r1, [pc, #88]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fade 	bl	8000f88 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ce:	e009      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d0:	f7fe fada 	bl	8000f88 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	73fb      	strb	r3, [r7, #15]
          break;
 80029e2:	e005      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	4904      	ldr	r1, [pc, #16]	@ (8002a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a22:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d018      	beq.n	8002a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a2e:	4b67      	ldr	r3, [pc, #412]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d10d      	bne.n	8002a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
       ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a46:	4b61      	ldr	r3, [pc, #388]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
       ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d047      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e044      	b.n	8002aea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d018      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0x86>
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d825      	bhi.n	8002ab8 <RCCEx_PLLSAI2_Config+0xa4>
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d002      	beq.n	8002a76 <RCCEx_PLLSAI2_Config+0x62>
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d009      	beq.n	8002a88 <RCCEx_PLLSAI2_Config+0x74>
 8002a74:	e020      	b.n	8002ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a76:	4b55      	ldr	r3, [pc, #340]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11d      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e01a      	b.n	8002abe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d116      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a98:	e013      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa6:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab6:	e006      	b.n	8002ac6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e004      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	4939      	ldr	r1, [pc, #228]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d167      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002af0:	4b36      	ldr	r3, [pc, #216]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a35      	ldr	r2, [pc, #212]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fa44 	bl	8000f88 <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b02:	e009      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b04:	f7fe fa40 	bl	8000f88 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	73fb      	strb	r3, [r7, #15]
        break;
 8002b16:	e005      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b18:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ef      	bne.n	8002b04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14a      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b30:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6892      	ldr	r2, [r2, #8]
 8002b40:	0211      	lsls	r1, r2, #8
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	0912      	lsrs	r2, r2, #4
 8002b48:	0452      	lsls	r2, r2, #17
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	491f      	ldr	r1, [pc, #124]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	614b      	str	r3, [r1, #20]
 8002b52:	e011      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
 8002b64:	0211      	lsls	r1, r2, #8
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6912      	ldr	r2, [r2, #16]
 8002b6a:	0852      	lsrs	r2, r2, #1
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	0652      	lsls	r2, r2, #25
 8002b70:	430a      	orrs	r2, r1
 8002b72:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b78:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a13      	ldr	r2, [pc, #76]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe fa00 	bl	8000f88 <HAL_GetTick>
 8002b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b8a:	e009      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b8c:	f7fe f9fc 	bl	8000f88 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b9e:	e005      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ef      	beq.n	8002b8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4904      	ldr	r1, [pc, #16]	@ (8002bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e049      	b.n	8002c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd ff72 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 ff66 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e047      	b.n	8002d28 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <HAL_TIM_Base_Start+0xb4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d018      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_TIM_Base_Start+0xb8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_TIM_Base_Start+0xbc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <HAL_TIM_Base_Start+0xc0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_TIM_Base_Start+0xc4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_Base_Start+0x66>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_TIM_Base_Start+0xc8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d115      	bne.n	8002d12 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <HAL_TIM_Base_Start+0xcc>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d015      	beq.n	8002d24 <HAL_TIM_Base_Start+0xa4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfe:	d011      	beq.n	8002d24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	e008      	b.n	8002d24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e000      	b.n	8002d26 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40013400 	.word	0x40013400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	00010007 	.word	0x00010007

08002d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e049      	b.n	8002df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f841 	bl	8002dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 fea6 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_TIM_PWM_Start+0x24>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e03c      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x9e>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d109      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x3e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e02f      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x9e>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d109      	bne.n	8002e6c <HAL_TIM_PWM_Start+0x58>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e022      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x9e>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d109      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x72>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e015      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x9e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d109      	bne.n	8002ea0 <HAL_TIM_PWM_Start+0x8c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e008      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x9e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e09c      	b.n	8002ff4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0xb6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	e023      	b.n	8002f12 <HAL_TIM_PWM_Start+0xfe>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xc6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	e01b      	b.n	8002f12 <HAL_TIM_PWM_Start+0xfe>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0xd6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_PWM_Start+0xfe>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0xe6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_PWM_Start+0xfe>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xf6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_PWM_Start+0xfe>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2201      	movs	r2, #1
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fb1a 	bl	8004554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	@ (8002ffc <HAL_TIM_PWM_Start+0x1e8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x13e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a34      	ldr	r2, [pc, #208]	@ (8003000 <HAL_TIM_PWM_Start+0x1ec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x13e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a32      	ldr	r2, [pc, #200]	@ (8003004 <HAL_TIM_PWM_Start+0x1f0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x13e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a31      	ldr	r2, [pc, #196]	@ (8003008 <HAL_TIM_PWM_Start+0x1f4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x13e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <HAL_TIM_PWM_Start+0x1f8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x142>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_PWM_Start+0x144>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_TIM_PWM_Start+0x1e8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d018      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <HAL_TIM_PWM_Start+0x1fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <HAL_TIM_PWM_Start+0x200>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <HAL_TIM_PWM_Start+0x204>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <HAL_TIM_PWM_Start+0x1ec>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x19e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a15      	ldr	r2, [pc, #84]	@ (8003004 <HAL_TIM_PWM_Start+0x1f0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d115      	bne.n	8002fde <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_TIM_PWM_Start+0x208>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b06      	cmp	r3, #6
 8002fc2:	d015      	beq.n	8002ff0 <HAL_TIM_PWM_Start+0x1dc>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fca:	d011      	beq.n	8002ff0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	e008      	b.n	8002ff0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e000      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40013400 	.word	0x40013400
 8003004:	40014000 	.word	0x40014000
 8003008:	40014400 	.word	0x40014400
 800300c:	40014800 	.word	0x40014800
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	00010007 	.word	0x00010007

08003020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e049      	b.n	80030c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f841 	bl	80030ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 fd3e 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_IC_Start_IT+0x1e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e023      	b.n	800314a <HAL_TIM_IC_Start_IT+0x66>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0x2e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e01b      	b.n	800314a <HAL_TIM_IC_Start_IT+0x66>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0x3e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e013      	b.n	800314a <HAL_TIM_IC_Start_IT+0x66>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d104      	bne.n	8003132 <HAL_TIM_IC_Start_IT+0x4e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e00b      	b.n	800314a <HAL_TIM_IC_Start_IT+0x66>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d104      	bne.n	8003142 <HAL_TIM_IC_Start_IT+0x5e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e003      	b.n	800314a <HAL_TIM_IC_Start_IT+0x66>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003148:	b2db      	uxtb	r3, r3
 800314a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <HAL_TIM_IC_Start_IT+0x78>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e013      	b.n	8003184 <HAL_TIM_IC_Start_IT+0xa0>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d104      	bne.n	800316c <HAL_TIM_IC_Start_IT+0x88>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e00b      	b.n	8003184 <HAL_TIM_IC_Start_IT+0xa0>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d104      	bne.n	800317c <HAL_TIM_IC_Start_IT+0x98>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e003      	b.n	8003184 <HAL_TIM_IC_Start_IT+0xa0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003182:	b2db      	uxtb	r3, r3
 8003184:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d102      	bne.n	8003192 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800318c:	7b7b      	ldrb	r3, [r7, #13]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0dd      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_IC_Start_IT+0xc2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a4:	e023      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_IC_Start_IT+0xd2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b4:	e01b      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_IC_Start_IT+0xe2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	e013      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_IC_Start_IT+0xf2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0x102>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e4:	e003      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_IC_Start_IT+0x11a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031fc:	e013      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x142>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_IC_Start_IT+0x12a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800320c:	e00b      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x142>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0x13a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800321c:	e003      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x142>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d841      	bhi.n	80032b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <HAL_TIM_IC_Start_IT+0x150>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	080032b1 	.word	0x080032b1
 800323c:	080032b1 	.word	0x080032b1
 8003240:	080032b1 	.word	0x080032b1
 8003244:	0800327b 	.word	0x0800327b
 8003248:	080032b1 	.word	0x080032b1
 800324c:	080032b1 	.word	0x080032b1
 8003250:	080032b1 	.word	0x080032b1
 8003254:	0800328d 	.word	0x0800328d
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032b1 	.word	0x080032b1
 8003260:	080032b1 	.word	0x080032b1
 8003264:	0800329f 	.word	0x0800329f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0202 	orr.w	r2, r2, #2
 8003276:	60da      	str	r2, [r3, #12]
      break;
 8003278:	e01d      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0204 	orr.w	r2, r2, #4
 8003288:	60da      	str	r2, [r3, #12]
      break;
 800328a:	e014      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	60da      	str	r2, [r3, #12]
      break;
 800329c:	e00b      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0210 	orr.w	r2, r2, #16
 80032ac:	60da      	str	r2, [r3, #12]
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d149      	bne.n	8003350 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f945 	bl	8004554 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_TIM_IC_Start_IT+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032dc:	d018      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <HAL_TIM_IC_Start_IT+0x27c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <HAL_TIM_IC_Start_IT+0x280>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003368 <HAL_TIM_IC_Start_IT+0x284>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <HAL_TIM_IC_Start_IT+0x288>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_TIM_IC_Start_IT+0x22c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <HAL_TIM_IC_Start_IT+0x28c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d115      	bne.n	800333c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <HAL_TIM_IC_Start_IT+0x290>)
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b06      	cmp	r3, #6
 8003320:	d015      	beq.n	800334e <HAL_TIM_IC_Start_IT+0x26a>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d011      	beq.n	800334e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	e008      	b.n	800334e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e000      	b.n	8003350 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40013400 	.word	0x40013400
 8003370:	40014000 	.word	0x40014000
 8003374:	00010007 	.word	0x00010007

08003378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d020      	beq.n	80033dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0202 	mvn.w	r2, #2
 80033ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fb6d 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fb5f 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb70 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d020      	beq.n	8003428 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0204 	mvn.w	r2, #4
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fb47 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb39 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb4a 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0208 	mvn.w	r2, #8
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb21 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fb13 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb24 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d020      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0210 	mvn.w	r2, #16
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2208      	movs	r2, #8
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fafb 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 faed 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fafe 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0201 	mvn.w	r2, #1
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 facb 	bl	8003a7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f001 f8d9 	bl	80046c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800352e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f001 f8d1 	bl	80046d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fab8 	bl	8003aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0220 	mvn.w	r2, #32
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f001 f899 	bl	80046b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e088      	b.n	80036b6 <HAL_TIM_IC_ConfigChannel+0x130>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11b      	bne.n	80035ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035c2:	f000 fe09 	bl	80041d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 020c 	bic.w	r2, r2, #12
 80035d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6999      	ldr	r1, [r3, #24]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	619a      	str	r2, [r3, #24]
 80035e8:	e060      	b.n	80036ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11c      	bne.n	800362a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003600:	f000 fe87 	bl	8004312 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003612:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
 8003628:	e040      	b.n	80036ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003640:	f000 fed4 	bl	80043ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020c 	bic.w	r2, r2, #12
 8003652:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69d9      	ldr	r1, [r3, #28]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	61da      	str	r2, [r3, #28]
 8003666:	e021      	b.n	80036ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d11c      	bne.n	80036a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800367e:	f000 fef1 	bl	8004464 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003690:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	021a      	lsls	r2, r3, #8
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	61da      	str	r2, [r3, #28]
 80036a6:	e001      	b.n	80036ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0ff      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b14      	cmp	r3, #20
 80036ea:	f200 80f0 	bhi.w	80038ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003749 	.word	0x08003749
 80036f8:	080038cf 	.word	0x080038cf
 80036fc:	080038cf 	.word	0x080038cf
 8003700:	080038cf 	.word	0x080038cf
 8003704:	08003789 	.word	0x08003789
 8003708:	080038cf 	.word	0x080038cf
 800370c:	080038cf 	.word	0x080038cf
 8003710:	080038cf 	.word	0x080038cf
 8003714:	080037cb 	.word	0x080037cb
 8003718:	080038cf 	.word	0x080038cf
 800371c:	080038cf 	.word	0x080038cf
 8003720:	080038cf 	.word	0x080038cf
 8003724:	0800380b 	.word	0x0800380b
 8003728:	080038cf 	.word	0x080038cf
 800372c:	080038cf 	.word	0x080038cf
 8003730:	080038cf 	.word	0x080038cf
 8003734:	0800384d 	.word	0x0800384d
 8003738:	080038cf 	.word	0x080038cf
 800373c:	080038cf 	.word	0x080038cf
 8003740:	080038cf 	.word	0x080038cf
 8003744:	0800388d 	.word	0x0800388d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fa6c 	bl	8003c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0204 	bic.w	r2, r2, #4
 8003772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6999      	ldr	r1, [r3, #24]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	619a      	str	r2, [r3, #24]
      break;
 8003786:	e0a5      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fadc 	bl	8003d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6999      	ldr	r1, [r3, #24]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
      break;
 80037c8:	e084      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fb45 	bl	8003e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0208 	orr.w	r2, r2, #8
 80037e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0204 	bic.w	r2, r2, #4
 80037f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69d9      	ldr	r1, [r3, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	61da      	str	r2, [r3, #28]
      break;
 8003808:	e064      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fbad 	bl	8003f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69d9      	ldr	r1, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	021a      	lsls	r2, r3, #8
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	61da      	str	r2, [r3, #28]
      break;
 800384a:	e043      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fbf6 	bl	8004044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0208 	orr.w	r2, r2, #8
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800388a:	e023      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc3a 	bl	800410c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038cc:	e002      	b.n	80038d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
      break;
 80038d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_ConfigClockSource+0x1c>
 8003900:	2302      	movs	r3, #2
 8003902:	e0b6      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x18a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800392e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003940:	d03e      	beq.n	80039c0 <HAL_TIM_ConfigClockSource+0xd8>
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003946:	f200 8087 	bhi.w	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394e:	f000 8086 	beq.w	8003a5e <HAL_TIM_ConfigClockSource+0x176>
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003956:	d87f      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003958:	2b70      	cmp	r3, #112	@ 0x70
 800395a:	d01a      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xaa>
 800395c:	2b70      	cmp	r3, #112	@ 0x70
 800395e:	d87b      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003960:	2b60      	cmp	r3, #96	@ 0x60
 8003962:	d050      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x11e>
 8003964:	2b60      	cmp	r3, #96	@ 0x60
 8003966:	d877      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003968:	2b50      	cmp	r3, #80	@ 0x50
 800396a:	d03c      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0xfe>
 800396c:	2b50      	cmp	r3, #80	@ 0x50
 800396e:	d873      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d058      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x13e>
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d86f      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003978:	2b30      	cmp	r3, #48	@ 0x30
 800397a:	d064      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
 800397c:	2b30      	cmp	r3, #48	@ 0x30
 800397e:	d86b      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003980:	2b20      	cmp	r3, #32
 8003982:	d060      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d867      	bhi.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05c      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
 800398c:	2b10      	cmp	r3, #16
 800398e:	d05a      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
 8003990:	e062      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	f000 fdb7 	bl	8004514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	609a      	str	r2, [r3, #8]
      break;
 80039be:	e04f      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d0:	f000 fda0 	bl	8004514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039e2:	609a      	str	r2, [r3, #8]
      break;
 80039e4:	e03c      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	461a      	mov	r2, r3
 80039f4:	f000 fc5e 	bl	80042b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2150      	movs	r1, #80	@ 0x50
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd6d 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003a04:	e02c      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a12:	461a      	mov	r2, r3
 8003a14:	f000 fcba 	bl	800438c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2160      	movs	r1, #96	@ 0x60
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd5d 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003a24:	e01c      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 fc3e 	bl	80042b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	@ 0x40
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd4d 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003a44:	e00c      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f000 fd44 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003a56:	e003      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e000      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a46      	ldr	r2, [pc, #280]	@ (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a43      	ldr	r2, [pc, #268]	@ (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	@ (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a35      	ldr	r2, [pc, #212]	@ (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01f      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b40:	d01b      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a32      	ldr	r2, [pc, #200]	@ (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d017      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	@ (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2e      	ldr	r2, [pc, #184]	@ (8003c20 <TIM_Base_SetConfig+0x140>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <TIM_Base_SetConfig+0x144>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <TIM_Base_SetConfig+0x148>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM_Base_SetConfig+0x140>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <TIM_Base_SetConfig+0x144>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_Base_SetConfig+0x148>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0201 	bic.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 0302 	bic.w	r3, r3, #2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a2c      	ldr	r2, [pc, #176]	@ (8003d38 <TIM_OC1_SetConfig+0x10c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_OC1_SetConfig+0x80>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d3c <TIM_OC1_SetConfig+0x110>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00b      	beq.n	8003cac <TIM_OC1_SetConfig+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <TIM_OC1_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_OC1_SetConfig+0x80>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a29      	ldr	r2, [pc, #164]	@ (8003d44 <TIM_OC1_SetConfig+0x118>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC1_SetConfig+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a28      	ldr	r2, [pc, #160]	@ (8003d48 <TIM_OC1_SetConfig+0x11c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10c      	bne.n	8003cc6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0308 	bic.w	r3, r3, #8
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d38 <TIM_OC1_SetConfig+0x10c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_OC1_SetConfig+0xc2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <TIM_OC1_SetConfig+0x110>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_OC1_SetConfig+0xc2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <TIM_OC1_SetConfig+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_OC1_SetConfig+0xc2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <TIM_OC1_SetConfig+0x118>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_OC1_SetConfig+0xc2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <TIM_OC1_SetConfig+0x11c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40014400 	.word	0x40014400
 8003d48:	40014800 	.word	0x40014800

08003d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 0210 	bic.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0320 	bic.w	r3, r3, #32
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a28      	ldr	r2, [pc, #160]	@ (8003e4c <TIM_OC2_SetConfig+0x100>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC2_SetConfig+0x6c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a27      	ldr	r2, [pc, #156]	@ (8003e50 <TIM_OC2_SetConfig+0x104>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10d      	bne.n	8003dd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e4c <TIM_OC2_SetConfig+0x100>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00f      	beq.n	8003dfc <TIM_OC2_SetConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <TIM_OC2_SetConfig+0x104>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_OC2_SetConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <TIM_OC2_SetConfig+0x108>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_OC2_SetConfig+0xb0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	@ (8003e58 <TIM_OC2_SetConfig+0x10c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC2_SetConfig+0xb0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a19      	ldr	r2, [pc, #100]	@ (8003e5c <TIM_OC2_SetConfig+0x110>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40013400 	.word	0x40013400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800

08003e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a27      	ldr	r2, [pc, #156]	@ (8003f5c <TIM_OC3_SetConfig+0xfc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC3_SetConfig+0x6a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	@ (8003f60 <TIM_OC3_SetConfig+0x100>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <TIM_OC3_SetConfig+0xfc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_OC3_SetConfig+0xae>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <TIM_OC3_SetConfig+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_OC3_SetConfig+0xae>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f64 <TIM_OC3_SetConfig+0x104>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_OC3_SetConfig+0xae>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <TIM_OC3_SetConfig+0x108>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_OC3_SetConfig+0xae>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <TIM_OC3_SetConfig+0x10c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d113      	bne.n	8003f36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800

08003f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC4_SetConfig+0xc0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_OC4_SetConfig+0x84>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC4_SetConfig+0xc4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_OC4_SetConfig+0x84>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <TIM_OC4_SetConfig+0xc8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_OC4_SetConfig+0x84>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC4_SetConfig+0xcc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_OC4_SetConfig+0x84>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC4_SetConfig+0xd0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d109      	bne.n	8004008 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <TIM_OC5_SetConfig+0xb4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_OC5_SetConfig+0x7a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <TIM_OC5_SetConfig+0xb8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_OC5_SetConfig+0x7a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <TIM_OC5_SetConfig+0xbc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_OC5_SetConfig+0x7a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <TIM_OC5_SetConfig+0xc0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC5_SetConfig+0x7a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a13      	ldr	r2, [pc, #76]	@ (8004108 <TIM_OC5_SetConfig+0xc4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d109      	bne.n	80040d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <TIM_OC6_SetConfig+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_OC6_SetConfig+0x7c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <TIM_OC6_SetConfig+0xbc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_OC6_SetConfig+0x7c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a16      	ldr	r2, [pc, #88]	@ (80041cc <TIM_OC6_SetConfig+0xc0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_OC6_SetConfig+0x7c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a15      	ldr	r2, [pc, #84]	@ (80041d0 <TIM_OC6_SetConfig+0xc4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC6_SetConfig+0x7c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC6_SetConfig+0xc8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d109      	bne.n	800419c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800418e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40013400 	.word	0x40013400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 0201 	bic.w	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a26      	ldr	r2, [pc, #152]	@ (800429c <TIM_TI1_SetConfig+0xc4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d017      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420c:	d013      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a23      	ldr	r2, [pc, #140]	@ (80042a0 <TIM_TI1_SetConfig+0xc8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a22      	ldr	r2, [pc, #136]	@ (80042a4 <TIM_TI1_SetConfig+0xcc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <TIM_TI1_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <TIM_TI1_SetConfig+0xd4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_TI1_SetConfig+0x5e>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <TIM_TI1_SetConfig+0xd8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <TIM_TI1_SetConfig+0x62>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <TIM_TI1_SetConfig+0x64>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e003      	b.n	800425a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	b2db      	uxtb	r3, r3
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f023 030a 	bic.w	r3, r3, #10
 8004274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 030a 	and.w	r3, r3, #10
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000

080042b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f023 030a 	bic.w	r3, r3, #10
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004312:	b480      	push	{r7}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0210 	bic.w	r2, r3, #16
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	b29b      	uxth	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004364:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004428:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	b2db      	uxtb	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004490:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	031b      	lsls	r3, r3, #12
 80044bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f043 0307 	orr.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800452e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	431a      	orrs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e068      	b.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2d      	ldr	r2, [pc, #180]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d108      	bne.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1e      	ldr	r2, [pc, #120]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d018      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1b      	ldr	r2, [pc, #108]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a13      	ldr	r2, [pc, #76]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10c      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40013400 	.word	0x40013400
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40014000 	.word	0x40014000

080046b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e040      	b.n	8004780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fa8c 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fb6a 	bl	8004e0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8af 	bl	800489c <UART_SetConfig>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e01b      	b.n	8004780 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fbe9 	bl	8004f50 <UART_CheckIdleState>
 800477e:	4603      	mov	r3, r0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479c:	2b20      	cmp	r3, #32
 800479e:	d177      	bne.n	8004890 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_UART_Transmit+0x24>
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e070      	b.n	8004892 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2221      	movs	r2, #33	@ 0x21
 80047bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047be:	f7fc fbe3 	bl	8000f88 <HAL_GetTick>
 80047c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047dc:	d108      	bne.n	80047f0 <HAL_UART_Transmit+0x68>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	e003      	b.n	80047f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047f8:	e02f      	b.n	800485a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	@ 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fc4b 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e03b      	b.n	8004892 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	881a      	ldrh	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482c:	b292      	uxth	r2, r2
 800482e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3302      	adds	r3, #2
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e007      	b.n	8004848 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1c9      	bne.n	80047fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2140      	movs	r1, #64	@ 0x40
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fc15 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e005      	b.n	8004892 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b08a      	sub	sp, #40	@ 0x28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4ba4      	ldr	r3, [pc, #656]	@ (8004b5c <UART_SetConfig+0x2c0>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a99      	ldr	r2, [pc, #612]	@ (8004b60 <UART_SetConfig+0x2c4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	4313      	orrs	r3, r2
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a90      	ldr	r2, [pc, #576]	@ (8004b64 <UART_SetConfig+0x2c8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d126      	bne.n	8004974 <UART_SetConfig+0xd8>
 8004926:	4b90      	ldr	r3, [pc, #576]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d81b      	bhi.n	800496c <UART_SetConfig+0xd0>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0xa0>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004955 	.word	0x08004955
 8004948:	08004965 	.word	0x08004965
 800494c:	2301      	movs	r3, #1
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004952:	e116      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495a:	e112      	b.n	8004b82 <UART_SetConfig+0x2e6>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004962:	e10e      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496a:	e10a      	b.n	8004b82 <UART_SetConfig+0x2e6>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004972:	e106      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a7c      	ldr	r2, [pc, #496]	@ (8004b6c <UART_SetConfig+0x2d0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d138      	bne.n	80049f0 <UART_SetConfig+0x154>
 800497e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d82d      	bhi.n	80049e8 <UART_SetConfig+0x14c>
 800498c:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0xf8>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049e9 	.word	0x080049e9
 800499c:	080049e9 	.word	0x080049e9
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049e9 	.word	0x080049e9
 80049ac:	080049e9 	.word	0x080049e9
 80049b0:	080049e9 	.word	0x080049e9
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	080049e9 	.word	0x080049e9
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ce:	e0d8      	b.n	8004b82 <UART_SetConfig+0x2e6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e0d4      	b.n	8004b82 <UART_SetConfig+0x2e6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049de:	e0d0      	b.n	8004b82 <UART_SetConfig+0x2e6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e0cc      	b.n	8004b82 <UART_SetConfig+0x2e6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e0c8      	b.n	8004b82 <UART_SetConfig+0x2e6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b70 <UART_SetConfig+0x2d4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d125      	bne.n	8004a46 <UART_SetConfig+0x1aa>
 80049fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004b68 <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a04:	2b30      	cmp	r3, #48	@ 0x30
 8004a06:	d016      	beq.n	8004a36 <UART_SetConfig+0x19a>
 8004a08:	2b30      	cmp	r3, #48	@ 0x30
 8004a0a:	d818      	bhi.n	8004a3e <UART_SetConfig+0x1a2>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d00a      	beq.n	8004a26 <UART_SetConfig+0x18a>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d814      	bhi.n	8004a3e <UART_SetConfig+0x1a2>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <UART_SetConfig+0x182>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d008      	beq.n	8004a2e <UART_SetConfig+0x192>
 8004a1c:	e00f      	b.n	8004a3e <UART_SetConfig+0x1a2>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a24:	e0ad      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a26:	2302      	movs	r3, #2
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2c:	e0a9      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a34:	e0a5      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a36:	2308      	movs	r3, #8
 8004a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3c:	e0a1      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a3e:	2310      	movs	r3, #16
 8004a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a44:	e09d      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b74 <UART_SetConfig+0x2d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d125      	bne.n	8004a9c <UART_SetConfig+0x200>
 8004a50:	4b45      	ldr	r3, [pc, #276]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a5c:	d016      	beq.n	8004a8c <UART_SetConfig+0x1f0>
 8004a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a60:	d818      	bhi.n	8004a94 <UART_SetConfig+0x1f8>
 8004a62:	2b80      	cmp	r3, #128	@ 0x80
 8004a64:	d00a      	beq.n	8004a7c <UART_SetConfig+0x1e0>
 8004a66:	2b80      	cmp	r3, #128	@ 0x80
 8004a68:	d814      	bhi.n	8004a94 <UART_SetConfig+0x1f8>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <UART_SetConfig+0x1d8>
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d008      	beq.n	8004a84 <UART_SetConfig+0x1e8>
 8004a72:	e00f      	b.n	8004a94 <UART_SetConfig+0x1f8>
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e082      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e07e      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e07a      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a92:	e076      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e072      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a35      	ldr	r2, [pc, #212]	@ (8004b78 <UART_SetConfig+0x2dc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d12a      	bne.n	8004afc <UART_SetConfig+0x260>
 8004aa6:	4b30      	ldr	r3, [pc, #192]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab4:	d01a      	beq.n	8004aec <UART_SetConfig+0x250>
 8004ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aba:	d81b      	bhi.n	8004af4 <UART_SetConfig+0x258>
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac0:	d00c      	beq.n	8004adc <UART_SetConfig+0x240>
 8004ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac6:	d815      	bhi.n	8004af4 <UART_SetConfig+0x258>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <UART_SetConfig+0x238>
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad0:	d008      	beq.n	8004ae4 <UART_SetConfig+0x248>
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x258>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e052      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004adc:	2302      	movs	r3, #2
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e04e      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e04a      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004aec:	2308      	movs	r3, #8
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e046      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e042      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <UART_SetConfig+0x2c4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d13a      	bne.n	8004b7c <UART_SetConfig+0x2e0>
 8004b06:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <UART_SetConfig+0x2cc>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b14:	d01a      	beq.n	8004b4c <UART_SetConfig+0x2b0>
 8004b16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b1a:	d81b      	bhi.n	8004b54 <UART_SetConfig+0x2b8>
 8004b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b20:	d00c      	beq.n	8004b3c <UART_SetConfig+0x2a0>
 8004b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b26:	d815      	bhi.n	8004b54 <UART_SetConfig+0x2b8>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <UART_SetConfig+0x298>
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x2a8>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x2b8>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e022      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e01e      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e01a      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b52:	e016      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e012      	b.n	8004b82 <UART_SetConfig+0x2e6>
 8004b5c:	efff69f3 	.word	0xefff69f3
 8004b60:	40008000 	.word	0x40008000
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40004400 	.word	0x40004400
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40004c00 	.word	0x40004c00
 8004b78:	40005000 	.word	0x40005000
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a9f      	ldr	r2, [pc, #636]	@ (8004e04 <UART_SetConfig+0x568>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d17a      	bne.n	8004c82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d824      	bhi.n	8004bde <UART_SetConfig+0x342>
 8004b94:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <UART_SetConfig+0x300>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bdf 	.word	0x08004bdf
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bdf 	.word	0x08004bdf
 8004bac:	08004bcf 	.word	0x08004bcf
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bdf 	.word	0x08004bdf
 8004bbc:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fd fabe 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	61f8      	str	r0, [r7, #28]
        break;
 8004bc6:	e010      	b.n	8004bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8004e08 <UART_SetConfig+0x56c>)
 8004bca:	61fb      	str	r3, [r7, #28]
        break;
 8004bcc:	e00d      	b.n	8004bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fd fa1f 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8004bd2:	61f8      	str	r0, [r7, #28]
        break;
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bda:	61fb      	str	r3, [r7, #28]
        break;
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80fb 	beq.w	8004de8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d305      	bcc.n	8004c0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d903      	bls.n	8004c16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c14:	e0e8      	b.n	8004de8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	4615      	mov	r5, r2
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	022b      	lsls	r3, r5, #8
 8004c28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c2c:	0222      	lsls	r2, r4, #8
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	6849      	ldr	r1, [r1, #4]
 8004c32:	0849      	lsrs	r1, r1, #1
 8004c34:	2000      	movs	r0, #0
 8004c36:	4688      	mov	r8, r1
 8004c38:	4681      	mov	r9, r0
 8004c3a:	eb12 0a08 	adds.w	sl, r2, r8
 8004c3e:	eb43 0b09 	adc.w	fp, r3, r9
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c50:	4650      	mov	r0, sl
 8004c52:	4659      	mov	r1, fp
 8004c54:	f7fb fb0c 	bl	8000270 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c66:	d308      	bcc.n	8004c7a <UART_SetConfig+0x3de>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6e:	d204      	bcs.n	8004c7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e0b6      	b.n	8004de8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c80:	e0b2      	b.n	8004de8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8a:	d15e      	bne.n	8004d4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d828      	bhi.n	8004ce6 <UART_SetConfig+0x44a>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <UART_SetConfig+0x400>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004ce7 	.word	0x08004ce7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fd fa3e 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	61f8      	str	r0, [r7, #28]
        break;
 8004cc6:	e014      	b.n	8004cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fd fa50 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8004ccc:	61f8      	str	r0, [r7, #28]
        break;
 8004cce:	e010      	b.n	8004cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004e08 <UART_SetConfig+0x56c>)
 8004cd2:	61fb      	str	r3, [r7, #28]
        break;
 8004cd4:	e00d      	b.n	8004cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fd f99b 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8004cda:	61f8      	str	r0, [r7, #28]
        break;
 8004cdc:	e009      	b.n	8004cf2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce2:	61fb      	str	r3, [r7, #28]
        break;
 8004ce4:	e005      	b.n	8004cf2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d077      	beq.n	8004de8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005a      	lsls	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	441a      	add	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d916      	bls.n	8004d42 <UART_SetConfig+0x4a6>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1a:	d212      	bcs.n	8004d42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f023 030f 	bic.w	r3, r3, #15
 8004d24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	8afb      	ldrh	r3, [r7, #22]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	8afa      	ldrh	r2, [r7, #22]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e052      	b.n	8004de8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d48:	e04e      	b.n	8004de8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d827      	bhi.n	8004da2 <UART_SetConfig+0x506>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0x4bc>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004da3 	.word	0x08004da3
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fd f9e0 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004d80:	61f8      	str	r0, [r7, #28]
        break;
 8004d82:	e014      	b.n	8004dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fd f9f2 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8004d88:	61f8      	str	r0, [r7, #28]
        break;
 8004d8a:	e010      	b.n	8004dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <UART_SetConfig+0x56c>)
 8004d8e:	61fb      	str	r3, [r7, #28]
        break;
 8004d90:	e00d      	b.n	8004dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fd f93d 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8004d96:	61f8      	str	r0, [r7, #28]
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d9e:	61fb      	str	r3, [r7, #28]
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dac:	bf00      	nop
    }

    if (pclk != 0U)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d019      	beq.n	8004de8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	085a      	lsrs	r2, r3, #1
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d909      	bls.n	8004de2 <UART_SetConfig+0x546>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd4:	d205      	bcs.n	8004de2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e002      	b.n	8004de8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004df4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	@ 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e02:	bf00      	nop
 8004e04:	40008000 	.word	0x40008000
 8004e08:	00f42400 	.word	0x00f42400

08004e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f0a:	d10a      	bne.n	8004f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b098      	sub	sp, #96	@ 0x60
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f60:	f7fc f812 	bl	8000f88 <HAL_GetTick>
 8004f64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d12e      	bne.n	8004fd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f88c 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d021      	beq.n	8004fd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e062      	b.n	8005098 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d149      	bne.n	8005074 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f856 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03c      	beq.n	8005074 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	623b      	str	r3, [r7, #32]
   return(result);
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
 800501a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800501e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e6      	bne.n	8004ffa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	60fb      	str	r3, [r7, #12]
   return(result);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800504c:	61fa      	str	r2, [r7, #28]
 800504e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	617b      	str	r3, [r7, #20]
   return(result);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e5      	bne.n	800502c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e011      	b.n	8005098 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3758      	adds	r7, #88	@ 0x58
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	e04f      	b.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d04b      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fb ff65 	bl	8000f88 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e04e      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d037      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b80      	cmp	r3, #128	@ 0x80
 80050e6:	d034      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d031      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d110      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2208      	movs	r2, #8
 8005102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f838 	bl	800517a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2208      	movs	r2, #8
 800510e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e029      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800512c:	d111      	bne.n	8005152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f81e 	bl	800517a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e00f      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d0a0      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517a:	b480      	push	{r7}
 800517c:	b095      	sub	sp, #84	@ 0x54
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d118      	bne.n	8005222 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	613b      	str	r3, [r7, #16]
   return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005236:	bf00      	nop
 8005238:	3754      	adds	r7, #84	@ 0x54
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <siprintf>:
 8005244:	b40e      	push	{r1, r2, r3}
 8005246:	b500      	push	{lr}
 8005248:	b09c      	sub	sp, #112	@ 0x70
 800524a:	ab1d      	add	r3, sp, #116	@ 0x74
 800524c:	9002      	str	r0, [sp, #8]
 800524e:	9006      	str	r0, [sp, #24]
 8005250:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005254:	4809      	ldr	r0, [pc, #36]	@ (800527c <siprintf+0x38>)
 8005256:	9107      	str	r1, [sp, #28]
 8005258:	9104      	str	r1, [sp, #16]
 800525a:	4909      	ldr	r1, [pc, #36]	@ (8005280 <siprintf+0x3c>)
 800525c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005260:	9105      	str	r1, [sp, #20]
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	a902      	add	r1, sp, #8
 8005268:	f000 f994 	bl	8005594 <_svfiprintf_r>
 800526c:	9b02      	ldr	r3, [sp, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	b01c      	add	sp, #112	@ 0x70
 8005274:	f85d eb04 	ldr.w	lr, [sp], #4
 8005278:	b003      	add	sp, #12
 800527a:	4770      	bx	lr
 800527c:	2000000c 	.word	0x2000000c
 8005280:	ffff0208 	.word	0xffff0208

08005284 <memset>:
 8005284:	4402      	add	r2, r0
 8005286:	4603      	mov	r3, r0
 8005288:	4293      	cmp	r3, r2
 800528a:	d100      	bne.n	800528e <memset+0xa>
 800528c:	4770      	bx	lr
 800528e:	f803 1b01 	strb.w	r1, [r3], #1
 8005292:	e7f9      	b.n	8005288 <memset+0x4>

08005294 <__errno>:
 8005294:	4b01      	ldr	r3, [pc, #4]	@ (800529c <__errno+0x8>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4d0d      	ldr	r5, [pc, #52]	@ (80052d8 <__libc_init_array+0x38>)
 80052a4:	4c0d      	ldr	r4, [pc, #52]	@ (80052dc <__libc_init_array+0x3c>)
 80052a6:	1b64      	subs	r4, r4, r5
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	2600      	movs	r6, #0
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	4d0b      	ldr	r5, [pc, #44]	@ (80052e0 <__libc_init_array+0x40>)
 80052b2:	4c0c      	ldr	r4, [pc, #48]	@ (80052e4 <__libc_init_array+0x44>)
 80052b4:	f000 fc66 	bl	8005b84 <_init>
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	2600      	movs	r6, #0
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	08005c4c 	.word	0x08005c4c
 80052dc:	08005c4c 	.word	0x08005c4c
 80052e0:	08005c4c 	.word	0x08005c4c
 80052e4:	08005c50 	.word	0x08005c50

080052e8 <__retarget_lock_acquire_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_release_recursive>:
 80052ea:	4770      	bx	lr

080052ec <_free_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4605      	mov	r5, r0
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d041      	beq.n	8005378 <_free_r+0x8c>
 80052f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f8:	1f0c      	subs	r4, r1, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb8      	it	lt
 80052fe:	18e4      	addlt	r4, r4, r3
 8005300:	f000 f8e0 	bl	80054c4 <__malloc_lock>
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <_free_r+0x90>)
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	b933      	cbnz	r3, 8005318 <_free_r+0x2c>
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	6014      	str	r4, [r2, #0]
 800530e:	4628      	mov	r0, r5
 8005310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005314:	f000 b8dc 	b.w	80054d0 <__malloc_unlock>
 8005318:	42a3      	cmp	r3, r4
 800531a:	d908      	bls.n	800532e <_free_r+0x42>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf01      	itttt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	1809      	addeq	r1, r1, r0
 800532a:	6021      	streq	r1, [r4, #0]
 800532c:	e7ed      	b.n	800530a <_free_r+0x1e>
 800532e:	461a      	mov	r2, r3
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b10b      	cbz	r3, 8005338 <_free_r+0x4c>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d9fa      	bls.n	800532e <_free_r+0x42>
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	1850      	adds	r0, r2, r1
 800533c:	42a0      	cmp	r0, r4
 800533e:	d10b      	bne.n	8005358 <_free_r+0x6c>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	4401      	add	r1, r0
 8005344:	1850      	adds	r0, r2, r1
 8005346:	4283      	cmp	r3, r0
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	d1e0      	bne.n	800530e <_free_r+0x22>
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	4408      	add	r0, r1
 8005354:	6010      	str	r0, [r2, #0]
 8005356:	e7da      	b.n	800530e <_free_r+0x22>
 8005358:	d902      	bls.n	8005360 <_free_r+0x74>
 800535a:	230c      	movs	r3, #12
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	e7d6      	b.n	800530e <_free_r+0x22>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf04      	itt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	bf04      	itt	eq
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7ca      	b.n	800530e <_free_r+0x22>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	20000344 	.word	0x20000344

08005380 <sbrk_aligned>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4e0f      	ldr	r6, [pc, #60]	@ (80053c0 <sbrk_aligned+0x40>)
 8005384:	460c      	mov	r4, r1
 8005386:	6831      	ldr	r1, [r6, #0]
 8005388:	4605      	mov	r5, r0
 800538a:	b911      	cbnz	r1, 8005392 <sbrk_aligned+0x12>
 800538c:	f000 fba6 	bl	8005adc <_sbrk_r>
 8005390:	6030      	str	r0, [r6, #0]
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fba1 	bl	8005adc <_sbrk_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d103      	bne.n	80053a6 <sbrk_aligned+0x26>
 800539e:	f04f 34ff 	mov.w	r4, #4294967295
 80053a2:	4620      	mov	r0, r4
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	1cc4      	adds	r4, r0, #3
 80053a8:	f024 0403 	bic.w	r4, r4, #3
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d0f8      	beq.n	80053a2 <sbrk_aligned+0x22>
 80053b0:	1a21      	subs	r1, r4, r0
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 fb92 	bl	8005adc <_sbrk_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d1f2      	bne.n	80053a2 <sbrk_aligned+0x22>
 80053bc:	e7ef      	b.n	800539e <sbrk_aligned+0x1e>
 80053be:	bf00      	nop
 80053c0:	20000340 	.word	0x20000340

080053c4 <_malloc_r>:
 80053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	1ccd      	adds	r5, r1, #3
 80053ca:	f025 0503 	bic.w	r5, r5, #3
 80053ce:	3508      	adds	r5, #8
 80053d0:	2d0c      	cmp	r5, #12
 80053d2:	bf38      	it	cc
 80053d4:	250c      	movcc	r5, #12
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	4606      	mov	r6, r0
 80053da:	db01      	blt.n	80053e0 <_malloc_r+0x1c>
 80053dc:	42a9      	cmp	r1, r5
 80053de:	d904      	bls.n	80053ea <_malloc_r+0x26>
 80053e0:	230c      	movs	r3, #12
 80053e2:	6033      	str	r3, [r6, #0]
 80053e4:	2000      	movs	r0, #0
 80053e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054c0 <_malloc_r+0xfc>
 80053ee:	f000 f869 	bl	80054c4 <__malloc_lock>
 80053f2:	f8d8 3000 	ldr.w	r3, [r8]
 80053f6:	461c      	mov	r4, r3
 80053f8:	bb44      	cbnz	r4, 800544c <_malloc_r+0x88>
 80053fa:	4629      	mov	r1, r5
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff ffbf 	bl	8005380 <sbrk_aligned>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	4604      	mov	r4, r0
 8005406:	d158      	bne.n	80054ba <_malloc_r+0xf6>
 8005408:	f8d8 4000 	ldr.w	r4, [r8]
 800540c:	4627      	mov	r7, r4
 800540e:	2f00      	cmp	r7, #0
 8005410:	d143      	bne.n	800549a <_malloc_r+0xd6>
 8005412:	2c00      	cmp	r4, #0
 8005414:	d04b      	beq.n	80054ae <_malloc_r+0xea>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	4639      	mov	r1, r7
 800541a:	4630      	mov	r0, r6
 800541c:	eb04 0903 	add.w	r9, r4, r3
 8005420:	f000 fb5c 	bl	8005adc <_sbrk_r>
 8005424:	4581      	cmp	r9, r0
 8005426:	d142      	bne.n	80054ae <_malloc_r+0xea>
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	1a6d      	subs	r5, r5, r1
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ffa6 	bl	8005380 <sbrk_aligned>
 8005434:	3001      	adds	r0, #1
 8005436:	d03a      	beq.n	80054ae <_malloc_r+0xea>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	442b      	add	r3, r5
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	f8d8 3000 	ldr.w	r3, [r8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	bb62      	cbnz	r2, 80054a0 <_malloc_r+0xdc>
 8005446:	f8c8 7000 	str.w	r7, [r8]
 800544a:	e00f      	b.n	800546c <_malloc_r+0xa8>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	1b52      	subs	r2, r2, r5
 8005450:	d420      	bmi.n	8005494 <_malloc_r+0xd0>
 8005452:	2a0b      	cmp	r2, #11
 8005454:	d917      	bls.n	8005486 <_malloc_r+0xc2>
 8005456:	1961      	adds	r1, r4, r5
 8005458:	42a3      	cmp	r3, r4
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	bf18      	it	ne
 800545e:	6059      	strne	r1, [r3, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	bf08      	it	eq
 8005464:	f8c8 1000 	streq.w	r1, [r8]
 8005468:	5162      	str	r2, [r4, r5]
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f82f 	bl	80054d0 <__malloc_unlock>
 8005472:	f104 000b 	add.w	r0, r4, #11
 8005476:	1d23      	adds	r3, r4, #4
 8005478:	f020 0007 	bic.w	r0, r0, #7
 800547c:	1ac2      	subs	r2, r0, r3
 800547e:	bf1c      	itt	ne
 8005480:	1a1b      	subne	r3, r3, r0
 8005482:	50a3      	strne	r3, [r4, r2]
 8005484:	e7af      	b.n	80053e6 <_malloc_r+0x22>
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	42a3      	cmp	r3, r4
 800548a:	bf0c      	ite	eq
 800548c:	f8c8 2000 	streq.w	r2, [r8]
 8005490:	605a      	strne	r2, [r3, #4]
 8005492:	e7eb      	b.n	800546c <_malloc_r+0xa8>
 8005494:	4623      	mov	r3, r4
 8005496:	6864      	ldr	r4, [r4, #4]
 8005498:	e7ae      	b.n	80053f8 <_malloc_r+0x34>
 800549a:	463c      	mov	r4, r7
 800549c:	687f      	ldr	r7, [r7, #4]
 800549e:	e7b6      	b.n	800540e <_malloc_r+0x4a>
 80054a0:	461a      	mov	r2, r3
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d1fb      	bne.n	80054a0 <_malloc_r+0xdc>
 80054a8:	2300      	movs	r3, #0
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e7de      	b.n	800546c <_malloc_r+0xa8>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f80c 	bl	80054d0 <__malloc_unlock>
 80054b8:	e794      	b.n	80053e4 <_malloc_r+0x20>
 80054ba:	6005      	str	r5, [r0, #0]
 80054bc:	e7d6      	b.n	800546c <_malloc_r+0xa8>
 80054be:	bf00      	nop
 80054c0:	20000344 	.word	0x20000344

080054c4 <__malloc_lock>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__malloc_lock+0x8>)
 80054c6:	f7ff bf0f 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	2000033c 	.word	0x2000033c

080054d0 <__malloc_unlock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_unlock+0x8>)
 80054d2:	f7ff bf0a 	b.w	80052ea <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	2000033c 	.word	0x2000033c

080054dc <__ssputs_r>:
 80054dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	688e      	ldr	r6, [r1, #8]
 80054e2:	461f      	mov	r7, r3
 80054e4:	42be      	cmp	r6, r7
 80054e6:	680b      	ldr	r3, [r1, #0]
 80054e8:	4682      	mov	sl, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4690      	mov	r8, r2
 80054ee:	d82d      	bhi.n	800554c <__ssputs_r+0x70>
 80054f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054f8:	d026      	beq.n	8005548 <__ssputs_r+0x6c>
 80054fa:	6965      	ldr	r5, [r4, #20]
 80054fc:	6909      	ldr	r1, [r1, #16]
 80054fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005502:	eba3 0901 	sub.w	r9, r3, r1
 8005506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800550a:	1c7b      	adds	r3, r7, #1
 800550c:	444b      	add	r3, r9
 800550e:	106d      	asrs	r5, r5, #1
 8005510:	429d      	cmp	r5, r3
 8005512:	bf38      	it	cc
 8005514:	461d      	movcc	r5, r3
 8005516:	0553      	lsls	r3, r2, #21
 8005518:	d527      	bpl.n	800556a <__ssputs_r+0x8e>
 800551a:	4629      	mov	r1, r5
 800551c:	f7ff ff52 	bl	80053c4 <_malloc_r>
 8005520:	4606      	mov	r6, r0
 8005522:	b360      	cbz	r0, 800557e <__ssputs_r+0xa2>
 8005524:	6921      	ldr	r1, [r4, #16]
 8005526:	464a      	mov	r2, r9
 8005528:	f000 fae8 	bl	8005afc <memcpy>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	6126      	str	r6, [r4, #16]
 800553a:	6165      	str	r5, [r4, #20]
 800553c:	444e      	add	r6, r9
 800553e:	eba5 0509 	sub.w	r5, r5, r9
 8005542:	6026      	str	r6, [r4, #0]
 8005544:	60a5      	str	r5, [r4, #8]
 8005546:	463e      	mov	r6, r7
 8005548:	42be      	cmp	r6, r7
 800554a:	d900      	bls.n	800554e <__ssputs_r+0x72>
 800554c:	463e      	mov	r6, r7
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	4632      	mov	r2, r6
 8005552:	4641      	mov	r1, r8
 8005554:	f000 faa8 	bl	8005aa8 <memmove>
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	1b9b      	subs	r3, r3, r6
 800555c:	60a3      	str	r3, [r4, #8]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	4433      	add	r3, r6
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556a:	462a      	mov	r2, r5
 800556c:	f000 fad4 	bl	8005b18 <_realloc_r>
 8005570:	4606      	mov	r6, r0
 8005572:	2800      	cmp	r0, #0
 8005574:	d1e0      	bne.n	8005538 <__ssputs_r+0x5c>
 8005576:	6921      	ldr	r1, [r4, #16]
 8005578:	4650      	mov	r0, sl
 800557a:	f7ff feb7 	bl	80052ec <_free_r>
 800557e:	230c      	movs	r3, #12
 8005580:	f8ca 3000 	str.w	r3, [sl]
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	e7e9      	b.n	8005566 <__ssputs_r+0x8a>
	...

08005594 <_svfiprintf_r>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	4698      	mov	r8, r3
 800559a:	898b      	ldrh	r3, [r1, #12]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	b09d      	sub	sp, #116	@ 0x74
 80055a0:	4607      	mov	r7, r0
 80055a2:	460d      	mov	r5, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	d510      	bpl.n	80055ca <_svfiprintf_r+0x36>
 80055a8:	690b      	ldr	r3, [r1, #16]
 80055aa:	b973      	cbnz	r3, 80055ca <_svfiprintf_r+0x36>
 80055ac:	2140      	movs	r1, #64	@ 0x40
 80055ae:	f7ff ff09 	bl	80053c4 <_malloc_r>
 80055b2:	6028      	str	r0, [r5, #0]
 80055b4:	6128      	str	r0, [r5, #16]
 80055b6:	b930      	cbnz	r0, 80055c6 <_svfiprintf_r+0x32>
 80055b8:	230c      	movs	r3, #12
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	b01d      	add	sp, #116	@ 0x74
 80055c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c6:	2340      	movs	r3, #64	@ 0x40
 80055c8:	616b      	str	r3, [r5, #20]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ce:	2320      	movs	r3, #32
 80055d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055d8:	2330      	movs	r3, #48	@ 0x30
 80055da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005778 <_svfiprintf_r+0x1e4>
 80055de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055e2:	f04f 0901 	mov.w	r9, #1
 80055e6:	4623      	mov	r3, r4
 80055e8:	469a      	mov	sl, r3
 80055ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ee:	b10a      	cbz	r2, 80055f4 <_svfiprintf_r+0x60>
 80055f0:	2a25      	cmp	r2, #37	@ 0x25
 80055f2:	d1f9      	bne.n	80055e8 <_svfiprintf_r+0x54>
 80055f4:	ebba 0b04 	subs.w	fp, sl, r4
 80055f8:	d00b      	beq.n	8005612 <_svfiprintf_r+0x7e>
 80055fa:	465b      	mov	r3, fp
 80055fc:	4622      	mov	r2, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	4638      	mov	r0, r7
 8005602:	f7ff ff6b 	bl	80054dc <__ssputs_r>
 8005606:	3001      	adds	r0, #1
 8005608:	f000 80a7 	beq.w	800575a <_svfiprintf_r+0x1c6>
 800560c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800560e:	445a      	add	r2, fp
 8005610:	9209      	str	r2, [sp, #36]	@ 0x24
 8005612:	f89a 3000 	ldrb.w	r3, [sl]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 809f 	beq.w	800575a <_svfiprintf_r+0x1c6>
 800561c:	2300      	movs	r3, #0
 800561e:	f04f 32ff 	mov.w	r2, #4294967295
 8005622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005626:	f10a 0a01 	add.w	sl, sl, #1
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005632:	931a      	str	r3, [sp, #104]	@ 0x68
 8005634:	4654      	mov	r4, sl
 8005636:	2205      	movs	r2, #5
 8005638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800563c:	484e      	ldr	r0, [pc, #312]	@ (8005778 <_svfiprintf_r+0x1e4>)
 800563e:	f7fa fdc7 	bl	80001d0 <memchr>
 8005642:	9a04      	ldr	r2, [sp, #16]
 8005644:	b9d8      	cbnz	r0, 800567e <_svfiprintf_r+0xea>
 8005646:	06d0      	lsls	r0, r2, #27
 8005648:	bf44      	itt	mi
 800564a:	2320      	movmi	r3, #32
 800564c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005650:	0711      	lsls	r1, r2, #28
 8005652:	bf44      	itt	mi
 8005654:	232b      	movmi	r3, #43	@ 0x2b
 8005656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800565a:	f89a 3000 	ldrb.w	r3, [sl]
 800565e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005660:	d015      	beq.n	800568e <_svfiprintf_r+0xfa>
 8005662:	9a07      	ldr	r2, [sp, #28]
 8005664:	4654      	mov	r4, sl
 8005666:	2000      	movs	r0, #0
 8005668:	f04f 0c0a 	mov.w	ip, #10
 800566c:	4621      	mov	r1, r4
 800566e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005672:	3b30      	subs	r3, #48	@ 0x30
 8005674:	2b09      	cmp	r3, #9
 8005676:	d94b      	bls.n	8005710 <_svfiprintf_r+0x17c>
 8005678:	b1b0      	cbz	r0, 80056a8 <_svfiprintf_r+0x114>
 800567a:	9207      	str	r2, [sp, #28]
 800567c:	e014      	b.n	80056a8 <_svfiprintf_r+0x114>
 800567e:	eba0 0308 	sub.w	r3, r0, r8
 8005682:	fa09 f303 	lsl.w	r3, r9, r3
 8005686:	4313      	orrs	r3, r2
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	46a2      	mov	sl, r4
 800568c:	e7d2      	b.n	8005634 <_svfiprintf_r+0xa0>
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	1d19      	adds	r1, r3, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	9103      	str	r1, [sp, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfbb      	ittet	lt
 800569a:	425b      	neglt	r3, r3
 800569c:	f042 0202 	orrlt.w	r2, r2, #2
 80056a0:	9307      	strge	r3, [sp, #28]
 80056a2:	9307      	strlt	r3, [sp, #28]
 80056a4:	bfb8      	it	lt
 80056a6:	9204      	strlt	r2, [sp, #16]
 80056a8:	7823      	ldrb	r3, [r4, #0]
 80056aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80056ac:	d10a      	bne.n	80056c4 <_svfiprintf_r+0x130>
 80056ae:	7863      	ldrb	r3, [r4, #1]
 80056b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b2:	d132      	bne.n	800571a <_svfiprintf_r+0x186>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	9203      	str	r2, [sp, #12]
 80056bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056c0:	3402      	adds	r4, #2
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005788 <_svfiprintf_r+0x1f4>
 80056c8:	7821      	ldrb	r1, [r4, #0]
 80056ca:	2203      	movs	r2, #3
 80056cc:	4650      	mov	r0, sl
 80056ce:	f7fa fd7f 	bl	80001d0 <memchr>
 80056d2:	b138      	cbz	r0, 80056e4 <_svfiprintf_r+0x150>
 80056d4:	9b04      	ldr	r3, [sp, #16]
 80056d6:	eba0 000a 	sub.w	r0, r0, sl
 80056da:	2240      	movs	r2, #64	@ 0x40
 80056dc:	4082      	lsls	r2, r0
 80056de:	4313      	orrs	r3, r2
 80056e0:	3401      	adds	r4, #1
 80056e2:	9304      	str	r3, [sp, #16]
 80056e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e8:	4824      	ldr	r0, [pc, #144]	@ (800577c <_svfiprintf_r+0x1e8>)
 80056ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056ee:	2206      	movs	r2, #6
 80056f0:	f7fa fd6e 	bl	80001d0 <memchr>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d036      	beq.n	8005766 <_svfiprintf_r+0x1d2>
 80056f8:	4b21      	ldr	r3, [pc, #132]	@ (8005780 <_svfiprintf_r+0x1ec>)
 80056fa:	bb1b      	cbnz	r3, 8005744 <_svfiprintf_r+0x1b0>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	3307      	adds	r3, #7
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	3308      	adds	r3, #8
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570a:	4433      	add	r3, r6
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	e76a      	b.n	80055e6 <_svfiprintf_r+0x52>
 8005710:	fb0c 3202 	mla	r2, ip, r2, r3
 8005714:	460c      	mov	r4, r1
 8005716:	2001      	movs	r0, #1
 8005718:	e7a8      	b.n	800566c <_svfiprintf_r+0xd8>
 800571a:	2300      	movs	r3, #0
 800571c:	3401      	adds	r4, #1
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	4619      	mov	r1, r3
 8005722:	f04f 0c0a 	mov.w	ip, #10
 8005726:	4620      	mov	r0, r4
 8005728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800572c:	3a30      	subs	r2, #48	@ 0x30
 800572e:	2a09      	cmp	r2, #9
 8005730:	d903      	bls.n	800573a <_svfiprintf_r+0x1a6>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0c6      	beq.n	80056c4 <_svfiprintf_r+0x130>
 8005736:	9105      	str	r1, [sp, #20]
 8005738:	e7c4      	b.n	80056c4 <_svfiprintf_r+0x130>
 800573a:	fb0c 2101 	mla	r1, ip, r1, r2
 800573e:	4604      	mov	r4, r0
 8005740:	2301      	movs	r3, #1
 8005742:	e7f0      	b.n	8005726 <_svfiprintf_r+0x192>
 8005744:	ab03      	add	r3, sp, #12
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	462a      	mov	r2, r5
 800574a:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <_svfiprintf_r+0x1f0>)
 800574c:	a904      	add	r1, sp, #16
 800574e:	4638      	mov	r0, r7
 8005750:	f3af 8000 	nop.w
 8005754:	1c42      	adds	r2, r0, #1
 8005756:	4606      	mov	r6, r0
 8005758:	d1d6      	bne.n	8005708 <_svfiprintf_r+0x174>
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	065b      	lsls	r3, r3, #25
 800575e:	f53f af2d 	bmi.w	80055bc <_svfiprintf_r+0x28>
 8005762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005764:	e72c      	b.n	80055c0 <_svfiprintf_r+0x2c>
 8005766:	ab03      	add	r3, sp, #12
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	462a      	mov	r2, r5
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <_svfiprintf_r+0x1f0>)
 800576e:	a904      	add	r1, sp, #16
 8005770:	4638      	mov	r0, r7
 8005772:	f000 f879 	bl	8005868 <_printf_i>
 8005776:	e7ed      	b.n	8005754 <_svfiprintf_r+0x1c0>
 8005778:	08005c10 	.word	0x08005c10
 800577c:	08005c1a 	.word	0x08005c1a
 8005780:	00000000 	.word	0x00000000
 8005784:	080054dd 	.word	0x080054dd
 8005788:	08005c16 	.word	0x08005c16

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4616      	mov	r6, r2
 8005792:	4698      	mov	r8, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057a8:	4607      	mov	r7, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b10a      	cbz	r2, 80057b2 <_printf_common+0x26>
 80057ae:	3301      	adds	r3, #1
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	0699      	lsls	r1, r3, #26
 80057b6:	bf42      	ittt	mi
 80057b8:	6833      	ldrmi	r3, [r6, #0]
 80057ba:	3302      	addmi	r3, #2
 80057bc:	6033      	strmi	r3, [r6, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	f015 0506 	ands.w	r5, r5, #6
 80057c4:	d106      	bne.n	80057d4 <_printf_common+0x48>
 80057c6:	f104 0a19 	add.w	sl, r4, #25
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dc26      	bgt.n	8005822 <_printf_common+0x96>
 80057d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	3b00      	subs	r3, #0
 80057dc:	bf18      	it	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d42b      	bmi.n	800583c <_printf_common+0xb0>
 80057e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057e8:	4641      	mov	r1, r8
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c8      	blx	r9
 80057ee:	3001      	adds	r0, #1
 80057f0:	d01e      	beq.n	8005830 <_printf_common+0xa4>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6922      	ldr	r2, [r4, #16]
 80057f6:	f003 0306 	and.w	r3, r3, #6
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	bf02      	ittt	eq
 80057fe:	68e5      	ldreq	r5, [r4, #12]
 8005800:	6833      	ldreq	r3, [r6, #0]
 8005802:	1aed      	subeq	r5, r5, r3
 8005804:	68a3      	ldr	r3, [r4, #8]
 8005806:	bf0c      	ite	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	2500      	movne	r5, #0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfc4      	itt	gt
 8005812:	1a9b      	subgt	r3, r3, r2
 8005814:	18ed      	addgt	r5, r5, r3
 8005816:	2600      	movs	r6, #0
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xc8>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xa8>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4641      	mov	r1, r8
 8005828:	4638      	mov	r0, r7
 800582a:	47c8      	blx	r9
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xac>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c6      	b.n	80057ca <_printf_common+0x3e>
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	2030      	movs	r0, #48	@ 0x30
 8005842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005846:	4422      	add	r2, r4
 8005848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800584c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005850:	3302      	adds	r3, #2
 8005852:	e7c7      	b.n	80057e4 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4641      	mov	r1, r8
 800585a:	4638      	mov	r0, r7
 800585c:	47c8      	blx	r9
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa4>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x8e>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	7e0f      	ldrb	r7, [r1, #24]
 800586e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005870:	2f78      	cmp	r7, #120	@ 0x78
 8005872:	4691      	mov	r9, r2
 8005874:	4680      	mov	r8, r0
 8005876:	460c      	mov	r4, r1
 8005878:	469a      	mov	sl, r3
 800587a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	@ 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d2 	beq.w	8005a2e <_printf_i+0x1c6>
 800588a:	2f58      	cmp	r7, #88	@ 0x58
 800588c:	f000 80b9 	beq.w	8005a02 <_printf_i+0x19a>
 8005890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a101      	add	r1, pc, #4	@ (adr r1, 80058a8 <_printf_i+0x40>)
 80058a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a15 	.word	0x08005a15
 80058d8:	0800593f 	.word	0x0800593f
 80058dc:	080059cf 	.word	0x080059cf
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a37 	.word	0x08005a37
 80058ec:	08005891 	.word	0x08005891
 80058f0:	0800593f 	.word	0x0800593f
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	080059d7 	.word	0x080059d7
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6032      	str	r2, [r6, #0]
 8005908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e09d      	b.n	8005a50 <_printf_i+0x1e8>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	6031      	str	r1, [r6, #0]
 800591c:	0606      	lsls	r6, r0, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xbc>
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	e003      	b.n	800592c <_printf_i+0xc4>
 8005924:	0645      	lsls	r5, r0, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xb8>
 8005928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800592c:	2d00      	cmp	r5, #0
 800592e:	da03      	bge.n	8005938 <_printf_i+0xd0>
 8005930:	232d      	movs	r3, #45	@ 0x2d
 8005932:	426d      	negs	r5, r5
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005938:	4859      	ldr	r0, [pc, #356]	@ (8005aa0 <_printf_i+0x238>)
 800593a:	230a      	movs	r3, #10
 800593c:	e011      	b.n	8005962 <_printf_i+0xfa>
 800593e:	6821      	ldr	r1, [r4, #0]
 8005940:	6833      	ldr	r3, [r6, #0]
 8005942:	0608      	lsls	r0, r1, #24
 8005944:	f853 5b04 	ldr.w	r5, [r3], #4
 8005948:	d402      	bmi.n	8005950 <_printf_i+0xe8>
 800594a:	0649      	lsls	r1, r1, #25
 800594c:	bf48      	it	mi
 800594e:	b2ad      	uxthmi	r5, r5
 8005950:	2f6f      	cmp	r7, #111	@ 0x6f
 8005952:	4853      	ldr	r0, [pc, #332]	@ (8005aa0 <_printf_i+0x238>)
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	bf14      	ite	ne
 8005958:	230a      	movne	r3, #10
 800595a:	2308      	moveq	r3, #8
 800595c:	2100      	movs	r1, #0
 800595e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005962:	6866      	ldr	r6, [r4, #4]
 8005964:	60a6      	str	r6, [r4, #8]
 8005966:	2e00      	cmp	r6, #0
 8005968:	bfa2      	ittt	ge
 800596a:	6821      	ldrge	r1, [r4, #0]
 800596c:	f021 0104 	bicge.w	r1, r1, #4
 8005970:	6021      	strge	r1, [r4, #0]
 8005972:	b90d      	cbnz	r5, 8005978 <_printf_i+0x110>
 8005974:	2e00      	cmp	r6, #0
 8005976:	d04b      	beq.n	8005a10 <_printf_i+0x1a8>
 8005978:	4616      	mov	r6, r2
 800597a:	fbb5 f1f3 	udiv	r1, r5, r3
 800597e:	fb03 5711 	mls	r7, r3, r1, r5
 8005982:	5dc7      	ldrb	r7, [r0, r7]
 8005984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005988:	462f      	mov	r7, r5
 800598a:	42bb      	cmp	r3, r7
 800598c:	460d      	mov	r5, r1
 800598e:	d9f4      	bls.n	800597a <_printf_i+0x112>
 8005990:	2b08      	cmp	r3, #8
 8005992:	d10b      	bne.n	80059ac <_printf_i+0x144>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07df      	lsls	r7, r3, #31
 8005998:	d508      	bpl.n	80059ac <_printf_i+0x144>
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	6861      	ldr	r1, [r4, #4]
 800599e:	4299      	cmp	r1, r3
 80059a0:	bfde      	ittt	le
 80059a2:	2330      	movle	r3, #48	@ 0x30
 80059a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059ac:	1b92      	subs	r2, r2, r6
 80059ae:	6122      	str	r2, [r4, #16]
 80059b0:	f8cd a000 	str.w	sl, [sp]
 80059b4:	464b      	mov	r3, r9
 80059b6:	aa03      	add	r2, sp, #12
 80059b8:	4621      	mov	r1, r4
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff fee6 	bl	800578c <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d14a      	bne.n	8005a5a <_printf_i+0x1f2>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	b004      	add	sp, #16
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	f043 0320 	orr.w	r3, r3, #32
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	4833      	ldr	r0, [pc, #204]	@ (8005aa4 <_printf_i+0x23c>)
 80059d8:	2778      	movs	r7, #120	@ 0x78
 80059da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6831      	ldr	r1, [r6, #0]
 80059e2:	061f      	lsls	r7, r3, #24
 80059e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059e8:	d402      	bmi.n	80059f0 <_printf_i+0x188>
 80059ea:	065f      	lsls	r7, r3, #25
 80059ec:	bf48      	it	mi
 80059ee:	b2ad      	uxthmi	r5, r5
 80059f0:	6031      	str	r1, [r6, #0]
 80059f2:	07d9      	lsls	r1, r3, #31
 80059f4:	bf44      	itt	mi
 80059f6:	f043 0320 	orrmi.w	r3, r3, #32
 80059fa:	6023      	strmi	r3, [r4, #0]
 80059fc:	b11d      	cbz	r5, 8005a06 <_printf_i+0x19e>
 80059fe:	2310      	movs	r3, #16
 8005a00:	e7ac      	b.n	800595c <_printf_i+0xf4>
 8005a02:	4827      	ldr	r0, [pc, #156]	@ (8005aa0 <_printf_i+0x238>)
 8005a04:	e7e9      	b.n	80059da <_printf_i+0x172>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f023 0320 	bic.w	r3, r3, #32
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	e7f6      	b.n	80059fe <_printf_i+0x196>
 8005a10:	4616      	mov	r6, r2
 8005a12:	e7bd      	b.n	8005990 <_printf_i+0x128>
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	6961      	ldr	r1, [r4, #20]
 8005a1a:	1d18      	adds	r0, r3, #4
 8005a1c:	6030      	str	r0, [r6, #0]
 8005a1e:	062e      	lsls	r6, r5, #24
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0x1c0>
 8005a24:	6019      	str	r1, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0x1c6>
 8005a28:	0668      	lsls	r0, r5, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0x1bc>
 8005a2c:	8019      	strh	r1, [r3, #0]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	4616      	mov	r6, r2
 8005a34:	e7bc      	b.n	80059b0 <_printf_i+0x148>
 8005a36:	6833      	ldr	r3, [r6, #0]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	6032      	str	r2, [r6, #0]
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	2100      	movs	r1, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fa fbc4 	bl	80001d0 <memchr>
 8005a48:	b108      	cbz	r0, 8005a4e <_printf_i+0x1e6>
 8005a4a:	1b80      	subs	r0, r0, r6
 8005a4c:	6060      	str	r0, [r4, #4]
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	2300      	movs	r3, #0
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a58:	e7aa      	b.n	80059b0 <_printf_i+0x148>
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d0ad      	beq.n	80059c4 <_printf_i+0x15c>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	079b      	lsls	r3, r3, #30
 8005a6c:	d413      	bmi.n	8005a96 <_printf_i+0x22e>
 8005a6e:	68e0      	ldr	r0, [r4, #12]
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	4298      	cmp	r0, r3
 8005a74:	bfb8      	it	lt
 8005a76:	4618      	movlt	r0, r3
 8005a78:	e7a6      	b.n	80059c8 <_printf_i+0x160>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d09d      	beq.n	80059c4 <_printf_i+0x15c>
 8005a88:	3501      	adds	r5, #1
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	9903      	ldr	r1, [sp, #12]
 8005a8e:	1a5b      	subs	r3, r3, r1
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dcf2      	bgt.n	8005a7a <_printf_i+0x212>
 8005a94:	e7eb      	b.n	8005a6e <_printf_i+0x206>
 8005a96:	2500      	movs	r5, #0
 8005a98:	f104 0619 	add.w	r6, r4, #25
 8005a9c:	e7f5      	b.n	8005a8a <_printf_i+0x222>
 8005a9e:	bf00      	nop
 8005aa0:	08005c21 	.word	0x08005c21
 8005aa4:	08005c32 	.word	0x08005c32

08005aa8 <memmove>:
 8005aa8:	4288      	cmp	r0, r1
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	eb01 0402 	add.w	r4, r1, r2
 8005ab0:	d902      	bls.n	8005ab8 <memmove+0x10>
 8005ab2:	4284      	cmp	r4, r0
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	d807      	bhi.n	8005ac8 <memmove+0x20>
 8005ab8:	1e43      	subs	r3, r0, #1
 8005aba:	42a1      	cmp	r1, r4
 8005abc:	d008      	beq.n	8005ad0 <memmove+0x28>
 8005abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ac6:	e7f8      	b.n	8005aba <memmove+0x12>
 8005ac8:	4402      	add	r2, r0
 8005aca:	4601      	mov	r1, r0
 8005acc:	428a      	cmp	r2, r1
 8005ace:	d100      	bne.n	8005ad2 <memmove+0x2a>
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ada:	e7f7      	b.n	8005acc <memmove+0x24>

08005adc <_sbrk_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	@ (8005af8 <_sbrk_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fb f96c 	bl	8000dc4 <_sbrk>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_sbrk_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_sbrk_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000338 	.word	0x20000338

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <_realloc_r>:
 8005b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	4615      	mov	r5, r2
 8005b20:	460c      	mov	r4, r1
 8005b22:	b921      	cbnz	r1, 8005b2e <_realloc_r+0x16>
 8005b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	4611      	mov	r1, r2
 8005b2a:	f7ff bc4b 	b.w	80053c4 <_malloc_r>
 8005b2e:	b92a      	cbnz	r2, 8005b3c <_realloc_r+0x24>
 8005b30:	f7ff fbdc 	bl	80052ec <_free_r>
 8005b34:	2400      	movs	r4, #0
 8005b36:	4620      	mov	r0, r4
 8005b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3c:	f000 f81a 	bl	8005b74 <_malloc_usable_size_r>
 8005b40:	4285      	cmp	r5, r0
 8005b42:	4606      	mov	r6, r0
 8005b44:	d802      	bhi.n	8005b4c <_realloc_r+0x34>
 8005b46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b4a:	d8f4      	bhi.n	8005b36 <_realloc_r+0x1e>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fc38 	bl	80053c4 <_malloc_r>
 8005b54:	4607      	mov	r7, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0ec      	beq.n	8005b34 <_realloc_r+0x1c>
 8005b5a:	42b5      	cmp	r5, r6
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4621      	mov	r1, r4
 8005b60:	bf28      	it	cs
 8005b62:	4632      	movcs	r2, r6
 8005b64:	f7ff ffca 	bl	8005afc <memcpy>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f7ff fbbe 	bl	80052ec <_free_r>
 8005b70:	463c      	mov	r4, r7
 8005b72:	e7e0      	b.n	8005b36 <_realloc_r+0x1e>

08005b74 <_malloc_usable_size_r>:
 8005b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b78:	1f18      	subs	r0, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfbc      	itt	lt
 8005b7e:	580b      	ldrlt	r3, [r1, r0]
 8005b80:	18c0      	addlt	r0, r0, r3
 8005b82:	4770      	bx	lr

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
