
Software_V3_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046cc  080046cc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080046e0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080046e0  00006120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd1f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2c  00000000  00000000  00012d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00014a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  00015650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255ae  00000000  00000000  00015f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d155  00000000  00000000  0003b50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6963  00000000  00000000  0004865f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012efc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003018  00000000  00000000  0012f008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00132020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004664 	.word	0x08004664

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004664 	.word	0x08004664

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd74 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80f 	bl	800051e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8cc 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f89a 	bl	800063c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000508:	f000 f85a 	bl	80005c0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _1Mbps);
 800050c:	2100      	movs	r1, #0
 800050e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000512:	f000 fa09 	bl	8000928 <nrf24l01p_rx_init>


	  nrf24l01p_tx_transmit(tx_data);
#endif

	  HAL_Delay(100);
 8000516:	2064      	movs	r0, #100	@ 0x64
 8000518:	f000 fde0 	bl	80010dc <HAL_Delay>
 800051c:	e7fb      	b.n	8000516 <main+0x22>

0800051e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b096      	sub	sp, #88	@ 0x58
 8000522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2244      	movs	r2, #68	@ 0x44
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f86c 	bl	800460a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000540:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000544:	f001 f902 	bl	800174c <HAL_PWREx_ControlVoltageScaling>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054e:	f000 f963 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056c:	230a      	movs	r3, #10
 800056e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f939 	bl	80017f8 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058c:	f000 f944 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fd01 	bl	8001fb0 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b4:	f000 f930 	bl	8000818 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	@ 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000638 <MX_SPI3_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_SPI3_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_SPI3_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_SPI3_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_SPI3_Init+0x74>)
 800060e:	2207      	movs	r2, #7
 8000610:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_SPI3_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_SPI3_Init+0x74>)
 800061a:	2208      	movs	r2, #8
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_SPI3_Init+0x74>)
 8000620:	f002 fba6 	bl	8002d70 <HAL_SPI_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8f5 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028
 8000638:	40003c00 	.word	0x40003c00

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	f003 faa2 	bl	8003bc8 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 f8c5 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a4c      	ldr	r2, [pc, #304]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b4a      	ldr	r3, [pc, #296]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b47      	ldr	r3, [pc, #284]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a46      	ldr	r2, [pc, #280]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b3b      	ldr	r3, [pc, #236]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a3a      	ldr	r2, [pc, #232]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b38      	ldr	r3, [pc, #224]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f000 ffbf 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000724:	4831      	ldr	r0, [pc, #196]	@ (80007ec <MX_GPIO_Init+0x150>)
 8000726:	f000 ffb9 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSN_GPIO_Port, SPI3_CSN_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000734:	f000 ffb2 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4828      	ldr	r0, [pc, #160]	@ (80007f0 <MX_GPIO_Init+0x154>)
 8000750:	f000 fdfa 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000754:	2320      	movs	r3, #32
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f000 fdeb 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4818      	ldr	r0, [pc, #96]	@ (80007ec <MX_GPIO_Init+0x150>)
 800078c:	f000 fddc 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007aa:	f000 fdcd 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = SPI3_CSN_Pin;
 80007ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f000 fdbd 	bl	8001348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2028      	movs	r0, #40	@ 0x28
 80007d4:	f000 fd81 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d8:	2028      	movs	r0, #40	@ 0x28
 80007da:	f000 fd9a 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	@ 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	48000800 	.word	0x48000800

080007f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000804:	d102      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x18>
	{
#ifdef RECEIVER
	    nrf24l01p_rx_receive(rx_data);
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x20>)
 8000808:	f000 f8bc 	bl	8000984 <nrf24l01p_rx_receive>
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
#endif
	}

}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000114 	.word	0x20000114

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800082e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000832:	f000 ff33 	bl	800169c <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <cs_low>:

static void cs_low()
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f000 ff28 	bl	800169c <HAL_GPIO_WritePin>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <ce_high>:

static void ce_high()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800085a:	4802      	ldr	r0, [pc, #8]	@ (8000864 <ce_high+0x14>)
 800085c:	f000 ff1e 	bl	800169c <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	48000400 	.word	0x48000400

08000868 <ce_low>:

static void ce_low()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000872:	4802      	ldr	r0, [pc, #8]	@ (800087c <ce_low+0x14>)
 8000874:	f000 ff12 	bl	800169c <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	48000400 	.word	0x48000400

08000880 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800088e:	f7ff ffd4 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000892:	f107 020e 	add.w	r2, r7, #14
 8000896:	f107 010f 	add.w	r1, r7, #15
 800089a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <read_register+0x48>)
 80008a4:	f002 fdb5 	bl	8003412 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80008a8:	f107 010d 	add.w	r1, r7, #13
 80008ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008b0:	2201      	movs	r2, #1
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <read_register+0x48>)
 80008b4:	f002 fc75 	bl	80031a2 <HAL_SPI_Receive>
    cs_high();
 80008b8:	f7ff ffb4 	bl	8000824 <cs_high>

    return read_val;
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000028 	.word	0x20000028

080008cc <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	737b      	strb	r3, [r7, #13]

    cs_low();
 80008ea:	f7ff ffa6 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80008ee:	f107 020e 	add.w	r2, r7, #14
 80008f2:	f107 010f 	add.w	r1, r7, #15
 80008f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <write_register+0x58>)
 8000900:	f002 fd87 	bl	8003412 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000904:	f107 010d 	add.w	r1, r7, #13
 8000908:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800090c:	2201      	movs	r2, #1
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <write_register+0x58>)
 8000910:	f002 fad1 	bl	8002eb6 <HAL_SPI_Transmit>
    cs_high();
 8000914:	f7ff ff86 	bl	8000824 <cs_high>

    return write_val;
 8000918:	7b7b      	ldrb	r3, [r7, #13]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028

08000928 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	80fb      	strh	r3, [r7, #6]
 8000934:	4613      	mov	r3, r2
 8000936:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000938:	f000 f838 	bl	80009ac <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 800093c:	f000 f88a 	bl	8000a54 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000940:	f000 f92e 	bl	8000ba0 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000944:	2008      	movs	r0, #8
 8000946:	f000 f909 	bl	8000b5c <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f9b3 	bl	8000cb8 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000952:	797b      	ldrb	r3, [r7, #5]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f9e0 	bl	8000d1a <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 800095a:	2003      	movs	r0, #3
 800095c:	f000 f9bf 	bl	8000cde <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f000 f932 	bl	8000bca <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000966:	2005      	movs	r0, #5
 8000968:	f000 f952 	bl	8000c10 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f95f 	bl	8000c30 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000972:	20fa      	movs	r0, #250	@ 0xfa
 8000974:	f000 f978 	bl	8000c68 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8000978:	f7ff ff6a 	bl	8000850 <ce_high>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f877 	bl	8000a80 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8000992:	f000 f8f1 	bl	8000b78 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000996:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099a:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <nrf24l01p_rx_receive+0x24>)
 800099c:	f000 fe96 	bl	80016cc <HAL_GPIO_TogglePin>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	48000800 	.word	0x48000800

080009ac <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80009b0:	f7ff ff38 	bl	8000824 <cs_high>
    ce_low();
 80009b4:	f7ff ff58 	bl	8000868 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80009b8:	2108      	movs	r1, #8
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff86 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80009c0:	213f      	movs	r1, #63	@ 0x3f
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff82 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80009c8:	2103      	movs	r1, #3
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff ff7e 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80009d0:	2103      	movs	r1, #3
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff ff7a 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80009d8:	2103      	movs	r1, #3
 80009da:	2004      	movs	r0, #4
 80009dc:	f7ff ff76 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80009e0:	2102      	movs	r1, #2
 80009e2:	2005      	movs	r0, #5
 80009e4:	f7ff ff72 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80009e8:	2107      	movs	r1, #7
 80009ea:	2006      	movs	r0, #6
 80009ec:	f7ff ff6e 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80009f0:	217e      	movs	r1, #126	@ 0x7e
 80009f2:	2007      	movs	r0, #7
 80009f4:	f7ff ff6a 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2011      	movs	r0, #17
 80009fc:	f7ff ff66 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2011      	movs	r0, #17
 8000a04:	f7ff ff62 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f7ff ff5e 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2013      	movs	r0, #19
 8000a14:	f7ff ff5a 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f7ff ff56 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000a20:	2100      	movs	r1, #0
 8000a22:	2015      	movs	r0, #21
 8000a24:	f7ff ff52 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2016      	movs	r0, #22
 8000a2c:	f7ff ff4e 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000a30:	2111      	movs	r1, #17
 8000a32:	2017      	movs	r0, #23
 8000a34:	f7ff ff4a 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f7ff ff46 	bl	80008cc <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000a40:	2100      	movs	r1, #0
 8000a42:	201d      	movs	r0, #29
 8000a44:	f7ff ff42 	bl	80008cc <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000a48:	f000 f83e 	bl	8000ac8 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000a4c:	f000 f854 	bl	8000af8 <nrf24l01p_flush_tx_fifo>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ff10 	bl	8000880 <read_register>
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff2b 	bl	80008cc <write_register>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000a88:	2361      	movs	r3, #97	@ 0x61
 8000a8a:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000a8c:	f7ff fed5 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000a90:	f107 020e 	add.w	r2, r7, #14
 8000a94:	f107 010f 	add.w	r1, r7, #15
 8000a98:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <nrf24l01p_read_rx_fifo+0x44>)
 8000aa2:	f002 fcb6 	bl	8003412 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000aa6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aaa:	2208      	movs	r2, #8
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <nrf24l01p_read_rx_fifo+0x44>)
 8000ab0:	f002 fb77 	bl	80031a2 <HAL_SPI_Receive>
    cs_high();
 8000ab4:	f7ff feb6 	bl	8000824 <cs_high>

    return status;
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000028 	.word	0x20000028

08000ac8 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000ace:	23e2      	movs	r3, #226	@ 0xe2
 8000ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000ad2:	f7ff feb2 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ad6:	1dba      	adds	r2, r7, #6
 8000ad8:	1df9      	adds	r1, r7, #7
 8000ada:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000ae4:	f002 fc95 	bl	8003412 <HAL_SPI_TransmitReceive>
    cs_high();
 8000ae8:	f7ff fe9c 	bl	8000824 <cs_high>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000028 	.word	0x20000028

08000af8 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000afe:	23e1      	movs	r3, #225	@ 0xe1
 8000b00:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b02:	f7ff fe9a 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b06:	1dba      	adds	r2, r7, #6
 8000b08:	1df9      	adds	r1, r7, #7
 8000b0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2301      	movs	r3, #1
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000b14:	f002 fc7d 	bl	8003412 <HAL_SPI_TransmitReceive>
    cs_high();
 8000b18:	f7ff fe84 	bl	8000824 <cs_high>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000028 	.word	0x20000028

08000b28 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000b2e:	23ff      	movs	r3, #255	@ 0xff
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b32:	f7ff fe82 	bl	800083a <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b36:	1dba      	adds	r2, r7, #6
 8000b38:	1df9      	adds	r1, r7, #7
 8000b3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <nrf24l01p_get_status+0x30>)
 8000b44:	f002 fc65 	bl	8003412 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000b48:	f7ff fe6c 	bl	8000824 <cs_high>

    return status;
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000028 	.word	0x20000028

08000b5c <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2011      	movs	r0, #17
 8000b6c:	f7ff feae 	bl	80008cc <write_register>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000b7e:	f7ff ffd3 	bl	8000b28 <nrf24l01p_get_status>
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b8c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4619      	mov	r1, r3
 8000b92:	2007      	movs	r0, #7
 8000b94:	f7ff fe9a 	bl	80008cc <write_register>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fe6a 	bl	8000880 <read_register>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fe85 	bl	80008cc <write_register>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fe53 	bl	8000880 <read_register>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d002      	beq.n	8000bea <nrf24l01p_set_crc_length+0x20>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d005      	beq.n	8000bf4 <nrf24l01p_set_crc_length+0x2a>
 8000be8:	e009      	b.n	8000bfe <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	f023 0304 	bic.w	r3, r3, #4
 8000bf0:	73fb      	strb	r3, [r7, #15]
            break;
 8000bf2:	e004      	b.n	8000bfe <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	73fb      	strb	r3, [r7, #15]
            break;
 8000bfc:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	4619      	mov	r1, r3
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fe62 	bl	80008cc <write_register>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	2003      	movs	r0, #3
 8000c24:	f7ff fe52 	bl	80008cc <write_register>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f7ff fe20 	bl	8000880 <read_register>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	f063 030f 	orn	r3, r3, #15
 8000c4a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4619      	mov	r1, r3
 8000c58:	2004      	movs	r0, #4
 8000c5a:	f7ff fe37 	bl	80008cc <write_register>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c72:	2004      	movs	r0, #4
 8000c74:	f7ff fe04 	bl	8000880 <read_register>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f043 030f 	orr.w	r3, r3, #15
 8000c82:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	b25a      	sxtb	r2, r3
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	2004      	movs	r0, #4
 8000ca8:	f7ff fe10 	bl	80008cc <write_register>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	10624dd3 	.word	0x10624dd3

08000cb8 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000cc8:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2005      	movs	r0, #5
 8000cd2:	f7ff fdfb 	bl	80008cc <write_register>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000ce8:	2006      	movs	r0, #6
 8000cea:	f7ff fdc9 	bl	8000880 <read_register>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f023 0306 	bic.w	r3, r3, #6
 8000cf4:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b25a      	sxtb	r2, r3
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f7ff fddd 	bl	80008cc <write_register>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000d24:	2006      	movs	r0, #6
 8000d26:	f7ff fdab 	bl	8000880 <read_register>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d30:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d00a      	beq.n	8000d4e <nrf24l01p_set_rf_air_data_rate+0x34>
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	dc0e      	bgt.n	8000d5a <nrf24l01p_set_rf_air_data_rate+0x40>
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00b      	beq.n	8000d58 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d10a      	bne.n	8000d5a <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	73fb      	strb	r3, [r7, #15]
            break;
 8000d4c:	e005      	b.n	8000d5a <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	73fb      	strb	r3, [r7, #15]
            break;
 8000d56:	e000      	b.n	8000d5a <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000d58:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2006      	movs	r0, #6
 8000d60:	f7ff fdb4 	bl	80008cc <write_register>
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <HAL_SPI_MspInit+0x7c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d128      	bne.n	8000e28 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dda:	4a16      	ldr	r2, [pc, #88]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_SPI_MspInit+0x80>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e06:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_SPI_MspInit+0x84>)
 8000e24:	f000 fa90 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	@ 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40003c00 	.word	0x40003c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000800 	.word	0x48000800

08000e3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2288      	movs	r2, #136	@ 0x88
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fbd4 	bl	800460a <memset>
  if(huart->Instance==USART2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_UART_MspInit+0xb0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d13b      	bne.n	8000ee4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fabd 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e84:	f7ff fcc8 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_UART_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f000 fa32 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ee4:	bf00      	nop
 8000ee6:	37b0      	adds	r7, #176	@ 0xb0
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f8a7 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000f56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f5a:	f000 fbd1 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f5e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f62:	f000 fbcd 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 fb2d 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fa97 	bl	80004f4 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd4:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8000fd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_Init+0x3c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <HAL_Init+0x3c>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f962 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f80f 	bl	8001024 <HAL_InitTick>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	e001      	b.n	8001016 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001012:	f7ff feab 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001016:	79fb      	ldrb	r3, [r7, #7]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_InitTick+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_InitTick+0x70>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_InitTick+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f96d 	bl	800132e <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10f      	bne.n	800107a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d809      	bhi.n	8001074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f937 	bl	80012da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_InitTick+0x74>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e007      	b.n	8001084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e004      	b.n	8001084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e001      	b.n	8001084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	2000011c 	.word	0x2000011c

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000011c 	.word	0x2000011c

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e17f      	b.n	8001658 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8171 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d005      	beq.n	8001388 <HAL_GPIO_Init+0x40>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d118      	bne.n	8001428 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013fc:	2201      	movs	r2, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d017      	beq.n	8001464 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d123      	bne.n	80014b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80ac 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <HAL_GPIO_Init+0x330>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001678 <HAL_GPIO_Init+0x330>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b5c      	ldr	r3, [pc, #368]	@ (8001678 <HAL_GPIO_Init+0x330>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001512:	4a5a      	ldr	r2, [pc, #360]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x242>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_GPIO_Init+0x338>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x23e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	@ (8001684 <HAL_GPIO_Init+0x33c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x23a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x340>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x236>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <HAL_GPIO_Init+0x344>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x232>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	@ (8001690 <HAL_GPIO_Init+0x348>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_GPIO_Init+0x34c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x22a>
 800156e:	2306      	movs	r3, #6
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001572:	2307      	movs	r3, #7
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x244>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4937      	ldr	r1, [pc, #220]	@ (800167c <HAL_GPIO_Init+0x334>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_GPIO_Init+0x350>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_GPIO_Init+0x350>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x350>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_GPIO_Init+0x350>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae78 	bne.w	8001358 <HAL_GPIO_Init+0x10>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43d9      	mvns	r1, r3
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	400b      	ands	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f868 	bl	80007f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_PWREx_GetVoltageRange+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000

0800174c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800175a:	d130      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001768:	d038      	beq.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001772:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2232      	movs	r2, #50	@ 0x32
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4a1b      	ldr	r2, [pc, #108]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001790:	e002      	b.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3b01      	subs	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a4:	d102      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f2      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b8:	d110      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e00f      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ca:	d007      	beq.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d4:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000
 80017f0:	20000000 	.word	0x20000000
 80017f4:	431bde83 	.word	0x431bde83

080017f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e3ca      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180a:	4b97      	ldr	r3, [pc, #604]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001814:	4b94      	ldr	r3, [pc, #592]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80e4 	beq.w	80019f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_RCC_OscConfig+0x4a>
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	f040 808b 	bne.w	8001950 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b01      	cmp	r3, #1
 800183e:	f040 8087 	bne.w	8001950 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001842:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x62>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e3a2      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	4b82      	ldr	r3, [pc, #520]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_RCC_OscConfig+0x7c>
 800186a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001872:	e005      	b.n	8001880 <HAL_RCC_OscConfig+0x88>
 8001874:	4b7c      	ldr	r3, [pc, #496]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001880:	4293      	cmp	r3, r2
 8001882:	d223      	bcs.n	80018cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd55 	bl	8002338 <RCC_SetFlashLatencyFromMSIRange>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e383      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001898:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a72      	ldr	r2, [pc, #456]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	496d      	ldr	r1, [pc, #436]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	4968      	ldr	r1, [pc, #416]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
 80018ca:	e025      	b.n	8001918 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018cc:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a65      	ldr	r2, [pc, #404]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4960      	ldr	r1, [pc, #384]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	495b      	ldr	r1, [pc, #364]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fd15 	bl	8002338 <RCC_SetFlashLatencyFromMSIRange>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e343      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001918:	f000 fc4a 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4950      	ldr	r1, [pc, #320]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	4a4e      	ldr	r2, [pc, #312]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 8001936:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001938:	4b4e      	ldr	r3, [pc, #312]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb71 	bl	8001024 <HAL_InitTick>
 8001942:	4603      	mov	r3, r0
 8001944:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d052      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	e327      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d032      	beq.n	80019be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001958:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001964:	f7ff fbae 	bl	80010c4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196c:	f7ff fbaa 	bl	80010c4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e310      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198a:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4931      	ldr	r1, [pc, #196]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	492c      	ldr	r1, [pc, #176]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e01a      	b.n	80019f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019be:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb7b 	bl	80010c4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb77 	bl	80010c4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e2dd      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e4:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x1da>
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d074      	beq.n	8001aea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x21a>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d10e      	bne.n	8001a2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d10b      	bne.n	8001a2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d064      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d160      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e2ba      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x24a>
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e026      	b.n	8001a90 <HAL_RCC_OscConfig+0x298>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a4a:	d115      	bne.n	8001a78 <HAL_RCC_OscConfig+0x280>
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a02      	ldr	r2, [pc, #8]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e014      	b.n	8001a90 <HAL_RCC_OscConfig+0x298>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	0800467c 	.word	0x0800467c
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004
 8001a78:	4ba0      	ldr	r3, [pc, #640]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a9f      	ldr	r2, [pc, #636]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b9d      	ldr	r3, [pc, #628]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a9c      	ldr	r2, [pc, #624]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fb14 	bl	80010c4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fb10 	bl	80010c4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	@ 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e276      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2a8>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb00 	bl	80010c4 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fafc 	bl	80010c4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	@ 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e262      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ada:	4b88      	ldr	r3, [pc, #544]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2d0>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d060      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x310>
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d116      	bne.n	8001b36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x328>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e23f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	4973      	ldr	r1, [pc, #460]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	e040      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d023      	beq.n	8001b86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fabb 	bl	80010c4 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fab7 	bl	80010c4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e21d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	4b65      	ldr	r3, [pc, #404]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b62      	ldr	r3, [pc, #392]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	495f      	ldr	r1, [pc, #380]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
 8001b84:	e018      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fa97 	bl	80010c4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fa93 	bl	80010c4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1f9      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fa72 	bl	80010c4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fa6e 	bl	80010c4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1d4      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ef      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3ec>
 8001c04:	e01b      	b.n	8001c3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff fa55 	bl	80010c4 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fa51 	bl	80010c4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1b7      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ef      	bne.n	8001c1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a6 	beq.w	8001d98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d118      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c90:	f7ff fa18 	bl	80010c4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7ff fa14 	bl	80010c4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e17a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4d8>
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cce:	e029      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d115      	bne.n	8001d04 <HAL_RCC_OscConfig+0x50c>
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cee:	4a03      	ldr	r2, [pc, #12]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cf8:	e014      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	4b9c      	ldr	r3, [pc, #624]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	4a9b      	ldr	r2, [pc, #620]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d14:	4b98      	ldr	r3, [pc, #608]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1a:	4a97      	ldr	r2, [pc, #604]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d016      	beq.n	8001d5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f9ca 	bl	80010c4 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f9c6 	bl	80010c4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e12a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ed      	beq.n	8001d34 <HAL_RCC_OscConfig+0x53c>
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f9b3 	bl	80010c4 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff f9af 	bl	80010c4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e113      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	4b7f      	ldr	r3, [pc, #508]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ed      	bne.n	8001d62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	4a79      	ldr	r2, [pc, #484]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80fe 	beq.w	8001f9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	f040 80d0 	bne.w	8001f4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dac:	4b72      	ldr	r3, [pc, #456]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d130      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d127      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d11f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dec:	2a07      	cmp	r2, #7
 8001dee:	bf14      	ite	ne
 8001df0:	2201      	movne	r2, #1
 8001df2:	2200      	moveq	r2, #0
 8001df4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d113      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	3b01      	subs	r3, #1
 8001e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d06e      	beq.n	8001f00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d069      	beq.n	8001efc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e34:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0ad      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e44:	4b4c      	ldr	r3, [pc, #304]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a4b      	ldr	r2, [pc, #300]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e50:	f7ff f938 	bl	80010c4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff f934 	bl	80010c4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e09a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	4b43      	ldr	r3, [pc, #268]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e76:	4b40      	ldr	r3, [pc, #256]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <HAL_RCC_OscConfig+0x784>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e86:	3a01      	subs	r2, #1
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e90:	0212      	lsls	r2, r2, #8
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e98:	0852      	lsrs	r2, r2, #1
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	0552      	lsls	r2, r2, #21
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ea4:	0852      	lsrs	r2, r2, #1
 8001ea6:	3a01      	subs	r2, #1
 8001ea8:	0652      	lsls	r2, r2, #25
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eb0:	0912      	lsrs	r2, r2, #4
 8001eb2:	0452      	lsls	r2, r2, #17
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4930      	ldr	r1, [pc, #192]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed4:	f7ff f8f6 	bl	80010c4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f8f2 	bl	80010c4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e058      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	e050      	b.n	8001f9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e04f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d148      	bne.n	8001f9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f24:	f7ff f8ce 	bl	80010c4 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff f8ca 	bl	80010c4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e030      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x734>
 8001f4a:	e028      	b.n	8001f9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d023      	beq.n	8001f9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <HAL_RCC_OscConfig+0x780>)
 8001f58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f8b1 	bl	80010c4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	e00c      	b.n	8001f80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f8ad 	bl	80010c4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d905      	bls.n	8001f80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e013      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_OscConfig+0x7b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ec      	bne.n	8001f66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x7b0>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4905      	ldr	r1, [pc, #20]	@ (8001fa8 <HAL_RCC_OscConfig+0x7b0>)
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_OscConfig+0x7b4>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e001      	b.n	8001f9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	feeefffc 	.word	0xfeeefffc

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0e7      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b75      	ldr	r3, [pc, #468]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b72      	ldr	r3, [pc, #456]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4970      	ldr	r1, [pc, #448]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cf      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	4b66      	ldr	r3, [pc, #408]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800200c:	429a      	cmp	r2, r3
 800200e:	d908      	bls.n	8002022 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b63      	ldr	r3, [pc, #396]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4960      	ldr	r1, [pc, #384]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d04c      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	4b5a      	ldr	r3, [pc, #360]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d121      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0a6      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4b54      	ldr	r3, [pc, #336]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d115      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e09a      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002066:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e08e      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002076:	4b4a      	ldr	r3, [pc, #296]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e086      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b46      	ldr	r3, [pc, #280]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4943      	ldr	r1, [pc, #268]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f814 	bl	80010c4 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7ff f810 	bl	80010c4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e06e      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d208      	bcs.n	80020f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	492b      	ldr	r1, [pc, #172]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f6:	4b29      	ldr	r3, [pc, #164]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d210      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002104:	4b25      	ldr	r3, [pc, #148]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 0207 	bic.w	r2, r3, #7
 800210c:	4923      	ldr	r1, [pc, #140]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002114:	4b21      	ldr	r3, [pc, #132]	@ (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e036      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4918      	ldr	r1, [pc, #96]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4910      	ldr	r1, [pc, #64]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002164:	f000 f824 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	490b      	ldr	r1, [pc, #44]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002182:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002184:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_RCC_ClockConfig+0x1fc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ff4b 	bl	8001024 <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	72fb      	strb	r3, [r7, #11]

  return status;
 8002192:	7afb      	ldrb	r3, [r7, #11]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	0800467c 	.word	0x0800467c
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4b3e      	ldr	r3, [pc, #248]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c8:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x34>
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d121      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11e      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e4:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f0:	4b31      	ldr	r3, [pc, #196]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e005      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002200:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10d      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d102      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e004      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d101      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d134      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223e:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0xa6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0xac>
 8002254:	e005      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002258:	617b      	str	r3, [r7, #20]
      break;
 800225a:	e005      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e002      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	617b      	str	r3, [r7, #20]
      break;
 8002266:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	3301      	adds	r3, #1
 8002274:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	fb03 f202 	mul.w	r2, r3, r2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	0e5b      	lsrs	r3, r3, #25
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	3301      	adds	r3, #1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022a8:	69bb      	ldr	r3, [r7, #24]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08004694 	.word	0x08004694
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	007a1200 	.word	0x007a1200

080022c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022e4:	f7ff fff0 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4904      	ldr	r1, [pc, #16]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	0800468c 	.word	0x0800468c

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002310:	f7ff ffda 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	0800468c 	.word	0x0800468c

08002338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002350:	f7ff f9ee 	bl	8001730 <HAL_PWREx_GetVoltageRange>
 8002354:	6178      	str	r0, [r7, #20]
 8002356:	e014      	b.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	4a24      	ldr	r2, [pc, #144]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002362:	6593      	str	r3, [r2, #88]	@ 0x58
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002370:	f7ff f9de 	bl	8001730 <HAL_PWREx_GetVoltageRange>
 8002374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002388:	d10b      	bne.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	@ 0x80
 800238e:	d919      	bls.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2ba0      	cmp	r3, #160	@ 0xa0
 8002394:	d902      	bls.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002396:	2302      	movs	r3, #2
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e013      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e010      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	@ 0x80
 80023a6:	d902      	bls.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023a8:	2303      	movs	r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e00a      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	d102      	bne.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b4:	2302      	movs	r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e004      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b70      	cmp	r3, #112	@ 0x70
 80023be:	d101      	bne.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 0207 	bic.w	r2, r3, #7
 80023cc:	4909      	ldr	r1, [pc, #36]	@ (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023d4:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002400:	2300      	movs	r3, #0
 8002402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002404:	2300      	movs	r3, #0
 8002406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002410:	2b00      	cmp	r3, #0
 8002412:	d041      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002418:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800241e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002424:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800242a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002438:	d010      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800243c:	4b86      	ldr	r3, [pc, #536]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a85      	ldr	r2, [pc, #532]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fabb 	bl	80029cc <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3320      	adds	r3, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fba6 	bl	8002bb4 <RCCEx_PLLSAI2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247c:	4b76      	ldr	r3, [pc, #472]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800248a:	4973      	ldr	r1, [pc, #460]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d041      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024ac:	d02a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024b2:	d824      	bhi.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024be:	d81e      	bhi.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d010      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ca:	e018      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024cc:	4b62      	ldr	r3, [pc, #392]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a61      	ldr	r2, [pc, #388]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d8:	e015      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fa73 	bl	80029cc <RCCEx_PLLSAI1_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ea:	e00c      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3320      	adds	r3, #32
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fb5e 	bl	8002bb4 <RCCEx_PLLSAI2_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fc:	e003      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	74fb      	strb	r3, [r7, #19]
      break;
 8002502:	e000      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800250c:	4b52      	ldr	r3, [pc, #328]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800251a:	494f      	ldr	r1, [pc, #316]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002522:	e001      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a0 	beq.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800253a:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	4a40      	ldr	r2, [pc, #256]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	@ 0x58
 800255c:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256c:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3a      	ldr	r2, [pc, #232]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002578:	f7fe fda4 	bl	80010c4 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257e:	e009      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe fda0 	bl	80010c4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	74fb      	strb	r3, [r7, #19]
        break;
 8002592:	e005      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002594:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d15c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d019      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c4:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fd5f 	bl	80010c4 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	e00b      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fd5b 	bl	80010c4 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d902      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	74fb      	strb	r3, [r7, #19]
            break;
 8002620:	e006      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ec      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002646:	4904      	ldr	r1, [pc, #16]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800264e:	e009      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
 8002654:	e006      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002664:	7c7b      	ldrb	r3, [r7, #17]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b9e      	ldr	r3, [pc, #632]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	4a9d      	ldr	r2, [pc, #628]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002682:	4b98      	ldr	r3, [pc, #608]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002688:	f023 0203 	bic.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	4994      	ldr	r1, [pc, #592]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a4:	4b8f      	ldr	r3, [pc, #572]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 020c 	bic.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	498c      	ldr	r1, [pc, #560]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c6:	4b87      	ldr	r3, [pc, #540]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	4983      	ldr	r1, [pc, #524]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e8:	4b7e      	ldr	r3, [pc, #504]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	497b      	ldr	r1, [pc, #492]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800270a:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002718:	4972      	ldr	r1, [pc, #456]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800272c:	4b6d      	ldr	r3, [pc, #436]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	496a      	ldr	r1, [pc, #424]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800274e:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	4961      	ldr	r1, [pc, #388]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002770:	4b5c      	ldr	r3, [pc, #368]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	4959      	ldr	r1, [pc, #356]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002792:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a0:	4950      	ldr	r1, [pc, #320]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b4:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	4948      	ldr	r1, [pc, #288]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	493f      	ldr	r1, [pc, #252]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d028      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002806:	4937      	ldr	r1, [pc, #220]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002816:	d106      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a31      	ldr	r2, [pc, #196]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002822:	60d3      	str	r3, [r2, #12]
 8002824:	e011      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800282e:	d10c      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	2101      	movs	r1, #1
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f8c8 	bl	80029cc <RCCEx_PLLSAI1_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d028      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002856:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	491f      	ldr	r1, [pc, #124]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002874:	d106      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002876:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002880:	60d3      	str	r3, [r2, #12]
 8002882:	e011      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f899 	bl	80029cc <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02b      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d2:	d109      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a02      	ldr	r2, [pc, #8]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
 80028e0:	e014      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028f0:	d10c      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f867 	bl	80029cc <RCCEx_PLLSAI1_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02f      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002926:	4928      	ldr	r1, [pc, #160]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002936:	d10d      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2102      	movs	r1, #2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f844 	bl	80029cc <RCCEx_PLLSAI1_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d014      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	74bb      	strb	r3, [r7, #18]
 8002952:	e011      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800295c:	d10c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3320      	adds	r3, #32
 8002962:	2102      	movs	r1, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f925 	bl	8002bb4 <RCCEx_PLLSAI2_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002992:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029a6:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b6:	4904      	ldr	r1, [pc, #16]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029be:	7cbb      	ldrb	r3, [r7, #18]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000

080029cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029da:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029e6:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0203 	and.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
       ||
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029fe:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d047      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e044      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d018      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0x86>
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d825      	bhi.n	8002a70 <RCCEx_PLLSAI1_Config+0xa4>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d002      	beq.n	8002a2e <RCCEx_PLLSAI1_Config+0x62>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d009      	beq.n	8002a40 <RCCEx_PLLSAI1_Config+0x74>
 8002a2c:	e020      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a2e:	4b60      	ldr	r3, [pc, #384]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11d      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3e:	e01a      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a40:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e013      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a52:	4b57      	ldr	r3, [pc, #348]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a6e:	e006      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e004      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	4944      	ldr	r1, [pc, #272]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d17d      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002aa8:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a40      	ldr	r2, [pc, #256]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fb06 	bl	80010c4 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002abc:	f7fe fb02 	bl	80010c4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad0:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ef      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d160      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae8:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	0211      	lsls	r1, r2, #8
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	0912      	lsrs	r2, r2, #4
 8002b00:	0452      	lsls	r2, r2, #17
 8002b02:	430a      	orrs	r2, r1
 8002b04:	492a      	ldr	r1, [pc, #168]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]
 8002b0a:	e027      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d112      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b12:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b1a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6892      	ldr	r2, [r2, #8]
 8002b22:	0211      	lsls	r1, r2, #8
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6912      	ldr	r2, [r2, #16]
 8002b28:	0852      	lsrs	r2, r2, #1
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0552      	lsls	r2, r2, #21
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	491f      	ldr	r1, [pc, #124]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	610b      	str	r3, [r1, #16]
 8002b36:	e011      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6892      	ldr	r2, [r2, #8]
 8002b48:	0211      	lsls	r1, r2, #8
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6952      	ldr	r2, [r2, #20]
 8002b4e:	0852      	lsrs	r2, r2, #1
 8002b50:	3a01      	subs	r2, #1
 8002b52:	0652      	lsls	r2, r2, #25
 8002b54:	430a      	orrs	r2, r1
 8002b56:	4916      	ldr	r1, [pc, #88]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe faac 	bl	80010c4 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b70:	f7fe faa8 	bl	80010c4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
          break;
 8002b82:	e005      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4904      	ldr	r1, [pc, #16]	@ (8002bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bce:	4b67      	ldr	r3, [pc, #412]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0203 	and.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d10d      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
       ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002be6:	4b61      	ldr	r3, [pc, #388]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d047      	beq.n	8002c8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e044      	b.n	8002c8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d018      	beq.n	8002c3a <RCCEx_PLLSAI2_Config+0x86>
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d825      	bhi.n	8002c58 <RCCEx_PLLSAI2_Config+0xa4>
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d002      	beq.n	8002c16 <RCCEx_PLLSAI2_Config+0x62>
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d009      	beq.n	8002c28 <RCCEx_PLLSAI2_Config+0x74>
 8002c14:	e020      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c16:	4b55      	ldr	r3, [pc, #340]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11d      	bne.n	8002c5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e01a      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c28:	4b50      	ldr	r3, [pc, #320]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e013      	b.n	8002c62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c46:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c56:	e006      	b.n	8002c66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e004      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e002      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	430b      	orrs	r3, r1
 8002c84:	4939      	ldr	r1, [pc, #228]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d167      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c90:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a35      	ldr	r2, [pc, #212]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fa12 	bl	80010c4 <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca2:	e009      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ca4:	f7fe fa0e 	bl	80010c4 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cb6:	e005      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ef      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d14a      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd0:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6892      	ldr	r2, [r2, #8]
 8002ce0:	0211      	lsls	r1, r2, #8
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68d2      	ldr	r2, [r2, #12]
 8002ce6:	0912      	lsrs	r2, r2, #4
 8002ce8:	0452      	lsls	r2, r2, #17
 8002cea:	430a      	orrs	r2, r1
 8002cec:	491f      	ldr	r1, [pc, #124]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	614b      	str	r3, [r1, #20]
 8002cf2:	e011      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	0211      	lsls	r1, r2, #8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6912      	ldr	r2, [r2, #16]
 8002d0a:	0852      	lsrs	r2, r2, #1
 8002d0c:	3a01      	subs	r2, #1
 8002d0e:	0652      	lsls	r2, r2, #25
 8002d10:	430a      	orrs	r2, r1
 8002d12:	4916      	ldr	r1, [pc, #88]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d18:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe f9ce 	bl	80010c4 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d2a:	e009      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d2c:	f7fe f9ca 	bl	80010c4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d902      	bls.n	8002d40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d3e:	e005      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4904      	ldr	r1, [pc, #16]	@ (8002d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e095      	b.n	8002eae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d92:	d009      	beq.n	8002da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd fff6 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002de8:	d902      	bls.n	8002df0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e002      	b.n	8002df6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002dfe:	d007      	beq.n	8002e10 <HAL_SPI_Init+0xa0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	ea42 0103 	orr.w	r1, r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	f003 0204 	and.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e8c:	ea42 0103 	orr.w	r1, r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b088      	sub	sp, #32
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec6:	f7fe f8fd 	bl	80010c4 <HAL_GetTick>
 8002eca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
 8002ede:	e15c      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Transmit+0x36>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e154      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_SPI_Transmit+0x48>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e14d      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f50:	d10f      	bne.n	8002f72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	d007      	beq.n	8002f90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f98:	d952      	bls.n	8003040 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_SPI_Transmit+0xf2>
 8002fa2:	8b7b      	ldrh	r3, [r7, #26]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d145      	bne.n	8003034 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fcc:	e032      	b.n	8003034 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d112      	bne.n	8003002 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003000:	e018      	b.n	8003034 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003002:	f7fe f85f 	bl	80010c4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d803      	bhi.n	800301a <HAL_SPI_Transmit+0x164>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d102      	bne.n	8003020 <HAL_SPI_Transmit+0x16a>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0b2      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1c7      	bne.n	8002fce <HAL_SPI_Transmit+0x118>
 800303e:	e083      	b.n	8003148 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_SPI_Transmit+0x198>
 8003048:	8b7b      	ldrh	r3, [r7, #26]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d177      	bne.n	800313e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d912      	bls.n	800307e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b02      	subs	r3, #2
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800307c:	e05f      	b.n	800313e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030a4:	e04b      	b.n	800313e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d12b      	bne.n	800310c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d912      	bls.n	80030e4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b02      	subs	r3, #2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e2:	e02c      	b.n	800313e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800310a:	e018      	b.n	800313e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800310c:	f7fd ffda 	bl	80010c4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d803      	bhi.n	8003124 <HAL_SPI_Transmit+0x26e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d102      	bne.n	800312a <HAL_SPI_Transmit+0x274>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e02d      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ae      	bne.n	80030a6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fcf5 	bl	8003b3c <SPI_EndRxTxTransaction>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003198:	2300      	movs	r3, #0
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af02      	add	r7, sp, #8
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d001      	beq.n	80031c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	e123      	b.n	800340a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ca:	d112      	bne.n	80031f2 <HAL_SPI_Receive+0x50>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2204      	movs	r2, #4
 80031d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f912 	bl	8003412 <HAL_SPI_TransmitReceive>
 80031ee:	4603      	mov	r3, r0
 80031f0:	e10b      	b.n	800340a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f2:	f7fd ff67 	bl	80010c4 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Receive+0x62>
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e100      	b.n	800340a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_SPI_Receive+0x74>
 8003212:	2302      	movs	r3, #2
 8003214:	e0f9      	b.n	800340a <HAL_SPI_Receive+0x268>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2204      	movs	r2, #4
 8003222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003268:	d908      	bls.n	800327c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e007      	b.n	800328c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003294:	d10f      	bne.n	80032b6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032dc:	d875      	bhi.n	80033ca <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032de:	e037      	b.n	8003350 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d117      	bne.n	800331e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f103 020c 	add.w	r2, r3, #12
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800331c:	e018      	b.n	8003350 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fd fed1 	bl	80010c4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Receive+0x194>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d102      	bne.n	800333c <HAL_SPI_Receive+0x19a>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e05c      	b.n	800340a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1c1      	bne.n	80032e0 <HAL_SPI_Receive+0x13e>
 800335c:	e03b      	b.n	80033d6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d115      	bne.n	8003398 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	b292      	uxth	r2, r2
 8003378:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	1c9a      	adds	r2, r3, #2
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003396:	e018      	b.n	80033ca <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003398:	f7fd fe94 	bl	80010c4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d803      	bhi.n	80033b0 <HAL_SPI_Receive+0x20e>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Receive+0x214>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e01f      	b.n	800340a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1c3      	bne.n	800335e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fb56 	bl	8003a8c <SPI_EndRxTransaction>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003408:	2300      	movs	r3, #0
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08a      	sub	sp, #40	@ 0x28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003420:	2301      	movs	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003424:	f7fd fe4e 	bl	80010c4 <HAL_GetTick>
 8003428:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003430:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003440:	7ffb      	ldrb	r3, [r7, #31]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d00c      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x4e>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800344c:	d106      	bne.n	800345c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <HAL_SPI_TransmitReceive+0x4a>
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d001      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	e1f3      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x60>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x60>
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1e8      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x72>
 8003480:	2302      	movs	r3, #2
 8003482:	e1e1      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b04      	cmp	r3, #4
 8003496:	d003      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2205      	movs	r2, #5
 800349c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	887a      	ldrh	r2, [r7, #2]
 80034c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e2:	d802      	bhi.n	80034ea <HAL_SPI_TransmitReceive+0xd8>
 80034e4:	8abb      	ldrh	r3, [r7, #20]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d908      	bls.n	80034fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	e007      	b.n	800350c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003516:	2b40      	cmp	r3, #64	@ 0x40
 8003518:	d007      	beq.n	800352a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003532:	f240 8083 	bls.w	800363c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x132>
 800353e:	8afb      	ldrh	r3, [r7, #22]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d16f      	bne.n	8003624 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003568:	e05c      	b.n	8003624 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b02      	cmp	r3, #2
 8003576:	d11b      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x19e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x19e>
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	2b01      	cmp	r3, #1
 8003586:	d113      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11c      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x1e6>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	b292      	uxth	r2, r2
 80035d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035f4:	2301      	movs	r3, #1
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035f8:	f7fd fd64 	bl	80010c4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003604:	429a      	cmp	r2, r3
 8003606:	d80d      	bhi.n	8003624 <HAL_SPI_TransmitReceive+0x212>
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d009      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e111      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d19d      	bne.n	800356a <HAL_SPI_TransmitReceive+0x158>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d197      	bne.n	800356a <HAL_SPI_TransmitReceive+0x158>
 800363a:	e0e5      	b.n	8003808 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_SPI_TransmitReceive+0x23a>
 8003644:	8afb      	ldrh	r3, [r7, #22]
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 80d1 	bne.w	80037ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d912      	bls.n	800367c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b02      	subs	r3, #2
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800367a:	e0b8      	b.n	80037ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a2:	e0a4      	b.n	80037ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d134      	bne.n	800371c <HAL_SPI_TransmitReceive+0x30a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02f      	beq.n	800371c <HAL_SPI_TransmitReceive+0x30a>
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12c      	bne.n	800371c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d912      	bls.n	80036f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b02      	subs	r3, #2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036f0:	e012      	b.n	8003718 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d148      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x3aa>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d042      	beq.n	80037bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d923      	bls.n	800378a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	b292      	uxth	r2, r2
 800374e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b02      	subs	r3, #2
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d81f      	bhi.n	80037b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	e016      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f103 020c 	add.w	r2, r3, #12
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b8:	2301      	movs	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037bc:	f7fd fc82 	bl	80010c4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d803      	bhi.n	80037d4 <HAL_SPI_TransmitReceive+0x3c2>
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d102      	bne.n	80037da <HAL_SPI_TransmitReceive+0x3c8>
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e02c      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f af55 	bne.w	80036a4 <HAL_SPI_TransmitReceive+0x292>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	f47f af4e 	bne.w	80036a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f995 	bl	8003b3c <SPI_EndRxTxTransaction>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00e      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003846:	2300      	movs	r3, #0
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	@ 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003860:	f7fd fc30 	bl	80010c4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	4413      	add	r3, r2
 800386e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003870:	f7fd fc28 	bl	80010c4 <HAL_GetTick>
 8003874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003876:	4b39      	ldr	r3, [pc, #228]	@ (800395c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	015b      	lsls	r3, r3, #5
 800387c:	0d1b      	lsrs	r3, r3, #20
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003886:	e054      	b.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d050      	beq.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003890:	f7fd fc18 	bl	80010c4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	429a      	cmp	r2, r3
 800389e:	d902      	bls.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d13d      	bne.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038be:	d111      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c8:	d004      	beq.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d2:	d107      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ec:	d10f      	bne.n	800390e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800390c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e017      	b.n	8003952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3b01      	subs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4013      	ands	r3, r2
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	429a      	cmp	r2, r3
 800394e:	d19b      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003972:	f7fd fba7 	bl	80010c4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	4413      	add	r3, r2
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003982:	f7fd fb9f 	bl	80010c4 <HAL_GetTick>
 8003986:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003990:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	0d1b      	lsrs	r3, r3, #20
 80039a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039a8:	e060      	b.n	8003a6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039b0:	d107      	bne.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d050      	beq.n	8003a6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ca:	f7fd fb7b 	bl	80010c4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d902      	bls.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13d      	bne.n	8003a5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f8:	d111      	bne.n	8003a1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a02:	d004      	beq.n	8003a0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0c:	d107      	bne.n	8003a1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d10f      	bne.n	8003a48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e010      	b.n	8003a7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d196      	bne.n	80039aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	@ 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000000 	.word	0x20000000

08003a8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa0:	d111      	bne.n	8003ac6 <SPI_EndRxTransaction+0x3a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aaa:	d004      	beq.n	8003ab6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab4:	d107      	bne.n	8003ac6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	@ 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff febd 	bl	8003850 <SPI_WaitFlagStateUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e023      	b.n	8003b34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af4:	d11d      	bne.n	8003b32 <SPI_EndRxTransaction+0xa6>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afe:	d004      	beq.n	8003b0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b08:	d113      	bne.n	8003b32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff ff22 	bl	8003960 <SPI_WaitFifoStateUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e000      	b.n	8003b34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ff03 	bl	8003960 <SPI_WaitFifoStateUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e027      	b.n	8003bc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2180      	movs	r1, #128	@ 0x80
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff fe68 	bl	8003850 <SPI_WaitFlagStateUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e014      	b.n	8003bc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fedc 	bl	8003960 <SPI_WaitFifoStateUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e000      	b.n	8003bc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e040      	b.n	8003c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd f926 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fae0 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f825 	bl	8003c64 <UART_SetConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01b      	b.n	8003c5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fb5f 	bl	8004318 <UART_CheckIdleState>
 8003c5a:	4603      	mov	r3, r0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b08a      	sub	sp, #40	@ 0x28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4ba4      	ldr	r3, [pc, #656]	@ (8003f24 <UART_SetConfig+0x2c0>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a99      	ldr	r2, [pc, #612]	@ (8003f28 <UART_SetConfig+0x2c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a90      	ldr	r2, [pc, #576]	@ (8003f2c <UART_SetConfig+0x2c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d126      	bne.n	8003d3c <UART_SetConfig+0xd8>
 8003cee:	4b90      	ldr	r3, [pc, #576]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d81b      	bhi.n	8003d34 <UART_SetConfig+0xd0>
 8003cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <UART_SetConfig+0xa0>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d2d 	.word	0x08003d2d
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e116      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e112      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e10e      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e10a      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e106      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7c      	ldr	r2, [pc, #496]	@ (8003f34 <UART_SetConfig+0x2d0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d138      	bne.n	8003db8 <UART_SetConfig+0x154>
 8003d46:	4b7a      	ldr	r3, [pc, #488]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d82d      	bhi.n	8003db0 <UART_SetConfig+0x14c>
 8003d54:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <UART_SetConfig+0xf8>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003db1 	.word	0x08003db1
 8003d64:	08003db1 	.word	0x08003db1
 8003d68:	08003db1 	.word	0x08003db1
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003d99 	.word	0x08003d99
 8003d80:	08003db1 	.word	0x08003db1
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003da9 	.word	0x08003da9
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d96:	e0d8      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	e0d4      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da6:	e0d0      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dae:	e0cc      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e0c8      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d125      	bne.n	8003e0e <UART_SetConfig+0x1aa>
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dcc:	2b30      	cmp	r3, #48	@ 0x30
 8003dce:	d016      	beq.n	8003dfe <UART_SetConfig+0x19a>
 8003dd0:	2b30      	cmp	r3, #48	@ 0x30
 8003dd2:	d818      	bhi.n	8003e06 <UART_SetConfig+0x1a2>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d00a      	beq.n	8003dee <UART_SetConfig+0x18a>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d814      	bhi.n	8003e06 <UART_SetConfig+0x1a2>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <UART_SetConfig+0x182>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d008      	beq.n	8003df6 <UART_SetConfig+0x192>
 8003de4:	e00f      	b.n	8003e06 <UART_SetConfig+0x1a2>
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dec:	e0ad      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003dee:	2302      	movs	r3, #2
 8003df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df4:	e0a9      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003df6:	2304      	movs	r3, #4
 8003df8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfc:	e0a5      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e04:	e0a1      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e06:	2310      	movs	r3, #16
 8003e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0c:	e09d      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <UART_SetConfig+0x2d8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d125      	bne.n	8003e64 <UART_SetConfig+0x200>
 8003e18:	4b45      	ldr	r3, [pc, #276]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e24:	d016      	beq.n	8003e54 <UART_SetConfig+0x1f0>
 8003e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e28:	d818      	bhi.n	8003e5c <UART_SetConfig+0x1f8>
 8003e2a:	2b80      	cmp	r3, #128	@ 0x80
 8003e2c:	d00a      	beq.n	8003e44 <UART_SetConfig+0x1e0>
 8003e2e:	2b80      	cmp	r3, #128	@ 0x80
 8003e30:	d814      	bhi.n	8003e5c <UART_SetConfig+0x1f8>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <UART_SetConfig+0x1d8>
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d008      	beq.n	8003e4c <UART_SetConfig+0x1e8>
 8003e3a:	e00f      	b.n	8003e5c <UART_SetConfig+0x1f8>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e42:	e082      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4a:	e07e      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e07a      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e54:	2308      	movs	r3, #8
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e076      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e072      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <UART_SetConfig+0x2dc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d12a      	bne.n	8003ec4 <UART_SetConfig+0x260>
 8003e6e:	4b30      	ldr	r3, [pc, #192]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e7c:	d01a      	beq.n	8003eb4 <UART_SetConfig+0x250>
 8003e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0x258>
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e88:	d00c      	beq.n	8003ea4 <UART_SetConfig+0x240>
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8e:	d815      	bhi.n	8003ebc <UART_SetConfig+0x258>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x238>
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e98:	d008      	beq.n	8003eac <UART_SetConfig+0x248>
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x258>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e052      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e04e      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e04a      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eba:	e046      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec2:	e042      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <UART_SetConfig+0x2c4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d13a      	bne.n	8003f44 <UART_SetConfig+0x2e0>
 8003ece:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003edc:	d01a      	beq.n	8003f14 <UART_SetConfig+0x2b0>
 8003ede:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee2:	d81b      	bhi.n	8003f1c <UART_SetConfig+0x2b8>
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee8:	d00c      	beq.n	8003f04 <UART_SetConfig+0x2a0>
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eee:	d815      	bhi.n	8003f1c <UART_SetConfig+0x2b8>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <UART_SetConfig+0x298>
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef8:	d008      	beq.n	8003f0c <UART_SetConfig+0x2a8>
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x2b8>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e022      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e01e      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e01a      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003f14:	2308      	movs	r3, #8
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1a:	e016      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f22:	e012      	b.n	8003f4a <UART_SetConfig+0x2e6>
 8003f24:	efff69f3 	.word	0xefff69f3
 8003f28:	40008000 	.word	0x40008000
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40004400 	.word	0x40004400
 8003f38:	40004800 	.word	0x40004800
 8003f3c:	40004c00 	.word	0x40004c00
 8003f40:	40005000 	.word	0x40005000
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a9f      	ldr	r2, [pc, #636]	@ (80041cc <UART_SetConfig+0x568>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d17a      	bne.n	800404a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d824      	bhi.n	8003fa6 <UART_SetConfig+0x342>
 8003f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <UART_SetConfig+0x300>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003f97 	.word	0x08003f97
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003fa7 	.word	0x08003fa7
 8003f80:	08003fa7 	.word	0x08003fa7
 8003f84:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe f9aa 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61f8      	str	r0, [r7, #28]
        break;
 8003f8e:	e010      	b.n	8003fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b8f      	ldr	r3, [pc, #572]	@ (80041d0 <UART_SetConfig+0x56c>)
 8003f92:	61fb      	str	r3, [r7, #28]
        break;
 8003f94:	e00d      	b.n	8003fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe f90b 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8003f9a:	61f8      	str	r0, [r7, #28]
        break;
 8003f9c:	e009      	b.n	8003fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa2:	61fb      	str	r3, [r7, #28]
        break;
 8003fa4:	e005      	b.n	8003fb2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80fb 	beq.w	80041b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d305      	bcc.n	8003fd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fdc:	e0e8      	b.n	80041b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	022b      	lsls	r3, r5, #8
 8003ff0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ff4:	0222      	lsls	r2, r4, #8
 8003ff6:	68f9      	ldr	r1, [r7, #12]
 8003ff8:	6849      	ldr	r1, [r1, #4]
 8003ffa:	0849      	lsrs	r1, r1, #1
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4688      	mov	r8, r1
 8004000:	4681      	mov	r9, r0
 8004002:	eb12 0a08 	adds.w	sl, r2, r8
 8004006:	eb43 0b09 	adc.w	fp, r3, r9
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004018:	4650      	mov	r0, sl
 800401a:	4659      	mov	r1, fp
 800401c:	f7fc f8d4 	bl	80001c8 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800402e:	d308      	bcc.n	8004042 <UART_SetConfig+0x3de>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	d204      	bcs.n	8004042 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	e0b6      	b.n	80041b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004048:	e0b2      	b.n	80041b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004052:	d15e      	bne.n	8004112 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004058:	2b08      	cmp	r3, #8
 800405a:	d828      	bhi.n	80040ae <UART_SetConfig+0x44a>
 800405c:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <UART_SetConfig+0x400>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004089 	.word	0x08004089
 8004068:	08004091 	.word	0x08004091
 800406c:	08004099 	.word	0x08004099
 8004070:	080040af 	.word	0x080040af
 8004074:	0800409f 	.word	0x0800409f
 8004078:	080040af 	.word	0x080040af
 800407c:	080040af 	.word	0x080040af
 8004080:	080040af 	.word	0x080040af
 8004084:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7fe f92a 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 800408c:	61f8      	str	r0, [r7, #28]
        break;
 800408e:	e014      	b.n	80040ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004090:	f7fe f93c 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8004094:	61f8      	str	r0, [r7, #28]
        break;
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <UART_SetConfig+0x56c>)
 800409a:	61fb      	str	r3, [r7, #28]
        break;
 800409c:	e00d      	b.n	80040ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7fe f887 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 80040a2:	61f8      	str	r0, [r7, #28]
        break;
 80040a4:	e009      	b.n	80040ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040aa:	61fb      	str	r3, [r7, #28]
        break;
 80040ac:	e005      	b.n	80040ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d077      	beq.n	80041b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005a      	lsls	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d916      	bls.n	800410a <UART_SetConfig+0x4a6>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e2:	d212      	bcs.n	800410a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f023 030f 	bic.w	r3, r3, #15
 80040ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	8afb      	ldrh	r3, [r7, #22]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	8afa      	ldrh	r2, [r7, #22]
 8004106:	60da      	str	r2, [r3, #12]
 8004108:	e052      	b.n	80041b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004110:	e04e      	b.n	80041b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004112:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004116:	2b08      	cmp	r3, #8
 8004118:	d827      	bhi.n	800416a <UART_SetConfig+0x506>
 800411a:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <UART_SetConfig+0x4bc>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe f8cc 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e014      	b.n	8004176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe f8de 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <UART_SetConfig+0x56c>)
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe f829 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004174:	bf00      	nop
    }

    if (pclk != 0U)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d019      	beq.n	80041b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	085a      	lsrs	r2, r3, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d909      	bls.n	80041aa <UART_SetConfig+0x546>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419c:	d205      	bcs.n	80041aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	e002      	b.n	80041b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3728      	adds	r7, #40	@ 0x28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40008000 	.word	0x40008000
 80041d0:	00f42400 	.word	0x00f42400

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d10a      	bne.n	80042ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b098      	sub	sp, #96	@ 0x60
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004328:	f7fc fecc 	bl	80010c4 <HAL_GetTick>
 800432c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d12e      	bne.n	800439a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f88c 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d021      	beq.n	800439a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436a:	653b      	str	r3, [r7, #80]	@ 0x50
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
 8004376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800437a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e062      	b.n	8004460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d149      	bne.n	800443c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f856 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03c      	beq.n	800443c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	623b      	str	r3, [r7, #32]
   return(result);
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	60fb      	str	r3, [r7, #12]
   return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004414:	61fa      	str	r2, [r7, #28]
 8004416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	617b      	str	r3, [r7, #20]
   return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e011      	b.n	8004460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3758      	adds	r7, #88	@ 0x58
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	e04f      	b.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d04b      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fc fe1f 	bl	80010c4 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <UART_WaitOnFlagUntilTimeout+0x30>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e04e      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d037      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b80      	cmp	r3, #128	@ 0x80
 80044ae:	d034      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b40      	cmp	r3, #64	@ 0x40
 80044b4:	d031      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d110      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f838 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2208      	movs	r2, #8
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e029      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f4:	d111      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f81e 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00f      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d0a0      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b095      	sub	sp, #84	@ 0x54
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004568:	643b      	str	r3, [r7, #64]	@ 0x40
 800456a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800456e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	61fb      	str	r3, [r7, #28]
   return(result);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800459c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d118      	bne.n	80045ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	613b      	str	r3, [r7, #16]
   return(result);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <memset>:
 800460a:	4402      	add	r2, r0
 800460c:	4603      	mov	r3, r0
 800460e:	4293      	cmp	r3, r2
 8004610:	d100      	bne.n	8004614 <memset+0xa>
 8004612:	4770      	bx	lr
 8004614:	f803 1b01 	strb.w	r1, [r3], #1
 8004618:	e7f9      	b.n	800460e <memset+0x4>
	...

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	@ (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	@ (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	@ (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	@ (8004660 <__libc_init_array+0x44>)
 8004630:	f000 f818 	bl	8004664 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	080046cc 	.word	0x080046cc
 8004658:	080046cc 	.word	0x080046cc
 800465c:	080046cc 	.word	0x080046cc
 8004660:	080046d0 	.word	0x080046d0

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
