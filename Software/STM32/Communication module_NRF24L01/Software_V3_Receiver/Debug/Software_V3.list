
Software_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004508  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e0  080046e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e4  080046e4  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080046f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080046f4  00006120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd3b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2c  00000000  00000000  00012d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00014aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  00015670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255a8  00000000  00000000  00015f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d159  00000000  00000000  0003b524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e693b  00000000  00000000  0004867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012efb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003018  00000000  00000000  0012effc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00132014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004678 	.word	0x08004678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004678 	.word	0x08004678

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd7e 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80f 	bl	800051e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8cc 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f89a 	bl	800063c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000508:	f000 f85a 	bl	80005c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _1Mbps);
 800050c:	2100      	movs	r1, #0
 800050e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000512:	f000 f9f9 	bl	8000908 <nrf24l01p_rx_init>


	  nrf24l01p_tx_transmit(tx_data);
#endif

	  HAL_Delay(100);
 8000516:	2064      	movs	r0, #100	@ 0x64
 8000518:	f000 fdea 	bl	80010f0 <HAL_Delay>
 800051c:	e7fb      	b.n	8000516 <main+0x22>

0800051e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b096      	sub	sp, #88	@ 0x58
 8000522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2244      	movs	r2, #68	@ 0x44
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f876 	bl	800461e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000540:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000544:	f001 f90c 	bl	8001760 <HAL_PWREx_ControlVoltageScaling>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054e:	f000 f951 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056c:	230a      	movs	r3, #10
 800056e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f943 	bl	800180c <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058c:	f000 f932 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fd0b 	bl	8001fc4 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b4:	f000 f91e 	bl	80007f4 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	@ 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000638 <MX_SPI2_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_SPI2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_SPI2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_SPI2_Init+0x74>)
 800060e:	2207      	movs	r2, #7
 8000610:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_SPI2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_SPI2_Init+0x74>)
 800061a:	2208      	movs	r2, #8
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_SPI2_Init+0x74>)
 8000620:	f002 fbb0 	bl	8002d84 <HAL_SPI_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8e3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028
 8000638:	40003800 	.word	0x40003800

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	f003 faac 	bl	8003bdc <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 f8b3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b44      	ldr	r3, [pc, #272]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a43      	ldr	r2, [pc, #268]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b41      	ldr	r3, [pc, #260]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a3d      	ldr	r2, [pc, #244]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b38      	ldr	r3, [pc, #224]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a37      	ldr	r2, [pc, #220]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b35      	ldr	r3, [pc, #212]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b32      	ldr	r3, [pc, #200]	@ (80007c4 <MX_GPIO_Init+0x128>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a31      	ldr	r2, [pc, #196]	@ (80007c4 <MX_GPIO_Init+0x128>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b2f      	ldr	r3, [pc, #188]	@ (80007c4 <MX_GPIO_Init+0x128>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f000 ffc9 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000724:	4828      	ldr	r0, [pc, #160]	@ (80007c8 <MX_GPIO_Init+0x12c>)
 8000726:	f000 ffc3 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000730:	4825      	ldr	r0, [pc, #148]	@ (80007c8 <MX_GPIO_Init+0x12c>)
 8000732:	f000 ffbd 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	481f      	ldr	r0, [pc, #124]	@ (80007cc <MX_GPIO_Init+0x130>)
 800074e:	f000 fe05 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076c:	f000 fdf6 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin SPI2_CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000770:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_GPIO_Init+0x12c>)
 800078a:	f000 fde7 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800078e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 fdd8 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2017      	movs	r0, #23
 80007b2:	f000 fd9c 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007b6:	2017      	movs	r0, #23
 80007b8:	f000 fdb5 	bl	8001326 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800

080007d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007e0:	d102      	bne.n	80007e8 <HAL_GPIO_EXTI_Callback+0x18>
	{
#ifdef RECEIVER
	    nrf24l01p_rx_receive(rx_data);
 80007e2:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x20>)
 80007e4:	f000 f8be 	bl	8000964 <nrf24l01p_rx_receive>
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
#endif
	}

}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000114 	.word	0x20000114

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080a:	4802      	ldr	r0, [pc, #8]	@ (8000814 <cs_high+0x14>)
 800080c:	f000 ff50 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	48000400 	.word	0x48000400

08000818 <cs_low>:

static void cs_low()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	4802      	ldr	r0, [pc, #8]	@ (800082c <cs_low+0x14>)
 8000824:	f000 ff44 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000400 	.word	0x48000400

08000830 <ce_high>:

static void ce_high()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	4802      	ldr	r0, [pc, #8]	@ (8000844 <ce_high+0x14>)
 800083c:	f000 ff38 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	48000400 	.word	0x48000400

08000848 <ce_low>:

static void ce_low()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000852:	4802      	ldr	r0, [pc, #8]	@ (800085c <ce_low+0x14>)
 8000854:	f000 ff2c 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	48000400 	.word	0x48000400

08000860 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800086e:	f7ff ffd3 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000872:	f107 020e 	add.w	r2, r7, #14
 8000876:	f107 010f 	add.w	r1, r7, #15
 800087a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <read_register+0x48>)
 8000884:	f002 fdcf 	bl	8003426 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000888:	f107 010d 	add.w	r1, r7, #13
 800088c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000890:	2201      	movs	r2, #1
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <read_register+0x48>)
 8000894:	f002 fc8f 	bl	80031b6 <HAL_SPI_Receive>
    cs_high();
 8000898:	f7ff ffb2 	bl	8000800 <cs_high>

    return read_val;
 800089c:	7b7b      	ldrb	r3, [r7, #13]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028

080008ac <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	737b      	strb	r3, [r7, #13]

    cs_low();
 80008ca:	f7ff ffa5 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80008ce:	f107 020e 	add.w	r2, r7, #14
 80008d2:	f107 010f 	add.w	r1, r7, #15
 80008d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	4809      	ldr	r0, [pc, #36]	@ (8000904 <write_register+0x58>)
 80008e0:	f002 fda1 	bl	8003426 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80008e4:	f107 010d 	add.w	r1, r7, #13
 80008e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008ec:	2201      	movs	r2, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <write_register+0x58>)
 80008f0:	f002 faeb 	bl	8002eca <HAL_SPI_Transmit>
    cs_high();
 80008f4:	f7ff ff84 	bl	8000800 <cs_high>

    return write_val;
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028

08000908 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	80fb      	strh	r3, [r7, #6]
 8000914:	4613      	mov	r3, r2
 8000916:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000918:	f000 f838 	bl	800098c <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 800091c:	f000 f88a 	bl	8000a34 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000920:	f000 f92e 	bl	8000b80 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000924:	2008      	movs	r0, #8
 8000926:	f000 f909 	bl	8000b3c <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f9b3 	bl	8000c98 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f9e0 	bl	8000cfa <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f9bf 	bl	8000cbe <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f932 	bl	8000baa <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000946:	2005      	movs	r0, #5
 8000948:	f000 f952 	bl	8000bf0 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f95f 	bl	8000c10 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000952:	20fa      	movs	r0, #250	@ 0xfa
 8000954:	f000 f978 	bl	8000c48 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8000958:	f7ff ff6a 	bl	8000830 <ce_high>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f877 	bl	8000a60 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8000972:	f000 f8f1 	bl	8000b58 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097a:	4803      	ldr	r0, [pc, #12]	@ (8000988 <nrf24l01p_rx_receive+0x24>)
 800097c:	f000 feb0 	bl	80016e0 <HAL_GPIO_TogglePin>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	48000800 	.word	0x48000800

0800098c <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000990:	f7ff ff36 	bl	8000800 <cs_high>
    ce_low();
 8000994:	f7ff ff58 	bl	8000848 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000998:	2108      	movs	r1, #8
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff86 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80009a0:	213f      	movs	r1, #63	@ 0x3f
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff82 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80009a8:	2103      	movs	r1, #3
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ff7e 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80009b0:	2103      	movs	r1, #3
 80009b2:	2003      	movs	r0, #3
 80009b4:	f7ff ff7a 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80009b8:	2103      	movs	r1, #3
 80009ba:	2004      	movs	r0, #4
 80009bc:	f7ff ff76 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80009c0:	2102      	movs	r1, #2
 80009c2:	2005      	movs	r0, #5
 80009c4:	f7ff ff72 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80009c8:	2107      	movs	r1, #7
 80009ca:	2006      	movs	r0, #6
 80009cc:	f7ff ff6e 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80009d0:	217e      	movs	r1, #126	@ 0x7e
 80009d2:	2007      	movs	r0, #7
 80009d4:	f7ff ff6a 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80009d8:	2100      	movs	r1, #0
 80009da:	2011      	movs	r0, #17
 80009dc:	f7ff ff66 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2011      	movs	r0, #17
 80009e4:	f7ff ff62 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2012      	movs	r0, #18
 80009ec:	f7ff ff5e 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2013      	movs	r0, #19
 80009f4:	f7ff ff5a 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2014      	movs	r0, #20
 80009fc:	f7ff ff56 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2015      	movs	r0, #21
 8000a04:	f7ff ff52 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2016      	movs	r0, #22
 8000a0c:	f7ff ff4e 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000a10:	2111      	movs	r1, #17
 8000a12:	2017      	movs	r0, #23
 8000a14:	f7ff ff4a 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	201c      	movs	r0, #28
 8000a1c:	f7ff ff46 	bl	80008ac <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000a20:	2100      	movs	r1, #0
 8000a22:	201d      	movs	r0, #29
 8000a24:	f7ff ff42 	bl	80008ac <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000a28:	f000 f83e 	bl	8000aa8 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000a2c:	f000 f854 	bl	8000ad8 <nrf24l01p_flush_tx_fifo>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ff10 	bl	8000860 <read_register>
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff ff2b 	bl	80008ac <write_register>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000a68:	2361      	movs	r3, #97	@ 0x61
 8000a6a:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000a6c:	f7ff fed4 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000a70:	f107 020e 	add.w	r2, r7, #14
 8000a74:	f107 010f 	add.w	r1, r7, #15
 8000a78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <nrf24l01p_read_rx_fifo+0x44>)
 8000a82:	f002 fcd0 	bl	8003426 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000a86:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <nrf24l01p_read_rx_fifo+0x44>)
 8000a90:	f002 fb91 	bl	80031b6 <HAL_SPI_Receive>
    cs_high();
 8000a94:	f7ff feb4 	bl	8000800 <cs_high>

    return status;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000028 	.word	0x20000028

08000aa8 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000aae:	23e2      	movs	r3, #226	@ 0xe2
 8000ab0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000ab2:	f7ff feb1 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ab6:	1dba      	adds	r2, r7, #6
 8000ab8:	1df9      	adds	r1, r7, #7
 8000aba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000ac4:	f002 fcaf 	bl	8003426 <HAL_SPI_TransmitReceive>
    cs_high();
 8000ac8:	f7ff fe9a 	bl	8000800 <cs_high>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000028 	.word	0x20000028

08000ad8 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000ade:	23e1      	movs	r3, #225	@ 0xe1
 8000ae0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000ae2:	f7ff fe99 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ae6:	1dba      	adds	r2, r7, #6
 8000ae8:	1df9      	adds	r1, r7, #7
 8000aea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2301      	movs	r3, #1
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000af4:	f002 fc97 	bl	8003426 <HAL_SPI_TransmitReceive>
    cs_high();
 8000af8:	f7ff fe82 	bl	8000800 <cs_high>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000028 	.word	0x20000028

08000b08 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000b0e:	23ff      	movs	r3, #255	@ 0xff
 8000b10:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000b12:	f7ff fe81 	bl	8000818 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b16:	1dba      	adds	r2, r7, #6
 8000b18:	1df9      	adds	r1, r7, #7
 8000b1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <nrf24l01p_get_status+0x30>)
 8000b24:	f002 fc7f 	bl	8003426 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000b28:	f7ff fe6a 	bl	8000800 <cs_high>

    return status;
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000028 	.word	0x20000028

08000b3c <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2011      	movs	r0, #17
 8000b4c:	f7ff feae 	bl	80008ac <write_register>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000b5e:	f7ff ffd3 	bl	8000b08 <nrf24l01p_get_status>
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b6c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2007      	movs	r0, #7
 8000b74:	f7ff fe9a 	bl	80008ac <write_register>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fe6a 	bl	8000860 <read_register>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fe85 	bl	80008ac <write_register>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fe53 	bl	8000860 <read_register>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d002      	beq.n	8000bca <nrf24l01p_set_crc_length+0x20>
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d005      	beq.n	8000bd4 <nrf24l01p_set_crc_length+0x2a>
 8000bc8:	e009      	b.n	8000bde <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f023 0304 	bic.w	r3, r3, #4
 8000bd0:	73fb      	strb	r3, [r7, #15]
            break;
 8000bd2:	e004      	b.n	8000bde <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	73fb      	strb	r3, [r7, #15]
            break;
 8000bdc:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4619      	mov	r1, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fe62 	bl	80008ac <write_register>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	2003      	movs	r0, #3
 8000c04:	f7ff fe52 	bl	80008ac <write_register>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f7ff fe20 	bl	8000860 <read_register>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f063 030f 	orn	r3, r3, #15
 8000c2a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	4619      	mov	r1, r3
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fe37 	bl	80008ac <write_register>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff fe04 	bl	8000860 <read_register>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f043 030f 	orr.w	r3, r3, #15
 8000c62:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	@ (8000c94 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	3b01      	subs	r3, #1
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	4619      	mov	r1, r3
 8000c86:	2004      	movs	r0, #4
 8000c88:	f7ff fe10 	bl	80008ac <write_register>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	10624dd3 	.word	0x10624dd3

08000c98 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000ca8:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f7ff fdfb 	bl	80008ac <write_register>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000cc8:	2006      	movs	r0, #6
 8000cca:	f7ff fdc9 	bl	8000860 <read_register>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f023 0306 	bic.w	r3, r3, #6
 8000cd4:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	4619      	mov	r1, r3
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fddd 	bl	80008ac <write_register>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000d04:	2006      	movs	r0, #6
 8000d06:	f7ff fdab 	bl	8000860 <read_register>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d10:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d00a      	beq.n	8000d2e <nrf24l01p_set_rf_air_data_rate+0x34>
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	dc0e      	bgt.n	8000d3a <nrf24l01p_set_rf_air_data_rate+0x40>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00b      	beq.n	8000d38 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10a      	bne.n	8000d3a <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	73fb      	strb	r3, [r7, #15]
            break;
 8000d2c:	e005      	b.n	8000d3a <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	73fb      	strb	r3, [r7, #15]
            break;
 8000d36:	e000      	b.n	8000d3a <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000d38:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f7ff fdb4 	bl	80008ac <write_register>
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a25      	ldr	r2, [pc, #148]	@ (8000e48 <HAL_SPI_MspInit+0xb4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d144      	bne.n	8000e40 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000db6:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	4a24      	ldr	r2, [pc, #144]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc2:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <HAL_SPI_MspInit+0xbc>)
 8000e1a:	f000 fa9f 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e30:	2305      	movs	r3, #5
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <HAL_SPI_MspInit+0xc0>)
 8000e3c:	f000 fa8e 	bl	800135c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2288      	movs	r2, #136	@ 0x88
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fbd0 	bl	800461e <memset>
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <HAL_UART_MspInit+0xb0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13b      	bne.n	8000f00 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fab9 	bl	800240c <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fca8 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f000 fa2e 	bl	800135c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f00:	bf00      	nop
 8000f02:	37b0      	adds	r7, #176	@ 0xb0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <NMI_Handler+0x4>

08000f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f8a3 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000f72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f76:	f000 fbcd 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa8:	f7ff ffea 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f003 fb2d 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd6:	f7ff fa8d 	bl	80004f4 <main>

08000fda <LoopForever>:

LoopForever:
    b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	20000120 	.word	0x20000120

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_Init+0x3c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_Init+0x3c>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f962 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f80f 	bl	8001038 <HAL_InitTick>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	e001      	b.n	800102a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001026:	f7ff fe91 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102a:	79fb      	ldrb	r3, [r7, #7]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d023      	beq.n	8001094 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_InitTick+0x70>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f96d 	bl	8001342 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10f      	bne.n	800108e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d809      	bhi.n	8001088 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f937 	bl	80012ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_InitTick+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e007      	b.n	8001098 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e004      	b.n	8001098 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e001      	b.n	8001098 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	2000011c 	.word	0x2000011c

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000011c 	.word	0x2000011c

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e17f      	b.n	800166c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8171 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 0201 	and.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b03      	cmp	r3, #3
 8001408:	d118      	bne.n	800143c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80ac 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <HAL_GPIO_Init+0x330>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001512:	4a5e      	ldr	r2, [pc, #376]	@ (800168c <HAL_GPIO_Init+0x330>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	@ 0x60
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <HAL_GPIO_Init+0x330>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001526:	4a5a      	ldr	r2, [pc, #360]	@ (8001690 <HAL_GPIO_Init+0x334>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x242>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	@ (8001694 <HAL_GPIO_Init+0x338>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	@ (8001698 <HAL_GPIO_Init+0x33c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	@ (800169c <HAL_GPIO_Init+0x340>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	@ (80016a0 <HAL_GPIO_Init+0x344>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	@ (80016a4 <HAL_GPIO_Init+0x348>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	@ (80016a8 <HAL_GPIO_Init+0x34c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x22a>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159e:	2300      	movs	r3, #0
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b0:	4937      	ldr	r1, [pc, #220]	@ (8001690 <HAL_GPIO_Init+0x334>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <HAL_GPIO_Init+0x350>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e2:	4a32      	ldr	r2, [pc, #200]	@ (80016ac <HAL_GPIO_Init+0x350>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e8:	4b30      	ldr	r3, [pc, #192]	@ (80016ac <HAL_GPIO_Init+0x350>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800160c:	4a27      	ldr	r2, [pc, #156]	@ (80016ac <HAL_GPIO_Init+0x350>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <HAL_GPIO_Init+0x350>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001636:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <HAL_GPIO_Init+0x350>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_GPIO_Init+0x350>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <HAL_GPIO_Init+0x350>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae78 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	48000400 	.word	0x48000400
 8001698:	48000800 	.word	0x48000800
 800169c:	48000c00 	.word	0x48000c00
 80016a0:	48001000 	.word	0x48001000
 80016a4:	48001400 	.word	0x48001400
 80016a8:	48001800 	.word	0x48001800
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43d9      	mvns	r1, r3
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	400b      	ands	r3, r1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f84c 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <HAL_PWREx_GetVoltageRange+0x18>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40007000 	.word	0x40007000

08001760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800176e:	d130      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800177c:	d038      	beq.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2232      	movs	r2, #50	@ 0x32
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a4:	e002      	b.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b8:	d102      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f2      	bne.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017cc:	d110      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e00f      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017de:	d007      	beq.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017e8:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40007000 	.word	0x40007000
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e3ca      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b97      	ldr	r3, [pc, #604]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b94      	ldr	r3, [pc, #592]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80e4 	beq.w	8001a08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_RCC_OscConfig+0x4a>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	f040 808b 	bne.w	8001964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 8087 	bne.w	8001964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001856:	4b89      	ldr	r3, [pc, #548]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x62>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e3a2      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	4b82      	ldr	r3, [pc, #520]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <HAL_RCC_OscConfig+0x7c>
 800187e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001886:	e005      	b.n	8001894 <HAL_RCC_OscConfig+0x88>
 8001888:	4b7c      	ldr	r3, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001894:	4293      	cmp	r3, r2
 8001896:	d223      	bcs.n	80018e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fd55 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e383      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ac:	4b73      	ldr	r3, [pc, #460]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a72      	ldr	r2, [pc, #456]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	496d      	ldr	r1, [pc, #436]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ca:	4b6c      	ldr	r3, [pc, #432]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4968      	ldr	r1, [pc, #416]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e025      	b.n	800192c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e0:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a65      	ldr	r2, [pc, #404]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b63      	ldr	r3, [pc, #396]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4960      	ldr	r1, [pc, #384]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	495b      	ldr	r1, [pc, #364]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fd15 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e343      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800192c:	f000 fc4a 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b52      	ldr	r3, [pc, #328]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	4950      	ldr	r1, [pc, #320]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	4a4e      	ldr	r2, [pc, #312]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800194a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb71 	bl	8001038 <HAL_InitTick>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d052      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	e327      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d032      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800196c:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a42      	ldr	r2, [pc, #264]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001978:	f7ff fbae 	bl	80010d8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001980:	f7ff fbaa 	bl	80010d8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e310      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001992:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a36      	ldr	r2, [pc, #216]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b34      	ldr	r3, [pc, #208]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4931      	ldr	r1, [pc, #196]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019bc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	492c      	ldr	r1, [pc, #176]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e01a      	b.n	8001a08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a29      	ldr	r2, [pc, #164]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019de:	f7ff fb7b 	bl	80010d8 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb77 	bl	80010d8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e2dd      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019f8:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1da>
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d074      	beq.n	8001afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x21a>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	d10e      	bne.n	8001a3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d064      	beq.n	8001afc <HAL_RCC_OscConfig+0x2f0>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d160      	bne.n	8001afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e2ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x24a>
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e026      	b.n	8001aa4 <HAL_RCC_OscConfig+0x298>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a5e:	d115      	bne.n	8001a8c <HAL_RCC_OscConfig+0x280>
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a02      	ldr	r2, [pc, #8]	@ (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x298>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08004690 	.word	0x08004690
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9f      	ldr	r2, [pc, #636]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b9d      	ldr	r3, [pc, #628]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a9c      	ldr	r2, [pc, #624]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb14 	bl	80010d8 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb10 	bl	80010d8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	@ 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e276      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac6:	4b92      	ldr	r3, [pc, #584]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2a8>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb00 	bl	80010d8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fafc 	bl	80010d8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	@ 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e262      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aee:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x2d0>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d060      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_OscConfig+0x310>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d116      	bne.n	8001b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_OscConfig+0x328>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e23f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	4973      	ldr	r1, [pc, #460]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b48:	e040      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d023      	beq.n	8001b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b52:	4b6f      	ldr	r3, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fabb 	bl	80010d8 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fab7 	bl	80010d8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e21d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	4b65      	ldr	r3, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b62      	ldr	r3, [pc, #392]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	495f      	ldr	r1, [pc, #380]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa97 	bl	80010d8 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa93 	bl	80010d8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1f9      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc0:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03c      	beq.n	8001c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa72 	bl	80010d8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fa6e 	bl	80010d8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1d4      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ef      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
 8001c18:	e01b      	b.n	8001c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c20:	4a3b      	ldr	r2, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa55 	bl	80010d8 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fa51 	bl	80010d8 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1b7      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ef      	bne.n	8001c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80a6 	beq.w	8001dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d118      	bne.n	8001cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fa18 	bl	80010d8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7ff fa14 	bl	80010d8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e17a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4d8>
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ce2:	e029      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d115      	bne.n	8001d18 <HAL_RCC_OscConfig+0x50c>
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf2:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d02:	4a03      	ldr	r2, [pc, #12]	@ (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d0c:	e014      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	4b9c      	ldr	r3, [pc, #624]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	4a9b      	ldr	r2, [pc, #620]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d28:	4b98      	ldr	r3, [pc, #608]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2e:	4a97      	ldr	r2, [pc, #604]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d016      	beq.n	8001d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f9ca 	bl	80010d8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff f9c6 	bl	80010d8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e12a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ed      	beq.n	8001d48 <HAL_RCC_OscConfig+0x53c>
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f9b3 	bl	80010d8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff f9af 	bl	80010d8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e113      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ed      	bne.n	8001d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9a:	7ffb      	ldrb	r3, [r7, #31]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b7a      	ldr	r3, [pc, #488]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	4a79      	ldr	r2, [pc, #484]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80fe 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	f040 80d0 	bne.w	8001f60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dc0:	4b72      	ldr	r3, [pc, #456]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d130      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	3b01      	subs	r3, #1
 8001de0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d127      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11f      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e00:	2a07      	cmp	r2, #7
 8001e02:	bf14      	ite	ne
 8001e04:	2201      	movne	r2, #1
 8001e06:	2200      	moveq	r2, #0
 8001e08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d113      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d06e      	beq.n	8001f14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d069      	beq.n	8001f10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e3c:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0ad      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e64:	f7ff f938 	bl	80010d8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f934 	bl	80010d8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e09a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8a:	4b40      	ldr	r3, [pc, #256]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4b40      	ldr	r3, [pc, #256]	@ (8001f90 <HAL_RCC_OscConfig+0x784>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ea4:	0212      	lsls	r2, r2, #8
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0552      	lsls	r2, r2, #21
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eb8:	0852      	lsrs	r2, r2, #1
 8001eba:	3a01      	subs	r2, #1
 8001ebc:	0652      	lsls	r2, r2, #25
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ec4:	0912      	lsrs	r2, r2, #4
 8001ec6:	0452      	lsls	r2, r2, #17
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	4930      	ldr	r1, [pc, #192]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee8:	f7ff f8f6 	bl	80010d8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f8f2 	bl	80010d8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e058      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0e:	e050      	b.n	8001fb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e04f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d148      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f38:	f7ff f8ce 	bl	80010d8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f8ca 	bl	80010d8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e030      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x734>
 8001f5e:	e028      	b.n	8001fb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d023      	beq.n	8001fae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a08      	ldr	r2, [pc, #32]	@ (8001f8c <HAL_RCC_OscConfig+0x780>)
 8001f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f8b1 	bl	80010d8 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f78:	e00c      	b.n	8001f94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff f8ad 	bl	80010d8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d905      	bls.n	8001f94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ec      	bne.n	8001f7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4905      	ldr	r1, [pc, #20]	@ (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_OscConfig+0x7b4>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e001      	b.n	8001fb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	feeefffc 	.word	0xfeeefffc

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e7      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b75      	ldr	r3, [pc, #468]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b72      	ldr	r3, [pc, #456]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4970      	ldr	r1, [pc, #448]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cf      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b66      	ldr	r3, [pc, #408]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b63      	ldr	r3, [pc, #396]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4960      	ldr	r1, [pc, #384]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d04c      	beq.n	80020dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b5a      	ldr	r3, [pc, #360]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d121      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0a6      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b54      	ldr	r3, [pc, #336]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e09a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207a:	4b4e      	ldr	r3, [pc, #312]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208a:	4b4a      	ldr	r3, [pc, #296]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e086      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b46      	ldr	r3, [pc, #280]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4943      	ldr	r1, [pc, #268]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ac:	f7ff f814 	bl	80010d8 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff f810 	bl	80010d8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e06e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d208      	bcs.n	800210a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	492b      	ldr	r1, [pc, #172]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d210      	bcs.n	800213a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4923      	ldr	r1, [pc, #140]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002128:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e036      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002146:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4918      	ldr	r1, [pc, #96]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4910      	ldr	r1, [pc, #64]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002178:	f000 f824 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	490b      	ldr	r1, [pc, #44]	@ (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RCC_ClockConfig+0x1fc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe ff4b 	bl	8001038 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08004690 	.word	0x08004690
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b3e      	ldr	r3, [pc, #248]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11e      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f8:	4b34      	ldr	r3, [pc, #208]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002204:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002214:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002220:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002234:	e00a      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d102      	bne.n	8002242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800223c:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	e004      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d101      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800224a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d134      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0xa6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xac>
 8002268:	e005      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002272:	617b      	str	r3, [r7, #20]
      break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	3301      	adds	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0e5b      	lsrs	r3, r3, #25
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022bc:	69bb      	ldr	r3, [r7, #24]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080046a8 	.word	0x080046a8
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	@ (800231c <HAL_RCC_GetPCLK1Freq+0x28>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	080046a0 	.word	0x080046a0

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002324:	f7ff ffda 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4904      	ldr	r1, [pc, #16]	@ (8002348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	080046a0 	.word	0x080046a0

0800234c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002358:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f9ee 	bl	8001744 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
 800236a:	e014      	b.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002376:	6593      	str	r3, [r2, #88]	@ 0x58
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002384:	f7ff f9de 	bl	8001744 <HAL_PWREx_GetVoltageRange>
 8002388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800239c:	d10b      	bne.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b80      	cmp	r3, #128	@ 0x80
 80023a2:	d919      	bls.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80023a8:	d902      	bls.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023aa:	2302      	movs	r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e013      	b.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b0:	2301      	movs	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e010      	b.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	@ 0x80
 80023ba:	d902      	bls.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023bc:	2303      	movs	r3, #3
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e00a      	b.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b80      	cmp	r3, #128	@ 0x80
 80023c6:	d102      	bne.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c8:	2302      	movs	r3, #2
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e004      	b.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b70      	cmp	r3, #112	@ 0x70
 80023d2:	d101      	bne.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 0207 	bic.w	r2, r3, #7
 80023e0:	4909      	ldr	r1, [pc, #36]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	40022000 	.word	0x40022000

0800240c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002414:	2300      	movs	r3, #0
 8002416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002418:	2300      	movs	r3, #0
 800241a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	d041      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800242c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002430:	d02a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002432:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002436:	d824      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002438:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800243e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002442:	d81e      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800244c:	d010      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800244e:	e018      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002450:	4b86      	ldr	r3, [pc, #536]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a85      	ldr	r2, [pc, #532]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800245c:	e015      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fabb 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246e:	e00c      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3320      	adds	r3, #32
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fba6 	bl	8002bc8 <RCCEx_PLLSAI2_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002480:	e003      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	74fb      	strb	r3, [r7, #19]
      break;
 8002486:	e000      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002490:	4b76      	ldr	r3, [pc, #472]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800249e:	4973      	ldr	r1, [pc, #460]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024a6:	e001      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d041      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024c0:	d02a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024c6:	d824      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d2:	d81e      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024dc:	d010      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024de:	e018      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e0:	4b62      	ldr	r3, [pc, #392]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a61      	ldr	r2, [pc, #388]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ec:	e015      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fa73 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fe:	e00c      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3320      	adds	r3, #32
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fb5e 	bl	8002bc8 <RCCEx_PLLSAI2_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002510:	e003      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	74fb      	strb	r3, [r7, #19]
      break;
 8002516:	e000      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002520:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800252e:	494f      	ldr	r1, [pc, #316]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002536:	e001      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a0 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800254e:	4b47      	ldr	r3, [pc, #284]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b41      	ldr	r3, [pc, #260]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	4a40      	ldr	r2, [pc, #256]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002570:	4b3e      	ldr	r3, [pc, #248]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257c:	2301      	movs	r3, #1
 800257e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002580:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3a      	ldr	r2, [pc, #232]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800258c:	f7fe fda4 	bl	80010d8 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002592:	e009      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fda0 	bl	80010d8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d902      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	74fb      	strb	r3, [r7, #19]
        break;
 80025a6:	e005      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d15c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ba:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01f      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d019      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025d8:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	4a20      	ldr	r2, [pc, #128]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f4:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fd5f 	bl	80010d8 <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261c:	e00b      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fd5b 	bl	80010d8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d902      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	74fb      	strb	r3, [r7, #19]
            break;
 8002634:	e006      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ec      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800265a:	4904      	ldr	r1, [pc, #16]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002662:	e009      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
 8002668:	e006      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002678:	7c7b      	ldrb	r3, [r7, #17]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b9e      	ldr	r3, [pc, #632]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	4a9d      	ldr	r2, [pc, #628]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002696:	4b98      	ldr	r3, [pc, #608]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269c:	f023 0203 	bic.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	4994      	ldr	r1, [pc, #592]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b8:	4b8f      	ldr	r3, [pc, #572]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 020c 	bic.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	498c      	ldr	r1, [pc, #560]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026da:	4b87      	ldr	r3, [pc, #540]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4983      	ldr	r1, [pc, #524]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fc:	4b7e      	ldr	r3, [pc, #504]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	497b      	ldr	r1, [pc, #492]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271e:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272c:	4972      	ldr	r1, [pc, #456]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002740:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	496a      	ldr	r1, [pc, #424]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002762:	4b65      	ldr	r3, [pc, #404]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002768:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	4961      	ldr	r1, [pc, #388]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002784:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	4959      	ldr	r1, [pc, #356]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a6:	4b54      	ldr	r3, [pc, #336]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	4950      	ldr	r1, [pc, #320]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c8:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	4948      	ldr	r1, [pc, #288]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ea:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	493f      	ldr	r1, [pc, #252]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d028      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280c:	4b3a      	ldr	r3, [pc, #232]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281a:	4937      	ldr	r1, [pc, #220]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282a:	d106      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282c:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002836:	60d3      	str	r3, [r2, #12]
 8002838:	e011      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002842:	d10c      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f8c8 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	491f      	ldr	r1, [pc, #124]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002888:	d106      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002894:	60d3      	str	r3, [r2, #12]
 8002896:	e011      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f899 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02b      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028e6:	d109      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a02      	ldr	r2, [pc, #8]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
 80028f4:	e014      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f867 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02f      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800292c:	4b2b      	ldr	r3, [pc, #172]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800293a:	4928      	ldr	r1, [pc, #160]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800294a:	d10d      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f844 	bl	80029e0 <RCCEx_PLLSAI1_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	74bb      	strb	r3, [r7, #18]
 8002966:	e011      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800296c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002970:	d10c      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3320      	adds	r3, #32
 8002976:	2102      	movs	r1, #2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f925 	bl	8002bc8 <RCCEx_PLLSAI2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002998:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a6:	490d      	ldr	r1, [pc, #52]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ba:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ca:	4904      	ldr	r1, [pc, #16]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ee:	4b75      	ldr	r3, [pc, #468]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d018      	beq.n	8002a2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029fa:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d10d      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a12:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
       ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d047      	beq.n	8002ab6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e044      	b.n	8002ab6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d018      	beq.n	8002a66 <RCCEx_PLLSAI1_Config+0x86>
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d825      	bhi.n	8002a84 <RCCEx_PLLSAI1_Config+0xa4>
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d002      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0x62>
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d009      	beq.n	8002a54 <RCCEx_PLLSAI1_Config+0x74>
 8002a40:	e020      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a42:	4b60      	ldr	r3, [pc, #384]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d11d      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a52:	e01a      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a54:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d116      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e013      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a66:	4b57      	ldr	r3, [pc, #348]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a82:	e006      	b.n	8002a92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      break;
 8002a88:	e004      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	4944      	ldr	r1, [pc, #272]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d17d      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002abc:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a40      	ldr	r2, [pc, #256]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fb06 	bl	80010d8 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ace:	e009      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad0:	f7fe fb02 	bl	80010d8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ae2:	e005      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ae4:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ef      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d160      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002afc:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	0211      	lsls	r1, r2, #8
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68d2      	ldr	r2, [r2, #12]
 8002b12:	0912      	lsrs	r2, r2, #4
 8002b14:	0452      	lsls	r2, r2, #17
 8002b16:	430a      	orrs	r2, r1
 8002b18:	492a      	ldr	r1, [pc, #168]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	610b      	str	r3, [r1, #16]
 8002b1e:	e027      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d112      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b26:	4b27      	ldr	r3, [pc, #156]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	0211      	lsls	r1, r2, #8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6912      	ldr	r2, [r2, #16]
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0552      	lsls	r2, r2, #21
 8002b42:	430a      	orrs	r2, r1
 8002b44:	491f      	ldr	r1, [pc, #124]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	610b      	str	r3, [r1, #16]
 8002b4a:	e011      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	0211      	lsls	r1, r2, #8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6952      	ldr	r2, [r2, #20]
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0652      	lsls	r2, r2, #25
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4916      	ldr	r1, [pc, #88]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe faac 	bl	80010d8 <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b82:	e009      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b84:	f7fe faa8 	bl	80010d8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
          break;
 8002b96:	e005      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ef      	beq.n	8002b84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4904      	ldr	r1, [pc, #16]	@ (8002bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0203 	and.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d10d      	bne.n	8002c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bfa:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
       ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d047      	beq.n	8002c9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e044      	b.n	8002c9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d018      	beq.n	8002c4e <RCCEx_PLLSAI2_Config+0x86>
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d825      	bhi.n	8002c6c <RCCEx_PLLSAI2_Config+0xa4>
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d002      	beq.n	8002c2a <RCCEx_PLLSAI2_Config+0x62>
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d009      	beq.n	8002c3c <RCCEx_PLLSAI2_Config+0x74>
 8002c28:	e020      	b.n	8002c6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c2a:	4b55      	ldr	r3, [pc, #340]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11d      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3a:	e01a      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c3c:	4b50      	ldr	r3, [pc, #320]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d116      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4c:	e013      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5a:	4b49      	ldr	r3, [pc, #292]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c6a:	e006      	b.n	8002c7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e004      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	430b      	orrs	r3, r1
 8002c98:	4939      	ldr	r1, [pc, #228]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d167      	bne.n	8002d74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ca4:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a35      	ldr	r2, [pc, #212]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fa12 	bl	80010d8 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cb6:	e009      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb8:	f7fe fa0e 	bl	80010d8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cca:	e005      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ef      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d14a      	bne.n	8002d74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce4:	4b26      	ldr	r3, [pc, #152]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6892      	ldr	r2, [r2, #8]
 8002cf4:	0211      	lsls	r1, r2, #8
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	0912      	lsrs	r2, r2, #4
 8002cfc:	0452      	lsls	r2, r2, #17
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	491f      	ldr	r1, [pc, #124]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	614b      	str	r3, [r1, #20]
 8002d06:	e011      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	0211      	lsls	r1, r2, #8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6912      	ldr	r2, [r2, #16]
 8002d1e:	0852      	lsrs	r2, r2, #1
 8002d20:	3a01      	subs	r2, #1
 8002d22:	0652      	lsls	r2, r2, #25
 8002d24:	430a      	orrs	r2, r1
 8002d26:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a13      	ldr	r2, [pc, #76]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe f9ce 	bl	80010d8 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d3e:	e009      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d40:	f7fe f9ca 	bl	80010d8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	73fb      	strb	r3, [r7, #15]
          break;
 8002d52:	e005      	b.n	8002d60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4904      	ldr	r1, [pc, #16]	@ (8002d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e095      	b.n	8002ec2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da6:	d009      	beq.n	8002dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ffdc 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002df2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dfc:	d902      	bls.n	8002e04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e002      	b.n	8002e0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e12:	d007      	beq.n	8002e24 <HAL_SPI_Init+0xa0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	ea42 0103 	orr.w	r1, r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	f003 0204 	and.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ea0:	ea42 0103 	orr.w	r1, r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b088      	sub	sp, #32
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eda:	f7fe f8fd 	bl	80010d8 <HAL_GetTick>
 8002ede:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e15c      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Transmit+0x36>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e154      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_SPI_Transmit+0x48>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e14d      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f64:	d10f      	bne.n	8002f86 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d007      	beq.n	8002fa4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fac:	d952      	bls.n	8003054 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_Transmit+0xf2>
 8002fb6:	8b7b      	ldrh	r3, [r7, #26]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d145      	bne.n	8003048 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fe0:	e032      	b.n	8003048 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d112      	bne.n	8003016 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003014:	e018      	b.n	8003048 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003016:	f7fe f85f 	bl	80010d8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d803      	bhi.n	800302e <HAL_SPI_Transmit+0x164>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d102      	bne.n	8003034 <HAL_SPI_Transmit+0x16a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0b2      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1c7      	bne.n	8002fe2 <HAL_SPI_Transmit+0x118>
 8003052:	e083      	b.n	800315c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit+0x198>
 800305c:	8b7b      	ldrh	r3, [r7, #26]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d177      	bne.n	8003152 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d912      	bls.n	8003092 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b02      	subs	r3, #2
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003090:	e05f      	b.n	8003152 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	7812      	ldrb	r2, [r2, #0]
 800309e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030b8:	e04b      	b.n	8003152 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d12b      	bne.n	8003120 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d912      	bls.n	80030f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b02      	subs	r3, #2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030f6:	e02c      	b.n	8003152 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800311e:	e018      	b.n	8003152 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003120:	f7fd ffda 	bl	80010d8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d803      	bhi.n	8003138 <HAL_SPI_Transmit+0x26e>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d102      	bne.n	800313e <HAL_SPI_Transmit+0x274>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e02d      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ae      	bne.n	80030ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fcf5 	bl	8003b50 <SPI_EndRxTxTransaction>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	e123      	b.n	800341e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031de:	d112      	bne.n	8003206 <HAL_SPI_Receive+0x50>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10e      	bne.n	8003206 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2204      	movs	r2, #4
 80031ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f912 	bl	8003426 <HAL_SPI_TransmitReceive>
 8003202:	4603      	mov	r3, r0
 8003204:	e10b      	b.n	800341e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003206:	f7fd ff67 	bl	80010d8 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_Receive+0x62>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e100      	b.n	800341e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_SPI_Receive+0x74>
 8003226:	2302      	movs	r3, #2
 8003228:	e0f9      	b.n	800341e <HAL_SPI_Receive+0x268>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2204      	movs	r2, #4
 8003236:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800327c:	d908      	bls.n	8003290 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e007      	b.n	80032a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a8:	d10f      	bne.n	80032ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b40      	cmp	r3, #64	@ 0x40
 80032d6:	d007      	beq.n	80032e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032f0:	d875      	bhi.n	80033de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032f2:	e037      	b.n	8003364 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d117      	bne.n	8003332 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f103 020c 	add.w	r2, r3, #12
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003330:	e018      	b.n	8003364 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003332:	f7fd fed1 	bl	80010d8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d803      	bhi.n	800334a <HAL_SPI_Receive+0x194>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d102      	bne.n	8003350 <HAL_SPI_Receive+0x19a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e05c      	b.n	800341e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1c1      	bne.n	80032f4 <HAL_SPI_Receive+0x13e>
 8003370:	e03b      	b.n	80033ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d115      	bne.n	80033ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80033aa:	e018      	b.n	80033de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ac:	f7fd fe94 	bl	80010d8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d803      	bhi.n	80033c4 <HAL_SPI_Receive+0x20e>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d102      	bne.n	80033ca <HAL_SPI_Receive+0x214>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e01f      	b.n	800341e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1c3      	bne.n	8003372 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fb56 	bl	8003aa0 <SPI_EndRxTransaction>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800341c:	2300      	movs	r3, #0
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	@ 0x28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003434:	2301      	movs	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003438:	f7fd fe4e 	bl	80010d8 <HAL_GetTick>
 800343c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003444:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003454:	7ffb      	ldrb	r3, [r7, #31]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d00c      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x4e>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003460:	d106      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x4a>
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d001      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	e1f3      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x60>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x60>
 8003480:	887b      	ldrh	r3, [r7, #2]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1e8      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_SPI_TransmitReceive+0x72>
 8003494:	2302      	movs	r3, #2
 8003496:	e1e1      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d003      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2205      	movs	r2, #5
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	887a      	ldrh	r2, [r7, #2]
 80034da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034f6:	d802      	bhi.n	80034fe <HAL_SPI_TransmitReceive+0xd8>
 80034f8:	8abb      	ldrh	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d908      	bls.n	8003510 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e007      	b.n	8003520 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	2b40      	cmp	r3, #64	@ 0x40
 800352c:	d007      	beq.n	800353e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003546:	f240 8083 	bls.w	8003650 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x132>
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d16f      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357c:	e05c      	b.n	8003638 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11b      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x19e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x19e>
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	2b01      	cmp	r3, #1
 800359a:	d113      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11c      	bne.n	800360c <HAL_SPI_TransmitReceive+0x1e6>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	b292      	uxth	r2, r2
 80035ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800360c:	f7fd fd64 	bl	80010d8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	429a      	cmp	r2, r3
 800361a:	d80d      	bhi.n	8003638 <HAL_SPI_TransmitReceive+0x212>
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d009      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e111      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19d      	bne.n	800357e <HAL_SPI_TransmitReceive+0x158>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d197      	bne.n	800357e <HAL_SPI_TransmitReceive+0x158>
 800364e:	e0e5      	b.n	800381c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x23a>
 8003658:	8afb      	ldrh	r3, [r7, #22]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 80d1 	bne.w	8003802 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d912      	bls.n	8003690 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b02      	subs	r3, #2
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368e:	e0b8      	b.n	8003802 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b6:	e0a4      	b.n	8003802 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d134      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x30a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02f      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x30a>
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d12c      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d912      	bls.n	8003706 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b02      	subs	r3, #2
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003704:	e012      	b.n	800372c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d148      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x3aa>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d042      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d923      	bls.n	800379e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	b292      	uxth	r2, r2
 8003762:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b02      	subs	r3, #2
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d81f      	bhi.n	80037cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	e016      	b.n	80037cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f103 020c 	add.w	r2, r3, #12
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037d0:	f7fd fc82 	bl	80010d8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037dc:	429a      	cmp	r2, r3
 80037de:	d803      	bhi.n	80037e8 <HAL_SPI_TransmitReceive+0x3c2>
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d102      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x3c8>
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e02c      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af55 	bne.w	80036b8 <HAL_SPI_TransmitReceive+0x292>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	f47f af4e 	bne.w	80036b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f995 	bl	8003b50 <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e00e      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800385a:	2300      	movs	r3, #0
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	@ 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003874:	f7fd fc30 	bl	80010d8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003884:	f7fd fc28 	bl	80010d8 <HAL_GetTick>
 8003888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	015b      	lsls	r3, r3, #5
 8003890:	0d1b      	lsrs	r3, r3, #20
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800389a:	e054      	b.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d050      	beq.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a4:	f7fd fc18 	bl	80010d8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d902      	bls.n	80038ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13d      	bne.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038d2:	d111      	bne.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038dc:	d004      	beq.n	80038e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e6:	d107      	bne.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003900:	d10f      	bne.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e017      	b.n	8003966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3b01      	subs	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d19b      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000000 	.word	0x20000000

08003974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003986:	f7fd fba7 	bl	80010d8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	4413      	add	r3, r2
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003996:	f7fd fb9f 	bl	80010d8 <HAL_GetTick>
 800399a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039a4:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00da      	lsls	r2, r3, #3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	0d1b      	lsrs	r3, r3, #20
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039bc:	e060      	b.n	8003a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039c4:	d107      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d050      	beq.n	8003a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039de:	f7fd fb7b 	bl	80010d8 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d902      	bls.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13d      	bne.n	8003a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a0c:	d111      	bne.n	8003a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a16:	d004      	beq.n	8003a22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a20:	d107      	bne.n	8003a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	d10f      	bne.n	8003a5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e010      	b.n	8003a92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d196      	bne.n	80039be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	@ 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab4:	d111      	bne.n	8003ada <SPI_EndRxTransaction+0x3a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003abe:	d004      	beq.n	8003aca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac8:	d107      	bne.n	8003ada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2180      	movs	r1, #128	@ 0x80
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff febd 	bl	8003864 <SPI_WaitFlagStateUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e023      	b.n	8003b48 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b08:	d11d      	bne.n	8003b46 <SPI_EndRxTransaction+0xa6>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d004      	beq.n	8003b1e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d113      	bne.n	8003b46 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff22 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e000      	b.n	8003b48 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff ff03 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e027      	b.n	8003bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	@ 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff fe68 	bl	8003864 <SPI_WaitFlagStateUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e014      	b.n	8003bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fedc 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e000      	b.n	8003bd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e040      	b.n	8003c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f92a 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	@ 0x24
 8003c08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fae0 	bl	80041e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f825 	bl	8003c78 <UART_SetConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01b      	b.n	8003c70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb5f 	bl	800432c <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b08a      	sub	sp, #40	@ 0x28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4ba4      	ldr	r3, [pc, #656]	@ (8003f38 <UART_SetConfig+0x2c0>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a99      	ldr	r2, [pc, #612]	@ (8003f3c <UART_SetConfig+0x2c4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a90      	ldr	r2, [pc, #576]	@ (8003f40 <UART_SetConfig+0x2c8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d126      	bne.n	8003d50 <UART_SetConfig+0xd8>
 8003d02:	4b90      	ldr	r3, [pc, #576]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d81b      	bhi.n	8003d48 <UART_SetConfig+0xd0>
 8003d10:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <UART_SetConfig+0xa0>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d41 	.word	0x08003d41
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2e:	e116      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d36:	e112      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3e:	e10e      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d46:	e10a      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4e:	e106      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7c      	ldr	r2, [pc, #496]	@ (8003f48 <UART_SetConfig+0x2d0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d138      	bne.n	8003dcc <UART_SetConfig+0x154>
 8003d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d82d      	bhi.n	8003dc4 <UART_SetConfig+0x14c>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <UART_SetConfig+0xf8>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003dc5 	.word	0x08003dc5
 8003d7c:	08003dc5 	.word	0x08003dc5
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dc5 	.word	0x08003dc5
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dad 	.word	0x08003dad
 8003d94:	08003dc5 	.word	0x08003dc5
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dbd 	.word	0x08003dbd
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e0d8      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003dac:	2302      	movs	r3, #2
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e0d4      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003db4:	2304      	movs	r3, #4
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e0d0      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e0cc      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e0c8      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <UART_SetConfig+0x2d4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d125      	bne.n	8003e22 <UART_SetConfig+0x1aa>
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ddc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003de0:	2b30      	cmp	r3, #48	@ 0x30
 8003de2:	d016      	beq.n	8003e12 <UART_SetConfig+0x19a>
 8003de4:	2b30      	cmp	r3, #48	@ 0x30
 8003de6:	d818      	bhi.n	8003e1a <UART_SetConfig+0x1a2>
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d00a      	beq.n	8003e02 <UART_SetConfig+0x18a>
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d814      	bhi.n	8003e1a <UART_SetConfig+0x1a2>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <UART_SetConfig+0x182>
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d008      	beq.n	8003e0a <UART_SetConfig+0x192>
 8003df8:	e00f      	b.n	8003e1a <UART_SetConfig+0x1a2>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e00:	e0ad      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e02:	2302      	movs	r3, #2
 8003e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e08:	e0a9      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e10:	e0a5      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e12:	2308      	movs	r3, #8
 8003e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e18:	e0a1      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e1a:	2310      	movs	r3, #16
 8003e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e20:	e09d      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4a      	ldr	r2, [pc, #296]	@ (8003f50 <UART_SetConfig+0x2d8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d125      	bne.n	8003e78 <UART_SetConfig+0x200>
 8003e2c:	4b45      	ldr	r3, [pc, #276]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e38:	d016      	beq.n	8003e68 <UART_SetConfig+0x1f0>
 8003e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e3c:	d818      	bhi.n	8003e70 <UART_SetConfig+0x1f8>
 8003e3e:	2b80      	cmp	r3, #128	@ 0x80
 8003e40:	d00a      	beq.n	8003e58 <UART_SetConfig+0x1e0>
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d814      	bhi.n	8003e70 <UART_SetConfig+0x1f8>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <UART_SetConfig+0x1d8>
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	d008      	beq.n	8003e60 <UART_SetConfig+0x1e8>
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x1f8>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e082      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e07e      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e07a      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e076      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e072      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a35      	ldr	r2, [pc, #212]	@ (8003f54 <UART_SetConfig+0x2dc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d12a      	bne.n	8003ed8 <UART_SetConfig+0x260>
 8003e82:	4b30      	ldr	r3, [pc, #192]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e90:	d01a      	beq.n	8003ec8 <UART_SetConfig+0x250>
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e96:	d81b      	bhi.n	8003ed0 <UART_SetConfig+0x258>
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e9c:	d00c      	beq.n	8003eb8 <UART_SetConfig+0x240>
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea2:	d815      	bhi.n	8003ed0 <UART_SetConfig+0x258>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0x238>
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eac:	d008      	beq.n	8003ec0 <UART_SetConfig+0x248>
 8003eae:	e00f      	b.n	8003ed0 <UART_SetConfig+0x258>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e052      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e04e      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e04a      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ece:	e046      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e042      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <UART_SetConfig+0x2c4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d13a      	bne.n	8003f58 <UART_SetConfig+0x2e0>
 8003ee2:	4b18      	ldr	r3, [pc, #96]	@ (8003f44 <UART_SetConfig+0x2cc>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef0:	d01a      	beq.n	8003f28 <UART_SetConfig+0x2b0>
 8003ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef6:	d81b      	bhi.n	8003f30 <UART_SetConfig+0x2b8>
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efc:	d00c      	beq.n	8003f18 <UART_SetConfig+0x2a0>
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f02:	d815      	bhi.n	8003f30 <UART_SetConfig+0x2b8>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <UART_SetConfig+0x298>
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0c:	d008      	beq.n	8003f20 <UART_SetConfig+0x2a8>
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x2b8>
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e022      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e01e      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003f20:	2304      	movs	r3, #4
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e01a      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e016      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003f30:	2310      	movs	r3, #16
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e012      	b.n	8003f5e <UART_SetConfig+0x2e6>
 8003f38:	efff69f3 	.word	0xefff69f3
 8003f3c:	40008000 	.word	0x40008000
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40004400 	.word	0x40004400
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	40004c00 	.word	0x40004c00
 8003f54:	40005000 	.word	0x40005000
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a9f      	ldr	r2, [pc, #636]	@ (80041e0 <UART_SetConfig+0x568>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d17a      	bne.n	800405e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d824      	bhi.n	8003fba <UART_SetConfig+0x342>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0x300>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fbb 	.word	0x08003fbb
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fbb 	.word	0x08003fbb
 8003f88:	08003fab 	.word	0x08003fab
 8003f8c:	08003fbb 	.word	0x08003fbb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fbb 	.word	0x08003fbb
 8003f98:	08003fb3 	.word	0x08003fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe f9aa 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e010      	b.n	8003fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80041e4 <UART_SetConfig+0x56c>)
 8003fa6:	61fb      	str	r3, [r7, #28]
        break;
 8003fa8:	e00d      	b.n	8003fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003faa:	f7fe f90b 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003fae:	61f8      	str	r0, [r7, #28]
        break;
 8003fb0:	e009      	b.n	8003fc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb6:	61fb      	str	r3, [r7, #28]
        break;
 8003fb8:	e005      	b.n	8003fc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80fb 	beq.w	80041c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d305      	bcc.n	8003fea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d903      	bls.n	8003ff2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ff0:	e0e8      	b.n	80041c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	461c      	mov	r4, r3
 8003ff8:	4615      	mov	r5, r2
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	022b      	lsls	r3, r5, #8
 8004004:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004008:	0222      	lsls	r2, r4, #8
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	6849      	ldr	r1, [r1, #4]
 800400e:	0849      	lsrs	r1, r1, #1
 8004010:	2000      	movs	r0, #0
 8004012:	4688      	mov	r8, r1
 8004014:	4681      	mov	r9, r0
 8004016:	eb12 0a08 	adds.w	sl, r2, r8
 800401a:	eb43 0b09 	adc.w	fp, r3, r9
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800402c:	4650      	mov	r0, sl
 800402e:	4659      	mov	r1, fp
 8004030:	f7fc f8ca 	bl	80001c8 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004042:	d308      	bcc.n	8004056 <UART_SetConfig+0x3de>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404a:	d204      	bcs.n	8004056 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	60da      	str	r2, [r3, #12]
 8004054:	e0b6      	b.n	80041c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800405c:	e0b2      	b.n	80041c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004066:	d15e      	bne.n	8004126 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004068:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800406c:	2b08      	cmp	r3, #8
 800406e:	d828      	bhi.n	80040c2 <UART_SetConfig+0x44a>
 8004070:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <UART_SetConfig+0x400>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	080040c3 	.word	0x080040c3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040c3 	.word	0x080040c3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe f92a 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e014      	b.n	80040ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe f93c 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 80040a8:	61f8      	str	r0, [r7, #28]
        break;
 80040aa:	e010      	b.n	80040ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b4d      	ldr	r3, [pc, #308]	@ (80041e4 <UART_SetConfig+0x56c>)
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e00d      	b.n	80040ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe f887 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80040b6:	61f8      	str	r0, [r7, #28]
        break;
 80040b8:	e009      	b.n	80040ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040be:	61fb      	str	r3, [r7, #28]
        break;
 80040c0:	e005      	b.n	80040ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d077      	beq.n	80041c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005a      	lsls	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b0f      	cmp	r3, #15
 80040ee:	d916      	bls.n	800411e <UART_SetConfig+0x4a6>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f6:	d212      	bcs.n	800411e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f023 030f 	bic.w	r3, r3, #15
 8004100:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	b29b      	uxth	r3, r3
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	b29a      	uxth	r2, r3
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	4313      	orrs	r3, r2
 8004112:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	8afa      	ldrh	r2, [r7, #22]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e052      	b.n	80041c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004124:	e04e      	b.n	80041c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004126:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800412a:	2b08      	cmp	r3, #8
 800412c:	d827      	bhi.n	800417e <UART_SetConfig+0x506>
 800412e:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <UART_SetConfig+0x4bc>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004159 	.word	0x08004159
 8004138:	08004161 	.word	0x08004161
 800413c:	08004169 	.word	0x08004169
 8004140:	0800417f 	.word	0x0800417f
 8004144:	0800416f 	.word	0x0800416f
 8004148:	0800417f 	.word	0x0800417f
 800414c:	0800417f 	.word	0x0800417f
 8004150:	0800417f 	.word	0x0800417f
 8004154:	08004177 	.word	0x08004177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7fe f8cc 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 800415c:	61f8      	str	r0, [r7, #28]
        break;
 800415e:	e014      	b.n	800418a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004160:	f7fe f8de 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8004164:	61f8      	str	r0, [r7, #28]
        break;
 8004166:	e010      	b.n	800418a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004168:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <UART_SetConfig+0x56c>)
 800416a:	61fb      	str	r3, [r7, #28]
        break;
 800416c:	e00d      	b.n	800418a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fe f829 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8004172:	61f8      	str	r0, [r7, #28]
        break;
 8004174:	e009      	b.n	800418a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800417a:	61fb      	str	r3, [r7, #28]
        break;
 800417c:	e005      	b.n	800418a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004188:	bf00      	nop
    }

    if (pclk != 0U)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d019      	beq.n	80041c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	085a      	lsrs	r2, r3, #1
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	441a      	add	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b0f      	cmp	r3, #15
 80041a8:	d909      	bls.n	80041be <UART_SetConfig+0x546>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b0:	d205      	bcs.n	80041be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	e002      	b.n	80041c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	@ 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop
 80041e0:	40008000 	.word	0x40008000
 80041e4:	00f42400 	.word	0x00f42400

080041e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01a      	beq.n	80042fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e6:	d10a      	bne.n	80042fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b098      	sub	sp, #96	@ 0x60
 8004330:	af02      	add	r7, sp, #8
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800433c:	f7fc fecc 	bl	80010d8 <HAL_GetTick>
 8004340:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d12e      	bne.n	80043ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f88c 	bl	800447c <UART_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d021      	beq.n	80043ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
 800438a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800438e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e062      	b.n	8004474 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d149      	bne.n	8004450 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f856 	bl	800447c <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d03c      	beq.n	8004450 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	623b      	str	r3, [r7, #32]
   return(result);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	60fb      	str	r3, [r7, #12]
   return(result);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004428:	61fa      	str	r2, [r7, #28]
 800442a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	617b      	str	r3, [r7, #20]
   return(result);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e011      	b.n	8004474 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3758      	adds	r7, #88	@ 0x58
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	e04f      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d04b      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fc fe1f 	bl	80010d8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <UART_WaitOnFlagUntilTimeout+0x30>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e04e      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d037      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b80      	cmp	r3, #128	@ 0x80
 80044c2:	d034      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d031      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d110      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f838 	bl	8004556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2208      	movs	r2, #8
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e029      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004508:	d111      	bne.n	800452e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f81e 	bl	8004556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e00f      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4013      	ands	r3, r2
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	429a      	cmp	r2, r3
 800454a:	d0a0      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b095      	sub	sp, #84	@ 0x54
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800457c:	643b      	str	r3, [r7, #64]	@ 0x40
 800457e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800458a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d118      	bne.n	80045fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	613b      	str	r3, [r7, #16]
   return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e6      	bne.n	80045cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004612:	bf00      	nop
 8004614:	3754      	adds	r7, #84	@ 0x54
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <memset>:
 800461e:	4402      	add	r2, r0
 8004620:	4603      	mov	r3, r0
 8004622:	4293      	cmp	r3, r2
 8004624:	d100      	bne.n	8004628 <memset+0xa>
 8004626:	4770      	bx	lr
 8004628:	f803 1b01 	strb.w	r1, [r3], #1
 800462c:	e7f9      	b.n	8004622 <memset+0x4>
	...

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4d0d      	ldr	r5, [pc, #52]	@ (8004668 <__libc_init_array+0x38>)
 8004634:	4c0d      	ldr	r4, [pc, #52]	@ (800466c <__libc_init_array+0x3c>)
 8004636:	1b64      	subs	r4, r4, r5
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	2600      	movs	r6, #0
 800463c:	42a6      	cmp	r6, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	4d0b      	ldr	r5, [pc, #44]	@ (8004670 <__libc_init_array+0x40>)
 8004642:	4c0c      	ldr	r4, [pc, #48]	@ (8004674 <__libc_init_array+0x44>)
 8004644:	f000 f818 	bl	8004678 <_init>
 8004648:	1b64      	subs	r4, r4, r5
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	2600      	movs	r6, #0
 800464e:	42a6      	cmp	r6, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f855 3b04 	ldr.w	r3, [r5], #4
 8004658:	4798      	blx	r3
 800465a:	3601      	adds	r6, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004662:	4798      	blx	r3
 8004664:	3601      	adds	r6, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	080046e0 	.word	0x080046e0
 800466c:	080046e0 	.word	0x080046e0
 8004670:	080046e0 	.word	0x080046e0
 8004674:	080046e4 	.word	0x080046e4

08004678 <_init>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	bf00      	nop
 800467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467e:	bc08      	pop	{r3}
 8004680:	469e      	mov	lr, r3
 8004682:	4770      	bx	lr

08004684 <_fini>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr
