
Software_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000501c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080051a4  080051a4  000061a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f4  080051f4  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051fc  080051fc  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051fc  080051fc  000061fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005204  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000002c  08005230  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08005230  00007138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1c1  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  0001621d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000184e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00019230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026255  00000000  00000000  00019c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0de  00000000  00000000  0003febe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea485  00000000  00000000  0004ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  00139464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0013cad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800518c 	.word	0x0800518c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	0800518c 	.word	0x0800518c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fded 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f841 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8ff 	bl	8000704 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000506:	f000 f88f 	bl	8000628 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800050a:	f000 f8cb 	bl	80006a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  csn_high();
 800050e:	f000 fb04 	bl	8000b1a <csn_high>

  nrf24_init();
 8000512:	f000 fdd1 	bl	80010b8 <nrf24_init>
  nrf24_tx_pwr(_0dbm);
 8000516:	2003      	movs	r0, #3
 8000518:	f000 fba4 	bl	8000c64 <nrf24_tx_pwr>
  nrf24_data_rate(_1mbps);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fbc8 	bl	8000cb2 <nrf24_data_rate>
  nrf24_set_channel(78);
 8000522:	204e      	movs	r0, #78	@ 0x4e
 8000524:	f000 fbf3 	bl	8000d0e <nrf24_set_channel>
  nrf24_set_crc(en_crc,_1byte);
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fcc8 	bl	8000ec0 <nrf24_set_crc>
  nrf24_pipe_pld_size(0,PLD_SIZE);
 8000530:	2120      	movs	r1, #32
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fc08 	bl	8000d48 <nrf24_pipe_pld_size>
  uint8_t addr[5] = {0x10, 0x21, 0x32, 0x43, 0x54};
 8000538:	4a10      	ldr	r2, [pc, #64]	@ (800057c <main+0x88>)
 800053a:	463b      	mov	r3, r7
 800053c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000540:	6018      	str	r0, [r3, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	7019      	strb	r1, [r3, #0]
  nrf24_open_tx_pipe(addr);
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fbef 	bl	8000d2c <nrf24_open_tx_pipe>
  nrf24_open_rx_pipe(0,addr);
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fc46 	bl	8000de4 <nrf24_open_rx_pipe>

#ifdef tx
  nrf24_stop_listen();
 8000558:	f000 fd5a 	bl	8001010 <nrf24_stop_listen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef tx
	  nrf24_transmit(data_T,sizeof(data_T));
 800055c:	2120      	movs	r1, #32
 800055e:	4808      	ldr	r0, [pc, #32]	@ (8000580 <main+0x8c>)
 8000560:	f000 fd70 	bl	8001044 <nrf24_transmit>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000564:	2120      	movs	r1, #32
 8000566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056a:	f001 f9a7 	bl	80018bc <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 800056e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000572:	f000 fe2d 	bl	80011d0 <HAL_Delay>
	  nrf24_transmit(data_T,sizeof(data_T));
 8000576:	bf00      	nop
 8000578:	e7f0      	b.n	800055c <main+0x68>
 800057a:	bf00      	nop
 800057c:	080051a4 	.word	0x080051a4
 8000580:	20000000 	.word	0x20000000

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	@ 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fdcd 	bl	8005132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005aa:	f001 f9d3 	bl	8001954 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 f932 	bl	800081c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fa0a 	bl	8001a00 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 f913 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fdd2 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 f8ff 	bl	800081c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	@ 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_SPI2_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_SPI2_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_SPI2_Init+0x74>)
 8000634:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_SPI2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_SPI2_Init+0x74>)
 8000642:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000646:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_SPI2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_SPI2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_SPI2_Init+0x74>)
 8000656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_SPI2_Init+0x74>)
 800065e:	2220      	movs	r2, #32
 8000660:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_SPI2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_SPI2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_SPI2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_SPI2_Init+0x74>)
 8000676:	2207      	movs	r2, #7
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_SPI2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_SPI2_Init+0x74>)
 8000682:	2208      	movs	r2, #8
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_SPI2_Init+0x74>)
 8000688:	f002 fc76 	bl	8002f78 <HAL_SPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f8c3 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000048 	.word	0x20000048
 80006a0:	40003800 	.word	0x40003800

080006a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <MX_USART1_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_USART1_UART_Init+0x58>)
 80006e8:	f003 fc92 	bl	8004010 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f893 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000ac 	.word	0x200000ac
 8000700:	40013800 	.word	0x40013800

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <MX_GPIO_Init+0x110>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a3d      	ldr	r2, [pc, #244]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a37      	ldr	r2, [pc, #220]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <MX_GPIO_Init+0x110>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a31      	ldr	r2, [pc, #196]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2138      	movs	r1, #56	@ 0x38
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f001 f883 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	481e      	ldr	r0, [pc, #120]	@ (8000818 <MX_GPIO_Init+0x114>)
 800079e:	f000 fecb 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f000 febd 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80007be:	2318      	movs	r3, #24
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f000 feae 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f6:	f000 fe9f 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 fde5 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000804:	2006      	movs	r0, #6
 8000806:	f000 fdfe 	bl	8001406 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	@ 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <HAL_SPI_MspInit+0xc4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d14c      	bne.n	800092c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <HAL_SPI_MspInit+0xc8>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <HAL_SPI_MspInit+0xcc>)
 80008f6:	f000 fe1f 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090c:	2305      	movs	r3, #5
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480a      	ldr	r0, [pc, #40]	@ (8000940 <HAL_SPI_MspInit+0xd0>)
 8000918:	f000 fe0e 	bl	8001538 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2024      	movs	r0, #36	@ 0x24
 8000922:	f000 fd54 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000926:	2024      	movs	r0, #36	@ 0x24
 8000928:	f000 fd6d 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40003800 	.word	0x40003800
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800
 8000940:	48000400 	.word	0x48000400

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ac      	sub	sp, #176	@ 0xb0
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2288      	movs	r2, #136	@ 0x88
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fbe4 	bl	8005132 <memset>
  if(huart->Instance==USART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a26      	ldr	r2, [pc, #152]	@ (8000a08 <HAL_UART_MspInit+0xc4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d144      	bne.n	80009fe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fe3d 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff ff46 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6613      	str	r3, [r2, #96]	@ 0x60
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0xc8>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009da:	2307      	movs	r3, #7
 80009dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ea:	f000 fda5 	bl	8001538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2025      	movs	r0, #37	@ 0x25
 80009f4:	f000 fceb 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f8:	2025      	movs	r0, #37	@ 0x25
 80009fa:	f000 fd04 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	37b0      	adds	r7, #176	@ 0xb0
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 fb93 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 ff3c 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <SPI2_IRQHandler+0x10>)
 8000a82:	f002 ffe9 	bl	8003a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000048 	.word	0x20000048

08000a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART1_IRQHandler+0x10>)
 8000a96:	f003 fb09 	bl	80040ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ac 	.word	0x200000ac

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 fb25 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fcfb 	bl	80004f4 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000b0c:	08005204 	.word	0x08005204
  ldr r2, =_sbss
 8000b10:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000b14:	20000138 	.word	0x20000138

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>

08000b1a <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2108      	movs	r1, #8
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 feb1 	bl	800188c <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <csn_low>:

void csn_low(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f000 fea7 	bl	800188c <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <ce_high>:

void ce_high(void){
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f000 fe9d 	bl	800188c <HAL_GPIO_WritePin>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <ce_low>:

void ce_low(void){
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b62:	f000 fe93 	bl	800188c <HAL_GPIO_WritePin>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000b86:	f7ff ffd2 	bl	8000b2e <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000b8a:	f107 010f 	add.w	r1, r7, #15
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	2201      	movs	r2, #1
 8000b94:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <nrf24_w_reg+0x4c>)
 8000b96:	f002 fa92 	bl	80030be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <nrf24_w_reg+0x4c>)
 8000ba6:	f002 fa8a 	bl	80030be <HAL_SPI_Transmit>

	csn_high();
 8000baa:	f7ff ffb6 	bl	8000b1a <csn_high>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000048 	.word	0x20000048

08000bbc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000bd4:	f7ff ffab 	bl	8000b2e <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000bd8:	f107 010f 	add.w	r1, r7, #15
 8000bdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be0:	2201      	movs	r2, #1
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <nrf24_r_reg+0x4c>)
 8000be4:	f002 fa6b 	bl	80030be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	f107 010e 	add.w	r1, r7, #14
 8000bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <nrf24_r_reg+0x4c>)
 8000bf6:	f002 fbd8 	bl	80033aa <HAL_SPI_Receive>

	csn_high();
 8000bfa:	f7ff ff8e 	bl	8000b1a <csn_high>

	return data;
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000048 	.word	0x20000048

08000c0c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <nrf24_w_spec_cmd+0x20>)
 8000c20:	f002 fa4d 	bl	80030be <HAL_SPI_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000048 	.word	0x20000048

08000c30 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ffbd 	bl	8000bbc <nrf24_r_reg>
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	2201      	movs	r2, #1
 8000c54:	4619      	mov	r1, r3
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ff88 	bl	8000b6c <nrf24_w_reg>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2006      	movs	r0, #6
 8000c76:	f7ff ffa1 	bl	8000bbc <nrf24_r_reg>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	b25a      	sxtb	r2, r3
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000c9c:	f107 030f 	add.w	r3, r7, #15
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2006      	movs	r0, #6
 8000ca6:	f7ff ff61 	bl	8000b6c <nrf24_w_reg>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff ff7a 	bl	8000bbc <nrf24_r_reg>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e007      	b.n	8000cf8 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d104      	bne.n	8000cf8 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000cf8:	f107 030f 	add.w	r3, r7, #15
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2006      	movs	r0, #6
 8000d02:	f7ff ff33 	bl	8000b6c <nrf24_w_reg>
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff ff24 	bl	8000b6c <nrf24_w_reg>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 8000d34:	2205      	movs	r2, #5
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2010      	movs	r0, #16
 8000d3a:	f7ff ff17 	bl	8000b6c <nrf24_w_reg>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b20      	cmp	r3, #32
 8000d5c:	d901      	bls.n	8000d62 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d839      	bhi.n	8000ddc <nrf24_pipe_pld_size+0x94>
 8000d68:	a201      	add	r2, pc, #4	@ (adr r2, 8000d70 <nrf24_pipe_pld_size+0x28>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000d97 	.word	0x08000d97
 8000d78:	08000da5 	.word	0x08000da5
 8000d7c:	08000db3 	.word	0x08000db3
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dcf 	.word	0x08000dcf
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000d88:	1dbb      	adds	r3, r7, #6
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2011      	movs	r0, #17
 8000d90:	f7ff feec 	bl	8000b6c <nrf24_w_reg>

		break;
 8000d94:	e022      	b.n	8000ddc <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2012      	movs	r0, #18
 8000d9e:	f7ff fee5 	bl	8000b6c <nrf24_w_reg>

		break;
 8000da2:	e01b      	b.n	8000ddc <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000da4:	1dbb      	adds	r3, r7, #6
 8000da6:	2201      	movs	r2, #1
 8000da8:	4619      	mov	r1, r3
 8000daa:	2013      	movs	r0, #19
 8000dac:	f7ff fede 	bl	8000b6c <nrf24_w_reg>

		break;
 8000db0:	e014      	b.n	8000ddc <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	2201      	movs	r2, #1
 8000db6:	4619      	mov	r1, r3
 8000db8:	2014      	movs	r0, #20
 8000dba:	f7ff fed7 	bl	8000b6c <nrf24_w_reg>

		break;
 8000dbe:	e00d      	b.n	8000ddc <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2015      	movs	r0, #21
 8000dc8:	f7ff fed0 	bl	8000b6c <nrf24_w_reg>

		break;
 8000dcc:	e006      	b.n	8000ddc <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000dce:	1dbb      	adds	r3, r7, #6
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2016      	movs	r0, #22
 8000dd6:	f7ff fec9 	bl	8000b6c <nrf24_w_reg>

		break;
 8000dda:	bf00      	nop
	}
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 8000df4:	2101      	movs	r1, #1
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff fee0 	bl	8000bbc <nrf24_r_reg>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d850      	bhi.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
 8000e06:	a201      	add	r2, pc, #4	@ (adr r2, 8000e0c <nrf24_open_rx_pipe+0x28>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e51 	.word	0x08000e51
 8000e18:	08000e67 	.word	0x08000e67
 8000e1c:	08000e7d 	.word	0x08000e7d
 8000e20:	08000e93 	.word	0x08000e93
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8000e24:	2205      	movs	r2, #5
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f7ff fe9f 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73fb      	strb	r3, [r7, #15]
		break;
 8000e38:	e036      	b.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	200b      	movs	r0, #11
 8000e40:	f7ff fe94 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4e:	e02b      	b.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	200c      	movs	r0, #12
 8000e56:	f7ff fe89 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e020      	b.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	200d      	movs	r0, #13
 8000e6c:	f7ff fe7e 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7a:	e015      	b.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	200e      	movs	r0, #14
 8000e82:	f7ff fe73 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P4);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e90:	e00a      	b.n	8000ea8 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff fe68 	bl	8000b6c <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ea6:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000ea8:	f107 030f 	add.w	r3, r7, #15
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fe5b 	bl	8000b6c <nrf24_w_reg>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop

08000ec0 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fe72 	bl	8000bbc <nrf24_r_reg>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f023 030c 	bic.w	r3, r3, #12
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8000f06:	f107 030f 	add.w	r3, r7, #15
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fe2c 	bl	8000b6c <nrf24_w_reg>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <nrf24_flush_tx>:
void nrf24_set_addr_width(uint8_t bytes){
	bytes -= 2;
	nrf24_w_reg(SETUP_AW, &bytes, 1);
}

void nrf24_flush_tx(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	csn_low();
 8000f20:	f7ff fe05 	bl	8000b2e <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000f24:	20e1      	movs	r0, #225	@ 0xe1
 8000f26:	f7ff fe71 	bl	8000c0c <nrf24_w_spec_cmd>
	csn_high();
 8000f2a:	f7ff fdf6 	bl	8000b1a <csn_high>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
	csn_low();
 8000f36:	f7ff fdfa 	bl	8000b2e <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000f3a:	20e2      	movs	r0, #226	@ 0xe2
 8000f3c:	f7ff fe66 	bl	8000c0c <nrf24_w_spec_cmd>
	csn_high();
 8000f40:	f7ff fdeb 	bl	8000b1a <csn_high>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000f56:	f7ff fdea 	bl	8000b2e <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	1db9      	adds	r1, r7, #6
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <nrf24_r_status+0x34>)
 8000f68:	f002 fb57 	bl	800361a <HAL_SPI_TransmitReceive>
	csn_high();
 8000f6c:	f7ff fdd5 	bl	8000b1a <csn_high>

	return data;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000048 	.word	0x20000048

08000f80 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000f8a:	f7ff ffdd 	bl	8000f48 <nrf24_r_status>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f7ff fde2 	bl	8000b6c <nrf24_w_reg>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000fba:	f7ff ffc5 	bl	8000f48 <nrf24_r_status>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2007      	movs	r0, #7
 8000fd4:	f7ff fdca 	bl	8000b6c <nrf24_w_reg>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000fea:	f7ff ffad 	bl	8000f48 <nrf24_r_status>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	2007      	movs	r0, #7
 8001004:	f7ff fdb2 	bl	8000b6c <nrf24_w_reg>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800101a:	2101      	movs	r1, #1
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fdcd 	bl	8000bbc <nrf24_r_reg>
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fd98 	bl	8000b6c <nrf24_w_reg>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]

	ce_low();
 8001050:	f7ff fd81 	bl	8000b56 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 8001054:	23a0      	movs	r3, #160	@ 0xa0
 8001056:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8001058:	f7ff fd69 	bl	8000b2e <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800105c:	f107 010f 	add.w	r1, r7, #15
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	2201      	movs	r2, #1
 8001066:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <nrf24_transmit+0x70>)
 8001068:	f002 f829 	bl	80030be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <nrf24_transmit+0x70>)
 8001078:	f002 f821 	bl	80030be <HAL_SPI_Transmit>
	csn_high();
 800107c:	f7ff fd4d 	bl	8000b1a <csn_high>

	ce_high();
 8001080:	f7ff fd5f 	bl	8000b42 <ce_high>
	HAL_Delay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f000 f8a3 	bl	80011d0 <HAL_Delay>
	ce_low();
 800108a:	f7ff fd64 	bl	8000b56 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800108e:	f7ff ff5b 	bl	8000f48 <nrf24_r_status>
 8001092:	4603      	mov	r3, r0
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 800109c:	f7ff ffa0 	bl	8000fe0 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 80010a0:	f7ff ff3c 	bl	8000f1c <nrf24_flush_tx>
		return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <nrf24_transmit+0x66>
	}

	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000048 	.word	0x20000048

080010b8 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80010bc:	f7ff fdb8 	bl	8000c30 <nrf24_pwr_up>

	nrf24_flush_tx();
 80010c0:	f7ff ff2c 	bl	8000f1c <nrf24_flush_tx>
	nrf24_flush_rx();
 80010c4:	f7ff ff35 	bl	8000f32 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80010c8:	f7ff ff5a 	bl	8000f80 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80010cc:	f7ff ff70 	bl	8000fb0 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80010d0:	f7ff ff86 	bl	8000fe0 <nrf24_clear_max_rt>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_Init+0x3c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <HAL_Init+0x3c>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f962 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f80f 	bl	8001118 <HAL_InitTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	e001      	b.n	800110a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001106:	f7ff fb8f 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_InitTick+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_InitTick+0x70>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f96d 	bl	8001422 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d809      	bhi.n	8001168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f937 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_InitTick+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e007      	b.n	8001178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e004      	b.n	8001178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e001      	b.n	8001178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000028 	.word	0x20000028
 8001188:	20000020 	.word	0x20000020
 800118c:	20000024 	.word	0x20000024

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000028 	.word	0x20000028
 80011b4:	20000134 	.word	0x20000134

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000134 	.word	0x20000134

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000028 	.word	0x20000028

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	@ (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	@ (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	@ 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff3e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff31 	bl	800127c <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d008      	beq.n	8001464 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2204      	movs	r2, #4
 8001456:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e022      	b.n	80014aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 020e 	bic.w	r2, r2, #14
 8001472:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001488:	f003 021c 	and.w	r2, r3, #28
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d005      	beq.n	80014da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2204      	movs	r2, #4
 80014d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e029      	b.n	800152e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 020e 	bic.w	r2, r2, #14
 80014e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f003 021c 	and.w	r2, r3, #28
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	2101      	movs	r1, #1
 8001508:	fa01 f202 	lsl.w	r2, r1, r2
 800150c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
    }
  }
  return status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e17f      	b.n	8001848 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8171 	beq.w	8001842 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_Init+0x40>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d130      	bne.n	80015da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ae:	2201      	movs	r2, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 0201 	and.w	r2, r3, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d118      	bne.n	8001618 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	6939      	ldr	r1, [r7, #16]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80ac 	beq.w	8001842 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <HAL_GPIO_Init+0x330>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_GPIO_Init+0x330>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_GPIO_Init+0x330>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001702:	4a5a      	ldr	r2, [pc, #360]	@ (800186c <HAL_GPIO_Init+0x334>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x242>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	@ (8001870 <HAL_GPIO_Init+0x338>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x23e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	@ (8001874 <HAL_GPIO_Init+0x33c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x23a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <HAL_GPIO_Init+0x340>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x236>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4c      	ldr	r2, [pc, #304]	@ (800187c <HAL_GPIO_Init+0x344>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x232>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4b      	ldr	r2, [pc, #300]	@ (8001880 <HAL_GPIO_Init+0x348>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x22e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4a      	ldr	r2, [pc, #296]	@ (8001884 <HAL_GPIO_Init+0x34c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x22a>
 800175e:	2306      	movs	r3, #6
 8001760:	e00c      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001762:	2307      	movs	r3, #7
 8001764:	e00a      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001766:	2305      	movs	r3, #5
 8001768:	e008      	b.n	800177c <HAL_GPIO_Init+0x244>
 800176a:	2304      	movs	r3, #4
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x244>
 800176e:	2303      	movs	r3, #3
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x244>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x244>
 800177a:	2300      	movs	r3, #0
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	f002 0203 	and.w	r2, r2, #3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178c:	4937      	ldr	r1, [pc, #220]	@ (800186c <HAL_GPIO_Init+0x334>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <HAL_GPIO_Init+0x350>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017be:	4a32      	ldr	r2, [pc, #200]	@ (8001888 <HAL_GPIO_Init+0x350>)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <HAL_GPIO_Init+0x350>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e8:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_GPIO_Init+0x350>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017ee:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <HAL_GPIO_Init+0x350>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001812:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <HAL_GPIO_Init+0x350>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001818:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <HAL_GPIO_Init+0x350>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800183c:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <HAL_GPIO_Init+0x350>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae78 	bne.w	8001548 <HAL_GPIO_Init+0x10>
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000800 	.word	0x48000800
 8001878:	48000c00 	.word	0x48000c00
 800187c:	48001000 	.word	0x48001000
 8001880:	48001400 	.word	0x48001400
 8001884:	48001800 	.word	0x48001800
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43d9      	mvns	r1, r3
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	400b      	ands	r3, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f806 	bl	8001920 <HAL_GPIO_EXTI_Callback>
  }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HAL_PWREx_GetVoltageRange+0x18>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001962:	d130      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800196c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001970:	d038      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800197a:	4a1e      	ldr	r2, [pc, #120]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2232      	movs	r2, #50	@ 0x32
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001998:	e002      	b.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ac:	d102      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f2      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c0:	d110      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e00f      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d2:	d007      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019dc:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000
 80019f8:	20000020 	.word	0x20000020
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3ca      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a12:	4b97      	ldr	r3, [pc, #604]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1c:	4b94      	ldr	r3, [pc, #592]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80e4 	beq.w	8001bfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4a>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	f040 808b 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 8087 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	4b89      	ldr	r3, [pc, #548]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x62>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e3a2      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_RCC_OscConfig+0x7c>
 8001a72:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7a:	e005      	b.n	8001a88 <HAL_RCC_OscConfig+0x88>
 8001a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d223      	bcs.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd55 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e383      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a72      	ldr	r2, [pc, #456]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b70      	ldr	r3, [pc, #448]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	496d      	ldr	r1, [pc, #436]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b6c      	ldr	r3, [pc, #432]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4968      	ldr	r1, [pc, #416]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e025      	b.n	8001b20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b63      	ldr	r3, [pc, #396]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4960      	ldr	r1, [pc, #384]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	495b      	ldr	r1, [pc, #364]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fd15 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e343      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 fc4a 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b52      	ldr	r3, [pc, #328]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	4950      	ldr	r1, [pc, #320]	@ (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <HAL_RCC_OscConfig+0x278>)
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b40:	4b4e      	ldr	r3, [pc, #312]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fae7 	bl	8001118 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d052      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	e327      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d032      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b60:	4b43      	ldr	r3, [pc, #268]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a42      	ldr	r2, [pc, #264]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb24 	bl	80011b8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b74:	f7ff fb20 	bl	80011b8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e310      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b3a      	ldr	r3, [pc, #232]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a36      	ldr	r2, [pc, #216]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4931      	ldr	r1, [pc, #196]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	492c      	ldr	r1, [pc, #176]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e01a      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff faf1 	bl	80011b8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff faed 	bl	80011b8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e2dd      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x1da>
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d074      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x21a>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d10e      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d064      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d160      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e2ba      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x24a>
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e026      	b.n	8001c98 <HAL_RCC_OscConfig+0x298>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c52:	d115      	bne.n	8001c80 <HAL_RCC_OscConfig+0x280>
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a02      	ldr	r2, [pc, #8]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x298>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080051ac 	.word	0x080051ac
 8001c78:	20000020 	.word	0x20000020
 8001c7c:	20000024 	.word	0x20000024
 8001c80:	4ba0      	ldr	r3, [pc, #640]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a9f      	ldr	r2, [pc, #636]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a9c      	ldr	r2, [pc, #624]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa8a 	bl	80011b8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fa86 	bl	80011b8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e276      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	4b92      	ldr	r3, [pc, #584]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2a8>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fa76 	bl	80011b8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fa72 	bl	80011b8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e262      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d060      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x310>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d116      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x328>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e23f      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	4973      	ldr	r1, [pc, #460]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	e040      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d46:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa31 	bl	80011b8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa2d 	bl	80011b8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e21d      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	495f      	ldr	r1, [pc, #380]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5c      	ldr	r2, [pc, #368]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa0d 	bl	80011b8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa09 	bl	80011b8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1f9      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db4:	4b53      	ldr	r3, [pc, #332]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	4a4a      	ldr	r2, [pc, #296]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f9e8 	bl	80011b8 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff f9e4 	bl	80011b8 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1d4      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ef      	beq.n	8001dec <HAL_RCC_OscConfig+0x3ec>
 8001e0c:	e01b      	b.n	8001e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e14:	4a3b      	ldr	r2, [pc, #236]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f9cb 	bl	80011b8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff f9c7 	bl	80011b8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1b7      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e38:	4b32      	ldr	r3, [pc, #200]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e58:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	4a26      	ldr	r2, [pc, #152]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x508>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <HAL_RCC_OscConfig+0x508>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <HAL_RCC_OscConfig+0x508>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f98e 	bl	80011b8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7ff f98a 	bl	80011b8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e17a      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x508>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d8>
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed6:	e029      	b.n	8001f2c <HAL_RCC_OscConfig+0x52c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d115      	bne.n	8001f0c <HAL_RCC_OscConfig+0x50c>
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef6:	4a03      	ldr	r2, [pc, #12]	@ (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x52c>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	4a9b      	ldr	r2, [pc, #620]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f1c:	4b98      	ldr	r3, [pc, #608]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	4a97      	ldr	r2, [pc, #604]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d016      	beq.n	8001f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff f940 	bl	80011b8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f93c 	bl	80011b8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e12a      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	4b8b      	ldr	r3, [pc, #556]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ed      	beq.n	8001f3c <HAL_RCC_OscConfig+0x53c>
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f929 	bl	80011b8 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f925 	bl	80011b8 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e113      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	4b7f      	ldr	r3, [pc, #508]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ed      	bne.n	8001f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b7a      	ldr	r3, [pc, #488]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a79      	ldr	r2, [pc, #484]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80fe 	beq.w	80021a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 80d0 	bne.w	8002154 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fb4:	4b72      	ldr	r3, [pc, #456]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d130      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d127      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11f      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ff4:	2a07      	cmp	r2, #7
 8001ff6:	bf14      	ite	ne
 8001ff8:	2201      	movne	r2, #1
 8001ffa:	2200      	moveq	r2, #0
 8001ffc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d06e      	beq.n	8002108 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d069      	beq.n	8002104 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002030:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800203c:	4b50      	ldr	r3, [pc, #320]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0ad      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800204c:	4b4c      	ldr	r3, [pc, #304]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a4b      	ldr	r2, [pc, #300]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002058:	f7ff f8ae 	bl	80011b8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff f8aa 	bl	80011b8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e09a      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207e:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <HAL_RCC_OscConfig+0x784>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800208e:	3a01      	subs	r2, #1
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0552      	lsls	r2, r2, #21
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020ac:	0852      	lsrs	r2, r2, #1
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0652      	lsls	r2, r2, #25
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020b8:	0912      	lsrs	r2, r2, #4
 80020ba:	0452      	lsls	r2, r2, #17
 80020bc:	430a      	orrs	r2, r1
 80020be:	4930      	ldr	r1, [pc, #192]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020dc:	f7ff f86c 	bl	80011b8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f868 	bl	80011b8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e058      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002102:	e050      	b.n	80021a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e04f      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d148      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002114:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a19      	ldr	r2, [pc, #100]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800212c:	f7ff f844 	bl	80011b8 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff f840 	bl	80011b8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e030      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x734>
 8002152:	e028      	b.n	80021a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d023      	beq.n	80021a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a08      	ldr	r2, [pc, #32]	@ (8002180 <HAL_RCC_OscConfig+0x780>)
 8002160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7ff f827 	bl	80011b8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216c:	e00c      	b.n	8002188 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff f823 	bl	80011b8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d905      	bls.n	8002188 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e013      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
 8002180:	40021000 	.word	0x40021000
 8002184:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_RCC_OscConfig+0x7b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ec      	bne.n	800216e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_RCC_OscConfig+0x7b0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4905      	ldr	r1, [pc, #20]	@ (80021b0 <HAL_RCC_OscConfig+0x7b0>)
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_RCC_OscConfig+0x7b4>)
 800219c:	4013      	ands	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e001      	b.n	80021a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	feeefffc 	.word	0xfeeefffc

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0e7      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d910      	bls.n	80021fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4970      	ldr	r1, [pc, #448]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b6e      	ldr	r3, [pc, #440]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cf      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002214:	429a      	cmp	r2, r3
 8002216:	d908      	bls.n	800222a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4960      	ldr	r1, [pc, #384]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d04c      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b5a      	ldr	r3, [pc, #360]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d121      	bne.n	800228e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0a6      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e09a      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800226e:	4b4e      	ldr	r3, [pc, #312]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e08e      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227e:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e086      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4943      	ldr	r1, [pc, #268]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a0:	f7fe ff8a 	bl	80011b8 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe ff86 	bl	80011b8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e06e      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d208      	bcs.n	80022fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d210      	bcs.n	800232e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 0207 	bic.w	r2, r3, #7
 8002314:	4923      	ldr	r1, [pc, #140]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCC_ClockConfig+0x1ec>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e036      	b.n	800239c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4918      	ldr	r1, [pc, #96]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4910      	ldr	r1, [pc, #64]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800236c:	f000 f824 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	490b      	ldr	r1, [pc, #44]	@ (80023ac <HAL_RCC_ClockConfig+0x1f4>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1fc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fec1 	bl	8001118 <HAL_InitTick>
 8002396:	4603      	mov	r3, r0
 8002398:	72fb      	strb	r3, [r7, #11]

  return status;
 800239a:	7afb      	ldrb	r3, [r7, #11]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	080051ac 	.word	0x080051ac
 80023b0:	20000020 	.word	0x20000020
 80023b4:	20000024 	.word	0x20000024

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d121      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d11e      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023ec:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e005      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002408:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002414:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d102      	bne.n	8002436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e004      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d101      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800243c:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x114>)
 800243e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d134      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002446:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0xa6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0xac>
 800245c:	e005      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800245e:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	e005      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002464:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002466:	617b      	str	r3, [r7, #20]
      break;
 8002468:	e002      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	617b      	str	r3, [r7, #20]
      break;
 800246e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	3301      	adds	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	fb03 f202 	mul.w	r2, r3, r2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	0e5b      	lsrs	r3, r3, #25
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	3301      	adds	r3, #1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024b0:	69bb      	ldr	r3, [r7, #24]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	080051c4 	.word	0x080051c4
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200

080024d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000020 	.word	0x20000020

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	080051bc 	.word	0x080051bc

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002518:	f7ff ffda 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x28>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	080051bc 	.word	0x080051bc

08002540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002558:	f7ff f9ee 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 800255c:	6178      	str	r0, [r7, #20]
 800255e:	e014      	b.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256a:	6593      	str	r3, [r2, #88]	@ 0x58
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002578:	f7ff f9de 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 800257c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b1e      	ldr	r3, [pc, #120]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002590:	d10b      	bne.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b80      	cmp	r3, #128	@ 0x80
 8002596:	d919      	bls.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2ba0      	cmp	r3, #160	@ 0xa0
 800259c:	d902      	bls.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800259e:	2302      	movs	r3, #2
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e013      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e010      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b80      	cmp	r3, #128	@ 0x80
 80025ae:	d902      	bls.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b0:	2303      	movs	r3, #3
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e00a      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d102      	bne.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025bc:	2302      	movs	r3, #2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e004      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b70      	cmp	r3, #112	@ 0x70
 80025c6:	d101      	bne.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c8:	2301      	movs	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 0207 	bic.w	r2, r3, #7
 80025d4:	4909      	ldr	r1, [pc, #36]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025dc:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40022000 	.word	0x40022000

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002608:	2300      	movs	r3, #0
 800260a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800260c:	2300      	movs	r3, #0
 800260e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d041      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002620:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002624:	d02a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002626:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800262a:	d824      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800262c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002636:	d81e      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800263c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002640:	d010      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002642:	e018      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002644:	4b86      	ldr	r3, [pc, #536]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a85      	ldr	r2, [pc, #532]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002650:	e015      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fabb 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002662:	e00c      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3320      	adds	r3, #32
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fba6 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002674:	e003      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	74fb      	strb	r3, [r7, #19]
      break;
 800267a:	e000      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800267c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002692:	4973      	ldr	r1, [pc, #460]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026b4:	d02a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026ba:	d824      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026c6:	d81e      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d0:	d010      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a61      	ldr	r2, [pc, #388]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa73 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb5e 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002714:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002722:	494f      	ldr	r1, [pc, #316]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	@ 0x58
 8002764:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002780:	f7fe fd1a 	bl	80011b8 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002786:	e009      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fd16 	bl	80011b8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	74fb      	strb	r3, [r7, #19]
        break;
 800279a:	e005      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800279c:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d019      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fcd5 	bl	80011b8 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002810:	e00b      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fcd1 	bl	80011b8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
            break;
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ec      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284e:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
 800285c:	e006      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7c7b      	ldrb	r3, [r7, #17]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b9e      	ldr	r3, [pc, #632]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	4a9d      	ldr	r2, [pc, #628]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288a:	4b98      	ldr	r3, [pc, #608]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	4994      	ldr	r1, [pc, #592]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f023 020c 	bic.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ba:	498c      	ldr	r1, [pc, #560]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ce:	4b87      	ldr	r3, [pc, #540]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4983      	ldr	r1, [pc, #524]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f0:	4b7e      	ldr	r3, [pc, #504]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	497b      	ldr	r1, [pc, #492]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002912:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	4972      	ldr	r1, [pc, #456]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002934:	4b6d      	ldr	r3, [pc, #436]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	496a      	ldr	r1, [pc, #424]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002956:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	4961      	ldr	r1, [pc, #388]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002978:	4b5c      	ldr	r3, [pc, #368]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	4959      	ldr	r1, [pc, #356]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299a:	4b54      	ldr	r3, [pc, #336]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a8:	4950      	ldr	r1, [pc, #320]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029bc:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	4948      	ldr	r1, [pc, #288]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	493f      	ldr	r1, [pc, #252]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a00:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0e:	4937      	ldr	r1, [pc, #220]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a31      	ldr	r2, [pc, #196]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8c8 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6c:	491f      	ldr	r1, [pc, #124]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f899 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	4908      	ldr	r1, [pc, #32]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e014      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f867 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b2e:	4928      	ldr	r1, [pc, #160]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f844 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d014      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3320      	adds	r3, #32
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f925 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b9a:	490d      	ldr	r1, [pc, #52]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	4904      	ldr	r1, [pc, #16]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be2:	4b75      	ldr	r3, [pc, #468]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bee:	4b72      	ldr	r3, [pc, #456]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10d      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
       ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c06:	4b6c      	ldr	r3, [pc, #432]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
       ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d047      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e044      	b.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d018      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0x86>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d825      	bhi.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x62>
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d009      	beq.n	8002c48 <RCCEx_PLLSAI1_Config+0x74>
 8002c34:	e020      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c36:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11d      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e01a      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c48:	4b5b      	ldr	r3, [pc, #364]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e013      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c5a:	4b57      	ldr	r3, [pc, #348]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c76:	e006      	b.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e004      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	4944      	ldr	r1, [pc, #272]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d17d      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cb0:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fa7c 	bl	80011b8 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cc2:	e009      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc4:	f7fe fa78 	bl	80011b8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd6:	e005      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ef      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d160      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	0211      	lsls	r1, r2, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	0912      	lsrs	r2, r2, #4
 8002d08:	0452      	lsls	r2, r2, #17
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	492a      	ldr	r1, [pc, #168]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]
 8002d12:	e027      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d112      	bne.n	8002d40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1a:	4b27      	ldr	r3, [pc, #156]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	0211      	lsls	r1, r2, #8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6912      	ldr	r2, [r2, #16]
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0552      	lsls	r2, r2, #21
 8002d36:	430a      	orrs	r2, r1
 8002d38:	491f      	ldr	r1, [pc, #124]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	610b      	str	r3, [r1, #16]
 8002d3e:	e011      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d40:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	0211      	lsls	r1, r2, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6952      	ldr	r2, [r2, #20]
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0652      	lsls	r2, r2, #25
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	4916      	ldr	r1, [pc, #88]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fa22 	bl	80011b8 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d78:	f7fe fa1e 	bl	80011b8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
          break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4904      	ldr	r1, [pc, #16]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dca:	4b6a      	ldr	r3, [pc, #424]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dd6:	4b67      	ldr	r3, [pc, #412]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0203 	and.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d10d      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dee:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d047      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	e044      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d018      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0x86>
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d825      	bhi.n	8002e60 <RCCEx_PLLSAI2_Config+0xa4>
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d002      	beq.n	8002e1e <RCCEx_PLLSAI2_Config+0x62>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d009      	beq.n	8002e30 <RCCEx_PLLSAI2_Config+0x74>
 8002e1c:	e020      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e1e:	4b55      	ldr	r3, [pc, #340]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11d      	bne.n	8002e66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2e:	e01a      	b.n	8002e66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e013      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e42:	4b4c      	ldr	r3, [pc, #304]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e4e:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e5e:	e006      	b.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e004      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	4939      	ldr	r1, [pc, #228]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d167      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e98:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a35      	ldr	r2, [pc, #212]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea4:	f7fe f988 	bl	80011b8 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eaa:	e009      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eac:	f7fe f984 	bl	80011b8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d902      	bls.n	8002ec0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ebe:	e005      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ef      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d14a      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ed8:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6892      	ldr	r2, [r2, #8]
 8002ee8:	0211      	lsls	r1, r2, #8
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	0912      	lsrs	r2, r2, #4
 8002ef0:	0452      	lsls	r2, r2, #17
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	491f      	ldr	r1, [pc, #124]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	614b      	str	r3, [r1, #20]
 8002efa:	e011      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002efc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6892      	ldr	r2, [r2, #8]
 8002f0c:	0211      	lsls	r1, r2, #8
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6912      	ldr	r2, [r2, #16]
 8002f12:	0852      	lsrs	r2, r2, #1
 8002f14:	3a01      	subs	r2, #1
 8002f16:	0652      	lsls	r2, r2, #25
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a13      	ldr	r2, [pc, #76]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe f944 	bl	80011b8 <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f32:	e009      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f34:	f7fe f940 	bl	80011b8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
          break;
 8002f46:	e005      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ef      	beq.n	8002f34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e095      	b.n	80030b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f9a:	d009      	beq.n	8002fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
 8002fa2:	e005      	b.n	8002fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fc50 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff0:	d902      	bls.n	8002ff8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e002      	b.n	8002ffe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003006:	d007      	beq.n	8003018 <HAL_SPI_Init+0xa0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	ea42 0103 	orr.w	r1, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	f003 0204 	and.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003094:	ea42 0103 	orr.w	r1, r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ce:	f7fe f873 	bl	80011b8 <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e15c      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_Transmit+0x36>
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e154      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_SPI_Transmit+0x48>
 8003102:	2302      	movs	r3, #2
 8003104:	e14d      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003158:	d10f      	bne.n	800317a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003168:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003178:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b40      	cmp	r3, #64	@ 0x40
 8003186:	d007      	beq.n	8003198 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031a0:	d952      	bls.n	8003248 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_Transmit+0xf2>
 80031aa:	8b7b      	ldrh	r3, [r7, #26]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d145      	bne.n	800323c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031d4:	e032      	b.n	800323c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d112      	bne.n	800320a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003208:	e018      	b.n	800323c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800320a:	f7fd ffd5 	bl	80011b8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d803      	bhi.n	8003222 <HAL_SPI_Transmit+0x164>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d102      	bne.n	8003228 <HAL_SPI_Transmit+0x16a>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0b2      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1c7      	bne.n	80031d6 <HAL_SPI_Transmit+0x118>
 8003246:	e083      	b.n	8003350 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_SPI_Transmit+0x198>
 8003250:	8b7b      	ldrh	r3, [r7, #26]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d177      	bne.n	8003346 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d912      	bls.n	8003286 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b02      	subs	r3, #2
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003284:	e05f      	b.n	8003346 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032ac:	e04b      	b.n	8003346 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d12b      	bne.n	8003314 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d912      	bls.n	80032ec <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b02      	subs	r3, #2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ea:	e02c      	b.n	8003346 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003312:	e018      	b.n	8003346 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003314:	f7fd ff50 	bl	80011b8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d803      	bhi.n	800332c <HAL_SPI_Transmit+0x26e>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d102      	bne.n	8003332 <HAL_SPI_Transmit+0x274>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e02d      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1ae      	bne.n	80032ae <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fe15 	bl	8003f84 <SPI_EndRxTxTransaction>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b088      	sub	sp, #32
 80033ae:	af02      	add	r7, sp, #8
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e123      	b.n	8003612 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d2:	d112      	bne.n	80033fa <HAL_SPI_Receive+0x50>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10e      	bne.n	80033fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2204      	movs	r2, #4
 80033e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f912 	bl	800361a <HAL_SPI_TransmitReceive>
 80033f6:	4603      	mov	r3, r0
 80033f8:	e10b      	b.n	8003612 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033fa:	f7fd fedd 	bl	80011b8 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SPI_Receive+0x62>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e100      	b.n	8003612 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_SPI_Receive+0x74>
 800341a:	2302      	movs	r3, #2
 800341c:	e0f9      	b.n	8003612 <HAL_SPI_Receive+0x268>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2204      	movs	r2, #4
 800342a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003470:	d908      	bls.n	8003484 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	e007      	b.n	8003494 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349c:	d10f      	bne.n	80034be <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e4:	d875      	bhi.n	80035d2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034e6:	e037      	b.n	8003558 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d117      	bne.n	8003526 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f103 020c 	add.w	r2, r3, #12
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003524:	e018      	b.n	8003558 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003526:	f7fd fe47 	bl	80011b8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d803      	bhi.n	800353e <HAL_SPI_Receive+0x194>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Receive+0x19a>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e05c      	b.n	8003612 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c1      	bne.n	80034e8 <HAL_SPI_Receive+0x13e>
 8003564:	e03b      	b.n	80035de <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d115      	bne.n	80035a0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	b292      	uxth	r2, r2
 8003580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800359e:	e018      	b.n	80035d2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a0:	f7fd fe0a 	bl	80011b8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d803      	bhi.n	80035b8 <HAL_SPI_Receive+0x20e>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d102      	bne.n	80035be <HAL_SPI_Receive+0x214>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e01f      	b.n	8003612 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1c3      	bne.n	8003566 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fc76 	bl	8003ed4 <SPI_EndRxTransaction>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003610:	2300      	movs	r3, #0
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	@ 0x28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362c:	f7fd fdc4 	bl	80011b8 <HAL_GetTick>
 8003630:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003638:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003648:	7ffb      	ldrb	r3, [r7, #31]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d00c      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x4e>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003654:	d106      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x4a>
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d001      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	e1f3      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_SPI_TransmitReceive+0x60>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_TransmitReceive+0x60>
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1e8      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_SPI_TransmitReceive+0x72>
 8003688:	2302      	movs	r3, #2
 800368a:	e1e1      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b04      	cmp	r3, #4
 800369e:	d003      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2205      	movs	r2, #5
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036ea:	d802      	bhi.n	80036f2 <HAL_SPI_TransmitReceive+0xd8>
 80036ec:	8abb      	ldrh	r3, [r7, #20]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d908      	bls.n	8003704 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	e007      	b.n	8003714 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b40      	cmp	r3, #64	@ 0x40
 8003720:	d007      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800373a:	f240 8083 	bls.w	8003844 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_SPI_TransmitReceive+0x132>
 8003746:	8afb      	ldrh	r3, [r7, #22]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d16f      	bne.n	800382c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003770:	e05c      	b.n	800382c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b02      	cmp	r3, #2
 800377e:	d11b      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x19e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x19e>
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	2b01      	cmp	r3, #1
 800378e:	d113      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d11c      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x1e6>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	b292      	uxth	r2, r2
 80037de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003800:	f7fd fcda 	bl	80011b8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380c:	429a      	cmp	r2, r3
 800380e:	d80d      	bhi.n	800382c <HAL_SPI_TransmitReceive+0x212>
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d009      	beq.n	800382c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e111      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d19d      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x158>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d197      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x158>
 8003842:	e0e5      	b.n	8003a10 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x23a>
 800384c:	8afb      	ldrh	r3, [r7, #22]
 800384e:	2b01      	cmp	r3, #1
 8003850:	f040 80d1 	bne.w	80039f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d912      	bls.n	8003884 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	1c9a      	adds	r2, r3, #2
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b02      	subs	r3, #2
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003882:	e0b8      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e0a4      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d134      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x30a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02f      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x30a>
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12c      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d912      	bls.n	80038fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b02      	subs	r3, #2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038f8:	e012      	b.n	8003920 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	7812      	ldrb	r2, [r2, #0]
 8003906:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d148      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x3aa>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d042      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d923      	bls.n	8003992 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	b292      	uxth	r2, r2
 8003956:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	1c9a      	adds	r2, r3, #2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b02      	subs	r3, #2
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d81f      	bhi.n	80039c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e016      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f103 020c 	add.w	r2, r3, #12
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039c0:	2301      	movs	r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039c4:	f7fd fbf8 	bl	80011b8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d803      	bhi.n	80039dc <HAL_SPI_TransmitReceive+0x3c2>
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x3c8>
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e02c      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af55 	bne.w	80038ac <HAL_SPI_TransmitReceive+0x292>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f47f af4e 	bne.w	80038ac <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fab5 	bl	8003f84 <SPI_EndRxTxTransaction>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3728      	adds	r7, #40	@ 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
    return;
 8003a9a:	e0d7      	b.n	8003c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	09db      	lsrs	r3, r3, #7
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    return;
 8003abc:	e0c6      	b.n	8003c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80b4 	beq.w	8003c4c <HAL_SPI_IRQHandler+0x1f4>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ad 	beq.w	8003c4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d023      	beq.n	8003b46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d011      	beq.n	8003b2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	e00b      	b.n	8003b46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]
        return;
 8003b44:	e082      	b.n	8003c4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	f043 0208 	orr.w	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04f      	beq.n	8003c4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_SPI_IRQHandler+0x17e>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d034      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0203 	bic.w	r2, r2, #3
 8003be4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd fc5b 	bl	80014b6 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd fc45 	bl	80014b6 <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003c3e:	e003      	b.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f809 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c46:	e000      	b.n	8003c4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003c48:	bf00      	nop
    return;
 8003c4a:	bf00      	nop
  }
}
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08003c6d 	.word	0x08003c6d

08003c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff ffe5 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ca8:	f7fd fa86 	bl	80011b8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cb8:	f7fd fa7e 	bl	80011b8 <HAL_GetTick>
 8003cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cbe:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	015b      	lsls	r3, r3, #5
 8003cc4:	0d1b      	lsrs	r3, r3, #20
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cce:	e054      	b.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d050      	beq.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd8:	f7fd fa6e 	bl	80011b8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d902      	bls.n	8003cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d13d      	bne.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d06:	d111      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d10:	d004      	beq.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1a:	d107      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d34:	d10f      	bne.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e017      	b.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d19b      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000020 	.word	0x20000020

08003da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dba:	f7fd f9fd 	bl	80011b8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dca:	f7fd f9f5 	bl	80011b8 <HAL_GetTick>
 8003dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00da      	lsls	r2, r3, #3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	0d1b      	lsrs	r3, r3, #20
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003df0:	e060      	b.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003df8:	d107      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d050      	beq.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e12:	f7fd f9d1 	bl	80011b8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d902      	bls.n	8003e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13d      	bne.n	8003ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e40:	d111      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4a:	d004      	beq.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e54:	d107      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6e:	d10f      	bne.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e010      	b.n	8003ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d196      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3728      	adds	r7, #40	@ 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000020 	.word	0x20000020

08003ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee8:	d111      	bne.n	8003f0e <SPI_EndRxTransaction+0x3a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef2:	d004      	beq.n	8003efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efc:	d107      	bne.n	8003f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff febd 	bl	8003c98 <SPI_WaitFlagStateUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e023      	b.n	8003f7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3c:	d11d      	bne.n	8003f7a <SPI_EndRxTransaction+0xa6>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f46:	d004      	beq.n	8003f52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f50:	d113      	bne.n	8003f7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ff22 	bl	8003da8 <SPI_WaitFifoStateUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	f043 0220 	orr.w	r2, r3, #32
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e000      	b.n	8003f7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ff03 	bl	8003da8 <SPI_WaitFifoStateUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e027      	b.n	8004008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2180      	movs	r1, #128	@ 0x80
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fe68 	bl	8003c98 <SPI_WaitFlagStateUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e014      	b.n	8004008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff fedc 	bl	8003da8 <SPI_WaitFifoStateUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e000      	b.n	8004008 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e040      	b.n	80040a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fc86 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	@ 0x24
 800403c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fe06 	bl	8004c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fb4b 	bl	80046f8 <UART_SetConfig>
 8004062:	4603      	mov	r3, r0
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e01b      	b.n	80040a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800407a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800408a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fe85 	bl	8004dac <UART_CheckIdleState>
 80040a2:	4603      	mov	r3, r0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0ba      	sub	sp, #232	@ 0xe8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040da:	4013      	ands	r3, r2
 80040dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d115      	bne.n	8004114 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 82ca 	beq.w	800469e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
      }
      return;
 8004112:	e2c4      	b.n	800469e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8117 	beq.w	800434c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800412a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800412e:	4b85      	ldr	r3, [pc, #532]	@ (8004344 <HAL_UART_IRQHandler+0x298>)
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 810a 	beq.w	800434c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_UART_IRQHandler+0xbc>
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d011      	beq.n	8004198 <HAL_UART_IRQHandler+0xec>
 8004174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2202      	movs	r2, #2
 8004186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418e:	f043 0204 	orr.w	r2, r3, #4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <HAL_UART_IRQHandler+0x11c>
 80041a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2204      	movs	r2, #4
 80041b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041be:	f043 0202 	orr.w	r2, r3, #2
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d017      	beq.n	8004204 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00b      	beq.n	8004204 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2208      	movs	r2, #8
 80041f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041fa:	f043 0208 	orr.w	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <HAL_UART_IRQHandler+0x18a>
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00c      	beq.n	8004236 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8230 	beq.w	80046a2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800424e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427e:	2b40      	cmp	r3, #64	@ 0x40
 8004280:	d005      	beq.n	800428e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004286:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04f      	beq.n	800432e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fea1 	bl	8004fd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d141      	bne.n	8004326 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1d9      	bne.n	80042a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fa:	4a13      	ldr	r2, [pc, #76]	@ (8004348 <HAL_UART_IRQHandler+0x29c>)
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd f8d7 	bl	80014b6 <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e00f      	b.n	800433e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9d4 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e00b      	b.n	800433e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9d0 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	e007      	b.n	800433e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9cc 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800433c:	e1b1      	b.n	80046a2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433e:	bf00      	nop
    return;
 8004340:	e1af      	b.n	80046a2 <HAL_UART_IRQHandler+0x5f6>
 8004342:	bf00      	nop
 8004344:	04000120 	.word	0x04000120
 8004348:	0800509f 	.word	0x0800509f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004350:	2b01      	cmp	r3, #1
 8004352:	f040 816a 	bne.w	800462a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8163 	beq.w	800462a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 815c 	beq.w	800462a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2210      	movs	r2, #16
 8004378:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	f040 80d4 	bne.w	8004532 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004396:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80ad 	beq.w	80044fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043aa:	429a      	cmp	r2, r3
 80043ac:	f080 80a5 	bcs.w	80044fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8086 	bne.w	80044d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800440e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1da      	bne.n	80043cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3308      	adds	r3, #8
 800441c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800443a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800443e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800444c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e1      	bne.n	8004416 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800447c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e3      	bne.n	8004452 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e4      	bne.n	8004498 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc ffb1 	bl	800143a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8f4 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80044f8:	e0d5      	b.n	80046a6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004504:	429a      	cmp	r2, r3
 8004506:	f040 80ce 	bne.w	80046a6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	f040 80c5 	bne.w	80046a6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8d8 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
      return;
 8004530:	e0b9      	b.n	80046a6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800453e:	b29b      	uxth	r3, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80ab 	beq.w	80046aa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a6 	beq.w	80046aa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800456c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004572:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004580:	647b      	str	r3, [r7, #68]	@ 0x44
 8004582:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800458e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e4      	bne.n	800455e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	623b      	str	r3, [r7, #32]
   return(result);
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e3      	bne.n	8004594 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 0310 	bic.w	r3, r3, #16
 80045f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	617b      	str	r3, [r7, #20]
   return(result);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e4      	bne.n	80045e0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800461c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f85c 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004628:	e03f      	b.n	80046aa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <HAL_UART_IRQHandler+0x5a8>
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800464a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd66 	bl	800511e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004652:	e02d      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01c      	beq.n	80046ae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
    }
    return;
 800467c:	e017      	b.n	80046ae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d012      	beq.n	80046b0 <HAL_UART_IRQHandler+0x604>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fd17 	bl	80050ca <UART_EndTransmit_IT>
    return;
 800469c:	e008      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
      return;
 800469e:	bf00      	nop
 80046a0:	e006      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
    return;
 80046a2:	bf00      	nop
 80046a4:	e004      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
      return;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
      return;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_UART_IRQHandler+0x604>
    return;
 80046ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80046b0:	37e8      	adds	r7, #232	@ 0xe8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop

080046b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b08a      	sub	sp, #40	@ 0x28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4ba4      	ldr	r3, [pc, #656]	@ (80049b8 <UART_SetConfig+0x2c0>)
 8004728:	4013      	ands	r3, r2
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004730:	430b      	orrs	r3, r1
 8004732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a99      	ldr	r2, [pc, #612]	@ (80049bc <UART_SetConfig+0x2c4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004760:	4313      	orrs	r3, r2
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a90      	ldr	r2, [pc, #576]	@ (80049c0 <UART_SetConfig+0x2c8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d126      	bne.n	80047d0 <UART_SetConfig+0xd8>
 8004782:	4b90      	ldr	r3, [pc, #576]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d81b      	bhi.n	80047c8 <UART_SetConfig+0xd0>
 8004790:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <UART_SetConfig+0xa0>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047a9 	.word	0x080047a9
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e116      	b.n	80049de <UART_SetConfig+0x2e6>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e112      	b.n	80049de <UART_SetConfig+0x2e6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e10e      	b.n	80049de <UART_SetConfig+0x2e6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e10a      	b.n	80049de <UART_SetConfig+0x2e6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e106      	b.n	80049de <UART_SetConfig+0x2e6>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7c      	ldr	r2, [pc, #496]	@ (80049c8 <UART_SetConfig+0x2d0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d138      	bne.n	800484c <UART_SetConfig+0x154>
 80047da:	4b7a      	ldr	r3, [pc, #488]	@ (80049c4 <UART_SetConfig+0x2cc>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d82d      	bhi.n	8004844 <UART_SetConfig+0x14c>
 80047e8:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0xf8>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004835 	.word	0x08004835
 8004804:	08004845 	.word	0x08004845
 8004808:	08004845 	.word	0x08004845
 800480c:	08004845 	.word	0x08004845
 8004810:	0800482d 	.word	0x0800482d
 8004814:	08004845 	.word	0x08004845
 8004818:	08004845 	.word	0x08004845
 800481c:	08004845 	.word	0x08004845
 8004820:	0800483d 	.word	0x0800483d
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482a:	e0d8      	b.n	80049de <UART_SetConfig+0x2e6>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004832:	e0d4      	b.n	80049de <UART_SetConfig+0x2e6>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e0d0      	b.n	80049de <UART_SetConfig+0x2e6>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e0cc      	b.n	80049de <UART_SetConfig+0x2e6>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e0c8      	b.n	80049de <UART_SetConfig+0x2e6>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5e      	ldr	r2, [pc, #376]	@ (80049cc <UART_SetConfig+0x2d4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d125      	bne.n	80048a2 <UART_SetConfig+0x1aa>
 8004856:	4b5b      	ldr	r3, [pc, #364]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004860:	2b30      	cmp	r3, #48	@ 0x30
 8004862:	d016      	beq.n	8004892 <UART_SetConfig+0x19a>
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d818      	bhi.n	800489a <UART_SetConfig+0x1a2>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d00a      	beq.n	8004882 <UART_SetConfig+0x18a>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d814      	bhi.n	800489a <UART_SetConfig+0x1a2>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <UART_SetConfig+0x182>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d008      	beq.n	800488a <UART_SetConfig+0x192>
 8004878:	e00f      	b.n	800489a <UART_SetConfig+0x1a2>
 800487a:	2300      	movs	r3, #0
 800487c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004880:	e0ad      	b.n	80049de <UART_SetConfig+0x2e6>
 8004882:	2302      	movs	r3, #2
 8004884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004888:	e0a9      	b.n	80049de <UART_SetConfig+0x2e6>
 800488a:	2304      	movs	r3, #4
 800488c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004890:	e0a5      	b.n	80049de <UART_SetConfig+0x2e6>
 8004892:	2308      	movs	r3, #8
 8004894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004898:	e0a1      	b.n	80049de <UART_SetConfig+0x2e6>
 800489a:	2310      	movs	r3, #16
 800489c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a0:	e09d      	b.n	80049de <UART_SetConfig+0x2e6>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <UART_SetConfig+0x2d8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d125      	bne.n	80048f8 <UART_SetConfig+0x200>
 80048ac:	4b45      	ldr	r3, [pc, #276]	@ (80049c4 <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80048b8:	d016      	beq.n	80048e8 <UART_SetConfig+0x1f0>
 80048ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80048bc:	d818      	bhi.n	80048f0 <UART_SetConfig+0x1f8>
 80048be:	2b80      	cmp	r3, #128	@ 0x80
 80048c0:	d00a      	beq.n	80048d8 <UART_SetConfig+0x1e0>
 80048c2:	2b80      	cmp	r3, #128	@ 0x80
 80048c4:	d814      	bhi.n	80048f0 <UART_SetConfig+0x1f8>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <UART_SetConfig+0x1d8>
 80048ca:	2b40      	cmp	r3, #64	@ 0x40
 80048cc:	d008      	beq.n	80048e0 <UART_SetConfig+0x1e8>
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x1f8>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e082      	b.n	80049de <UART_SetConfig+0x2e6>
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e07e      	b.n	80049de <UART_SetConfig+0x2e6>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e6:	e07a      	b.n	80049de <UART_SetConfig+0x2e6>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ee:	e076      	b.n	80049de <UART_SetConfig+0x2e6>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e072      	b.n	80049de <UART_SetConfig+0x2e6>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a35      	ldr	r2, [pc, #212]	@ (80049d4 <UART_SetConfig+0x2dc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d12a      	bne.n	8004958 <UART_SetConfig+0x260>
 8004902:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800490c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004910:	d01a      	beq.n	8004948 <UART_SetConfig+0x250>
 8004912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004916:	d81b      	bhi.n	8004950 <UART_SetConfig+0x258>
 8004918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491c:	d00c      	beq.n	8004938 <UART_SetConfig+0x240>
 800491e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004922:	d815      	bhi.n	8004950 <UART_SetConfig+0x258>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <UART_SetConfig+0x238>
 8004928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492c:	d008      	beq.n	8004940 <UART_SetConfig+0x248>
 800492e:	e00f      	b.n	8004950 <UART_SetConfig+0x258>
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e052      	b.n	80049de <UART_SetConfig+0x2e6>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e04e      	b.n	80049de <UART_SetConfig+0x2e6>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e04a      	b.n	80049de <UART_SetConfig+0x2e6>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e046      	b.n	80049de <UART_SetConfig+0x2e6>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e042      	b.n	80049de <UART_SetConfig+0x2e6>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a17      	ldr	r2, [pc, #92]	@ (80049bc <UART_SetConfig+0x2c4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d13a      	bne.n	80049d8 <UART_SetConfig+0x2e0>
 8004962:	4b18      	ldr	r3, [pc, #96]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800496c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004970:	d01a      	beq.n	80049a8 <UART_SetConfig+0x2b0>
 8004972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004976:	d81b      	bhi.n	80049b0 <UART_SetConfig+0x2b8>
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800497c:	d00c      	beq.n	8004998 <UART_SetConfig+0x2a0>
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004982:	d815      	bhi.n	80049b0 <UART_SetConfig+0x2b8>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <UART_SetConfig+0x298>
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498c:	d008      	beq.n	80049a0 <UART_SetConfig+0x2a8>
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x2b8>
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e022      	b.n	80049de <UART_SetConfig+0x2e6>
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e01e      	b.n	80049de <UART_SetConfig+0x2e6>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e01a      	b.n	80049de <UART_SetConfig+0x2e6>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e016      	b.n	80049de <UART_SetConfig+0x2e6>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e012      	b.n	80049de <UART_SetConfig+0x2e6>
 80049b8:	efff69f3 	.word	0xefff69f3
 80049bc:	40008000 	.word	0x40008000
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40004800 	.word	0x40004800
 80049d0:	40004c00 	.word	0x40004c00
 80049d4:	40005000 	.word	0x40005000
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a9f      	ldr	r2, [pc, #636]	@ (8004c60 <UART_SetConfig+0x568>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d17a      	bne.n	8004ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d824      	bhi.n	8004a3a <UART_SetConfig+0x342>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <UART_SetConfig+0x300>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a3b 	.word	0x08004a3b
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004a2b 	.word	0x08004a2b
 8004a0c:	08004a3b 	.word	0x08004a3b
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a3b 	.word	0x08004a3b
 8004a18:	08004a33 	.word	0x08004a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f7fd fd64 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004a20:	61f8      	str	r0, [r7, #28]
        break;
 8004a22:	e010      	b.n	8004a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b8f      	ldr	r3, [pc, #572]	@ (8004c64 <UART_SetConfig+0x56c>)
 8004a26:	61fb      	str	r3, [r7, #28]
        break;
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fd fcc5 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004a2e:	61f8      	str	r0, [r7, #28]
        break;
 8004a30:	e009      	b.n	8004a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a36:	61fb      	str	r3, [r7, #28]
        break;
 8004a38:	e005      	b.n	8004a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80fb 	beq.w	8004c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d305      	bcc.n	8004a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d903      	bls.n	8004a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a70:	e0e8      	b.n	8004c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2200      	movs	r2, #0
 8004a76:	461c      	mov	r4, r3
 8004a78:	4615      	mov	r5, r2
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	022b      	lsls	r3, r5, #8
 8004a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a88:	0222      	lsls	r2, r4, #8
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	6849      	ldr	r1, [r1, #4]
 8004a8e:	0849      	lsrs	r1, r1, #1
 8004a90:	2000      	movs	r0, #0
 8004a92:	4688      	mov	r8, r1
 8004a94:	4681      	mov	r9, r0
 8004a96:	eb12 0a08 	adds.w	sl, r2, r8
 8004a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aac:	4650      	mov	r0, sl
 8004aae:	4659      	mov	r1, fp
 8004ab0:	f7fb fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac2:	d308      	bcc.n	8004ad6 <UART_SetConfig+0x3de>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aca:	d204      	bcs.n	8004ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e0b6      	b.n	8004c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004adc:	e0b2      	b.n	8004c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae6:	d15e      	bne.n	8004ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d828      	bhi.n	8004b42 <UART_SetConfig+0x44a>
 8004af0:	a201      	add	r2, pc, #4	@ (adr r2, 8004af8 <UART_SetConfig+0x400>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b43 	.word	0x08004b43
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b43 	.word	0x08004b43
 8004b18:	08004b3b 	.word	0x08004b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7fd fce4 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004b20:	61f8      	str	r0, [r7, #28]
        break;
 8004b22:	e014      	b.n	8004b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fd fcf6 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8004b28:	61f8      	str	r0, [r7, #28]
        break;
 8004b2a:	e010      	b.n	8004b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c64 <UART_SetConfig+0x56c>)
 8004b2e:	61fb      	str	r3, [r7, #28]
        break;
 8004b30:	e00d      	b.n	8004b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b32:	f7fd fc41 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004b36:	61f8      	str	r0, [r7, #28]
        break;
 8004b38:	e009      	b.n	8004b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3e:	61fb      	str	r3, [r7, #28]
        break;
 8004b40:	e005      	b.n	8004b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d077      	beq.n	8004c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005a      	lsls	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	441a      	add	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d916      	bls.n	8004b9e <UART_SetConfig+0x4a6>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b76:	d212      	bcs.n	8004b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f023 030f 	bic.w	r3, r3, #15
 8004b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	8afb      	ldrh	r3, [r7, #22]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	8afa      	ldrh	r2, [r7, #22]
 8004b9a:	60da      	str	r2, [r3, #12]
 8004b9c:	e052      	b.n	8004c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ba4:	e04e      	b.n	8004c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d827      	bhi.n	8004bfe <UART_SetConfig+0x506>
 8004bae:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <UART_SetConfig+0x4bc>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fd fc86 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61f8      	str	r0, [r7, #28]
        break;
 8004bde:	e014      	b.n	8004c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fd fc98 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8004be4:	61f8      	str	r0, [r7, #28]
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <UART_SetConfig+0x56c>)
 8004bea:	61fb      	str	r3, [r7, #28]
        break;
 8004bec:	e00d      	b.n	8004c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fd fbe3 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004bf2:	61f8      	str	r0, [r7, #28]
        break;
 8004bf4:	e009      	b.n	8004c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfa:	61fb      	str	r3, [r7, #28]
        break;
 8004bfc:	e005      	b.n	8004c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c08:	bf00      	nop
    }

    if (pclk != 0U)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d019      	beq.n	8004c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	085a      	lsrs	r2, r3, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d909      	bls.n	8004c3e <UART_SetConfig+0x546>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c30:	d205      	bcs.n	8004c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e002      	b.n	8004c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3728      	adds	r7, #40	@ 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	40008000 	.word	0x40008000
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d66:	d10a      	bne.n	8004d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b098      	sub	sp, #96	@ 0x60
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fc f9fc 	bl	80011b8 <HAL_GetTick>
 8004dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d12e      	bne.n	8004e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f88c 	bl	8004efc <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d021      	beq.n	8004e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e062      	b.n	8004ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d149      	bne.n	8004ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f856 	bl	8004efc <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d03c      	beq.n	8004ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	623b      	str	r3, [r7, #32]
   return(result);
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e6      	bne.n	8004e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ea8:	61fa      	str	r2, [r7, #28]
 8004eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e5      	bne.n	8004e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e011      	b.n	8004ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3758      	adds	r7, #88	@ 0x58
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0c:	e04f      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d04b      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f16:	f7fc f94f 	bl	80011b8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e04e      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d037      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b80      	cmp	r3, #128	@ 0x80
 8004f42:	d034      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b40      	cmp	r3, #64	@ 0x40
 8004f48:	d031      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d110      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f838 	bl	8004fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e029      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f88:	d111      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f81e 	bl	8004fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e00f      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d0a0      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b095      	sub	sp, #84	@ 0x54
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3308      	adds	r3, #8
 8005016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005048:	2b01      	cmp	r3, #1
 800504a:	d118      	bne.n	800507e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	60bb      	str	r3, [r7, #8]
   return(result);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0310 	bic.w	r3, r3, #16
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	613b      	str	r3, [r7, #16]
   return(result);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005092:	bf00      	nop
 8005094:	3754      	adds	r7, #84	@ 0x54
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fb05 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b088      	sub	sp, #32
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fad1 	bl	80046b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <memset>:
 8005132:	4402      	add	r2, r0
 8005134:	4603      	mov	r3, r0
 8005136:	4293      	cmp	r3, r2
 8005138:	d100      	bne.n	800513c <memset+0xa>
 800513a:	4770      	bx	lr
 800513c:	f803 1b01 	strb.w	r1, [r3], #1
 8005140:	e7f9      	b.n	8005136 <memset+0x4>
	...

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4d0d      	ldr	r5, [pc, #52]	@ (800517c <__libc_init_array+0x38>)
 8005148:	4c0d      	ldr	r4, [pc, #52]	@ (8005180 <__libc_init_array+0x3c>)
 800514a:	1b64      	subs	r4, r4, r5
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	2600      	movs	r6, #0
 8005150:	42a6      	cmp	r6, r4
 8005152:	d109      	bne.n	8005168 <__libc_init_array+0x24>
 8005154:	4d0b      	ldr	r5, [pc, #44]	@ (8005184 <__libc_init_array+0x40>)
 8005156:	4c0c      	ldr	r4, [pc, #48]	@ (8005188 <__libc_init_array+0x44>)
 8005158:	f000 f818 	bl	800518c <_init>
 800515c:	1b64      	subs	r4, r4, r5
 800515e:	10a4      	asrs	r4, r4, #2
 8005160:	2600      	movs	r6, #0
 8005162:	42a6      	cmp	r6, r4
 8005164:	d105      	bne.n	8005172 <__libc_init_array+0x2e>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	f855 3b04 	ldr.w	r3, [r5], #4
 800516c:	4798      	blx	r3
 800516e:	3601      	adds	r6, #1
 8005170:	e7ee      	b.n	8005150 <__libc_init_array+0xc>
 8005172:	f855 3b04 	ldr.w	r3, [r5], #4
 8005176:	4798      	blx	r3
 8005178:	3601      	adds	r6, #1
 800517a:	e7f2      	b.n	8005162 <__libc_init_array+0x1e>
 800517c:	080051fc 	.word	0x080051fc
 8005180:	080051fc 	.word	0x080051fc
 8005184:	080051fc 	.word	0x080051fc
 8005188:	08005200 	.word	0x08005200

0800518c <_init>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr

08005198 <_fini>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr
