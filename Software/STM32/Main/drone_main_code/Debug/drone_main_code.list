
drone_main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004e4c  08004e4c  00005e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e78  08004e78  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e78  08004e78  00005e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e80  08004e80  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08004e94  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004e94  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d933  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fba  00000000  00000000  0001396f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00015930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  000165d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016550  00000000  00000000  00016fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1e2  00000000  00000000  0002d4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e38a  00000000  00000000  0003b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003660  00000000  00000000  000c9ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cd110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004e34 	.word	0x08004e34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004e34 	.word	0x08004e34

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_uldivmod>:
 8000918:	b953      	cbnz	r3, 8000930 <__aeabi_uldivmod+0x18>
 800091a:	b94a      	cbnz	r2, 8000930 <__aeabi_uldivmod+0x18>
 800091c:	2900      	cmp	r1, #0
 800091e:	bf08      	it	eq
 8000920:	2800      	cmpeq	r0, #0
 8000922:	bf1c      	itt	ne
 8000924:	f04f 31ff 	movne.w	r1, #4294967295
 8000928:	f04f 30ff 	movne.w	r0, #4294967295
 800092c:	f000 b96a 	b.w	8000c04 <__aeabi_idiv0>
 8000930:	f1ad 0c08 	sub.w	ip, sp, #8
 8000934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000938:	f000 f806 	bl	8000948 <__udivmoddi4>
 800093c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr

08000948 <__udivmoddi4>:
 8000948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	9d08      	ldr	r5, [sp, #32]
 800094e:	460c      	mov	r4, r1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d14e      	bne.n	80009f2 <__udivmoddi4+0xaa>
 8000954:	4694      	mov	ip, r2
 8000956:	458c      	cmp	ip, r1
 8000958:	4686      	mov	lr, r0
 800095a:	fab2 f282 	clz	r2, r2
 800095e:	d962      	bls.n	8000a26 <__udivmoddi4+0xde>
 8000960:	b14a      	cbz	r2, 8000976 <__udivmoddi4+0x2e>
 8000962:	f1c2 0320 	rsb	r3, r2, #32
 8000966:	4091      	lsls	r1, r2
 8000968:	fa20 f303 	lsr.w	r3, r0, r3
 800096c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000970:	4319      	orrs	r1, r3
 8000972:	fa00 fe02 	lsl.w	lr, r0, r2
 8000976:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097a:	fa1f f68c 	uxth.w	r6, ip
 800097e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000982:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000986:	fb07 1114 	mls	r1, r7, r4, r1
 800098a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098e:	fb04 f106 	mul.w	r1, r4, r6
 8000992:	4299      	cmp	r1, r3
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x64>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f104 30ff 	add.w	r0, r4, #4294967295
 800099e:	f080 8112 	bcs.w	8000bc6 <__udivmoddi4+0x27e>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 810f 	bls.w	8000bc6 <__udivmoddi4+0x27e>
 80009a8:	3c02      	subs	r4, #2
 80009aa:	4463      	add	r3, ip
 80009ac:	1a59      	subs	r1, r3, r1
 80009ae:	fa1f f38e 	uxth.w	r3, lr
 80009b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b6:	fb07 1110 	mls	r1, r7, r0, r1
 80009ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009be:	fb00 f606 	mul.w	r6, r0, r6
 80009c2:	429e      	cmp	r6, r3
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x94>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80009ce:	f080 80fc 	bcs.w	8000bca <__udivmoddi4+0x282>
 80009d2:	429e      	cmp	r6, r3
 80009d4:	f240 80f9 	bls.w	8000bca <__udivmoddi4+0x282>
 80009d8:	4463      	add	r3, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	1b9b      	subs	r3, r3, r6
 80009de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11d      	cbz	r5, 80009ee <__udivmoddi4+0xa6>
 80009e6:	40d3      	lsrs	r3, r2
 80009e8:	2200      	movs	r2, #0
 80009ea:	e9c5 3200 	strd	r3, r2, [r5]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d905      	bls.n	8000a02 <__udivmoddi4+0xba>
 80009f6:	b10d      	cbz	r5, 80009fc <__udivmoddi4+0xb4>
 80009f8:	e9c5 0100 	strd	r0, r1, [r5]
 80009fc:	2100      	movs	r1, #0
 80009fe:	4608      	mov	r0, r1
 8000a00:	e7f5      	b.n	80009ee <__udivmoddi4+0xa6>
 8000a02:	fab3 f183 	clz	r1, r3
 8000a06:	2900      	cmp	r1, #0
 8000a08:	d146      	bne.n	8000a98 <__udivmoddi4+0x150>
 8000a0a:	42a3      	cmp	r3, r4
 8000a0c:	d302      	bcc.n	8000a14 <__udivmoddi4+0xcc>
 8000a0e:	4290      	cmp	r0, r2
 8000a10:	f0c0 80f0 	bcc.w	8000bf4 <__udivmoddi4+0x2ac>
 8000a14:	1a86      	subs	r6, r0, r2
 8000a16:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d0e6      	beq.n	80009ee <__udivmoddi4+0xa6>
 8000a20:	e9c5 6300 	strd	r6, r3, [r5]
 8000a24:	e7e3      	b.n	80009ee <__udivmoddi4+0xa6>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x204>
 8000a2c:	eba1 040c 	sub.w	r4, r1, ip
 8000a30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a34:	fa1f f78c 	uxth.w	r7, ip
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a42:	fb08 4416 	mls	r4, r8, r6, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb07 f006 	mul.w	r0, r7, r6
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x11c>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x11a>
 8000a5c:	4298      	cmp	r0, r3
 8000a5e:	f200 80cd 	bhi.w	8000bfc <__udivmoddi4+0x2b4>
 8000a62:	4626      	mov	r6, r4
 8000a64:	1a1c      	subs	r4, r3, r0
 8000a66:	fa1f f38e 	uxth.w	r3, lr
 8000a6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb00 f707 	mul.w	r7, r0, r7
 8000a7a:	429f      	cmp	r7, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x148>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x146>
 8000a88:	429f      	cmp	r7, r3
 8000a8a:	f200 80b0 	bhi.w	8000bee <__udivmoddi4+0x2a6>
 8000a8e:	4620      	mov	r0, r4
 8000a90:	1bdb      	subs	r3, r3, r7
 8000a92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a96:	e7a5      	b.n	80009e4 <__udivmoddi4+0x9c>
 8000a98:	f1c1 0620 	rsb	r6, r1, #32
 8000a9c:	408b      	lsls	r3, r1
 8000a9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000aac:	ea43 030c 	orr.w	r3, r3, ip
 8000ab0:	40f4      	lsrs	r4, r6
 8000ab2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ab6:	0c38      	lsrs	r0, r7, #16
 8000ab8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000abc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ac8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000acc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad0:	45a1      	cmp	r9, r4
 8000ad2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x1a6>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ade:	f080 8084 	bcs.w	8000bea <__udivmoddi4+0x2a2>
 8000ae2:	45a1      	cmp	r9, r4
 8000ae4:	f240 8081 	bls.w	8000bea <__udivmoddi4+0x2a2>
 8000ae8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	eba4 0409 	sub.w	r4, r4, r9
 8000af2:	fa1f f983 	uxth.w	r9, r3
 8000af6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afa:	fb00 4413 	mls	r4, r0, r3, r4
 8000afe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d907      	bls.n	8000b1a <__udivmoddi4+0x1d2>
 8000b0a:	193c      	adds	r4, r7, r4
 8000b0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b10:	d267      	bcs.n	8000be2 <__udivmoddi4+0x29a>
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d965      	bls.n	8000be2 <__udivmoddi4+0x29a>
 8000b16:	3b02      	subs	r3, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000b22:	eba4 040c 	sub.w	r4, r4, ip
 8000b26:	429c      	cmp	r4, r3
 8000b28:	46ce      	mov	lr, r9
 8000b2a:	469c      	mov	ip, r3
 8000b2c:	d351      	bcc.n	8000bd2 <__udivmoddi4+0x28a>
 8000b2e:	d04e      	beq.n	8000bce <__udivmoddi4+0x286>
 8000b30:	b155      	cbz	r5, 8000b48 <__udivmoddi4+0x200>
 8000b32:	ebb8 030e 	subs.w	r3, r8, lr
 8000b36:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b3e:	40cb      	lsrs	r3, r1
 8000b40:	431e      	orrs	r6, r3
 8000b42:	40cc      	lsrs	r4, r1
 8000b44:	e9c5 6400 	strd	r6, r4, [r5]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	e750      	b.n	80009ee <__udivmoddi4+0xa6>
 8000b4c:	f1c2 0320 	rsb	r3, r2, #32
 8000b50:	fa20 f103 	lsr.w	r1, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	fa24 f303 	lsr.w	r3, r4, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b70:	fb08 3110 	mls	r1, r8, r0, r3
 8000b74:	0c23      	lsrs	r3, r4, #16
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f107 	mul.w	r1, r0, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x24c>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b8a:	d22c      	bcs.n	8000be6 <__udivmoddi4+0x29e>
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d92a      	bls.n	8000be6 <__udivmoddi4+0x29e>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb01 f307 	mul.w	r3, r1, r7
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x276>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bb4:	d213      	bcs.n	8000bde <__udivmoddi4+0x296>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d911      	bls.n	8000bde <__udivmoddi4+0x296>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	1ae4      	subs	r4, r4, r3
 8000bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc4:	e739      	b.n	8000a3a <__udivmoddi4+0xf2>
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	e6f0      	b.n	80009ac <__udivmoddi4+0x64>
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e706      	b.n	80009dc <__udivmoddi4+0x94>
 8000bce:	45c8      	cmp	r8, r9
 8000bd0:	d2ae      	bcs.n	8000b30 <__udivmoddi4+0x1e8>
 8000bd2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bd6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bda:	3801      	subs	r0, #1
 8000bdc:	e7a8      	b.n	8000b30 <__udivmoddi4+0x1e8>
 8000bde:	4631      	mov	r1, r6
 8000be0:	e7ed      	b.n	8000bbe <__udivmoddi4+0x276>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e799      	b.n	8000b1a <__udivmoddi4+0x1d2>
 8000be6:	4630      	mov	r0, r6
 8000be8:	e7d4      	b.n	8000b94 <__udivmoddi4+0x24c>
 8000bea:	46d6      	mov	lr, sl
 8000bec:	e77f      	b.n	8000aee <__udivmoddi4+0x1a6>
 8000bee:	4463      	add	r3, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e74d      	b.n	8000a90 <__udivmoddi4+0x148>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e70f      	b.n	8000a1c <__udivmoddi4+0xd4>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	e730      	b.n	8000a64 <__udivmoddi4+0x11c>
 8000c02:	bf00      	nop

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%

void motor_ArmESC(h_motor_t* h_motor) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f848 	bl	8000ca8 <motor_SetPower>
    HAL_Delay(3000);
 8000c18:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c1c:	f001 faf6 	bl	800220c <HAL_Delay>

    motor_SetPower(h_motor, 7);
 8000c20:	2107      	movs	r1, #7
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f840 	bl	8000ca8 <motor_SetPower>
    HAL_Delay(2000);
 8000c28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c2c:	f001 faee 	bl	800220c <HAL_Delay>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    int neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fd4f 	bl	80006e4 <__aeabi_i2d>
 8000c46:	a316      	add	r3, pc, #88	@ (adr r3, 8000ca0 <percentageToMicrosecondsAtHighState+0x68>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f7ff face 	bl	80001ec <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <percentageToMicrosecondsAtHighState+0x60>)
 8000c5e:	f7ff fbf5 	bl	800044c <__adddf3>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fe2d 	bl	80008c8 <__aeabi_d2iz>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]
    return (int)((COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle);
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fd36 	bl	80006e4 <__aeabi_i2d>
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <percentageToMicrosecondsAtHighState+0x64>)
 8000c7e:	f7ff fab5 	bl	80001ec <__aeabi_dmul>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff fe1d 	bl	80008c8 <__aeabi_d2iz>
 8000c8e:	4603      	mov	r3, r0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40180000 	.word	0x40180000
 8000c9c:	40690000 	.word	0x40690000
 8000ca0:	47ae147b 	.word	0x47ae147b
 8000ca4:	3fa47ae1 	.word	0x3fa47ae1

08000ca8 <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int percentage) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f7ff ffc0 	bl	8000c38 <percentageToMicrosecondsAtHighState>
 8000cb8:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <motor_SetPower+0x26>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ccc:	e018      	b.n	8000d00 <motor_SetPower+0x58>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d105      	bne.n	8000ce2 <motor_SetPower+0x3a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ce0:	e00e      	b.n	8000d00 <motor_SetPower+0x58>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d105      	bne.n	8000cf6 <motor_SetPower+0x4e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cf4:	e004      	b.n	8000d00 <motor_SetPower+0x58>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    h_motor->PercentageOfTotalPower = percentage;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <motor_Init>:

HAL_StatusTypeDef motor_Init(h_motor_t* h_motor) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f002 fade 	bl	80032ec <HAL_TIM_PWM_Start>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
    // Initialisation spécifique à l'ESC
    motor_ArmESC(h_motor);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff67 	bl	8000c08 <motor_ArmESC>

    return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <read_IMU>:

int* read_IMU(){
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

}
 8000d48:	bf00      	nop
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d62:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 8000d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d72:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d76:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d92:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d96:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 8000d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dae:	eef0 7a66 	vmov.f32	s15, s13
}
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <update>:


float update(PID pid, float error){
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	ed2d 8b02 	vpush	{d8}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8000dd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000dd4:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 8000dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ddc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 8000de8:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 8000dec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000df0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000df4:	eeb0 1a47 	vmov.f32	s2, s14
 8000df8:	eef0 0a67 	vmov.f32	s1, s15
 8000dfc:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e00:	f7ff ffa8 	bl	8000d54 <integrate_error>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e0c:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 8000e14:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 8000e18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e1c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000e20:	eeb0 1a47 	vmov.f32	s2, s14
 8000e24:	eef0 0a67 	vmov.f32	s1, s15
 8000e28:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e2c:	f7ff ffac 	bl	8000d88 <differentiate_error>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e38:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 8000e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e54:	eeb0 0a67 	vmov.f32	s0, s15
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	ecbd 8b02 	vpop	{d8}
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr

08000e68 <read_RF>:


char* read_RF(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    
 8000e6c:	bf00      	nop
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f001 f954 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f812 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 fac2 	bl	800140c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e88:	f000 fa96 	bl	80013b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f93a 	bl	8001104 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e90:	f000 f874 	bl	8000f7c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e94:	f000 f984 	bl	80011a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e98:	f000 f9f2 	bl	8001280 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000e9c:	f000 fa3e 	bl	800131c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000ea0:	f000 fb28 	bl	80014f4 <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <main+0x2c>

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	@ 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	@ 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 ff12 	bl	8004ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	@ (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fc40 	bl	80027b4 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 fad5 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fea2 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f66:	f000 fabf 	bl	80014e8 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	@ 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	@ 0x58
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fe93 	bl	8004ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fba:	4b50      	ldr	r3, [pc, #320]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fbc:	4a50      	ldr	r2, [pc, #320]	@ (8001100 <MX_TIM1_Init+0x184>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fda:	4b48      	ldr	r3, [pc, #288]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe6:	4845      	ldr	r0, [pc, #276]	@ (80010fc <MX_TIM1_Init+0x180>)
 8000fe8:	f002 f87c 	bl	80030e4 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ff2:	f000 fa79 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001000:	4619      	mov	r1, r3
 8001002:	483e      	ldr	r0, [pc, #248]	@ (80010fc <MX_TIM1_Init+0x180>)
 8001004:	f002 fde4 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800100e:	f000 fa6b 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001012:	483a      	ldr	r0, [pc, #232]	@ (80010fc <MX_TIM1_Init+0x180>)
 8001014:	f002 f910 	bl	8003238 <HAL_TIM_PWM_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800101e:	f000 fa63 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800102e:	4619      	mov	r1, r3
 8001030:	4832      	ldr	r0, [pc, #200]	@ (80010fc <MX_TIM1_Init+0x180>)
 8001032:	f003 fabd 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800103c:	f000 fa54 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001040:	2360      	movs	r3, #96	@ 0x60
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4825      	ldr	r0, [pc, #148]	@ (80010fc <MX_TIM1_Init+0x180>)
 8001066:	f002 fcf1 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001070:	f000 fa3a 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	2204      	movs	r2, #4
 800107a:	4619      	mov	r1, r3
 800107c:	481f      	ldr	r0, [pc, #124]	@ (80010fc <MX_TIM1_Init+0x180>)
 800107e:	f002 fce5 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001088:	f000 fa2e 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800108c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001090:	2208      	movs	r2, #8
 8001092:	4619      	mov	r1, r3
 8001094:	4819      	ldr	r0, [pc, #100]	@ (80010fc <MX_TIM1_Init+0x180>)
 8001096:	f002 fcd9 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010a0:	f000 fa22 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	220c      	movs	r2, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <MX_TIM1_Init+0x180>)
 80010ae:	f002 fccd 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80010b8:	f000 fa16 	bl	80014e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM1_Init+0x180>)
 80010e0:	f003 fad4 	bl	800468c <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80010ea:	f000 f9fd 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM1_Init+0x180>)
 80010f0:	f000 feae 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	@ 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000028 	.word	0x20000028
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <MX_TIM3_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM3_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001138:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001146:	4814      	ldr	r0, [pc, #80]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001148:	f001 ffcc 	bl	80030e4 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 f9c9 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001164:	f002 fd34 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f9bb 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_TIM3_Init+0x94>)
 8001180:	f003 fa16 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800118a:	f000 f9ad 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000070 	.word	0x20000070
 800119c:	40000400 	.word	0x40000400

080011a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011cc:	4a2b      	ldr	r2, [pc, #172]	@ (800127c <MX_TIM4_Init+0xdc>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4821      	ldr	r0, [pc, #132]	@ (8001278 <MX_TIM4_Init+0xd8>)
 80011f2:	f001 ff77 	bl	80030e4 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80011fc:	f000 f974 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4619      	mov	r1, r3
 800120c:	481a      	ldr	r0, [pc, #104]	@ (8001278 <MX_TIM4_Init+0xd8>)
 800120e:	f002 fcdf 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 f966 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800121c:	4816      	ldr	r0, [pc, #88]	@ (8001278 <MX_TIM4_Init+0xd8>)
 800121e:	f002 f915 	bl	800344c <HAL_TIM_IC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f95e 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <MX_TIM4_Init+0xd8>)
 800123c:	f003 f9b8 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001246:	f000 f94f 	bl	80014e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800124a:	230a      	movs	r3, #10
 800124c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800124e:	2301      	movs	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_TIM4_Init+0xd8>)
 8001262:	f002 fb57 	bl	8003914 <HAL_TIM_IC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800126c:	f000 f93c 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000b8 	.word	0x200000b8
 800127c:	40000800 	.word	0x40000800

08001280 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_TIM5_Init+0x94>)
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <MX_TIM5_Init+0x98>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012a4:	2253      	movs	r2, #83	@ 0x53
 80012a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012c2:	4814      	ldr	r0, [pc, #80]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012c4:	f001 ff0e 	bl	80030e4 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 f90b 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012e0:	f002 fc76 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f8fd 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012fc:	f003 f958 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001306:	f000 f8ef 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000100 	.word	0x20000100
 8001318:	40000c00 	.word	0x40000c00

0800131c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <MX_TIM10_Init+0x94>)
 8001336:	4a1f      	ldr	r2, [pc, #124]	@ (80013b4 <MX_TIM10_Init+0x98>)
 8001338:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM10_Init+0x94>)
 800133c:	f240 3247 	movw	r2, #839	@ 0x347
 8001340:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_TIM10_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM10_Init+0x94>)
 800134a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800134e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_TIM10_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_TIM10_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800135c:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_TIM10_Init+0x94>)
 800135e:	f001 fec1 	bl	80030e4 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001368:	f000 f8be 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800136c:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <MX_TIM10_Init+0x94>)
 800136e:	f001 ff63 	bl	8003238 <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001378:	f000 f8b6 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	@ 0x60
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <MX_TIM10_Init+0x94>)
 8001394:	f002 fb5a 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800139e:	f000 f8a3 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013a2:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <MX_TIM10_Init+0x94>)
 80013a4:	f000 fd54 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000148 	.word	0x20000148
 80013b4:	40014400 	.word	0x40014400

080013b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_USART2_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f003 f9b2 	bl	8004758 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f875 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000190 	.word	0x20000190
 8001408:	40004400 	.word	0x40004400

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a2c      	ldr	r2, [pc, #176]	@ (80014dc <MX_GPIO_Init+0xd0>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a25      	ldr	r2, [pc, #148]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1e      	ldr	r2, [pc, #120]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_GPIO_Init+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <MX_GPIO_Init+0xd4>)
 8001498:	f001 f972 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MX_GPIO_Init+0xd8>)
 80014b4:	f000 ffe0 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_GPIO_Init+0xd4>)
 80014d0:	f000 ffd2 	bl	8002478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020800 	.word	0x40020800

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <Error_Handler+0x8>

080014f4 <init>:

char command[9];



void init(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0


	HAL_TIM_Base_Start(&htim5);
 80014f8:	4863      	ldr	r0, [pc, #396]	@ (8001688 <init+0x194>)
 80014fa:	f001 fe43 	bl	8003184 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80014fe:	2100      	movs	r1, #0
 8001500:	4862      	ldr	r0, [pc, #392]	@ (800168c <init+0x198>)
 8001502:	f001 fef3 	bl	80032ec <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001506:	2100      	movs	r1, #0
 8001508:	4861      	ldr	r0, [pc, #388]	@ (8001690 <init+0x19c>)
 800150a:	f001 fff9 	bl	8003500 <HAL_TIM_IC_Start_IT>


	flight_allowed = 1;
 800150e:	4b61      	ldr	r3, [pc, #388]	@ (8001694 <init+0x1a0>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
	sample_time_us = 825;
 8001514:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <init+0x1a4>)
 8001516:	f240 3239 	movw	r2, #825	@ 0x339
 800151a:	601a      	str	r2, [r3, #0]

	heightPID.sample_time = sample_time_us/1000000;
 800151c:	4b5e      	ldr	r3, [pc, #376]	@ (8001698 <init+0x1a4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5e      	ldr	r2, [pc, #376]	@ (800169c <init+0x1a8>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1492      	asrs	r2, r2, #18
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	4b5a      	ldr	r3, [pc, #360]	@ (80016a0 <init+0x1ac>)
 8001536:	edc3 7a05 	vstr	s15, [r3, #20]
	pitchPID.sample_time = sample_time_us/1000000;
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <init+0x1a4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a57      	ldr	r2, [pc, #348]	@ (800169c <init+0x1a8>)
 8001540:	fb82 1203 	smull	r1, r2, r2, r3
 8001544:	1492      	asrs	r2, r2, #18
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	4b54      	ldr	r3, [pc, #336]	@ (80016a4 <init+0x1b0>)
 8001554:	edc3 7a05 	vstr	s15, [r3, #20]
	rollPID.sample_time = sample_time_us/1000000;
 8001558:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <init+0x1a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a4f      	ldr	r2, [pc, #316]	@ (800169c <init+0x1a8>)
 800155e:	fb82 1203 	smull	r1, r2, r2, r3
 8001562:	1492      	asrs	r2, r2, #18
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	4b4d      	ldr	r3, [pc, #308]	@ (80016a8 <init+0x1b4>)
 8001572:	edc3 7a05 	vstr	s15, [r3, #20]
	yawPID.sample_time = sample_time_us/1000000;
 8001576:	4b48      	ldr	r3, [pc, #288]	@ (8001698 <init+0x1a4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a48      	ldr	r2, [pc, #288]	@ (800169c <init+0x1a8>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1492      	asrs	r2, r2, #18
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <init+0x1b8>)
 8001590:	edc3 7a05 	vstr	s15, [r3, #20]


	time_to_reach_1m = 5; // seconds
 8001594:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <init+0x1bc>)
 8001596:	2205      	movs	r2, #5
 8001598:	601a      	str	r2, [r3, #0]
	time_to_make_full_rotation = 5; // seconds
 800159a:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <init+0x1c0>)
 800159c:	2205      	movs	r2, #5
 800159e:	601a      	str	r2, [r3, #0]

	height_step = sample_time_us/time_to_reach_1m;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <init+0x1a4>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <init+0x1bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	4b40      	ldr	r3, [pc, #256]	@ (80016b8 <init+0x1c4>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
	yaw_step = 360*sample_time_us/time_to_make_full_rotation;
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <init+0x1a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <init+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <init+0x1c8>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]

	// Timer clock is 84 MHz

	htim3.Instance->PSC = 84-1;
 80015dc:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <init+0x1cc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2253      	movs	r2, #83	@ 0x53
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
	htim3.Instance->CNT = sample_time_us;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <init+0x1a4>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <init+0x1cc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24


	MOTOR_FRONT_RIGHT.htim = &htim1;
 80015ee:	4b35      	ldr	r3, [pc, #212]	@ (80016c4 <init+0x1d0>)
 80015f0:	4a35      	ldr	r2, [pc, #212]	@ (80016c8 <init+0x1d4>)
 80015f2:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_RIGHT.channel = TIM_CHANNEL_1;
 80015f4:	4b33      	ldr	r3, [pc, #204]	@ (80016c4 <init+0x1d0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_RIGHT)== HAL_ERROR){
 80015fa:	4832      	ldr	r0, [pc, #200]	@ (80016c4 <init+0x1d0>)
 80015fc:	f7ff fb8c 	bl	8000d18 <motor_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <init+0x118>
    	flight_allowed = 0;
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <init+0x1a0>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    }


	MOTOR_FRONT_LEFT.htim = &htim1;
 800160c:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <init+0x1d8>)
 800160e:	4a2e      	ldr	r2, [pc, #184]	@ (80016c8 <init+0x1d4>)
 8001610:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_LEFT.channel = TIM_CHANNEL_2;
 8001612:	4b2e      	ldr	r3, [pc, #184]	@ (80016cc <init+0x1d8>)
 8001614:	2204      	movs	r2, #4
 8001616:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_LEFT)== HAL_ERROR){
 8001618:	482c      	ldr	r0, [pc, #176]	@ (80016cc <init+0x1d8>)
 800161a:	f7ff fb7d 	bl	8000d18 <motor_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <init+0x136>
        	flight_allowed = 0;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <init+0x1a0>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
        }
	MOTOR_BACK_RIGHT.htim = &htim1;
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <init+0x1dc>)
 800162c:	4a26      	ldr	r2, [pc, #152]	@ (80016c8 <init+0x1d4>)
 800162e:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_RIGHT.channel = TIM_CHANNEL_3;
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <init+0x1dc>)
 8001632:	2208      	movs	r2, #8
 8001634:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_RIGHT)== HAL_ERROR){
 8001636:	4826      	ldr	r0, [pc, #152]	@ (80016d0 <init+0x1dc>)
 8001638:	f7ff fb6e 	bl	8000d18 <motor_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <init+0x154>
	    	flight_allowed = 0;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <init+0x1a0>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	    }

	MOTOR_BACK_LEFT.htim = &htim1;
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <init+0x1e0>)
 800164a:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <init+0x1d4>)
 800164c:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_LEFT.channel = TIM_CHANNEL_4;
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <init+0x1e0>)
 8001650:	220c      	movs	r2, #12
 8001652:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_LEFT)== HAL_ERROR){
 8001654:	481f      	ldr	r0, [pc, #124]	@ (80016d4 <init+0x1e0>)
 8001656:	f7ff fb5f 	bl	8000d18 <motor_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <init+0x172>
	    	flight_allowed = 0;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <init+0x1a0>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
	    }



	if (flight_allowed == 1){
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <init+0x1a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <init+0x186>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2120      	movs	r1, #32
 8001672:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <init+0x1e4>)
 8001674:	f001 f884 	bl	8002780 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	}

}
 8001678:	e004      	b.n	8001684 <init+0x190>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2120      	movs	r1, #32
 800167e:	4816      	ldr	r0, [pc, #88]	@ (80016d8 <init+0x1e4>)
 8001680:	f001 f87e 	bl	8002780 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000100 	.word	0x20000100
 800168c:	20000148 	.word	0x20000148
 8001690:	200000b8 	.word	0x200000b8
 8001694:	200002cc 	.word	0x200002cc
 8001698:	200001d8 	.word	0x200001d8
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	2000023c 	.word	0x2000023c
 80016a4:	20000254 	.word	0x20000254
 80016a8:	2000026c 	.word	0x2000026c
 80016ac:	20000284 	.word	0x20000284
 80016b0:	200001dc 	.word	0x200001dc
 80016b4:	200001e4 	.word	0x200001e4
 80016b8:	200001e0 	.word	0x200001e0
 80016bc:	200001e8 	.word	0x200001e8
 80016c0:	20000070 	.word	0x20000070
 80016c4:	2000029c 	.word	0x2000029c
 80016c8:	20000028 	.word	0x20000028
 80016cc:	200002a8 	.word	0x200002a8
 80016d0:	200002b4 	.word	0x200002b4
 80016d4:	200002c0 	.word	0x200002c0
 80016d8:	40020000 	.word	0x40020000
 80016dc:	00000000 	.word	0x00000000

080016e0 <control_step>:


void control_step(){
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b08b      	sub	sp, #44	@ 0x2c
 80016e4:	af02      	add	r7, sp, #8

		if (flight_allowed==1){
 80016e6:	4b7f      	ldr	r3, [pc, #508]	@ (80018e4 <control_step+0x204>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	f040 8296 	bne.w	8001c1c <control_step+0x53c>
			//--------- Reading Sensors ------------//
			read_IMU();
 80016f0:	f7ff fb28 	bl	8000d44 <read_IMU>

			float pitch_speed;
			float yaw_speed;
			float roll_speed;

			pitch.measurement = pitch.previous_measurement + pitch_speed*sample_time_us/1000000;
 80016f4:	4b7c      	ldr	r3, [pc, #496]	@ (80018e8 <control_step+0x208>)
 80016f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80016fa:	4b7c      	ldr	r3, [pc, #496]	@ (80018ec <control_step+0x20c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001706:	edd7 7a07 	vldr	s15, [r7, #28]
 800170a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800170e:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 80018f0 <control_step+0x210>
 8001712:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	4b73      	ldr	r3, [pc, #460]	@ (80018e8 <control_step+0x208>)
 800171c:	edc3 7a01 	vstr	s15, [r3, #4]
			pitch.previous_measurement = pitch.measurement;
 8001720:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <control_step+0x208>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a70      	ldr	r2, [pc, #448]	@ (80018e8 <control_step+0x208>)
 8001726:	6113      	str	r3, [r2, #16]

			roll.measurement = roll.previous_measurement + roll_speed*sample_time_us/1000000;
 8001728:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <control_step+0x214>)
 800172a:	ed93 7a04 	vldr	s14, [r3, #16]
 800172e:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <control_step+0x20c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800173a:	edd7 7a06 	vldr	s15, [r7, #24]
 800173e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001742:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 80018f0 <control_step+0x210>
 8001746:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	4b69      	ldr	r3, [pc, #420]	@ (80018f4 <control_step+0x214>)
 8001750:	edc3 7a01 	vstr	s15, [r3, #4]
			roll.previous_measurement = roll.measurement;
 8001754:	4b67      	ldr	r3, [pc, #412]	@ (80018f4 <control_step+0x214>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a66      	ldr	r2, [pc, #408]	@ (80018f4 <control_step+0x214>)
 800175a:	6113      	str	r3, [r2, #16]

			yaw.measurement = yaw.previous_measurement + yaw_speed*sample_time_us/1000000;
 800175c:	4b66      	ldr	r3, [pc, #408]	@ (80018f8 <control_step+0x218>)
 800175e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001762:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <control_step+0x20c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800176e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001772:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001776:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 80018f0 <control_step+0x210>
 800177a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	4b5d      	ldr	r3, [pc, #372]	@ (80018f8 <control_step+0x218>)
 8001784:	edc3 7a01 	vstr	s15, [r3, #4]
			yaw.previous_measurement = yaw.measurement;
 8001788:	4b5b      	ldr	r3, [pc, #364]	@ (80018f8 <control_step+0x218>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a5a      	ldr	r2, [pc, #360]	@ (80018f8 <control_step+0x218>)
 800178e:	6113      	str	r3, [r2, #16]


			
			read_ultrasound();
 8001790:	f000 fc98 	bl	80020c4 <read_ultrasound>

			//--------- Reading Commands ------------//
			
			read_RF();
 8001794:	f7ff fb68 	bl	8000e68 <read_RF>

			if (command[0]=='$'){// Verifying that the command was entirely received
 8001798:	4b58      	ldr	r3, [pc, #352]	@ (80018fc <control_step+0x21c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b24      	cmp	r3, #36	@ 0x24
 800179e:	d10f      	bne.n	80017c0 <control_step+0xe0>
				motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	4857      	ldr	r0, [pc, #348]	@ (8001900 <control_step+0x220>)
 80017a4:	f7ff fa80 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 80017a8:	2100      	movs	r1, #0
 80017aa:	4856      	ldr	r0, [pc, #344]	@ (8001904 <control_step+0x224>)
 80017ac:	f7ff fa7c 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4855      	ldr	r0, [pc, #340]	@ (8001908 <control_step+0x228>)
 80017b4:	f7ff fa78 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_LEFT, 0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	4854      	ldr	r0, [pc, #336]	@ (800190c <control_step+0x22c>)
 80017bc:	f7ff fa74 	bl	8000ca8 <motor_SetPower>
			}
				// Height command extraction
				if (command[1]=="1" && command[2]=="0"){
 80017c0:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <control_step+0x21c>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b52      	ldr	r3, [pc, #328]	@ (8001910 <control_step+0x230>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d111      	bne.n	80017f0 <control_step+0x110>
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <control_step+0x21c>)
 80017ce:	789b      	ldrb	r3, [r3, #2]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <control_step+0x234>)
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10b      	bne.n	80017f0 <control_step+0x110>
					height.command+=height_step;
 80017d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001918 <control_step+0x238>)
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	4b4f      	ldr	r3, [pc, #316]	@ (800191c <control_step+0x23c>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001918 <control_step+0x238>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
 80017ee:	e016      	b.n	800181e <control_step+0x13e>
				}
				else if (command[2]=="1" && command[1]=="0"){
 80017f0:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <control_step+0x21c>)
 80017f2:	789b      	ldrb	r3, [r3, #2]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <control_step+0x230>)
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d110      	bne.n	800181e <control_step+0x13e>
 80017fc:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <control_step+0x21c>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	461a      	mov	r2, r3
 8001802:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <control_step+0x234>)
 8001804:	429a      	cmp	r2, r3
 8001806:	d10a      	bne.n	800181e <control_step+0x13e>
					height.command-= height_step;
 8001808:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <control_step+0x238>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b43      	ldr	r3, [pc, #268]	@ (800191c <control_step+0x23c>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001818:	4b3f      	ldr	r3, [pc, #252]	@ (8001918 <control_step+0x238>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
				}


				// Pitch command extraction
				if (command[3]=="1" && command[4]=="0"){
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <control_step+0x21c>)
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	461a      	mov	r2, r3
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <control_step+0x230>)
 8001826:	429a      	cmp	r2, r3
 8001828:	d10a      	bne.n	8001840 <control_step+0x160>
 800182a:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <control_step+0x21c>)
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <control_step+0x234>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d104      	bne.n	8001840 <control_step+0x160>
					pitch.command=1;
 8001836:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <control_step+0x208>)
 8001838:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e013      	b.n	8001868 <control_step+0x188>
				}
				else if (command[4]=="1" && command[3]=="0"){
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <control_step+0x21c>)
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	461a      	mov	r2, r3
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <control_step+0x230>)
 8001848:	429a      	cmp	r2, r3
 800184a:	d109      	bne.n	8001860 <control_step+0x180>
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <control_step+0x21c>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	461a      	mov	r2, r3
 8001852:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <control_step+0x234>)
 8001854:	429a      	cmp	r2, r3
 8001856:	d103      	bne.n	8001860 <control_step+0x180>
					pitch.command=-1;
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <control_step+0x208>)
 800185a:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <control_step+0x240>)
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e003      	b.n	8001868 <control_step+0x188>
				}

				else{
					pitch.command=0;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <control_step+0x208>)
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
				}


				// Roll command extraction
				if (command[5]=="1" && command[6]=="0"){
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <control_step+0x21c>)
 800186a:	795b      	ldrb	r3, [r3, #5]
 800186c:	461a      	mov	r2, r3
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <control_step+0x230>)
 8001870:	429a      	cmp	r2, r3
 8001872:	d10a      	bne.n	800188a <control_step+0x1aa>
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <control_step+0x21c>)
 8001876:	799b      	ldrb	r3, [r3, #6]
 8001878:	461a      	mov	r2, r3
 800187a:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <control_step+0x234>)
 800187c:	429a      	cmp	r2, r3
 800187e:	d104      	bne.n	800188a <control_step+0x1aa>
					roll.command=1;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <control_step+0x214>)
 8001882:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e013      	b.n	80018b2 <control_step+0x1d2>
				}
				else if (command[6]=="1" && command[5]=="0"){
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <control_step+0x21c>)
 800188c:	799b      	ldrb	r3, [r3, #6]
 800188e:	461a      	mov	r2, r3
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <control_step+0x230>)
 8001892:	429a      	cmp	r2, r3
 8001894:	d109      	bne.n	80018aa <control_step+0x1ca>
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <control_step+0x21c>)
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	461a      	mov	r2, r3
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <control_step+0x234>)
 800189e:	429a      	cmp	r2, r3
 80018a0:	d103      	bne.n	80018aa <control_step+0x1ca>
					roll.command=-1;
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <control_step+0x214>)
 80018a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <control_step+0x240>)
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e003      	b.n	80018b2 <control_step+0x1d2>
				}

				else{
					roll.command=0;
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <control_step+0x214>)
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
				}

				// Yaw command extraction
				if (command[7]=="1" && command[8]=="0"){
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <control_step+0x21c>)
 80018b4:	79db      	ldrb	r3, [r3, #7]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <control_step+0x230>)
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d134      	bne.n	8001928 <control_step+0x248>
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <control_step+0x21c>)
 80018c0:	7a1b      	ldrb	r3, [r3, #8]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <control_step+0x234>)
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d12e      	bne.n	8001928 <control_step+0x248>
					yaw.command+=yaw_step;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <control_step+0x218>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <control_step+0x244>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <control_step+0x218>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
 80018e0:	e039      	b.n	8001956 <control_step+0x276>
 80018e2:	bf00      	nop
 80018e4:	200002cc 	.word	0x200002cc
 80018e8:	20000200 	.word	0x20000200
 80018ec:	200001d8 	.word	0x200001d8
 80018f0:	49742400 	.word	0x49742400
 80018f4:	20000228 	.word	0x20000228
 80018f8:	20000214 	.word	0x20000214
 80018fc:	200002d4 	.word	0x200002d4
 8001900:	2000029c 	.word	0x2000029c
 8001904:	200002a8 	.word	0x200002a8
 8001908:	200002b4 	.word	0x200002b4
 800190c:	200002c0 	.word	0x200002c0
 8001910:	08004e4c 	.word	0x08004e4c
 8001914:	08004e50 	.word	0x08004e50
 8001918:	200001ec 	.word	0x200001ec
 800191c:	200001e0 	.word	0x200001e0
 8001920:	bf800000 	.word	0xbf800000
 8001924:	200001e8 	.word	0x200001e8
				}
				else if (command[8]=="1" && command[7]=="0"){
 8001928:	4bcb      	ldr	r3, [pc, #812]	@ (8001c58 <control_step+0x578>)
 800192a:	7a1b      	ldrb	r3, [r3, #8]
 800192c:	461a      	mov	r2, r3
 800192e:	4bcb      	ldr	r3, [pc, #812]	@ (8001c5c <control_step+0x57c>)
 8001930:	429a      	cmp	r2, r3
 8001932:	d110      	bne.n	8001956 <control_step+0x276>
 8001934:	4bc8      	ldr	r3, [pc, #800]	@ (8001c58 <control_step+0x578>)
 8001936:	79db      	ldrb	r3, [r3, #7]
 8001938:	461a      	mov	r2, r3
 800193a:	4bc9      	ldr	r3, [pc, #804]	@ (8001c60 <control_step+0x580>)
 800193c:	429a      	cmp	r2, r3
 800193e:	d10a      	bne.n	8001956 <control_step+0x276>
					yaw.command-= yaw_step;
 8001940:	4bc8      	ldr	r3, [pc, #800]	@ (8001c64 <control_step+0x584>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4bc8      	ldr	r3, [pc, #800]	@ (8001c68 <control_step+0x588>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	4bc4      	ldr	r3, [pc, #784]	@ (8001c64 <control_step+0x584>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
				}

				if (strcmp(command, "$11111111")==0){
 8001956:	49c5      	ldr	r1, [pc, #788]	@ (8001c6c <control_step+0x58c>)
 8001958:	48bf      	ldr	r0, [pc, #764]	@ (8001c58 <control_step+0x578>)
 800195a:	f7fe fc3d 	bl	80001d8 <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <control_step+0x28a>
					flight_allowed = 0;
 8001964:	4bc2      	ldr	r3, [pc, #776]	@ (8001c70 <control_step+0x590>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
			}

			//--------- Processing data ------------//
			// Calculating control inputs

			height.error = height.measurement - height.command;
 800196a:	4bc2      	ldr	r3, [pc, #776]	@ (8001c74 <control_step+0x594>)
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	4bc0      	ldr	r3, [pc, #768]	@ (8001c74 <control_step+0x594>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197a:	4bbe      	ldr	r3, [pc, #760]	@ (8001c74 <control_step+0x594>)
 800197c:	edc3 7a03 	vstr	s15, [r3, #12]
			pitch.error = pitch.measurement - pitch.command;
 8001980:	4bbd      	ldr	r3, [pc, #756]	@ (8001c78 <control_step+0x598>)
 8001982:	ed93 7a01 	vldr	s14, [r3, #4]
 8001986:	4bbc      	ldr	r3, [pc, #752]	@ (8001c78 <control_step+0x598>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	4bb9      	ldr	r3, [pc, #740]	@ (8001c78 <control_step+0x598>)
 8001992:	edc3 7a03 	vstr	s15, [r3, #12]
			yaw.error = yaw.measurement - yaw.command;
 8001996:	4bb3      	ldr	r3, [pc, #716]	@ (8001c64 <control_step+0x584>)
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c64 <control_step+0x584>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	4baf      	ldr	r3, [pc, #700]	@ (8001c64 <control_step+0x584>)
 80019a8:	edc3 7a03 	vstr	s15, [r3, #12]
			roll.error = roll.measurement - roll.command;
 80019ac:	4bb3      	ldr	r3, [pc, #716]	@ (8001c7c <control_step+0x59c>)
 80019ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b2:	4bb2      	ldr	r3, [pc, #712]	@ (8001c7c <control_step+0x59c>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	4baf      	ldr	r3, [pc, #700]	@ (8001c7c <control_step+0x59c>)
 80019be:	edc3 7a03 	vstr	s15, [r3, #12]

			// Calculating control outputs

			height.u = update(heightPID,height.error);
 80019c2:	4bac      	ldr	r3, [pc, #688]	@ (8001c74 <control_step+0x594>)
 80019c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c8:	4bad      	ldr	r3, [pc, #692]	@ (8001c80 <control_step+0x5a0>)
 80019ca:	466c      	mov	r4, sp
 80019cc:	f103 0210 	add.w	r2, r3, #16
 80019d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80019d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	f7ff f9ef 	bl	8000dc0 <update>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	4ba3      	ldr	r3, [pc, #652]	@ (8001c74 <control_step+0x594>)
 80019e8:	edc3 7a02 	vstr	s15, [r3, #8]
			pitch.u = update(pitchPID, pitch.error);
 80019ec:	4ba2      	ldr	r3, [pc, #648]	@ (8001c78 <control_step+0x598>)
 80019ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f2:	4ba4      	ldr	r3, [pc, #656]	@ (8001c84 <control_step+0x5a4>)
 80019f4:	466c      	mov	r4, sp
 80019f6:	f103 0210 	add.w	r2, r3, #16
 80019fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	f7ff f9da 	bl	8000dc0 <update>
 8001a0c:	eef0 7a40 	vmov.f32	s15, s0
 8001a10:	4b99      	ldr	r3, [pc, #612]	@ (8001c78 <control_step+0x598>)
 8001a12:	edc3 7a02 	vstr	s15, [r3, #8]
			yaw.u = update(yawPID, yaw.error);
 8001a16:	4b93      	ldr	r3, [pc, #588]	@ (8001c64 <control_step+0x584>)
 8001a18:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a1c:	4b9a      	ldr	r3, [pc, #616]	@ (8001c88 <control_step+0x5a8>)
 8001a1e:	466c      	mov	r4, sp
 8001a20:	f103 0210 	add.w	r2, r3, #16
 8001a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a28:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	f7ff f9c5 	bl	8000dc0 <update>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c64 <control_step+0x584>)
 8001a3c:	edc3 7a02 	vstr	s15, [r3, #8]
			roll.u = update(rollPID,roll.error);
 8001a40:	4b8e      	ldr	r3, [pc, #568]	@ (8001c7c <control_step+0x59c>)
 8001a42:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a46:	4b91      	ldr	r3, [pc, #580]	@ (8001c8c <control_step+0x5ac>)
 8001a48:	466c      	mov	r4, sp
 8001a4a:	f103 0210 	add.w	r2, r3, #16
 8001a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a52:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	f7ff f9b0 	bl	8000dc0 <update>
 8001a60:	eef0 7a40 	vmov.f32	s15, s0
 8001a64:	4b85      	ldr	r3, [pc, #532]	@ (8001c7c <control_step+0x59c>)
 8001a66:	edc3 7a02 	vstr	s15, [r3, #8]

			//--------- Changing motors behaviour ------------//

			// motor mixing algorithm
			int FR_percentage = fmin(100, fmax(0, height.u+yaw.u+pitch.u+roll.u));
 8001a6a:	4b82      	ldr	r3, [pc, #520]	@ (8001c74 <control_step+0x594>)
 8001a6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a70:	4b7c      	ldr	r3, [pc, #496]	@ (8001c64 <control_step+0x584>)
 8001a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c78 <control_step+0x598>)
 8001a7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	4b7d      	ldr	r3, [pc, #500]	@ (8001c7c <control_step+0x59c>)
 8001a86:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	ee17 0a90 	vmov	r0, s15
 8001a92:	f7fe fe39 	bl	8000708 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 8001c48 <control_step+0x568>
 8001a9e:	ec43 2b10 	vmov	d0, r2, r3
 8001aa2:	f003 f949 	bl	8004d38 <fmax>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	eef0 7a60 	vmov.f32	s15, s1
 8001aae:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8001c50 <control_step+0x570>
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	f003 f967 	bl	8004d8c <fmin>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe feff 	bl	80008c8 <__aeabi_d2iz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
			int FL_percentage = fmin(100, fmax(0, height.u-yaw.u+pitch.u-roll.u));
 8001ace:	4b69      	ldr	r3, [pc, #420]	@ (8001c74 <control_step+0x594>)
 8001ad0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ad4:	4b63      	ldr	r3, [pc, #396]	@ (8001c64 <control_step+0x584>)
 8001ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ade:	4b66      	ldr	r3, [pc, #408]	@ (8001c78 <control_step+0x598>)
 8001ae0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae8:	4b64      	ldr	r3, [pc, #400]	@ (8001c7c <control_step+0x59c>)
 8001aea:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af2:	ee17 0a90 	vmov	r0, s15
 8001af6:	f7fe fe07 	bl	8000708 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8001c48 <control_step+0x568>
 8001b02:	ec43 2b10 	vmov	d0, r2, r3
 8001b06:	f003 f917 	bl	8004d38 <fmax>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	eef0 7a60 	vmov.f32	s15, s1
 8001b12:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001c50 <control_step+0x570>
 8001b16:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1a:	eef0 0a67 	vmov.f32	s1, s15
 8001b1e:	f003 f935 	bl	8004d8c <fmin>
 8001b22:	ec53 2b10 	vmov	r2, r3, d0
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe fecd 	bl	80008c8 <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]
			int BR_percentage = fmin(100, fmax(0, height.u-yaw.u-pitch.u+roll.u));
 8001b32:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <control_step+0x594>)
 8001b34:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b38:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <control_step+0x584>)
 8001b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <control_step+0x598>)
 8001b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c7c <control_step+0x59c>)
 8001b4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fdd5 	bl	8000708 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8001c48 <control_step+0x568>
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	f003 f8e5 	bl	8004d38 <fmax>
 8001b6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b72:	eef0 7a60 	vmov.f32	s15, s1
 8001b76:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8001c50 <control_step+0x570>
 8001b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7e:	eef0 0a67 	vmov.f32	s1, s15
 8001b82:	f003 f903 	bl	8004d8c <fmin>
 8001b86:	ec53 2b10 	vmov	r2, r3, d0
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe fe9b 	bl	80008c8 <__aeabi_d2iz>
 8001b92:	4603      	mov	r3, r0
 8001b94:	60bb      	str	r3, [r7, #8]
			int BL_percentage = fmin(100, fmax(0, height.u+yaw.u-pitch.u-roll.u));
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <control_step+0x594>)
 8001b98:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b9c:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <control_step+0x584>)
 8001b9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba6:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <control_step+0x598>)
 8001ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <control_step+0x59c>)
 8001bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bba:	ee17 0a90 	vmov	r0, s15
 8001bbe:	f7fe fda3 	bl	8000708 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8001c48 <control_step+0x568>
 8001bca:	ec43 2b10 	vmov	d0, r2, r3
 8001bce:	f003 f8b3 	bl	8004d38 <fmax>
 8001bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd6:	eef0 7a60 	vmov.f32	s15, s1
 8001bda:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001c50 <control_step+0x570>
 8001bde:	eeb0 0a47 	vmov.f32	s0, s14
 8001be2:	eef0 0a67 	vmov.f32	s1, s15
 8001be6:	f003 f8d1 	bl	8004d8c <fmin>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fe69 	bl	80008c8 <__aeabi_d2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	607b      	str	r3, [r7, #4]

			motor_SetPower(&MOTOR_FRONT_RIGHT, FR_percentage);
 8001bfa:	6939      	ldr	r1, [r7, #16]
 8001bfc:	4824      	ldr	r0, [pc, #144]	@ (8001c90 <control_step+0x5b0>)
 8001bfe:	f7ff f853 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, FL_percentage);
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4823      	ldr	r0, [pc, #140]	@ (8001c94 <control_step+0x5b4>)
 8001c06:	f7ff f84f 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, BR_percentage);
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	4822      	ldr	r0, [pc, #136]	@ (8001c98 <control_step+0x5b8>)
 8001c0e:	f7ff f84b 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, BL_percentage);
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4821      	ldr	r0, [pc, #132]	@ (8001c9c <control_step+0x5bc>)
 8001c16:	f7ff f847 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
		}

}
 8001c1a:	e00f      	b.n	8001c3c <control_step+0x55c>
			motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	481c      	ldr	r0, [pc, #112]	@ (8001c90 <control_step+0x5b0>)
 8001c20:	f7ff f842 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	481b      	ldr	r0, [pc, #108]	@ (8001c94 <control_step+0x5b4>)
 8001c28:	f7ff f83e 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	481a      	ldr	r0, [pc, #104]	@ (8001c98 <control_step+0x5b8>)
 8001c30:	f7ff f83a 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	4819      	ldr	r0, [pc, #100]	@ (8001c9c <control_step+0x5bc>)
 8001c38:	f7ff f836 	bl	8000ca8 <motor_SetPower>
}
 8001c3c:	bf00      	nop
 8001c3e:	3724      	adds	r7, #36	@ 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	f3af 8000 	nop.w
	...
 8001c54:	40590000 	.word	0x40590000
 8001c58:	200002d4 	.word	0x200002d4
 8001c5c:	08004e4c 	.word	0x08004e4c
 8001c60:	08004e50 	.word	0x08004e50
 8001c64:	20000214 	.word	0x20000214
 8001c68:	200001e8 	.word	0x200001e8
 8001c6c:	08004e54 	.word	0x08004e54
 8001c70:	200002cc 	.word	0x200002cc
 8001c74:	200001ec 	.word	0x200001ec
 8001c78:	20000200 	.word	0x20000200
 8001c7c:	20000228 	.word	0x20000228
 8001c80:	2000023c 	.word	0x2000023c
 8001c84:	20000254 	.word	0x20000254
 8001c88:	20000284 	.word	0x20000284
 8001c8c:	2000026c 	.word	0x2000026c
 8001c90:	2000029c 	.word	0x2000029c
 8001c94:	200002a8 	.word	0x200002a8
 8001c98:	200002b4 	.word	0x200002b4
 8001c9c:	200002c0 	.word	0x200002c0

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cde:	2007      	movs	r0, #7
 8001ce0:	f000 fb88 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	@ 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	@ (8001e34 <HAL_TIM_Base_MspInit+0x144>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a47      	ldr	r2, [pc, #284]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001d2e:	e07c      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM3)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a41      	ldr	r2, [pc, #260]	@ (8001e3c <HAL_TIM_Base_MspInit+0x14c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d116      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a3d      	ldr	r2, [pc, #244]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	201d      	movs	r0, #29
 8001d5c:	f000 fb55 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d60:	201d      	movs	r0, #29
 8001d62:	f000 fb6e 	bl	8002442 <HAL_NVIC_EnableIRQ>
}
 8001d66:	e060      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM4)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	@ (8001e40 <HAL_TIM_Base_MspInit+0x150>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d134      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001daa:	2340      	movs	r3, #64	@ 0x40
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481f      	ldr	r0, [pc, #124]	@ (8001e44 <HAL_TIM_Base_MspInit+0x154>)
 8001dc6:	f000 fb57 	bl	8002478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201e      	movs	r0, #30
 8001dd0:	f000 fb1b 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dd4:	201e      	movs	r0, #30
 8001dd6:	f000 fb34 	bl	8002442 <HAL_NVIC_EnableIRQ>
}
 8001dda:	e026      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM5)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <HAL_TIM_Base_MspInit+0x158>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
}
 8001e02:	e012      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM10)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_TIM_Base_MspInit+0x15c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10d      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_TIM_Base_MspInit+0x148>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3738      	adds	r7, #56	@ 0x38
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40000c00 	.word	0x40000c00
 8001e4c:	40014400 	.word	0x40014400

08001e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	@ (8001f04 <HAL_TIM_MspPostInit+0xb4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11f      	bne.n	8001eb2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e8e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <HAL_TIM_MspPostInit+0xbc>)
 8001eac:	f000 fae4 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001eb0:	e023      	b.n	8001efa <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_TIM_MspPostInit+0xc0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d11e      	bne.n	8001efa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_TIM_MspPostInit+0xb8>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001eea:	2303      	movs	r3, #3
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <HAL_TIM_MspPostInit+0xc4>)
 8001ef6:	f000 fabf 	bl	8002478 <HAL_GPIO_Init>
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	@ 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40014400 	.word	0x40014400
 8001f14:	40020400 	.word	0x40020400

08001f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_UART_MspInit+0x84>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12b      	bne.n	8001f92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f72:	230c      	movs	r3, #12
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f82:	2307      	movs	r3, #7
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <HAL_UART_MspInit+0x8c>)
 8001f8e:	f000 fa73 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	@ 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <NMI_Handler+0x4>

08001fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <MemManage_Handler+0x4>

08001fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffe:	f000 f8e5 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800200c:	4803      	ldr	r0, [pc, #12]	@ (800201c <TIM3_IRQHandler+0x14>)
 800200e:	f001 fb91 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  control_step();
 8002012:	f7ff fb65 	bl	80016e0 <control_step>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000070 	.word	0x20000070

08002020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (rising == 0){
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <TIM4_IRQHandler+0x60>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <TIM4_IRQHandler+0x20>
		rising_time = htim5.Instance->CNT;
 800202c:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <TIM4_IRQHandler+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	461a      	mov	r2, r3
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <TIM4_IRQHandler+0x68>)
 8002036:	601a      	str	r2, [r3, #0]
		rising = 1;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <TIM4_IRQHandler+0x60>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e01a      	b.n	8002076 <TIM4_IRQHandler+0x56>
	  }
	  else{
		falling_time =  htim5.Instance->CNT;
 8002040:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <TIM4_IRQHandler+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	461a      	mov	r2, r3
 8002048:	4b10      	ldr	r3, [pc, #64]	@ (800208c <TIM4_IRQHandler+0x6c>)
 800204a:	601a      	str	r2, [r3, #0]
		rising = 0;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <TIM4_IRQHandler+0x60>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
		pulse_duration = falling_time - rising_time;
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <TIM4_IRQHandler+0x6c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <TIM4_IRQHandler+0x68>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <TIM4_IRQHandler+0x70>)
 800205e:	6013      	str	r3, [r2, #0]
		ultrasound_measure_cm = pulse_duration / 58;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <TIM4_IRQHandler+0x70>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <TIM4_IRQHandler+0x74>)
 8002066:	fb82 1203 	smull	r1, r2, r2, r3
 800206a:	441a      	add	r2, r3
 800206c:	1152      	asrs	r2, r2, #5
 800206e:	17db      	asrs	r3, r3, #31
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <TIM4_IRQHandler+0x78>)
 8002074:	6013      	str	r3, [r2, #0]
	  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002076:	4809      	ldr	r0, [pc, #36]	@ (800209c <TIM4_IRQHandler+0x7c>)
 8002078:	f001 fb5c 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200002e0 	.word	0x200002e0
 8002084:	20000100 	.word	0x20000100
 8002088:	200002e4 	.word	0x200002e4
 800208c:	200002e8 	.word	0x200002e8
 8002090:	200002ec 	.word	0x200002ec
 8002094:	8d3dcb09 	.word	0x8d3dcb09
 8002098:	200002d0 	.word	0x200002d0
 800209c:	200000b8 	.word	0x200000b8

080020a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <SystemInit+0x20>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <SystemInit+0x20>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <read_ultrasound>:


int* read_ultrasound(){
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
    
 80020c8:	bf00      	nop
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d8:	f7ff ffe2 	bl	80020a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002102:	f002 fdf5 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7fe feb7 	bl	8000e78 <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002118:	08004e88 	.word	0x08004e88
  ldr r2, =_sbss
 800211c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002120:	200002f4 	.word	0x200002f4

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f94f 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fda0 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f967 	bl	800245e <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 f92f 	bl	800240a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	200002f0 	.word	0x200002f0

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200002f0 	.word	0x200002f0

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	@ (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e159      	b.n	8002748 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8148 	bne.w	8002742 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d130      	bne.n	800252c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a2 	beq.w	8002742 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b57      	ldr	r3, [pc, #348]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a56      	ldr	r2, [pc, #344]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b54      	ldr	r3, [pc, #336]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_GPIO_Init+0x2ec>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_Init+0x2f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x202>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a48      	ldr	r2, [pc, #288]	@ (800276c <HAL_GPIO_Init+0x2f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x1fe>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a47      	ldr	r2, [pc, #284]	@ (8002770 <HAL_GPIO_Init+0x2f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x1fa>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a46      	ldr	r2, [pc, #280]	@ (8002774 <HAL_GPIO_Init+0x2fc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x1f6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a45      	ldr	r2, [pc, #276]	@ (8002778 <HAL_GPIO_Init+0x300>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x1f2>
 8002666:	2304      	movs	r3, #4
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266a:	2307      	movs	r3, #7
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x204>
 800267a:	2300      	movs	r3, #0
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800268c:	4935      	ldr	r1, [pc, #212]	@ (8002764 <HAL_GPIO_Init+0x2ec>)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_GPIO_Init+0x304>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a2f      	ldr	r2, [pc, #188]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a24      	ldr	r2, [pc, #144]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ee:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_GPIO_Init+0x304>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_GPIO_Init+0x304>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800273c:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_GPIO_Init+0x304>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f aea2 	bls.w	8002494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e267      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027d2:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b85      	ldr	r3, [pc, #532]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b7e      	ldr	r3, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05b      	beq.n	80028bc <HAL_RCC_OscConfig+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e242      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x74>
 800281a:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6f      	ldr	r2, [pc, #444]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6c      	ldr	r2, [pc, #432]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 800284c:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a68      	ldr	r2, [pc, #416]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fcc2 	bl	80021f4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fcbe 	bl	80021f4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e207      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fcae 	bl	80021f4 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fcaa 	bl	80021f4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b51      	ldr	r3, [pc, #324]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0xe8>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c7      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4937      	ldr	r1, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7ff fc63 	bl	80021f4 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff fc5f 	bl	80021f4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4925      	ldr	r1, [pc, #148]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff fc42 	bl	80021f4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7ff fc3e 	bl	80021f4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e187      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff fc22 	bl	80021f4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff fc1e 	bl	80021f4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e167      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x200>
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff fc0b 	bl	80021f4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff fc07 	bl	80021f4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470000 	.word	0x42470000
 80029fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8097 	beq.w	8002b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a7c      	ldr	r2, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b77      	ldr	r3, [pc, #476]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fbc7 	bl	80021f4 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7ff fbc3 	bl	80021f4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e10c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
 8002a90:	4b64      	ldr	r3, [pc, #400]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a63      	ldr	r2, [pc, #396]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x30c>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002ac0:	4b58      	ldr	r3, [pc, #352]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b55      	ldr	r3, [pc, #340]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a54      	ldr	r2, [pc, #336]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fb88 	bl	80021f4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7ff fb84 	bl	80021f4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b49      	ldr	r3, [pc, #292]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7ff fb72 	bl	80021f4 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7ff fb6e 	bl	80021f4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b5      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a1 	beq.w	8002c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b52:	4b34      	ldr	r3, [pc, #208]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d05c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d141      	bne.n	8002bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fb42 	bl	80021f4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff fb3e 	bl	80021f4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e087      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	491b      	ldr	r1, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fb17 	bl	80021f4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7ff fb13 	bl	80021f4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e05c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x416>
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fb00 	bl	80021f4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7ff fafc 	bl	80021f4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e045      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
 8002c16:	e03d      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e038      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cc      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e067      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4934      	ldr	r1, [pc, #208]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7ff fa2e 	bl	80021f4 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7ff fa2a 	bl	80021f4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f98e 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08004e60 	.word	0x08004e60
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b094      	sub	sp, #80	@ 0x50
 8002e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	4b79      	ldr	r3, [pc, #484]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f200 80e1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea2:	e0db      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea8:	e0db      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	6139      	str	r1, [r7, #16]
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f14:	4659      	mov	r1, fp
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4651      	mov	r1, sl
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4651      	mov	r1, sl
 8002f24:	ebb2 0801 	subs.w	r8, r2, r1
 8002f28:	4659      	mov	r1, fp
 8002f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb49 0303 	adc.w	r3, r9, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f62:	4629      	mov	r1, r5
 8002f64:	024b      	lsls	r3, r1, #9
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	024a      	lsls	r2, r1, #9
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f80:	f7fd fcca 	bl	8000918 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8c:	e058      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	4611      	mov	r1, r2
 8002f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0159      	lsls	r1, r3, #5
 8002fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fba:	0150      	lsls	r0, r2, #5
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	464b      	mov	r3, r9
 8003004:	eb45 0303 	adc.w	r3, r5, r3
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003016:	4629      	mov	r1, r5
 8003018:	028b      	lsls	r3, r1, #10
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003020:	4621      	mov	r1, r4
 8003022:	028a      	lsls	r2, r1, #10
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	f7fd fc70 	bl	8000918 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003064:	4618      	mov	r0, r3
 8003066:	3750      	adds	r7, #80	@ 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08004e70 	.word	0x08004e70

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08004e70 	.word	0x08004e70

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fdf0 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fe4e 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e03c      	b.n	8003216 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <HAL_TIM_Base_Start+0xa0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_TIM_Base_Start+0x5c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d013      	beq.n	80031e0 <HAL_TIM_Base_Start+0x5c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_TIM_Base_Start+0xa4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_TIM_Base_Start+0x5c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a19      	ldr	r2, [pc, #100]	@ (800322c <HAL_TIM_Base_Start+0xa8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_Base_Start+0x5c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_TIM_Base_Start+0xac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_Base_Start+0x5c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <HAL_TIM_Base_Start+0xb0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d111      	bne.n	8003204 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d010      	beq.n	8003214 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	e007      	b.n	8003214 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40014000 	.word	0x40014000

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f839 	bl	80032d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fda4 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_TIM_PWM_Start+0x24>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e022      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d109      	bne.n	800332a <HAL_TIM_PWM_Start+0x3e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e015      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d109      	bne.n	8003344 <HAL_TIM_PWM_Start+0x58>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e068      	b.n	8003430 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0x82>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800336c:	e013      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0x92>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800337c:	e00b      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xa2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800338c:	e003      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 f8e0 	bl	8004564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a23      	ldr	r2, [pc, #140]	@ (8003438 <HAL_TIM_PWM_Start+0x14c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d107      	bne.n	80033be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_TIM_PWM_Start+0x14c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_TIM_PWM_Start+0x10e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d0:	d013      	beq.n	80033fa <HAL_TIM_PWM_Start+0x10e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_TIM_PWM_Start+0x150>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_TIM_PWM_Start+0x10e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <HAL_TIM_PWM_Start+0x154>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_TIM_PWM_Start+0x10e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a16      	ldr	r2, [pc, #88]	@ (8003444 <HAL_TIM_PWM_Start+0x158>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIM_PWM_Start+0x10e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <HAL_TIM_PWM_Start+0x15c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d111      	bne.n	800341e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d010      	beq.n	800342e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	e007      	b.n	800342e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000

0800344c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e041      	b.n	80034e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f839 	bl	80034ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fc9a 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_TIM_IC_Start_IT+0x1e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800351a:	b2db      	uxtb	r3, r3
 800351c:	e013      	b.n	8003546 <HAL_TIM_IC_Start_IT+0x46>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d104      	bne.n	800352e <HAL_TIM_IC_Start_IT+0x2e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e00b      	b.n	8003546 <HAL_TIM_IC_Start_IT+0x46>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d104      	bne.n	800353e <HAL_TIM_IC_Start_IT+0x3e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e003      	b.n	8003546 <HAL_TIM_IC_Start_IT+0x46>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_TIM_IC_Start_IT+0x58>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e013      	b.n	8003580 <HAL_TIM_IC_Start_IT+0x80>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b04      	cmp	r3, #4
 800355c:	d104      	bne.n	8003568 <HAL_TIM_IC_Start_IT+0x68>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e00b      	b.n	8003580 <HAL_TIM_IC_Start_IT+0x80>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b08      	cmp	r3, #8
 800356c:	d104      	bne.n	8003578 <HAL_TIM_IC_Start_IT+0x78>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e003      	b.n	8003580 <HAL_TIM_IC_Start_IT+0x80>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357e:	b2db      	uxtb	r3, r3
 8003580:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003582:	7bbb      	ldrb	r3, [r7, #14]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003588:	7b7b      	ldrb	r3, [r7, #13]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0c2      	b.n	8003718 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0xa2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a0:	e013      	b.n	80035ca <HAL_TIM_IC_Start_IT+0xca>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0xb2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b0:	e00b      	b.n	80035ca <HAL_TIM_IC_Start_IT+0xca>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_IC_Start_IT+0xc2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	e003      	b.n	80035ca <HAL_TIM_IC_Start_IT+0xca>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIM_IC_Start_IT+0xda>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d8:	e013      	b.n	8003602 <HAL_TIM_IC_Start_IT+0x102>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0xea>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e8:	e00b      	b.n	8003602 <HAL_TIM_IC_Start_IT+0x102>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0xfa>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f8:	e003      	b.n	8003602 <HAL_TIM_IC_Start_IT+0x102>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d841      	bhi.n	800368c <HAL_TIM_IC_Start_IT+0x18c>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <HAL_TIM_IC_Start_IT+0x110>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003645 	.word	0x08003645
 8003614:	0800368d 	.word	0x0800368d
 8003618:	0800368d 	.word	0x0800368d
 800361c:	0800368d 	.word	0x0800368d
 8003620:	08003657 	.word	0x08003657
 8003624:	0800368d 	.word	0x0800368d
 8003628:	0800368d 	.word	0x0800368d
 800362c:	0800368d 	.word	0x0800368d
 8003630:	08003669 	.word	0x08003669
 8003634:	0800368d 	.word	0x0800368d
 8003638:	0800368d 	.word	0x0800368d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800367b 	.word	0x0800367b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0202 	orr.w	r2, r2, #2
 8003652:	60da      	str	r2, [r3, #12]
      break;
 8003654:	e01d      	b.n	8003692 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0204 	orr.w	r2, r2, #4
 8003664:	60da      	str	r2, [r3, #12]
      break;
 8003666:	e014      	b.n	8003692 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	60da      	str	r2, [r3, #12]
      break;
 8003678:	e00b      	b.n	8003692 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0210 	orr.w	r2, r2, #16
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	bf00      	nop
  }

  if (status == HAL_OK)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13e      	bne.n	8003716 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ff5f 	bl	8004564 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_TIM_IC_Start_IT+0x220>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d018      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d013      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a19      	ldr	r2, [pc, #100]	@ (8003724 <HAL_TIM_IC_Start_IT+0x224>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a17      	ldr	r2, [pc, #92]	@ (8003728 <HAL_TIM_IC_Start_IT+0x228>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a16      	ldr	r2, [pc, #88]	@ (800372c <HAL_TIM_IC_Start_IT+0x22c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a14      	ldr	r2, [pc, #80]	@ (8003730 <HAL_TIM_IC_Start_IT+0x230>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d010      	beq.n	8003716 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	e007      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40014000 	.word	0x40014000

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb01 	bl	8003d86 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 faf3 	bl	8003d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb04 	bl	8003d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fadb 	bl	8003d86 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 facd 	bl	8003d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fade 	bl	8003d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0208 	mvn.w	r2, #8
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fab5 	bl	8003d86 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 faa7 	bl	8003d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fab8 	bl	8003d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d020      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa8f 	bl	8003d86 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa81 	bl	8003d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa92 	bl	8003d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa5f 	bl	8003d5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 ff40 	bl	8004744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa63 	bl	8003dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 ff12 	bl	8004730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_IC_ConfigChannel+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e088      	b.n	8003a44 <HAL_TIM_IC_ConfigChannel+0x130>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003950:	f000 fc50 	bl	80041f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020c 	bic.w	r2, r2, #12
 8003962:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	619a      	str	r2, [r3, #24]
 8003976:	e060      	b.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d11c      	bne.n	80039b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800398e:	f000 fcc8 	bl	8004322 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80039a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6999      	ldr	r1, [r3, #24]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
 80039b6:	e040      	b.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d11b      	bne.n	80039f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039ce:	f000 fd15 	bl	80043fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 020c 	bic.w	r2, r2, #12
 80039e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69d9      	ldr	r1, [r3, #28]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	61da      	str	r2, [r3, #28]
 80039f4:	e021      	b.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d11c      	bne.n	8003a36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a0c:	f000 fd32 	bl	8004474 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69d9      	ldr	r1, [r3, #28]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
 8003a34:	e001      	b.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0ae      	b.n	8003bc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	f200 809f 	bhi.w	8003bb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003bb9 	.word	0x08003bb9
 8003a88:	08003bb9 	.word	0x08003bb9
 8003a8c:	08003bb9 	.word	0x08003bb9
 8003a90:	08003af5 	.word	0x08003af5
 8003a94:	08003bb9 	.word	0x08003bb9
 8003a98:	08003bb9 	.word	0x08003bb9
 8003a9c:	08003bb9 	.word	0x08003bb9
 8003aa0:	08003b37 	.word	0x08003b37
 8003aa4:	08003bb9 	.word	0x08003bb9
 8003aa8:	08003bb9 	.word	0x08003bb9
 8003aac:	08003bb9 	.word	0x08003bb9
 8003ab0:	08003b77 	.word	0x08003b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa0e 	bl	8003edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0208 	orr.w	r2, r2, #8
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
      break;
 8003af2:	e064      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa54 	bl	8003fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6999      	ldr	r1, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	021a      	lsls	r2, r3, #8
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	619a      	str	r2, [r3, #24]
      break;
 8003b34:	e043      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa9f 	bl	8004080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0208 	orr.w	r2, r2, #8
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0204 	bic.w	r2, r2, #4
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	61da      	str	r2, [r3, #28]
      break;
 8003b74:	e023      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fae9 	bl	8004154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	61da      	str	r2, [r3, #28]
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_ConfigClockSource+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0b4      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x186>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c24:	d03e      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2a:	f200 8087 	bhi.w	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c32:	f000 8086 	beq.w	8003d42 <HAL_TIM_ConfigClockSource+0x172>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3a:	d87f      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c3c:	2b70      	cmp	r3, #112	@ 0x70
 8003c3e:	d01a      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0xa6>
 8003c40:	2b70      	cmp	r3, #112	@ 0x70
 8003c42:	d87b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b60      	cmp	r3, #96	@ 0x60
 8003c46:	d050      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x11a>
 8003c48:	2b60      	cmp	r3, #96	@ 0x60
 8003c4a:	d877      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b50      	cmp	r3, #80	@ 0x50
 8003c4e:	d03c      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0xfa>
 8003c50:	2b50      	cmp	r3, #80	@ 0x50
 8003c52:	d873      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d058      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x13a>
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d86f      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b30      	cmp	r3, #48	@ 0x30
 8003c5e:	d064      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15a>
 8003c60:	2b30      	cmp	r3, #48	@ 0x30
 8003c62:	d86b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d060      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d867      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d05c      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15a>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d05a      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	e062      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c86:	f000 fc4d 	bl	8004524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	609a      	str	r2, [r3, #8]
      break;
 8003ca2:	e04f      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb4:	f000 fc36 	bl	8004524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc6:	609a      	str	r2, [r3, #8]
      break;
 8003cc8:	e03c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 faf4 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2150      	movs	r1, #80	@ 0x50
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fc03 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e02c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fb50 	bl	800439c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2160      	movs	r1, #96	@ 0x60
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fbf3 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d08:	e01c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	461a      	mov	r2, r3
 8003d18:	f000 fad4 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2140      	movs	r1, #64	@ 0x40
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fbe3 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d28:	e00c      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fbda 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d3a:	e003      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ec0 <TIM_Base_SetConfig+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00f      	beq.n	8003dfc <TIM_Base_SetConfig+0x38>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d00b      	beq.n	8003dfc <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a37      	ldr	r2, [pc, #220]	@ (8003ec4 <TIM_Base_SetConfig+0x100>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a36      	ldr	r2, [pc, #216]	@ (8003ec8 <TIM_Base_SetConfig+0x104>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a35      	ldr	r2, [pc, #212]	@ (8003ecc <TIM_Base_SetConfig+0x108>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d108      	bne.n	8003e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec0 <TIM_Base_SetConfig+0xfc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01b      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1c:	d017      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a28      	ldr	r2, [pc, #160]	@ (8003ec4 <TIM_Base_SetConfig+0x100>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <TIM_Base_SetConfig+0x104>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a26      	ldr	r2, [pc, #152]	@ (8003ecc <TIM_Base_SetConfig+0x108>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a25      	ldr	r2, [pc, #148]	@ (8003ed0 <TIM_Base_SetConfig+0x10c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a24      	ldr	r2, [pc, #144]	@ (8003ed4 <TIM_Base_SetConfig+0x110>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a23      	ldr	r2, [pc, #140]	@ (8003ed8 <TIM_Base_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec0 <TIM_Base_SetConfig+0xfc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	611a      	str	r2, [r3, #16]
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 0201 	bic.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0302 	bic.w	r3, r3, #2
 8003f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <TIM_OC1_SetConfig+0xc8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0308 	bic.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a13      	ldr	r2, [pc, #76]	@ (8003fa4 <TIM_OC1_SetConfig+0xc8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d111      	bne.n	8003f7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40010000 	.word	0x40010000

08003fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 0210 	bic.w	r2, r3, #16
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0320 	bic.w	r3, r3, #32
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <TIM_OC2_SetConfig+0xd4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10d      	bne.n	8004024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a15      	ldr	r2, [pc, #84]	@ (800407c <TIM_OC2_SetConfig+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d113      	bne.n	8004054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000

08004080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <TIM_OC3_SetConfig+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10d      	bne.n	80040fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <TIM_OC3_SetConfig+0xd0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d113      	bne.n	800412a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40010000 	.word	0x40010000

08004154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800419e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <TIM_OC4_SetConfig+0x9c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000

080041f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 0201 	bic.w	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <TIM_TI1_SetConfig+0xbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <TIM_TI1_SetConfig+0x56>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004228:	d00f      	beq.n	800424a <TIM_TI1_SetConfig+0x56>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <TIM_TI1_SetConfig+0xc0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <TIM_TI1_SetConfig+0x56>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <TIM_TI1_SetConfig+0xc4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <TIM_TI1_SetConfig+0x56>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a1f      	ldr	r2, [pc, #124]	@ (80042bc <TIM_TI1_SetConfig+0xc8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_TI1_SetConfig+0x56>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <TIM_TI1_SetConfig+0xcc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <TIM_TI1_SetConfig+0x5a>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <TIM_TI1_SetConfig+0x5c>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e003      	b.n	800426e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	b2db      	uxtb	r3, r3
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 030a 	and.w	r3, r3, #10
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	b29b      	uxth	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	031b      	lsls	r3, r3, #12
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 0303 	bic.w	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004438:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	b2db      	uxtb	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	031b      	lsls	r3, r3, #12
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	031b      	lsls	r3, r3, #12
 80044cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	f043 0307 	orr.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	431a      	orrs	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e050      	b.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004614:	d013      	beq.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10c      	bne.n	8004658 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40000c00 	.word	0x40000c00
 8004688:	40014000 	.word	0x40014000

0800468c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e03d      	b.n	8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e042      	b.n	80047f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd fbca 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	@ 0x24
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800479a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f82b 	bl	80047f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b0c0      	sub	sp, #256	@ 0x100
 80047fe:	af00      	add	r7, sp, #0
 8004800:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	ea40 0301 	orr.w	r3, r0, r1
 8004820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	431a      	orrs	r2, r3
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	431a      	orrs	r2, r3
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004850:	f021 010c 	bic.w	r1, r1, #12
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800485e:	430b      	orrs	r3, r1
 8004860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	6999      	ldr	r1, [r3, #24]
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	ea40 0301 	orr.w	r3, r0, r1
 800487e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b8f      	ldr	r3, [pc, #572]	@ (8004ac4 <UART_SetConfig+0x2cc>)
 8004888:	429a      	cmp	r2, r3
 800488a:	d005      	beq.n	8004898 <UART_SetConfig+0xa0>
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac8 <UART_SetConfig+0x2d0>)
 8004894:	429a      	cmp	r2, r3
 8004896:	d104      	bne.n	80048a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe fc10 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 800489c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048a0:	e003      	b.n	80048aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a2:	f7fe fbf7 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 80048a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b4:	f040 810c 	bne.w	8004ad0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048bc:	2200      	movs	r2, #0
 80048be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ca:	4622      	mov	r2, r4
 80048cc:	462b      	mov	r3, r5
 80048ce:	1891      	adds	r1, r2, r2
 80048d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048d2:	415b      	adcs	r3, r3
 80048d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048da:	4621      	mov	r1, r4
 80048dc:	eb12 0801 	adds.w	r8, r2, r1
 80048e0:	4629      	mov	r1, r5
 80048e2:	eb43 0901 	adc.w	r9, r3, r1
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fa:	4690      	mov	r8, r2
 80048fc:	4699      	mov	r9, r3
 80048fe:	4623      	mov	r3, r4
 8004900:	eb18 0303 	adds.w	r3, r8, r3
 8004904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004908:	462b      	mov	r3, r5
 800490a:	eb49 0303 	adc.w	r3, r9, r3
 800490e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800491e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004926:	460b      	mov	r3, r1
 8004928:	18db      	adds	r3, r3, r3
 800492a:	653b      	str	r3, [r7, #80]	@ 0x50
 800492c:	4613      	mov	r3, r2
 800492e:	eb42 0303 	adc.w	r3, r2, r3
 8004932:	657b      	str	r3, [r7, #84]	@ 0x54
 8004934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800493c:	f7fb ffec 	bl	8000918 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b61      	ldr	r3, [pc, #388]	@ (8004acc <UART_SetConfig+0x2d4>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011c      	lsls	r4, r3, #4
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800495c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004968:	415b      	adcs	r3, r3
 800496a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004970:	4641      	mov	r1, r8
 8004972:	eb12 0a01 	adds.w	sl, r2, r1
 8004976:	4649      	mov	r1, r9
 8004978:	eb43 0b01 	adc.w	fp, r3, r1
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800498c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004990:	4692      	mov	sl, r2
 8004992:	469b      	mov	fp, r3
 8004994:	4643      	mov	r3, r8
 8004996:	eb1a 0303 	adds.w	r3, sl, r3
 800499a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800499e:	464b      	mov	r3, r9
 80049a0:	eb4b 0303 	adc.w	r3, fp, r3
 80049a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049bc:	460b      	mov	r3, r1
 80049be:	18db      	adds	r3, r3, r3
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c2:	4613      	mov	r3, r2
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049d2:	f7fb ffa1 	bl	8000918 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <UART_SetConfig+0x2d4>)
 80049de:	fba3 2301 	umull	r2, r3, r3, r1
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2264      	movs	r2, #100	@ 0x64
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	1acb      	subs	r3, r1, r3
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049f2:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <UART_SetConfig+0x2d4>)
 80049f4:	fba3 2302 	umull	r2, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a00:	441c      	add	r4, r3
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a78:	460b      	mov	r3, r1
 8004a7a:	18db      	adds	r3, r3, r3
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a7e:	4613      	mov	r3, r2
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a8e:	f7fb ff43 	bl	8000918 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <UART_SetConfig+0x2d4>)
 8004a98:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2164      	movs	r1, #100	@ 0x64
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	3332      	adds	r3, #50	@ 0x32
 8004aaa:	4a08      	ldr	r2, [pc, #32]	@ (8004acc <UART_SetConfig+0x2d4>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 0207 	and.w	r2, r3, #7
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4422      	add	r2, r4
 8004abe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac0:	e106      	b.n	8004cd0 <UART_SetConfig+0x4d8>
 8004ac2:	bf00      	nop
 8004ac4:	40011000 	.word	0x40011000
 8004ac8:	40011400 	.word	0x40011400
 8004acc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ada:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ae2:	4642      	mov	r2, r8
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	1891      	adds	r1, r2, r2
 8004ae8:	6239      	str	r1, [r7, #32]
 8004aea:	415b      	adcs	r3, r3
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af2:	4641      	mov	r1, r8
 8004af4:	1854      	adds	r4, r2, r1
 8004af6:	4649      	mov	r1, r9
 8004af8:	eb43 0501 	adc.w	r5, r3, r1
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	00eb      	lsls	r3, r5, #3
 8004b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0a:	00e2      	lsls	r2, r4, #3
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	461d      	mov	r5, r3
 8004b10:	4643      	mov	r3, r8
 8004b12:	18e3      	adds	r3, r4, r3
 8004b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b18:	464b      	mov	r3, r9
 8004b1a:	eb45 0303 	adc.w	r3, r5, r3
 8004b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b3e:	4629      	mov	r1, r5
 8004b40:	008b      	lsls	r3, r1, #2
 8004b42:	4621      	mov	r1, r4
 8004b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b48:	4621      	mov	r1, r4
 8004b4a:	008a      	lsls	r2, r1, #2
 8004b4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b50:	f7fb fee2 	bl	8000918 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4b60      	ldr	r3, [pc, #384]	@ (8004cdc <UART_SetConfig+0x4e4>)
 8004b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	011c      	lsls	r4, r3, #4
 8004b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	61b9      	str	r1, [r7, #24]
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b84:	4641      	mov	r1, r8
 8004b86:	1851      	adds	r1, r2, r1
 8004b88:	6139      	str	r1, [r7, #16]
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	414b      	adcs	r3, r1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	00cb      	lsls	r3, r1, #3
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	00ca      	lsls	r2, r1, #3
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	189b      	adds	r3, r3, r2
 8004bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bb8:	464b      	mov	r3, r9
 8004bba:	460a      	mov	r2, r1
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bdc:	4649      	mov	r1, r9
 8004bde:	008b      	lsls	r3, r1, #2
 8004be0:	4641      	mov	r1, r8
 8004be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be6:	4641      	mov	r1, r8
 8004be8:	008a      	lsls	r2, r1, #2
 8004bea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bee:	f7fb fe93 	bl	8000918 <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <UART_SetConfig+0x4e4>)
 8004bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2264      	movs	r2, #100	@ 0x64
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	1acb      	subs	r3, r1, r3
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	3332      	adds	r3, #50	@ 0x32
 8004c0c:	4a33      	ldr	r2, [pc, #204]	@ (8004cdc <UART_SetConfig+0x4e4>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c18:	441c      	add	r4, r3
 8004c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1e:	2200      	movs	r2, #0
 8004c20:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c22:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	eb42 0303 	adc.w	r3, r2, r3
 8004c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	008b      	lsls	r3, r1, #2
 8004c90:	4641      	mov	r1, r8
 8004c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c96:	4641      	mov	r1, r8
 8004c98:	008a      	lsls	r2, r1, #2
 8004c9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c9e:	f7fb fe3b 	bl	8000918 <__aeabi_uldivmod>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <UART_SetConfig+0x4e4>)
 8004ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	2164      	movs	r1, #100	@ 0x64
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	3332      	adds	r3, #50	@ 0x32
 8004cba:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <UART_SetConfig+0x4e4>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4422      	add	r2, r4
 8004cce:	609a      	str	r2, [r3, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cdc:	51eb851f 	.word	0x51eb851f

08004ce0 <memset>:
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d100      	bne.n	8004cea <memset+0xa>
 8004ce8:	4770      	bx	lr
 8004cea:	f803 1b01 	strb.w	r1, [r3], #1
 8004cee:	e7f9      	b.n	8004ce4 <memset+0x4>

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d28 <__libc_init_array+0x38>)
 8004cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d2c <__libc_init_array+0x3c>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	4d0b      	ldr	r5, [pc, #44]	@ (8004d30 <__libc_init_array+0x40>)
 8004d02:	4c0c      	ldr	r4, [pc, #48]	@ (8004d34 <__libc_init_array+0x44>)
 8004d04:	f000 f896 	bl	8004e34 <_init>
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08004e80 	.word	0x08004e80
 8004d2c:	08004e80 	.word	0x08004e80
 8004d30:	08004e80 	.word	0x08004e80
 8004d34:	08004e84 	.word	0x08004e84

08004d38 <fmax>:
 8004d38:	b508      	push	{r3, lr}
 8004d3a:	ed2d 8b04 	vpush	{d8-d9}
 8004d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d42:	eef0 8a60 	vmov.f32	s17, s1
 8004d46:	eeb0 9a41 	vmov.f32	s18, s2
 8004d4a:	eef0 9a61 	vmov.f32	s19, s3
 8004d4e:	f000 f847 	bl	8004de0 <__fpclassifyd>
 8004d52:	b950      	cbnz	r0, 8004d6a <fmax+0x32>
 8004d54:	eeb0 8a49 	vmov.f32	s16, s18
 8004d58:	eef0 8a69 	vmov.f32	s17, s19
 8004d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d60:	eef0 0a68 	vmov.f32	s1, s17
 8004d64:	ecbd 8b04 	vpop	{d8-d9}
 8004d68:	bd08      	pop	{r3, pc}
 8004d6a:	eeb0 0a49 	vmov.f32	s0, s18
 8004d6e:	eef0 0a69 	vmov.f32	s1, s19
 8004d72:	f000 f835 	bl	8004de0 <__fpclassifyd>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d0f0      	beq.n	8004d5c <fmax+0x24>
 8004d7a:	ec53 2b19 	vmov	r2, r3, d9
 8004d7e:	ec51 0b18 	vmov	r0, r1, d8
 8004d82:	f7fb fd97 	bl	80008b4 <__aeabi_dcmpgt>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0e4      	beq.n	8004d54 <fmax+0x1c>
 8004d8a:	e7e7      	b.n	8004d5c <fmax+0x24>

08004d8c <fmin>:
 8004d8c:	b508      	push	{r3, lr}
 8004d8e:	ed2d 8b04 	vpush	{d8-d9}
 8004d92:	eeb0 8a40 	vmov.f32	s16, s0
 8004d96:	eef0 8a60 	vmov.f32	s17, s1
 8004d9a:	eeb0 9a41 	vmov.f32	s18, s2
 8004d9e:	eef0 9a61 	vmov.f32	s19, s3
 8004da2:	f000 f81d 	bl	8004de0 <__fpclassifyd>
 8004da6:	b950      	cbnz	r0, 8004dbe <fmin+0x32>
 8004da8:	eeb0 8a49 	vmov.f32	s16, s18
 8004dac:	eef0 8a69 	vmov.f32	s17, s19
 8004db0:	eeb0 0a48 	vmov.f32	s0, s16
 8004db4:	eef0 0a68 	vmov.f32	s1, s17
 8004db8:	ecbd 8b04 	vpop	{d8-d9}
 8004dbc:	bd08      	pop	{r3, pc}
 8004dbe:	eeb0 0a49 	vmov.f32	s0, s18
 8004dc2:	eef0 0a69 	vmov.f32	s1, s19
 8004dc6:	f000 f80b 	bl	8004de0 <__fpclassifyd>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0f0      	beq.n	8004db0 <fmin+0x24>
 8004dce:	ec53 2b19 	vmov	r2, r3, d9
 8004dd2:	ec51 0b18 	vmov	r0, r1, d8
 8004dd6:	f7fb fd4f 	bl	8000878 <__aeabi_dcmplt>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d0e4      	beq.n	8004da8 <fmin+0x1c>
 8004dde:	e7e7      	b.n	8004db0 <fmin+0x24>

08004de0 <__fpclassifyd>:
 8004de0:	ec51 0b10 	vmov	r0, r1, d0
 8004de4:	b510      	push	{r4, lr}
 8004de6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8004dea:	460b      	mov	r3, r1
 8004dec:	d019      	beq.n	8004e22 <__fpclassifyd+0x42>
 8004dee:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8004df2:	490e      	ldr	r1, [pc, #56]	@ (8004e2c <__fpclassifyd+0x4c>)
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d90e      	bls.n	8004e16 <__fpclassifyd+0x36>
 8004df8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8004dfc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8004e00:	428a      	cmp	r2, r1
 8004e02:	d908      	bls.n	8004e16 <__fpclassifyd+0x36>
 8004e04:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <__fpclassifyd+0x50>)
 8004e06:	4213      	tst	r3, r2
 8004e08:	d007      	beq.n	8004e1a <__fpclassifyd+0x3a>
 8004e0a:	4294      	cmp	r4, r2
 8004e0c:	d107      	bne.n	8004e1e <__fpclassifyd+0x3e>
 8004e0e:	fab0 f080 	clz	r0, r0
 8004e12:	0940      	lsrs	r0, r0, #5
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	2004      	movs	r0, #4
 8004e18:	e7fc      	b.n	8004e14 <__fpclassifyd+0x34>
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	e7fa      	b.n	8004e14 <__fpclassifyd+0x34>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e7f8      	b.n	8004e14 <__fpclassifyd+0x34>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d1ee      	bne.n	8004e04 <__fpclassifyd+0x24>
 8004e26:	2002      	movs	r0, #2
 8004e28:	e7f4      	b.n	8004e14 <__fpclassifyd+0x34>
 8004e2a:	bf00      	nop
 8004e2c:	7fdfffff 	.word	0x7fdfffff
 8004e30:	7ff00000 	.word	0x7ff00000

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
