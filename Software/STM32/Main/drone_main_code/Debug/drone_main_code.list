
drone_main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024d0  080024d0  000034d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e8  080024e8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080024e8  080024e8  000034e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024f0  080024f0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f0  080024f0  000034f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024f4  080024f4  000034f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002504  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002504  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007522  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001605  00000000  00000000  0000b55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000533  00000000  00000000  0000d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014946  00000000  00000000  0000d793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c20  00000000  00000000  000220d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fc0  00000000  00000000  00029cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abcb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a80  00000000  00000000  000abcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ad77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080024b8 	.word	0x080024b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080024b8 	.word	0x080024b8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295
 8000560:	f04f 30ff 	movne.w	r0, #4294967295
 8000564:	f000 b96a 	b.w	800083c <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f806 	bl	8000580 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9d08      	ldr	r5, [sp, #32]
 8000586:	460c      	mov	r4, r1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d14e      	bne.n	800062a <__udivmoddi4+0xaa>
 800058c:	4694      	mov	ip, r2
 800058e:	458c      	cmp	ip, r1
 8000590:	4686      	mov	lr, r0
 8000592:	fab2 f282 	clz	r2, r2
 8000596:	d962      	bls.n	800065e <__udivmoddi4+0xde>
 8000598:	b14a      	cbz	r2, 80005ae <__udivmoddi4+0x2e>
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	4091      	lsls	r1, r2
 80005a0:	fa20 f303 	lsr.w	r3, r0, r3
 80005a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a8:	4319      	orrs	r1, r3
 80005aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80005ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b2:	fa1f f68c 	uxth.w	r6, ip
 80005b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005be:	fb07 1114 	mls	r1, r7, r4, r1
 80005c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c6:	fb04 f106 	mul.w	r1, r4, r6
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d90a      	bls.n	80005e4 <__udivmoddi4+0x64>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80005d6:	f080 8112 	bcs.w	80007fe <__udivmoddi4+0x27e>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 810f 	bls.w	80007fe <__udivmoddi4+0x27e>
 80005e0:	3c02      	subs	r4, #2
 80005e2:	4463      	add	r3, ip
 80005e4:	1a59      	subs	r1, r3, r1
 80005e6:	fa1f f38e 	uxth.w	r3, lr
 80005ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80005ee:	fb07 1110 	mls	r1, r7, r0, r1
 80005f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f6:	fb00 f606 	mul.w	r6, r0, r6
 80005fa:	429e      	cmp	r6, r3
 80005fc:	d90a      	bls.n	8000614 <__udivmoddi4+0x94>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 31ff 	add.w	r1, r0, #4294967295
 8000606:	f080 80fc 	bcs.w	8000802 <__udivmoddi4+0x282>
 800060a:	429e      	cmp	r6, r3
 800060c:	f240 80f9 	bls.w	8000802 <__udivmoddi4+0x282>
 8000610:	4463      	add	r3, ip
 8000612:	3802      	subs	r0, #2
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800061a:	2100      	movs	r1, #0
 800061c:	b11d      	cbz	r5, 8000626 <__udivmoddi4+0xa6>
 800061e:	40d3      	lsrs	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	e9c5 3200 	strd	r3, r2, [r5]
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	428b      	cmp	r3, r1
 800062c:	d905      	bls.n	800063a <__udivmoddi4+0xba>
 800062e:	b10d      	cbz	r5, 8000634 <__udivmoddi4+0xb4>
 8000630:	e9c5 0100 	strd	r0, r1, [r5]
 8000634:	2100      	movs	r1, #0
 8000636:	4608      	mov	r0, r1
 8000638:	e7f5      	b.n	8000626 <__udivmoddi4+0xa6>
 800063a:	fab3 f183 	clz	r1, r3
 800063e:	2900      	cmp	r1, #0
 8000640:	d146      	bne.n	80006d0 <__udivmoddi4+0x150>
 8000642:	42a3      	cmp	r3, r4
 8000644:	d302      	bcc.n	800064c <__udivmoddi4+0xcc>
 8000646:	4290      	cmp	r0, r2
 8000648:	f0c0 80f0 	bcc.w	800082c <__udivmoddi4+0x2ac>
 800064c:	1a86      	subs	r6, r0, r2
 800064e:	eb64 0303 	sbc.w	r3, r4, r3
 8000652:	2001      	movs	r0, #1
 8000654:	2d00      	cmp	r5, #0
 8000656:	d0e6      	beq.n	8000626 <__udivmoddi4+0xa6>
 8000658:	e9c5 6300 	strd	r6, r3, [r5]
 800065c:	e7e3      	b.n	8000626 <__udivmoddi4+0xa6>
 800065e:	2a00      	cmp	r2, #0
 8000660:	f040 8090 	bne.w	8000784 <__udivmoddi4+0x204>
 8000664:	eba1 040c 	sub.w	r4, r1, ip
 8000668:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800066c:	fa1f f78c 	uxth.w	r7, ip
 8000670:	2101      	movs	r1, #1
 8000672:	fbb4 f6f8 	udiv	r6, r4, r8
 8000676:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800067a:	fb08 4416 	mls	r4, r8, r6, r4
 800067e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000682:	fb07 f006 	mul.w	r0, r7, r6
 8000686:	4298      	cmp	r0, r3
 8000688:	d908      	bls.n	800069c <__udivmoddi4+0x11c>
 800068a:	eb1c 0303 	adds.w	r3, ip, r3
 800068e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000692:	d202      	bcs.n	800069a <__udivmoddi4+0x11a>
 8000694:	4298      	cmp	r0, r3
 8000696:	f200 80cd 	bhi.w	8000834 <__udivmoddi4+0x2b4>
 800069a:	4626      	mov	r6, r4
 800069c:	1a1c      	subs	r4, r3, r0
 800069e:	fa1f f38e 	uxth.w	r3, lr
 80006a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006a6:	fb08 4410 	mls	r4, r8, r0, r4
 80006aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006ae:	fb00 f707 	mul.w	r7, r0, r7
 80006b2:	429f      	cmp	r7, r3
 80006b4:	d908      	bls.n	80006c8 <__udivmoddi4+0x148>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80006be:	d202      	bcs.n	80006c6 <__udivmoddi4+0x146>
 80006c0:	429f      	cmp	r7, r3
 80006c2:	f200 80b0 	bhi.w	8000826 <__udivmoddi4+0x2a6>
 80006c6:	4620      	mov	r0, r4
 80006c8:	1bdb      	subs	r3, r3, r7
 80006ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ce:	e7a5      	b.n	800061c <__udivmoddi4+0x9c>
 80006d0:	f1c1 0620 	rsb	r6, r1, #32
 80006d4:	408b      	lsls	r3, r1
 80006d6:	fa22 f706 	lsr.w	r7, r2, r6
 80006da:	431f      	orrs	r7, r3
 80006dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80006e0:	fa04 f301 	lsl.w	r3, r4, r1
 80006e4:	ea43 030c 	orr.w	r3, r3, ip
 80006e8:	40f4      	lsrs	r4, r6
 80006ea:	fa00 f801 	lsl.w	r8, r0, r1
 80006ee:	0c38      	lsrs	r0, r7, #16
 80006f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80006f4:	fbb4 fef0 	udiv	lr, r4, r0
 80006f8:	fa1f fc87 	uxth.w	ip, r7
 80006fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000700:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000704:	fb0e f90c 	mul.w	r9, lr, ip
 8000708:	45a1      	cmp	r9, r4
 800070a:	fa02 f201 	lsl.w	r2, r2, r1
 800070e:	d90a      	bls.n	8000726 <__udivmoddi4+0x1a6>
 8000710:	193c      	adds	r4, r7, r4
 8000712:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000716:	f080 8084 	bcs.w	8000822 <__udivmoddi4+0x2a2>
 800071a:	45a1      	cmp	r9, r4
 800071c:	f240 8081 	bls.w	8000822 <__udivmoddi4+0x2a2>
 8000720:	f1ae 0e02 	sub.w	lr, lr, #2
 8000724:	443c      	add	r4, r7
 8000726:	eba4 0409 	sub.w	r4, r4, r9
 800072a:	fa1f f983 	uxth.w	r9, r3
 800072e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000732:	fb00 4413 	mls	r4, r0, r3, r4
 8000736:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800073a:	fb03 fc0c 	mul.w	ip, r3, ip
 800073e:	45a4      	cmp	ip, r4
 8000740:	d907      	bls.n	8000752 <__udivmoddi4+0x1d2>
 8000742:	193c      	adds	r4, r7, r4
 8000744:	f103 30ff 	add.w	r0, r3, #4294967295
 8000748:	d267      	bcs.n	800081a <__udivmoddi4+0x29a>
 800074a:	45a4      	cmp	ip, r4
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0x29a>
 800074e:	3b02      	subs	r3, #2
 8000750:	443c      	add	r4, r7
 8000752:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000756:	fba0 9302 	umull	r9, r3, r0, r2
 800075a:	eba4 040c 	sub.w	r4, r4, ip
 800075e:	429c      	cmp	r4, r3
 8000760:	46ce      	mov	lr, r9
 8000762:	469c      	mov	ip, r3
 8000764:	d351      	bcc.n	800080a <__udivmoddi4+0x28a>
 8000766:	d04e      	beq.n	8000806 <__udivmoddi4+0x286>
 8000768:	b155      	cbz	r5, 8000780 <__udivmoddi4+0x200>
 800076a:	ebb8 030e 	subs.w	r3, r8, lr
 800076e:	eb64 040c 	sbc.w	r4, r4, ip
 8000772:	fa04 f606 	lsl.w	r6, r4, r6
 8000776:	40cb      	lsrs	r3, r1
 8000778:	431e      	orrs	r6, r3
 800077a:	40cc      	lsrs	r4, r1
 800077c:	e9c5 6400 	strd	r6, r4, [r5]
 8000780:	2100      	movs	r1, #0
 8000782:	e750      	b.n	8000626 <__udivmoddi4+0xa6>
 8000784:	f1c2 0320 	rsb	r3, r2, #32
 8000788:	fa20 f103 	lsr.w	r1, r0, r3
 800078c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000790:	fa24 f303 	lsr.w	r3, r4, r3
 8000794:	4094      	lsls	r4, r2
 8000796:	430c      	orrs	r4, r1
 8000798:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800079c:	fa00 fe02 	lsl.w	lr, r0, r2
 80007a0:	fa1f f78c 	uxth.w	r7, ip
 80007a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a8:	fb08 3110 	mls	r1, r8, r0, r3
 80007ac:	0c23      	lsrs	r3, r4, #16
 80007ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b2:	fb00 f107 	mul.w	r1, r0, r7
 80007b6:	4299      	cmp	r1, r3
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x24c>
 80007ba:	eb1c 0303 	adds.w	r3, ip, r3
 80007be:	f100 36ff 	add.w	r6, r0, #4294967295
 80007c2:	d22c      	bcs.n	800081e <__udivmoddi4+0x29e>
 80007c4:	4299      	cmp	r1, r3
 80007c6:	d92a      	bls.n	800081e <__udivmoddi4+0x29e>
 80007c8:	3802      	subs	r0, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a5b      	subs	r3, r3, r1
 80007ce:	b2a4      	uxth	r4, r4
 80007d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80007d4:	fb08 3311 	mls	r3, r8, r1, r3
 80007d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007dc:	fb01 f307 	mul.w	r3, r1, r7
 80007e0:	42a3      	cmp	r3, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x276>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80007ec:	d213      	bcs.n	8000816 <__udivmoddi4+0x296>
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	d911      	bls.n	8000816 <__udivmoddi4+0x296>
 80007f2:	3902      	subs	r1, #2
 80007f4:	4464      	add	r4, ip
 80007f6:	1ae4      	subs	r4, r4, r3
 80007f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80007fc:	e739      	b.n	8000672 <__udivmoddi4+0xf2>
 80007fe:	4604      	mov	r4, r0
 8000800:	e6f0      	b.n	80005e4 <__udivmoddi4+0x64>
 8000802:	4608      	mov	r0, r1
 8000804:	e706      	b.n	8000614 <__udivmoddi4+0x94>
 8000806:	45c8      	cmp	r8, r9
 8000808:	d2ae      	bcs.n	8000768 <__udivmoddi4+0x1e8>
 800080a:	ebb9 0e02 	subs.w	lr, r9, r2
 800080e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000812:	3801      	subs	r0, #1
 8000814:	e7a8      	b.n	8000768 <__udivmoddi4+0x1e8>
 8000816:	4631      	mov	r1, r6
 8000818:	e7ed      	b.n	80007f6 <__udivmoddi4+0x276>
 800081a:	4603      	mov	r3, r0
 800081c:	e799      	b.n	8000752 <__udivmoddi4+0x1d2>
 800081e:	4630      	mov	r0, r6
 8000820:	e7d4      	b.n	80007cc <__udivmoddi4+0x24c>
 8000822:	46d6      	mov	lr, sl
 8000824:	e77f      	b.n	8000726 <__udivmoddi4+0x1a6>
 8000826:	4463      	add	r3, ip
 8000828:	3802      	subs	r0, #2
 800082a:	e74d      	b.n	80006c8 <__udivmoddi4+0x148>
 800082c:	4606      	mov	r6, r0
 800082e:	4623      	mov	r3, r4
 8000830:	4608      	mov	r0, r1
 8000832:	e70f      	b.n	8000654 <__udivmoddi4+0xd4>
 8000834:	3e02      	subs	r6, #2
 8000836:	4463      	add	r3, ip
 8000838:	e730      	b.n	800069c <__udivmoddi4+0x11c>
 800083a:	bf00      	nop

0800083c <__aeabi_idiv0>:
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <set_ESC>:
#include "ESC.h"

void set_ESC(int motor, float power){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	ed87 0a00 	vstr	s0, [r7]
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <read_IMU>:

int* read_IMU(){
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

}
 800085c:	bf00      	nop
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000872:	edc7 0a02 	vstr	s1, [r7, #8]
 8000876:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 800087a:	ed97 7a03 	vldr	s14, [r7, #12]
 800087e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000886:	edd7 7a02 	vldr	s15, [r7, #8]
 800088a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800088e:	eeb0 0a67 	vmov.f32	s0, s15
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80008a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80008aa:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 80008ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80008b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80008b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80008be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <update>:


float update(PID pid, float error){
 80008d4:	b084      	sub	sp, #16
 80008d6:	b580      	push	{r7, lr}
 80008d8:	ed2d 8b02 	vpush	{d8}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80008e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80008e8:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 80008ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80008f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80008f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f8:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 80008fc:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 8000900:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000904:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000908:	eeb0 1a47 	vmov.f32	s2, s14
 800090c:	eef0 0a67 	vmov.f32	s1, s15
 8000910:	ed97 0a01 	vldr	s0, [r7, #4]
 8000914:	f7ff ffa8 	bl	8000868 <integrate_error>
 8000918:	eef0 7a40 	vmov.f32	s15, s0
 800091c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000920:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 8000928:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 800092c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000930:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000934:	eeb0 1a47 	vmov.f32	s2, s14
 8000938:	eef0 0a67 	vmov.f32	s1, s15
 800093c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000940:	f7ff ffac 	bl	800089c <differentiate_error>
 8000944:	eef0 7a40 	vmov.f32	s15, s0
 8000948:	ee68 7a27 	vmul.f32	s15, s16, s15
 800094c:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 8000954:	ed97 7a05 	vldr	s14, [r7, #20]
 8000958:	edd7 7a04 	vldr	s15, [r7, #16]
 800095c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000960:	edd7 7a03 	vldr	s15, [r7, #12]
 8000964:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000968:	eeb0 0a67 	vmov.f32	s0, s15
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	ecbd 8b02 	vpop	{d8}
 8000974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <read_RF>:


char* read_RF(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
    
 8000980:	bf00      	nop
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fb14 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f808 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f89a 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099c:	f000 f86e 	bl	8000a7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  run();
 80009a0:	f000 f90a 	bl	8000bb8 <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <main+0x18>

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	@ 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fd52 	bl	8002460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a27      	ldr	r2, [pc, #156]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a26:	2304      	movs	r3, #4
 8000a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fdba 	bl	80015a8 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a3a:	f000 f8b7 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f81c 	bl	8001a98 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a66:	f000 f8a1 	bl	8000bac <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	@ 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_USART2_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f001 fa10 	bl	8001ed8 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f875 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000028 	.word	0x20000028
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0xd4>)
 8000b5c:	f000 fd0a 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0xd8>)
 8000b78:	f000 fb78 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_GPIO_Init+0xd4>)
 8000b94:	f000 fb6a 	bl	800126c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	@ 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <run>:
#include "ultrasound.h"
#include "variable.h"
#include "PID.h"


void run(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0aa      	sub	sp, #168	@ 0xa8
 8000bbc:	af02      	add	r7, sp, #8

	control_variables height = {0};
 8000bbe:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
	control_variables pitch = {0};
 8000bcc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
	control_variables yaw = {0};
 8000bda:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
	control_variables roll = {0};
 8000be8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]

	PID heightPID = {0};
 8000bf6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
	PID pitchPID = {0};
 8000c08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
	PID rollPID = {0};
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
	PID yawPID = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]


	while(1){
		//--------- Reading Sensors ------------//
		read_IMU();
 8000c3c:	f7ff fe0c 	bl	8000858 <read_IMU>
		read_ultrasound();
 8000c40:	f000 f98a 	bl	8000f58 <read_ultrasound>

		//--------- Reading Commands ------------//
		read_RF();
 8000c44:	f7ff fe9a 	bl	800097c <read_RF>

		//--------- Processing data ------------//
		// Calculating control inputs

		height.error = height.measurement - height.command;
 8000c48:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8000c4c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c54:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		pitch.error = pitch.measurement - pitch.command;
 8000c58:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8000c5c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8000c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c64:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		yaw.error = yaw.measurement - yaw.command;
 8000c68:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000c6c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c74:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		roll.error = roll.measurement - roll.command;
 8000c78:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000c7c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c84:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

		// Calculating control outputs

		height.u = update(heightPID,height.error);
 8000c88:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000c8c:	466a      	mov	r2, sp
 8000c8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c96:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca4:	f7ff fe16 	bl	80008d4 <update>
 8000ca8:	eef0 7a40 	vmov.f32	s15, s0
 8000cac:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		pitch.u = update(pitchPID, pitch.error);
 8000cb0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000cb4:	466a      	mov	r2, sp
 8000cb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cbe:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	f7ff fe02 	bl	80008d4 <update>
 8000cd0:	eef0 7a40 	vmov.f32	s15, s0
 8000cd4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		yaw.u = update(yawPID, yaw.error);
 8000cd8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8000cdc:	466a      	mov	r2, sp
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ce6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cea:	463b      	mov	r3, r7
 8000cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cee:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf2:	f7ff fdef 	bl	80008d4 <update>
 8000cf6:	eef0 7a40 	vmov.f32	s15, s0
 8000cfa:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		roll.u = update(rollPID,roll.error);
 8000cfe:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8000d02:	466a      	mov	r2, sp
 8000d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d16:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1a:	f7ff fddb 	bl	80008d4 <update>
 8000d1e:	eef0 7a40 	vmov.f32	s15, s0
 8000d22:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

		//--------- Changing motors behaviour ------------//

		// motor mixing algorithm
		set_ESC(MOTOR_FRONT_RIGHT, height.u+yaw.u+pitch.u+roll.u);
 8000d26:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8000d2a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d32:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d3a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d42:	ee17 0a90 	vmov	r0, s15
 8000d46:	f7ff fbab 	bl	80004a0 <__aeabi_f2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	ec43 2b10 	vmov	d0, r2, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fd74 	bl	8000840 <set_ESC>
		set_ESC(MOTOR_FRONT_LEFT, height.u-yaw.u+pitch.u-roll.u);
 8000d58:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8000d5c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000d60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d64:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d6c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d74:	ee17 0a90 	vmov	r0, s15
 8000d78:	f7ff fb92 	bl	80004a0 <__aeabi_f2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	ec43 2b10 	vmov	d0, r2, r3
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fd5b 	bl	8000840 <set_ESC>
		set_ESC(MOTOR_BACK_RIGHT, height.u-yaw.u-pitch.u+roll.u);
 8000d8a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8000d8e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d96:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000d9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d9e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da6:	ee17 0a90 	vmov	r0, s15
 8000daa:	f7ff fb79 	bl	80004a0 <__aeabi_f2d>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	ec43 2b10 	vmov	d0, r2, r3
 8000db6:	2003      	movs	r0, #3
 8000db8:	f7ff fd42 	bl	8000840 <set_ESC>
		set_ESC(MOTOR_BACK_LEFT, height.u+yaw.u-pitch.u-roll.u);
 8000dbc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8000dc0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000dcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd8:	ee17 0a90 	vmov	r0, s15
 8000ddc:	f7ff fb60 	bl	80004a0 <__aeabi_f2d>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	ec43 2b10 	vmov	d0, r2, r3
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fd29 	bl	8000840 <set_ESC>
	while(1){
 8000dee:	bf00      	nop
 8000df0:	e724      	b.n	8000c3c <run+0x84>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f000 f9e6 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	@ (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000eba:	f000 f9d7 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f899 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <read_ultrasound>:


int* read_ultrasound(){
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    
 8000f5c:	bf00      	nop
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6c:	f7ff ffe2 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f001 fa6b 	bl	8002470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fcf7 	bl	800098c <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fac:	080024f8 	.word	0x080024f8
  ldr r2, =_sbss
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb4:	20000074 	.word	0x20000074

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f90d 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff ff00 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f917 	bl	8001252 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f8ed 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000070 	.word	0x20000070

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000070 	.word	0x20000070

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	@ (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	@ (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff47 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5c 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	@ (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	@ (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	@ (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	@ (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e267      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015c6:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d00c      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b85      	ldr	r3, [pc, #532]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b82      	ldr	r3, [pc, #520]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b7e      	ldr	r3, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e242      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b76      	ldr	r3, [pc, #472]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a75      	ldr	r2, [pc, #468]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b70      	ldr	r3, [pc, #448]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6f      	ldr	r2, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6d      	ldr	r3, [pc, #436]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6c      	ldr	r2, [pc, #432]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a68      	ldr	r2, [pc, #416]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fd12 	bl	8001088 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fd0e 	bl	8001088 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	@ 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e207      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fcfe 	bl	8001088 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fcfa 	bl	8001088 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1f3      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b51      	ldr	r3, [pc, #324]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016be:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1c7      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4937      	ldr	r1, [pc, #220]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b34      	ldr	r3, [pc, #208]	@ (80017ec <HAL_RCC_OscConfig+0x244>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fcb3 	bl	8001088 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fcaf 	bl	8001088 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1a8      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4925      	ldr	r1, [pc, #148]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <HAL_RCC_OscConfig+0x244>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fc92 	bl	8001088 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fc8e 	bl	8001088 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e187      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d036      	beq.n	8001800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_RCC_OscConfig+0x248>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fc72 	bl	8001088 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc6e 	bl	8001088 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e167      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
 80017c6:	e01b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_RCC_OscConfig+0x248>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fc5b 	bl	8001088 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e00e      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc57 	bl	8001088 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d907      	bls.n	80017f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e150      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	42470000 	.word	0x42470000
 80017f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ea      	bne.n	80017d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8097 	beq.w	800193c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b81      	ldr	r3, [pc, #516]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b7d      	ldr	r3, [pc, #500]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a7c      	ldr	r2, [pc, #496]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b77      	ldr	r3, [pc, #476]	@ (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b74      	ldr	r3, [pc, #464]	@ (8001a1c <HAL_RCC_OscConfig+0x474>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a73      	ldr	r2, [pc, #460]	@ (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fc17 	bl	8001088 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fc13 	bl	8001088 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e10c      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x2ea>
 8001884:	4b64      	ldr	r3, [pc, #400]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001888:	4a63      	ldr	r2, [pc, #396]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001890:	e01c      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x30c>
 800189a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189e:	4a5e      	ldr	r2, [pc, #376]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 80018b4:	4b58      	ldr	r3, [pc, #352]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	4a57      	ldr	r2, [pc, #348]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c0:	4b55      	ldr	r3, [pc, #340]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c4:	4a54      	ldr	r2, [pc, #336]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d015      	beq.n	8001900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fbd8 	bl	8001088 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fbd4 	bl	8001088 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0cb      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0ee      	beq.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fbc2 	bl	8001088 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fbbe 	bl	8001088 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0b5      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ee      	bne.n	8001908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a1 	beq.w	8001a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001946:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d05c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d141      	bne.n	80019de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_RCC_OscConfig+0x478>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fb92 	bl	8001088 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fb8e 	bl	8001088 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e087      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	491b      	ldr	r1, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fb67 	bl	8001088 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff fb63 	bl	8001088 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e05c      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x416>
 80019dc:	e054      	b.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb50 	bl	8001088 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff fb4c 	bl	8001088 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e045      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
 8001a0a:	e03d      	b.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e038      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x4ec>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d121      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d11a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cc      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d90c      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a58      	ldr	r2, [pc, #352]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001af6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a52      	ldr	r2, [pc, #328]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d044      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b3f      	ldr	r3, [pc, #252]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3b      	ldr	r3, [pc, #236]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e067      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4934      	ldr	r1, [pc, #208]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff fa7e 	bl	8001088 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff fa7a 	bl	8001088 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20c      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f9de 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080024d0 	.word	0x080024d0
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c68:	b094      	sub	sp, #80	@ 0x50
 8001c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7c:	4b79      	ldr	r3, [pc, #484]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d00d      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	f200 80e1 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x34>
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c96:	e0db      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c9c:	e0db      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9e:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca2:	e0d8      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cae:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d063      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cba:	4b6a      	ldr	r3, [pc, #424]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	462b      	mov	r3, r5
 8001cda:	f04f 0000 	mov.w	r0, #0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	0159      	lsls	r1, r3, #5
 8001ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce8:	0150      	lsls	r0, r2, #5
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4621      	mov	r1, r4
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	6139      	str	r1, [r7, #16]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d08:	4659      	mov	r1, fp
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d12:	4651      	mov	r1, sl
 8001d14:	018a      	lsls	r2, r1, #6
 8001d16:	4651      	mov	r1, sl
 8001d18:	ebb2 0801 	subs.w	r8, r2, r1
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d36:	4690      	mov	r8, r2
 8001d38:	4699      	mov	r9, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	eb18 0303 	adds.w	r3, r8, r3
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	462b      	mov	r3, r5
 8001d44:	eb49 0303 	adc.w	r3, r9, r3
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d56:	4629      	mov	r1, r5
 8001d58:	024b      	lsls	r3, r1, #9
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d60:	4621      	mov	r1, r4
 8001d62:	024a      	lsls	r2, r1, #9
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d74:	f7fe fbec 	bl	8000550 <__aeabi_uldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d80:	e058      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	464b      	mov	r3, r9
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0159      	lsls	r1, r3, #5
 8001daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dae:	0150      	lsls	r0, r2, #5
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4641      	mov	r1, r8
 8001db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dba:	4649      	mov	r1, r9
 8001dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	00eb      	lsls	r3, r5, #3
 8001de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dea:	00e2      	lsls	r2, r4, #3
 8001dec:	4614      	mov	r4, r2
 8001dee:	461d      	mov	r5, r3
 8001df0:	4643      	mov	r3, r8
 8001df2:	18e3      	adds	r3, r4, r3
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	464b      	mov	r3, r9
 8001df8:	eb45 0303 	adc.w	r3, r5, r3
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	028b      	lsls	r3, r1, #10
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e14:	4621      	mov	r1, r4
 8001e16:	028a      	lsls	r2, r1, #10
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	61fa      	str	r2, [r7, #28]
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	f7fe fb92 	bl	8000550 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3750      	adds	r7, #80	@ 0x50
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	080024e0 	.word	0x080024e0

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	080024e0 	.word	0x080024e0

08001ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e042      	b.n	8001f70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe ffa0 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	@ 0x24
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f82b 	bl	8001f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b0c0      	sub	sp, #256	@ 0x100
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	ea40 0301 	orr.w	r3, r0, r1
 8001fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fd0:	f021 010c 	bic.w	r1, r1, #12
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff2:	6999      	ldr	r1, [r3, #24]
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	ea40 0301 	orr.w	r3, r0, r1
 8001ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b8f      	ldr	r3, [pc, #572]	@ (8002244 <UART_SetConfig+0x2cc>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d005      	beq.n	8002018 <UART_SetConfig+0xa0>
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b8d      	ldr	r3, [pc, #564]	@ (8002248 <UART_SetConfig+0x2d0>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d104      	bne.n	8002022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002018:	f7ff ff4a 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 800201c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002020:	e003      	b.n	800202a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002022:	f7ff ff31 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8002026:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002034:	f040 810c 	bne.w	8002250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800203c:	2200      	movs	r2, #0
 800203e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002042:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	1891      	adds	r1, r2, r2
 8002050:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002052:	415b      	adcs	r3, r3
 8002054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800205a:	4621      	mov	r1, r4
 800205c:	eb12 0801 	adds.w	r8, r2, r1
 8002060:	4629      	mov	r1, r5
 8002062:	eb43 0901 	adc.w	r9, r3, r1
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	4623      	mov	r3, r4
 8002080:	eb18 0303 	adds.w	r3, r8, r3
 8002084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002088:	462b      	mov	r3, r5
 800208a:	eb49 0303 	adc.w	r3, r9, r3
 800208e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800209e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020a6:	460b      	mov	r3, r1
 80020a8:	18db      	adds	r3, r3, r3
 80020aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ac:	4613      	mov	r3, r2
 80020ae:	eb42 0303 	adc.w	r3, r2, r3
 80020b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80020b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020bc:	f7fe fa48 	bl	8000550 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <UART_SetConfig+0x2d4>)
 80020c6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	011c      	lsls	r4, r3, #4
 80020ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020e0:	4642      	mov	r2, r8
 80020e2:	464b      	mov	r3, r9
 80020e4:	1891      	adds	r1, r2, r2
 80020e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020e8:	415b      	adcs	r3, r3
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020f0:	4641      	mov	r1, r8
 80020f2:	eb12 0a01 	adds.w	sl, r2, r1
 80020f6:	4649      	mov	r1, r9
 80020f8:	eb43 0b01 	adc.w	fp, r3, r1
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800210c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002110:	4692      	mov	sl, r2
 8002112:	469b      	mov	fp, r3
 8002114:	4643      	mov	r3, r8
 8002116:	eb1a 0303 	adds.w	r3, sl, r3
 800211a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800211e:	464b      	mov	r3, r9
 8002120:	eb4b 0303 	adc.w	r3, fp, r3
 8002124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002134:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800213c:	460b      	mov	r3, r1
 800213e:	18db      	adds	r3, r3, r3
 8002140:	643b      	str	r3, [r7, #64]	@ 0x40
 8002142:	4613      	mov	r3, r2
 8002144:	eb42 0303 	adc.w	r3, r2, r3
 8002148:	647b      	str	r3, [r7, #68]	@ 0x44
 800214a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800214e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002152:	f7fe f9fd 	bl	8000550 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4611      	mov	r1, r2
 800215c:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <UART_SetConfig+0x2d4>)
 800215e:	fba3 2301 	umull	r2, r3, r3, r1
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2264      	movs	r2, #100	@ 0x64
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	1acb      	subs	r3, r1, r3
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002172:	4b36      	ldr	r3, [pc, #216]	@ (800224c <UART_SetConfig+0x2d4>)
 8002174:	fba3 2302 	umull	r2, r3, r3, r2
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002180:	441c      	add	r4, r3
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800218c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002194:	4642      	mov	r2, r8
 8002196:	464b      	mov	r3, r9
 8002198:	1891      	adds	r1, r2, r2
 800219a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800219c:	415b      	adcs	r3, r3
 800219e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021a4:	4641      	mov	r1, r8
 80021a6:	1851      	adds	r1, r2, r1
 80021a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80021aa:	4649      	mov	r1, r9
 80021ac:	414b      	adcs	r3, r1
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021bc:	4659      	mov	r1, fp
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021c6:	4651      	mov	r1, sl
 80021c8:	00ca      	lsls	r2, r1, #3
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	4642      	mov	r2, r8
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021d8:	464b      	mov	r3, r9
 80021da:	460a      	mov	r2, r1
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021f8:	460b      	mov	r3, r1
 80021fa:	18db      	adds	r3, r3, r3
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	4613      	mov	r3, r2
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800220a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800220e:	f7fe f99f 	bl	8000550 <__aeabi_uldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <UART_SetConfig+0x2d4>)
 8002218:	fba3 1302 	umull	r1, r3, r3, r2
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	2164      	movs	r1, #100	@ 0x64
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	3332      	adds	r3, #50	@ 0x32
 800222a:	4a08      	ldr	r2, [pc, #32]	@ (800224c <UART_SetConfig+0x2d4>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	f003 0207 	and.w	r2, r3, #7
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4422      	add	r2, r4
 800223e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002240:	e106      	b.n	8002450 <UART_SetConfig+0x4d8>
 8002242:	bf00      	nop
 8002244:	40011000 	.word	0x40011000
 8002248:	40011400 	.word	0x40011400
 800224c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800225a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800225e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002262:	4642      	mov	r2, r8
 8002264:	464b      	mov	r3, r9
 8002266:	1891      	adds	r1, r2, r2
 8002268:	6239      	str	r1, [r7, #32]
 800226a:	415b      	adcs	r3, r3
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
 800226e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002272:	4641      	mov	r1, r8
 8002274:	1854      	adds	r4, r2, r1
 8002276:	4649      	mov	r1, r9
 8002278:	eb43 0501 	adc.w	r5, r3, r1
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	00eb      	lsls	r3, r5, #3
 8002286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800228a:	00e2      	lsls	r2, r4, #3
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	4643      	mov	r3, r8
 8002292:	18e3      	adds	r3, r4, r3
 8002294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002298:	464b      	mov	r3, r9
 800229a:	eb45 0303 	adc.w	r3, r5, r3
 800229e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022be:	4629      	mov	r1, r5
 80022c0:	008b      	lsls	r3, r1, #2
 80022c2:	4621      	mov	r1, r4
 80022c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c8:	4621      	mov	r1, r4
 80022ca:	008a      	lsls	r2, r1, #2
 80022cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022d0:	f7fe f93e 	bl	8000550 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4b60      	ldr	r3, [pc, #384]	@ (800245c <UART_SetConfig+0x4e4>)
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	011c      	lsls	r4, r3, #4
 80022e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	1891      	adds	r1, r2, r2
 80022fa:	61b9      	str	r1, [r7, #24]
 80022fc:	415b      	adcs	r3, r3
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002304:	4641      	mov	r1, r8
 8002306:	1851      	adds	r1, r2, r1
 8002308:	6139      	str	r1, [r7, #16]
 800230a:	4649      	mov	r1, r9
 800230c:	414b      	adcs	r3, r1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800231c:	4659      	mov	r1, fp
 800231e:	00cb      	lsls	r3, r1, #3
 8002320:	4651      	mov	r1, sl
 8002322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002326:	4651      	mov	r1, sl
 8002328:	00ca      	lsls	r2, r1, #3
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	4603      	mov	r3, r0
 8002330:	4642      	mov	r2, r8
 8002332:	189b      	adds	r3, r3, r2
 8002334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002338:	464b      	mov	r3, r9
 800233a:	460a      	mov	r2, r1
 800233c:	eb42 0303 	adc.w	r3, r2, r3
 8002340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800234e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800235c:	4649      	mov	r1, r9
 800235e:	008b      	lsls	r3, r1, #2
 8002360:	4641      	mov	r1, r8
 8002362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002366:	4641      	mov	r1, r8
 8002368:	008a      	lsls	r2, r1, #2
 800236a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800236e:	f7fe f8ef 	bl	8000550 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4611      	mov	r1, r2
 8002378:	4b38      	ldr	r3, [pc, #224]	@ (800245c <UART_SetConfig+0x4e4>)
 800237a:	fba3 2301 	umull	r2, r3, r3, r1
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2264      	movs	r2, #100	@ 0x64
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	@ 0x32
 800238c:	4a33      	ldr	r2, [pc, #204]	@ (800245c <UART_SetConfig+0x4e4>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002398:	441c      	add	r4, r3
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80023a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023a8:	4642      	mov	r2, r8
 80023aa:	464b      	mov	r3, r9
 80023ac:	1891      	adds	r1, r2, r2
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	415b      	adcs	r3, r3
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	4641      	mov	r1, r8
 80023ba:	1851      	adds	r1, r2, r1
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	4649      	mov	r1, r9
 80023c0:	414b      	adcs	r3, r1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023d0:	4659      	mov	r1, fp
 80023d2:	00cb      	lsls	r3, r1, #3
 80023d4:	4651      	mov	r1, sl
 80023d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023da:	4651      	mov	r1, sl
 80023dc:	00ca      	lsls	r2, r1, #3
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	4642      	mov	r2, r8
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ea:	464b      	mov	r3, r9
 80023ec:	460a      	mov	r2, r1
 80023ee:	eb42 0303 	adc.w	r3, r2, r3
 80023f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80023fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800240c:	4649      	mov	r1, r9
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	4641      	mov	r1, r8
 8002412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002416:	4641      	mov	r1, r8
 8002418:	008a      	lsls	r2, r1, #2
 800241a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800241e:	f7fe f897 	bl	8000550 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <UART_SetConfig+0x4e4>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2164      	movs	r1, #100	@ 0x64
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	3332      	adds	r3, #50	@ 0x32
 800243a:	4a08      	ldr	r2, [pc, #32]	@ (800245c <UART_SetConfig+0x4e4>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4422      	add	r2, r4
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002456:	46bd      	mov	sp, r7
 8002458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245c:	51eb851f 	.word	0x51eb851f

08002460 <memset>:
 8002460:	4402      	add	r2, r0
 8002462:	4603      	mov	r3, r0
 8002464:	4293      	cmp	r3, r2
 8002466:	d100      	bne.n	800246a <memset+0xa>
 8002468:	4770      	bx	lr
 800246a:	f803 1b01 	strb.w	r1, [r3], #1
 800246e:	e7f9      	b.n	8002464 <memset+0x4>

08002470 <__libc_init_array>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	4d0d      	ldr	r5, [pc, #52]	@ (80024a8 <__libc_init_array+0x38>)
 8002474:	4c0d      	ldr	r4, [pc, #52]	@ (80024ac <__libc_init_array+0x3c>)
 8002476:	1b64      	subs	r4, r4, r5
 8002478:	10a4      	asrs	r4, r4, #2
 800247a:	2600      	movs	r6, #0
 800247c:	42a6      	cmp	r6, r4
 800247e:	d109      	bne.n	8002494 <__libc_init_array+0x24>
 8002480:	4d0b      	ldr	r5, [pc, #44]	@ (80024b0 <__libc_init_array+0x40>)
 8002482:	4c0c      	ldr	r4, [pc, #48]	@ (80024b4 <__libc_init_array+0x44>)
 8002484:	f000 f818 	bl	80024b8 <_init>
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	2600      	movs	r6, #0
 800248e:	42a6      	cmp	r6, r4
 8002490:	d105      	bne.n	800249e <__libc_init_array+0x2e>
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	f855 3b04 	ldr.w	r3, [r5], #4
 8002498:	4798      	blx	r3
 800249a:	3601      	adds	r6, #1
 800249c:	e7ee      	b.n	800247c <__libc_init_array+0xc>
 800249e:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a2:	4798      	blx	r3
 80024a4:	3601      	adds	r6, #1
 80024a6:	e7f2      	b.n	800248e <__libc_init_array+0x1e>
 80024a8:	080024f0 	.word	0x080024f0
 80024ac:	080024f0 	.word	0x080024f0
 80024b0:	080024f0 	.word	0x080024f0
 80024b4:	080024f4 	.word	0x080024f4

080024b8 <_init>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr

080024c4 <_fini>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr
