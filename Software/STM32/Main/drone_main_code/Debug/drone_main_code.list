
drone_main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066bc  080066bc  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080066bc  080066bc  000076bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c4  080066c4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c4  080066c4  000076c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080066cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000010  080066dc  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080066dc  000083c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d70  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002489  00000000  00000000  00018db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  0001c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fe3  00000000  00000000  0001ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c98  00000000  00000000  00033de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091278  00000000  00000000  00046a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000445c  00000000  00000000  000d7d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dc194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006678 	.word	0x08006678

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006678 	.word	0x08006678

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%

void motor_ArmESC(h_motor_t* h_motor) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f848 	bl	8000f18 <motor_SetPower>
    HAL_Delay(3000);
 8000e88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e8c:	f001 fe04 	bl	8002a98 <HAL_Delay>

    motor_SetPower(h_motor, 7);
 8000e90:	2107      	movs	r1, #7
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f840 	bl	8000f18 <motor_SetPower>
    HAL_Delay(2000);
 8000e98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e9c:	f001 fdfc 	bl	8002a98 <HAL_Delay>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    int neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff faed 	bl	8000490 <__aeabi_i2d>
 8000eb6:	a316      	add	r3, pc, #88	@ (adr r3, 8000f10 <percentageToMicrosecondsAtHighState+0x68>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb52 	bl	8000564 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <percentageToMicrosecondsAtHighState+0x60>)
 8000ece:	f7ff f993 	bl	80001f8 <__adddf3>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fddd 	bl	8000a98 <__aeabi_d2iz>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60fb      	str	r3, [r7, #12]
    return (int)((COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle);
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fad4 	bl	8000490 <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <percentageToMicrosecondsAtHighState+0x64>)
 8000eee:	f7ff fb39 	bl	8000564 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdcd 	bl	8000a98 <__aeabi_d2iz>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40180000 	.word	0x40180000
 8000f0c:	40690000 	.word	0x40690000
 8000f10:	47ae147b 	.word	0x47ae147b
 8000f14:	3fa47ae1 	.word	0x3fa47ae1

08000f18 <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int percentage) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f7ff ffc0 	bl	8000ea8 <percentageToMicrosecondsAtHighState>
 8000f28:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <motor_SetPower+0x26>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3c:	e018      	b.n	8000f70 <motor_SetPower+0x58>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d105      	bne.n	8000f52 <motor_SetPower+0x3a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f50:	e00e      	b.n	8000f70 <motor_SetPower+0x58>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d105      	bne.n	8000f66 <motor_SetPower+0x4e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f64:	e004      	b.n	8000f70 <motor_SetPower+0x58>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
    h_motor->PercentageOfTotalPower = percentage;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <motor_Init>:

HAL_StatusTypeDef motor_Init(h_motor_t* h_motor) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f003 fdc8 	bl	8004b30 <HAL_TIM_PWM_Start>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]
    // Initialisation spécifique à l'ESC
    motor_ArmESC(h_motor);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff67 	bl	8000e78 <motor_ArmESC>

    return result;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <IMU_ReadRegister>:
float accel_g[3], gyro_dps[3], gyro_angle[3];


//FIRST TRY (CHECKING IF IMU IS AVAILABLE)

HAL_StatusTypeDef IMU_ReadRegister(uint16_t reg, uint8_t *data) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, 1, HAL_MAX_DELAY);
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	21d0      	movs	r1, #208	@ 0xd0
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <IMU_ReadRegister+0x34>)
 8000fd6:	f002 f977 	bl	80032c8 <HAL_I2C_Mem_Read>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    return error;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000006c 	.word	0x2000006c

08000fec <IMU_ReadRegisters>:

HAL_StatusTypeDef IMU_ReadRegisters(uint16_t reg, uint8_t *data, uint16_t length) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, length, HAL_MAX_DELAY);
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	21d0      	movs	r1, #208	@ 0xd0
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <IMU_ReadRegisters+0x38>)
 8001012:	f002 f959 	bl	80032c8 <HAL_I2C_Mem_Read>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
    return error;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000006c 	.word	0x2000006c

08001028 <IMU_Calibrate>:

HAL_StatusTypeDef IMU_Calibrate() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	@ 0x40
 800102c:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    int32_t accel_sum[3] = {0, 0, 0};
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
    int32_t gyro_sum[3] = {0, 0, 0};
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
    int num_samples = 1000;  // Number of samples for averaging
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 0; i < num_samples; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001050:	e061      	b.n	8001116 <IMU_Calibrate+0xee>
        if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	220e      	movs	r2, #14
 8001058:	4619      	mov	r1, r3
 800105a:	203b      	movs	r0, #59	@ 0x3b
 800105c:	f7ff ffc6 	bl	8000fec <IMU_ReadRegisters>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <IMU_Calibrate+0x42>
            return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e07f      	b.n	800116a <IMU_Calibrate+0x142>
        }

        int16_t accelX = (buffer[0] << 8) | buffer[1];
 800106a:	7e3b      	ldrb	r3, [r7, #24]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7e7b      	ldrb	r3, [r7, #25]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	867b      	strh	r3, [r7, #50]	@ 0x32
        int16_t accelY = (buffer[2] << 8) | buffer[3];
 8001078:	7ebb      	ldrb	r3, [r7, #26]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7efb      	ldrb	r3, [r7, #27]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	863b      	strh	r3, [r7, #48]	@ 0x30
        int16_t accelZ = (buffer[4] << 8) | buffer[5];
 8001086:	7f3b      	ldrb	r3, [r7, #28]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7f7b      	ldrb	r3, [r7, #29]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        int16_t gyroX = (buffer[8] << 8) | buffer[9];
 8001094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        int16_t gyroY = (buffer[10] << 8) | buffer[11];
 80010a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t gyroZ = (buffer[12] << 8) | buffer[13];
 80010b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	853b      	strh	r3, [r7, #40]	@ 0x28

        // Sum values for averaging
        accel_sum[0] += accelX;
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
        accel_sum[1] += accelY;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80010da:	4413      	add	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        accel_sum[2] += (accelZ - 16384);  // Remove gravity effect
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80010e4:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

        gyro_sum[0] += gyroX;
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80010f2:	4413      	add	r3, r2
 80010f4:	603b      	str	r3, [r7, #0]
        gyro_sum[1] += gyroY;
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80010fc:	4413      	add	r3, r2
 80010fe:	607b      	str	r3, [r7, #4]
        gyro_sum[2] += gyroZ;
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001106:	4413      	add	r3, r2
 8001108:	60bb      	str	r3, [r7, #8]
        HAL_Delay(2);
 800110a:	2002      	movs	r0, #2
 800110c:	f001 fcc4 	bl	8002a98 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8001110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001112:	3301      	adds	r3, #1
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001116:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111a:	429a      	cmp	r2, r3
 800111c:	db99      	blt.n	8001052 <IMU_Calibrate+0x2a>
    }

    // Compute average offset
    for (int i = 0; i < 3; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001122:	e01e      	b.n	8001162 <IMU_Calibrate+0x13a>
        accel_offset[i] = accel_sum[i] / num_samples;
 8001124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3340      	adds	r3, #64	@ 0x40
 800112a:	443b      	add	r3, r7
 800112c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	b219      	sxth	r1, r3
 8001138:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <IMU_Calibrate+0x14c>)
 800113a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800113c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        gyro_offset[i] = gyro_sum[i] / num_samples;
 8001140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	3340      	adds	r3, #64	@ 0x40
 8001146:	443b      	add	r3, r7
 8001148:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800114c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001152:	b219      	sxth	r1, r3
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <IMU_Calibrate+0x150>)
 8001156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 3; i++) {
 800115c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800115e:	3301      	adds	r3, #1
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001164:	2b02      	cmp	r3, #2
 8001166:	dddd      	ble.n	8001124 <IMU_Calibrate+0xfc>
    }

    return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3740      	adds	r7, #64	@ 0x40
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000034 	.word	0x20000034
 8001178:	2000002c 	.word	0x2000002c

0800117c <IMU_Init>:





HAL_StatusTypeDef IMU_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    uint8_t who_am_i;


    if (HAL_I2C_IsDeviceReady(&hi2c2, IMU_I2C_ADDR, 2, HAL_MAX_DELAY)!= HAL_OK){
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2202      	movs	r2, #2
 8001188:	21d0      	movs	r1, #208	@ 0xd0
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <IMU_Init+0x54>)
 800118c:	f002 face 	bl	800372c <HAL_I2C_IsDeviceReady>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <IMU_Init+0x1e>
    	return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e016      	b.n	80011c8 <IMU_Init+0x4c>
    }

    if (IMU_ReadRegister(WHO_AM_I_REG, &who_am_i)!= HAL_OK){
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	4619      	mov	r1, r3
 800119e:	2075      	movs	r0, #117	@ 0x75
 80011a0:	f7ff ff08 	bl	8000fb4 <IMU_ReadRegister>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <IMU_Init+0x32>
    	return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00c      	b.n	80011c8 <IMU_Init+0x4c>
    }
    else{
    	if (who_am_i!=0x71){
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b71      	cmp	r3, #113	@ 0x71
 80011b2:	d001      	beq.n	80011b8 <IMU_Init+0x3c>
    		return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e007      	b.n	80011c8 <IMU_Init+0x4c>
    	}
    }


    if (IMU_Calibrate()!= HAL_OK){
 80011b8:	f7ff ff36 	bl	8001028 <IMU_Calibrate>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <IMU_Init+0x4a>
    	return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <IMU_Init+0x4c>
    }

    return HAL_OK;
 80011c6:	2300      	movs	r3, #0


}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000006c 	.word	0x2000006c

080011d4 <Convert_IMU_Data_All>:




void Convert_IMU_Data_All(int16_t *raw_accel, int16_t *raw_gyro, float *accel_g, float *gyro_dps, float *gyro_angle, float dt) {
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6178      	str	r0, [r7, #20]
 80011dc:	6139      	str	r1, [r7, #16]
 80011de:	60fa      	str	r2, [r7, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_sensitivity = 16384.0f;  // ±2g
 80011e6:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 80011ea:	623b      	str	r3, [r7, #32]
    float gyro_sensitivity  = 131.0f;    // ±250°/s
 80011ec:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <Convert_IMU_Data_All+0xf4>)
 80011ee:	61fb      	str	r3, [r7, #28]

    // Static variable to hold cumulative integration between calls
    static float integrated_angle[3] = {0.0f, 0.0f, 0.0f};
    float treshold_dps = 1.0;
 80011f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011f4:	61bb      	str	r3, [r7, #24]

    // Convert accelerometer values to g
    // Convert gyroscope values to °/s and integrate to get angle
    for (int i = 0; i < 3; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fa:	e05b      	b.n	80012b4 <Convert_IMU_Data_All+0xe0>
        accel_g[i] = raw_accel[i] / accel_sensitivity;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	ed97 7a08 	vldr	s14, [r7, #32]
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	edc3 7a00 	vstr	s15, [r3]

        gyro_dps[i] = raw_gyro[i] / gyro_sensitivity;
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	ed97 7a07 	vldr	s14, [r7, #28]
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	edc3 7a00 	vstr	s15, [r3]


        if (fabs(gyro_dps[i])>treshold_dps){
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eef0 7ae7 	vabs.f32	s15, s15
 800125c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	d517      	bpl.n	800129a <Convert_IMU_Data_All+0xc6>
        	integrated_angle[i] += gyro_dps[i] * dt;
 800126a:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <Convert_IMU_Data_All+0xf8>)
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	edd3 6a00 	vldr	s13, [r3]
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <Convert_IMU_Data_All+0xf8>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	edc3 7a00 	vstr	s15, [r3]
        }

        gyro_angle[i] = integrated_angle[i];
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012a0:	4413      	add	r3, r2
 80012a2:	490a      	ldr	r1, [pc, #40]	@ (80012cc <Convert_IMU_Data_All+0xf8>)
 80012a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	440a      	add	r2, r1
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	dda0      	ble.n	80011fc <Convert_IMU_Data_All+0x28>

    }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	372c      	adds	r7, #44	@ 0x2c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	43030000 	.word	0x43030000
 80012cc:	20000060 	.word	0x20000060

080012d0 <IMU_ReadAccelGyro_Converted_All>:


HAL_StatusTypeDef IMU_ReadAccelGyro_Converted_All(float dt) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buffer[14];

    if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	220e      	movs	r2, #14
 80012e0:	4619      	mov	r1, r3
 80012e2:	203b      	movs	r0, #59	@ 0x3b
 80012e4:	f7ff fe82 	bl	8000fec <IMU_ReadRegisters>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <IMU_ReadAccelGyro_Converted_All+0x22>
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e072      	b.n	80013d8 <IMU_ReadAccelGyro_Converted_All+0x108>

    int16_t raw_accel[3];
    int16_t raw_gyro[3];

    // Apply offsets
    raw_accel[0] = ((buffer[0] << 8) | buffer[1]) - accel_offset[0];
 80012f2:	7e3b      	ldrb	r3, [r7, #24]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7e7b      	ldrb	r3, [r7, #25]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <IMU_ReadAccelGyro_Converted_All+0x110>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	b29b      	uxth	r3, r3
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21b      	sxth	r3, r3
 8001310:	823b      	strh	r3, [r7, #16]
    raw_accel[1] = ((buffer[2] << 8) | buffer[3]) - accel_offset[1];
 8001312:	7ebb      	ldrb	r3, [r7, #26]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7efb      	ldrb	r3, [r7, #27]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <IMU_ReadAccelGyro_Converted_All+0x110>)
 8001324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001328:	b29b      	uxth	r3, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	b21b      	sxth	r3, r3
 8001330:	827b      	strh	r3, [r7, #18]
    raw_accel[2] = ((buffer[4] << 8) | buffer[5]) - accel_offset[2];
 8001332:	7f3b      	ldrb	r3, [r7, #28]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	7f7b      	ldrb	r3, [r7, #29]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <IMU_ReadAccelGyro_Converted_All+0x110>)
 8001344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001348:	b29b      	uxth	r3, r3
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21b      	sxth	r3, r3
 8001350:	82bb      	strh	r3, [r7, #20]

    raw_gyro[0] = ((buffer[8] << 8) | buffer[9]) - gyro_offset[0];
 8001352:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <IMU_ReadAccelGyro_Converted_All+0x114>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	b29b      	uxth	r3, r3
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21b      	sxth	r3, r3
 8001374:	813b      	strh	r3, [r7, #8]
    raw_gyro[1] = ((buffer[10] << 8) | buffer[11]) - gyro_offset[1];
 8001376:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <IMU_ReadAccelGyro_Converted_All+0x114>)
 800138c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001390:	b29b      	uxth	r3, r3
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	b21b      	sxth	r3, r3
 8001398:	817b      	strh	r3, [r7, #10]
    raw_gyro[2] = ((buffer[12] << 8) | buffer[13]) - gyro_offset[2];
 800139a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <IMU_ReadAccelGyro_Converted_All+0x114>)
 80013b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	81bb      	strh	r3, [r7, #12]

    // Convert to g and dps, and integrate gyroscope values into angles
    Convert_IMU_Data_All(raw_accel, raw_gyro, accel_g, gyro_dps, gyro_angle, dt);
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	f107 0010 	add.w	r0, r7, #16
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <IMU_ReadAccelGyro_Converted_All+0x118>)
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <IMU_ReadAccelGyro_Converted_All+0x11c>)
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <IMU_ReadAccelGyro_Converted_All+0x120>)
 80013d2:	f7ff feff 	bl	80011d4 <Convert_IMU_Data_All>

    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000034 	.word	0x20000034
 80013e4:	2000002c 	.word	0x2000002c
 80013e8:	20000054 	.word	0x20000054
 80013ec:	20000048 	.word	0x20000048
 80013f0:	2000003c 	.word	0x2000003c

080013f4 <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80013fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001402:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 8001406:	ed97 7a03 	vldr	s14, [r7, #12]
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001412:	edd7 7a02 	vldr	s15, [r7, #8]
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001432:	edc7 0a02 	vstr	s1, [r7, #8]
 8001436:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 800143a:	ed97 7a03 	vldr	s14, [r7, #12]
 800143e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001446:	edd7 7a01 	vldr	s15, [r7, #4]
 800144a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800144e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <update>:


float update(PID pid, float error){
 8001460:	b084      	sub	sp, #16
 8001462:	b580      	push	{r7, lr}
 8001464:	ed2d 8b02 	vpush	{d8}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001470:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001474:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 8001478:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800147c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 8001488:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 800148c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001490:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001494:	eeb0 1a47 	vmov.f32	s2, s14
 8001498:	eef0 0a67 	vmov.f32	s1, s15
 800149c:	ed97 0a01 	vldr	s0, [r7, #4]
 80014a0:	f7ff ffa8 	bl	80013f4 <integrate_error>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014ac:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 80014b4:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 80014b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014bc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80014c0:	eeb0 1a47 	vmov.f32	s2, s14
 80014c4:	eef0 0a67 	vmov.f32	s1, s15
 80014c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80014cc:	f7ff ffac 	bl	8001428 <differentiate_error>
 80014d0:	eef0 7a40 	vmov.f32	s15, s0
 80014d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014d8:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	ecbd 8b02 	vpop	{d8}
 8001500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001504:	b004      	add	sp, #16
 8001506:	4770      	bx	lr

08001508 <read_RF>:


char* read_RF(){
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
    
 800150c:	bf00      	nop
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151c:	f001 fa4a 	bl	80029b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f816 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f000 fb40 	bl	8001ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001528:	f000 fb14 	bl	8001b54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800152c:	f000 f9b8 	bl	80018a0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001530:	f000 f8a6 	bl	8001680 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001534:	f000 fa02 	bl	800193c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001538:	f000 fa70 	bl	8001a1c <MX_TIM5_Init>
  MX_TIM10_Init();
 800153c:	f000 fabc 	bl	8001ab8 <MX_TIM10_Init>
  MX_I2C2_Init();
 8001540:	f000 f870 	bl	8001624 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001544:	f000 f960 	bl	8001808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001548:	f000 fba2 	bl	8001c90 <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <main+0x34>

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	@ 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	@ 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f004 ffe0 	bl	8006524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a27      	ldr	r2, [pc, #156]	@ (800161c <SystemClock_Config+0xcc>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <SystemClock_Config+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <SystemClock_Config+0xd0>)
 800159a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015c0:	2310      	movs	r3, #16
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ce:	2304      	movs	r3, #4
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fcac 	bl	8003f34 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e2:	f000 fb4f 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	230f      	movs	r3, #15
 80015e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ea:	2302      	movs	r3, #2
 80015ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2102      	movs	r1, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f002 ff0e 	bl	8004424 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160e:	f000 fb39 	bl	8001c84 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	@ 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_I2C2_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <MX_I2C2_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_I2C2_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_I2C2_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_I2C2_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_I2C2_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_I2C2_Init+0x50>)
 8001662:	f001 fced 	bl	8003040 <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800166c:	f000 fb0a 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000006c 	.word	0x2000006c
 8001678:	40005800 	.word	0x40005800
 800167c:	000186a0 	.word	0x000186a0

08001680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	@ 0x58
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 ff33 	bl	8006524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016be:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016c0:	4a50      	ldr	r2, [pc, #320]	@ (8001804 <MX_TIM1_Init+0x184>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b49      	ldr	r3, [pc, #292]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b48      	ldr	r3, [pc, #288]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ea:	4845      	ldr	r0, [pc, #276]	@ (8001800 <MX_TIM1_Init+0x180>)
 80016ec:	f003 f8ba 	bl	8004864 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f000 fac5 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001704:	4619      	mov	r1, r3
 8001706:	483e      	ldr	r0, [pc, #248]	@ (8001800 <MX_TIM1_Init+0x180>)
 8001708:	f003 fe84 	bl	8005414 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001712:	f000 fab7 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001716:	483a      	ldr	r0, [pc, #232]	@ (8001800 <MX_TIM1_Init+0x180>)
 8001718:	f003 f9b0 	bl	8004a7c <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001722:	f000 faaf 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001732:	4619      	mov	r1, r3
 8001734:	4832      	ldr	r0, [pc, #200]	@ (8001800 <MX_TIM1_Init+0x180>)
 8001736:	f004 fb5d 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001740:	f000 faa0 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	@ 0x60
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	4825      	ldr	r0, [pc, #148]	@ (8001800 <MX_TIM1_Init+0x180>)
 800176a:	f003 fd91 	bl	8005290 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001774:	f000 fa86 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	481f      	ldr	r0, [pc, #124]	@ (8001800 <MX_TIM1_Init+0x180>)
 8001782:	f003 fd85 	bl	8005290 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800178c:	f000 fa7a 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	4819      	ldr	r0, [pc, #100]	@ (8001800 <MX_TIM1_Init+0x180>)
 800179a:	f003 fd79 	bl	8005290 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017a4:	f000 fa6e 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	220c      	movs	r2, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <MX_TIM1_Init+0x180>)
 80017b2:	f003 fd6d 	bl	8005290 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017bc:	f000 fa62 	bl	8001c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	@ (8001800 <MX_TIM1_Init+0x180>)
 80017e4:	f004 fb74 	bl	8005ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80017ee:	f000 fa49 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f2:	4803      	ldr	r0, [pc, #12]	@ (8001800 <MX_TIM1_Init+0x180>)
 80017f4:	f000 ff3e 	bl	8002674 <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3758      	adds	r7, #88	@ 0x58
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200000c0 	.word	0x200000c0
 8001804:	40010000 	.word	0x40010000

08001808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001824:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <MX_TIM2_Init+0x94>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <MX_TIM2_Init+0x94>)
 800182e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <MX_TIM2_Init+0x94>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <MX_TIM2_Init+0x94>)
 800183c:	22c8      	movs	r2, #200	@ 0xc8
 800183e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <MX_TIM2_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <MX_TIM2_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184c:	4813      	ldr	r0, [pc, #76]	@ (800189c <MX_TIM2_Init+0x94>)
 800184e:	f003 f809 	bl	8004864 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001858:	f000 fa14 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <MX_TIM2_Init+0x94>)
 800186a:	f003 fdd3 	bl	8005414 <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001874:	f000 fa06 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_TIM2_Init+0x94>)
 8001886:	f004 fab5 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001890:	f000 f9f8 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000108 	.word	0x20000108

080018a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018be:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <MX_TIM3_Init+0x98>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e2:	4814      	ldr	r0, [pc, #80]	@ (8001934 <MX_TIM3_Init+0x94>)
 80018e4:	f002 ffbe 	bl	8004864 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018ee:	f000 f9c9 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	@ (8001934 <MX_TIM3_Init+0x94>)
 8001900:	f003 fd88 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 f9bb 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <MX_TIM3_Init+0x94>)
 800191c:	f004 fa6a 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001926:	f000 f9ad 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000150 	.word	0x20000150
 8001938:	40000400 	.word	0x40000400

0800193c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 8001968:	4a2b      	ldr	r2, [pc, #172]	@ (8001a18 <MX_TIM4_Init+0xdc>)
 800196a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 800196e:	2253      	movs	r2, #83	@ 0x53
 8001970:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001978:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 800197a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800197e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800198c:	4821      	ldr	r0, [pc, #132]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 800198e:	f002 ff69 	bl	8004864 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001998:	f000 f974 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	4619      	mov	r1, r3
 80019a8:	481a      	ldr	r0, [pc, #104]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 80019aa:	f003 fd33 	bl	8005414 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80019b4:	f000 f966 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80019b8:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 80019ba:	f003 f969 	bl	8004c90 <HAL_TIM_IC_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f000 f95e 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480f      	ldr	r0, [pc, #60]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 80019d8:	f004 fa0c 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80019e2:	f000 f94f 	bl	8001c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80019e6:	230a      	movs	r3, #10
 80019e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	2301      	movs	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_TIM4_Init+0xd8>)
 80019fe:	f003 fbab 	bl	8005158 <HAL_TIM_IC_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001a08:	f000 f93c 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	@ 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000198 	.word	0x20000198
 8001a18:	40000800 	.word	0x40000800

08001a1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <MX_TIM5_Init+0x98>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a40:	2253      	movs	r2, #83	@ 0x53
 8001a42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a5e:	4814      	ldr	r0, [pc, #80]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a60:	f002 ff00 	bl	8004864 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f000 f90b 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a7c:	f003 fcca 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f000 f8fd 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <MX_TIM5_Init+0x94>)
 8001a98:	f004 f9ac 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001aa2:	f000 f8ef 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200001e0 	.word	0x200001e0
 8001ab4:	40000c00 	.word	0x40000c00

08001ab8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <MX_TIM10_Init+0x98>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001ad8:	f240 3247 	movw	r2, #839	@ 0x347
 8001adc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001ae6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001aea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001af8:	4814      	ldr	r0, [pc, #80]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001afa:	f002 feb3 	bl	8004864 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001b04:	f000 f8be 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001b08:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001b0a:	f002 ffb7 	bl	8004a7c <HAL_TIM_PWM_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001b14:	f000 f8b6 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b18:	2360      	movs	r3, #96	@ 0x60
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001b30:	f003 fbae 	bl	8005290 <HAL_TIM_PWM_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001b3a:	f000 f8a3 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001b3e:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <MX_TIM10_Init+0x94>)
 8001b40:	f000 fd98 	bl	8002674 <HAL_TIM_MspPostInit>

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000228 	.word	0x20000228
 8001b50:	40014400 	.word	0x40014400

08001b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <MX_USART2_UART_Init+0x50>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	f004 fa06 	bl	8005f9c <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b96:	f000 f875 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000270 	.word	0x20000270
 8001ba4:	40004400 	.word	0x40004400

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2120      	movs	r1, #32
 8001c32:	4812      	ldr	r0, [pc, #72]	@ (8001c7c <MX_GPIO_Init+0xd4>)
 8001c34:	f001 f9ea 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <MX_GPIO_Init+0xd8>)
 8001c50:	f001 f858 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c54:	2320      	movs	r3, #32
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_GPIO_Init+0xd4>)
 8001c6c:	f001 f84a 	bl	8002d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020800 	.word	0x40020800

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <init>:
// Command received via RF
char command[9];



void init(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	// Variable initializations
	flight_allowed = 1;
 8001c94:	4b67      	ldr	r3, [pc, #412]	@ (8001e34 <init+0x1a4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
	sample_time_us = 825;
 8001c9a:	4b67      	ldr	r3, [pc, #412]	@ (8001e38 <init+0x1a8>)
 8001c9c:	f240 3239 	movw	r2, #825	@ 0x339
 8001ca0:	601a      	str	r2, [r3, #0]

	heightPID.sample_time = sample_time_us/1000000;
 8001ca2:	4b65      	ldr	r3, [pc, #404]	@ (8001e38 <init+0x1a8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <init+0x1ac>)
 8001ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cac:	1492      	asrs	r2, r2, #18
 8001cae:	17db      	asrs	r3, r3, #31
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cba:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <init+0x1b0>)
 8001cbc:	edc3 7a05 	vstr	s15, [r3, #20]
	pitchPID.sample_time = sample_time_us/1000000;
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <init+0x1a8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e3c <init+0x1ac>)
 8001cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cca:	1492      	asrs	r2, r2, #18
 8001ccc:	17db      	asrs	r3, r3, #31
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e44 <init+0x1b4>)
 8001cda:	edc3 7a05 	vstr	s15, [r3, #20]
	rollPID.sample_time = sample_time_us/1000000;
 8001cde:	4b56      	ldr	r3, [pc, #344]	@ (8001e38 <init+0x1a8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <init+0x1ac>)
 8001ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce8:	1492      	asrs	r2, r2, #18
 8001cea:	17db      	asrs	r3, r3, #31
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	4b54      	ldr	r3, [pc, #336]	@ (8001e48 <init+0x1b8>)
 8001cf8:	edc3 7a05 	vstr	s15, [r3, #20]
	yawPID.sample_time = sample_time_us/1000000;
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <init+0x1a8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <init+0x1ac>)
 8001d02:	fb82 1203 	smull	r1, r2, r2, r3
 8001d06:	1492      	asrs	r2, r2, #18
 8001d08:	17db      	asrs	r3, r3, #31
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d14:	4b4d      	ldr	r3, [pc, #308]	@ (8001e4c <init+0x1bc>)
 8001d16:	edc3 7a05 	vstr	s15, [r3, #20]


	time_to_reach_1m = 5; // seconds
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <init+0x1c0>)
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	601a      	str	r2, [r3, #0]
	time_to_make_full_rotation = 5; // seconds
 8001d20:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <init+0x1c4>)
 8001d22:	2205      	movs	r2, #5
 8001d24:	601a      	str	r2, [r3, #0]

	height_step = sample_time_us/time_to_reach_1m;
 8001d26:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <init+0x1a8>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <init+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <init+0x1c8>)
 8001d3c:	edc3 7a00 	vstr	s15, [r3]
	yaw_step = 360*sample_time_us/time_to_make_full_rotation;
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <init+0x1a8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001d48:	fb03 f202 	mul.w	r2, r3, r2
 8001d4c:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <init+0x1c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <init+0x1cc>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]


	// Initialization of the mainloop timer
	htim3.Instance->PSC = 84-1;// Timer clock is 84 MHz
 8001d62:	4b3f      	ldr	r3, [pc, #252]	@ (8001e60 <init+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2253      	movs	r2, #83	@ 0x53
 8001d68:	629a      	str	r2, [r3, #40]	@ 0x28
	htim3.Instance->CNT = sample_time_us;
 8001d6a:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <init+0x1a8>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <init+0x1d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24


	// IMU initialization

	IMU_Init();
 8001d74:	f7ff fa02 	bl	800117c <IMU_Init>


	// Motors initialization
	MOTOR_FRONT_RIGHT.htim = &htim1;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <init+0x1d4>)
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e68 <init+0x1d8>)
 8001d7c:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_RIGHT.channel = TIM_CHANNEL_1;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <init+0x1d4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_RIGHT)== HAL_ERROR){
 8001d84:	4837      	ldr	r0, [pc, #220]	@ (8001e64 <init+0x1d4>)
 8001d86:	f7ff f8ff 	bl	8000f88 <motor_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <init+0x106>
    	flight_allowed = 0;
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <init+0x1a4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
    }


	MOTOR_FRONT_LEFT.htim = &htim1;
 8001d96:	4b35      	ldr	r3, [pc, #212]	@ (8001e6c <init+0x1dc>)
 8001d98:	4a33      	ldr	r2, [pc, #204]	@ (8001e68 <init+0x1d8>)
 8001d9a:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_LEFT.channel = TIM_CHANNEL_2;
 8001d9c:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <init+0x1dc>)
 8001d9e:	2204      	movs	r2, #4
 8001da0:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_LEFT)== HAL_ERROR){
 8001da2:	4832      	ldr	r0, [pc, #200]	@ (8001e6c <init+0x1dc>)
 8001da4:	f7ff f8f0 	bl	8000f88 <motor_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <init+0x124>
        	flight_allowed = 0;
 8001dae:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <init+0x1a4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
        }
	MOTOR_BACK_RIGHT.htim = &htim1;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <init+0x1e0>)
 8001db6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e68 <init+0x1d8>)
 8001db8:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_RIGHT.channel = TIM_CHANNEL_3;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <init+0x1e0>)
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_RIGHT)== HAL_ERROR){
 8001dc0:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <init+0x1e0>)
 8001dc2:	f7ff f8e1 	bl	8000f88 <motor_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <init+0x142>
	    	flight_allowed = 0;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <init+0x1a4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	    }

	MOTOR_BACK_LEFT.htim = &htim1;
 8001dd2:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <init+0x1e4>)
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <init+0x1d8>)
 8001dd6:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_LEFT.channel = TIM_CHANNEL_4;
 8001dd8:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <init+0x1e4>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_LEFT)== HAL_ERROR){
 8001dde:	4825      	ldr	r0, [pc, #148]	@ (8001e74 <init+0x1e4>)
 8001de0:	f7ff f8d2 	bl	8000f88 <motor_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <init+0x160>
	    	flight_allowed = 0;
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <init+0x1a4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
	    }


	// Indicator for sucess (user led)
	if (flight_allowed == 1){
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <init+0x1a4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <init+0x174>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	481e      	ldr	r0, [pc, #120]	@ (8001e78 <init+0x1e8>)
 8001dfe:	f001 f905 	bl	800300c <HAL_GPIO_WritePin>
 8001e02:	e004      	b.n	8001e0e <init+0x17e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2120      	movs	r1, #32
 8001e08:	481b      	ldr	r0, [pc, #108]	@ (8001e78 <init+0x1e8>)
 8001e0a:	f001 f8ff 	bl	800300c <HAL_GPIO_WritePin>
	}


	// Timers start

	HAL_TIM_Base_Start(&htim5); // time reference
 8001e0e:	481b      	ldr	r0, [pc, #108]	@ (8001e7c <init+0x1ec>)
 8001e10:	f002 fd78 	bl	8004904 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // ultrasound trigger
 8001e14:	2100      	movs	r1, #0
 8001e16:	481a      	ldr	r0, [pc, #104]	@ (8001e80 <init+0x1f0>)
 8001e18:	f002 fe8a 	bl	8004b30 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // ultrasound read
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4819      	ldr	r0, [pc, #100]	@ (8001e84 <init+0x1f4>)
 8001e20:	f002 ff90 	bl	8004d44 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2); // IMU trigger
 8001e24:	4818      	ldr	r0, [pc, #96]	@ (8001e88 <init+0x1f8>)
 8001e26:	f002 fdc7 	bl	80049b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3); // main loop
 8001e2a:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <init+0x1d0>)
 8001e2c:	f002 fdc4 	bl	80049b8 <HAL_TIM_Base_Start_IT>

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000039c 	.word	0x2000039c
 8001e38:	200002b8 	.word	0x200002b8
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	2000030c 	.word	0x2000030c
 8001e44:	20000324 	.word	0x20000324
 8001e48:	2000033c 	.word	0x2000033c
 8001e4c:	20000354 	.word	0x20000354
 8001e50:	200002bc 	.word	0x200002bc
 8001e54:	200002c4 	.word	0x200002c4
 8001e58:	200002c0 	.word	0x200002c0
 8001e5c:	200002c8 	.word	0x200002c8
 8001e60:	20000150 	.word	0x20000150
 8001e64:	2000036c 	.word	0x2000036c
 8001e68:	200000c0 	.word	0x200000c0
 8001e6c:	20000378 	.word	0x20000378
 8001e70:	20000384 	.word	0x20000384
 8001e74:	20000390 	.word	0x20000390
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	200001e0 	.word	0x200001e0
 8001e80:	20000228 	.word	0x20000228
 8001e84:	20000198 	.word	0x20000198
 8001e88:	20000108 	.word	0x20000108
 8001e8c:	00000000 	.word	0x00000000

08001e90 <control_step>:


void control_step(){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af02      	add	r7, sp, #8

		if (flight_allowed==1){
 8001e96:	4b61      	ldr	r3, [pc, #388]	@ (800201c <control_step+0x18c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	f040 825c 	bne.w	8002358 <control_step+0x4c8>
			//--------- Reading Sensors ------------//

			pitch.measurement = gyro_angle[0];
 8001ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8002020 <control_step+0x190>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8002024 <control_step+0x194>)
 8001ea6:	6053      	str	r3, [r2, #4]
			roll.measurement = gyro_angle[1];
 8001ea8:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <control_step+0x190>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <control_step+0x198>)
 8001eae:	6053      	str	r3, [r2, #4]
			yaw.measurement = gyro_angle[2];
 8001eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002020 <control_step+0x190>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800202c <control_step+0x19c>)
 8001eb6:	6053      	str	r3, [r2, #4]

			

			height.measurement = ultrasound_measure_cm/100;
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <control_step+0x1a0>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002034 <control_step+0x1a4>
 8001ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8002038 <control_step+0x1a8>)
 8001ec8:	edc3 7a01 	vstr	s15, [r3, #4]

			//--------- Reading Commands ------------//
			
			read_RF();
 8001ecc:	f7ff fb1c 	bl	8001508 <read_RF>

			if (command[0]=='$'){// Verifying that the command was entirely received
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800203c <control_step+0x1ac>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b24      	cmp	r3, #36	@ 0x24
 8001ed6:	d10f      	bne.n	8001ef8 <control_step+0x68>
				motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4859      	ldr	r0, [pc, #356]	@ (8002040 <control_step+0x1b0>)
 8001edc:	f7ff f81c 	bl	8000f18 <motor_SetPower>
				motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4858      	ldr	r0, [pc, #352]	@ (8002044 <control_step+0x1b4>)
 8001ee4:	f7ff f818 	bl	8000f18 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4857      	ldr	r0, [pc, #348]	@ (8002048 <control_step+0x1b8>)
 8001eec:	f7ff f814 	bl	8000f18 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4856      	ldr	r0, [pc, #344]	@ (800204c <control_step+0x1bc>)
 8001ef4:	f7ff f810 	bl	8000f18 <motor_SetPower>
			}
				// Height command extraction
				if (command[1]=="1" && command[2]=="0"){
 8001ef8:	4b50      	ldr	r3, [pc, #320]	@ (800203c <control_step+0x1ac>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b54      	ldr	r3, [pc, #336]	@ (8002050 <control_step+0x1c0>)
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d111      	bne.n	8001f28 <control_step+0x98>
 8001f04:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <control_step+0x1ac>)
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b52      	ldr	r3, [pc, #328]	@ (8002054 <control_step+0x1c4>)
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10b      	bne.n	8001f28 <control_step+0x98>
					height.command+=height_step;
 8001f10:	4b49      	ldr	r3, [pc, #292]	@ (8002038 <control_step+0x1a8>)
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <control_step+0x1c8>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	4b45      	ldr	r3, [pc, #276]	@ (8002038 <control_step+0x1a8>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]
 8001f26:	e016      	b.n	8001f56 <control_step+0xc6>
					//height.command = min(height.command, 1.5);
				}
				else if (command[2]=="1" && command[1]=="0"){
 8001f28:	4b44      	ldr	r3, [pc, #272]	@ (800203c <control_step+0x1ac>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b48      	ldr	r3, [pc, #288]	@ (8002050 <control_step+0x1c0>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d110      	bne.n	8001f56 <control_step+0xc6>
 8001f34:	4b41      	ldr	r3, [pc, #260]	@ (800203c <control_step+0x1ac>)
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b46      	ldr	r3, [pc, #280]	@ (8002054 <control_step+0x1c4>)
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10a      	bne.n	8001f56 <control_step+0xc6>
					height.command-= height_step;
 8001f40:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <control_step+0x1a8>)
 8001f42:	ed93 7a00 	vldr	s14, [r3]
 8001f46:	4b44      	ldr	r3, [pc, #272]	@ (8002058 <control_step+0x1c8>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	4b39      	ldr	r3, [pc, #228]	@ (8002038 <control_step+0x1a8>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
					//height.command = max(height.command, 0);
				}


				// Pitch command extraction
				if (command[3]=="1" && command[4]=="0"){
 8001f56:	4b39      	ldr	r3, [pc, #228]	@ (800203c <control_step+0x1ac>)
 8001f58:	78db      	ldrb	r3, [r3, #3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002050 <control_step+0x1c0>)
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d10a      	bne.n	8001f78 <control_step+0xe8>
 8001f62:	4b36      	ldr	r3, [pc, #216]	@ (800203c <control_step+0x1ac>)
 8001f64:	791b      	ldrb	r3, [r3, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b3a      	ldr	r3, [pc, #232]	@ (8002054 <control_step+0x1c4>)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d104      	bne.n	8001f78 <control_step+0xe8>
					pitch.command=1;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <control_step+0x194>)
 8001f70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e013      	b.n	8001fa0 <control_step+0x110>
				}
				else if (command[4]=="1" && command[3]=="0"){
 8001f78:	4b30      	ldr	r3, [pc, #192]	@ (800203c <control_step+0x1ac>)
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <control_step+0x1c0>)
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d109      	bne.n	8001f98 <control_step+0x108>
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <control_step+0x1ac>)
 8001f86:	78db      	ldrb	r3, [r3, #3]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <control_step+0x1c4>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d103      	bne.n	8001f98 <control_step+0x108>
					pitch.command=-1;
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <control_step+0x194>)
 8001f92:	4a32      	ldr	r2, [pc, #200]	@ (800205c <control_step+0x1cc>)
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e003      	b.n	8001fa0 <control_step+0x110>
				}

				else{
					pitch.command=0;
 8001f98:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <control_step+0x194>)
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
				}


				// Roll command extraction
				if (command[5]=="1" && command[6]=="0"){
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <control_step+0x1ac>)
 8001fa2:	795b      	ldrb	r3, [r3, #5]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <control_step+0x1c0>)
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10a      	bne.n	8001fc2 <control_step+0x132>
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <control_step+0x1ac>)
 8001fae:	799b      	ldrb	r3, [r3, #6]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <control_step+0x1c4>)
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d104      	bne.n	8001fc2 <control_step+0x132>
					roll.command=1;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <control_step+0x198>)
 8001fba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e013      	b.n	8001fea <control_step+0x15a>
				}
				else if (command[6]=="1" && command[5]=="0"){
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <control_step+0x1ac>)
 8001fc4:	799b      	ldrb	r3, [r3, #6]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <control_step+0x1c0>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d109      	bne.n	8001fe2 <control_step+0x152>
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <control_step+0x1ac>)
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <control_step+0x1c4>)
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d103      	bne.n	8001fe2 <control_step+0x152>
					roll.command=-1;
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <control_step+0x198>)
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <control_step+0x1cc>)
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e003      	b.n	8001fea <control_step+0x15a>
				}

				else{
					roll.command=0;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <control_step+0x198>)
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
				}

				// Yaw command extraction
				if (command[7]=="1" && command[8]=="0"){
 8001fea:	4b14      	ldr	r3, [pc, #80]	@ (800203c <control_step+0x1ac>)
 8001fec:	79db      	ldrb	r3, [r3, #7]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <control_step+0x1c0>)
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d136      	bne.n	8002064 <control_step+0x1d4>
 8001ff6:	4b11      	ldr	r3, [pc, #68]	@ (800203c <control_step+0x1ac>)
 8001ff8:	7a1b      	ldrb	r3, [r3, #8]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <control_step+0x1c4>)
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d130      	bne.n	8002064 <control_step+0x1d4>
					yaw.command+=yaw_step;
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <control_step+0x19c>)
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <control_step+0x1d0>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <control_step+0x19c>)
 8002014:	edc3 7a00 	vstr	s15, [r3]
 8002018:	e03b      	b.n	8002092 <control_step+0x202>
 800201a:	bf00      	nop
 800201c:	2000039c 	.word	0x2000039c
 8002020:	20000054 	.word	0x20000054
 8002024:	200002dc 	.word	0x200002dc
 8002028:	200002fc 	.word	0x200002fc
 800202c:	200002ec 	.word	0x200002ec
 8002030:	200003a0 	.word	0x200003a0
 8002034:	42c80000 	.word	0x42c80000
 8002038:	200002cc 	.word	0x200002cc
 800203c:	200003a4 	.word	0x200003a4
 8002040:	2000036c 	.word	0x2000036c
 8002044:	20000378 	.word	0x20000378
 8002048:	20000384 	.word	0x20000384
 800204c:	20000390 	.word	0x20000390
 8002050:	08006690 	.word	0x08006690
 8002054:	08006694 	.word	0x08006694
 8002058:	200002c0 	.word	0x200002c0
 800205c:	bf800000 	.word	0xbf800000
 8002060:	200002c8 	.word	0x200002c8
				}
				else if (command[8]=="1" && command[7]=="0"){
 8002064:	4bca      	ldr	r3, [pc, #808]	@ (8002390 <control_step+0x500>)
 8002066:	7a1b      	ldrb	r3, [r3, #8]
 8002068:	461a      	mov	r2, r3
 800206a:	4bca      	ldr	r3, [pc, #808]	@ (8002394 <control_step+0x504>)
 800206c:	429a      	cmp	r2, r3
 800206e:	d110      	bne.n	8002092 <control_step+0x202>
 8002070:	4bc7      	ldr	r3, [pc, #796]	@ (8002390 <control_step+0x500>)
 8002072:	79db      	ldrb	r3, [r3, #7]
 8002074:	461a      	mov	r2, r3
 8002076:	4bc8      	ldr	r3, [pc, #800]	@ (8002398 <control_step+0x508>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d10a      	bne.n	8002092 <control_step+0x202>
					yaw.command-= yaw_step;
 800207c:	4bc7      	ldr	r3, [pc, #796]	@ (800239c <control_step+0x50c>)
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	4bc7      	ldr	r3, [pc, #796]	@ (80023a0 <control_step+0x510>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	4bc3      	ldr	r3, [pc, #780]	@ (800239c <control_step+0x50c>)
 800208e:	edc3 7a00 	vstr	s15, [r3]
				}

				if (strcmp(command, "$11111111")==0){
 8002092:	49c4      	ldr	r1, [pc, #784]	@ (80023a4 <control_step+0x514>)
 8002094:	48be      	ldr	r0, [pc, #760]	@ (8002390 <control_step+0x500>)
 8002096:	f7fe f89f 	bl	80001d8 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <control_step+0x216>
					flight_allowed = 0;
 80020a0:	4bc1      	ldr	r3, [pc, #772]	@ (80023a8 <control_step+0x518>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
			}

			//--------- Processing data ------------//
			// Calculating control inputs

			height.error = height.measurement - height.command;
 80020a6:	4bc1      	ldr	r3, [pc, #772]	@ (80023ac <control_step+0x51c>)
 80020a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ac:	4bbf      	ldr	r3, [pc, #764]	@ (80023ac <control_step+0x51c>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b6:	4bbd      	ldr	r3, [pc, #756]	@ (80023ac <control_step+0x51c>)
 80020b8:	edc3 7a03 	vstr	s15, [r3, #12]
			pitch.error = pitch.measurement - pitch.command;
 80020bc:	4bbc      	ldr	r3, [pc, #752]	@ (80023b0 <control_step+0x520>)
 80020be:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c2:	4bbb      	ldr	r3, [pc, #748]	@ (80023b0 <control_step+0x520>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	4bb8      	ldr	r3, [pc, #736]	@ (80023b0 <control_step+0x520>)
 80020ce:	edc3 7a03 	vstr	s15, [r3, #12]
			yaw.error = yaw.measurement - yaw.command;
 80020d2:	4bb2      	ldr	r3, [pc, #712]	@ (800239c <control_step+0x50c>)
 80020d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020d8:	4bb0      	ldr	r3, [pc, #704]	@ (800239c <control_step+0x50c>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e2:	4bae      	ldr	r3, [pc, #696]	@ (800239c <control_step+0x50c>)
 80020e4:	edc3 7a03 	vstr	s15, [r3, #12]
			roll.error = roll.measurement - roll.command;
 80020e8:	4bb2      	ldr	r3, [pc, #712]	@ (80023b4 <control_step+0x524>)
 80020ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ee:	4bb1      	ldr	r3, [pc, #708]	@ (80023b4 <control_step+0x524>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	4bae      	ldr	r3, [pc, #696]	@ (80023b4 <control_step+0x524>)
 80020fa:	edc3 7a03 	vstr	s15, [r3, #12]

			// Calculating control outputs

			height.u = update(heightPID,height.error);
 80020fe:	4bab      	ldr	r3, [pc, #684]	@ (80023ac <control_step+0x51c>)
 8002100:	edd3 7a03 	vldr	s15, [r3, #12]
 8002104:	4bac      	ldr	r3, [pc, #688]	@ (80023b8 <control_step+0x528>)
 8002106:	466c      	mov	r4, sp
 8002108:	f103 0210 	add.w	r2, r3, #16
 800210c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002110:	e884 0003 	stmia.w	r4, {r0, r1}
 8002114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002116:	eeb0 0a67 	vmov.f32	s0, s15
 800211a:	f7ff f9a1 	bl	8001460 <update>
 800211e:	eef0 7a40 	vmov.f32	s15, s0
 8002122:	4ba2      	ldr	r3, [pc, #648]	@ (80023ac <control_step+0x51c>)
 8002124:	edc3 7a02 	vstr	s15, [r3, #8]
			pitch.u = update(pitchPID, pitch.error);
 8002128:	4ba1      	ldr	r3, [pc, #644]	@ (80023b0 <control_step+0x520>)
 800212a:	edd3 7a03 	vldr	s15, [r3, #12]
 800212e:	4ba3      	ldr	r3, [pc, #652]	@ (80023bc <control_step+0x52c>)
 8002130:	466c      	mov	r4, sp
 8002132:	f103 0210 	add.w	r2, r3, #16
 8002136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800213a:	e884 0003 	stmia.w	r4, {r0, r1}
 800213e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002140:	eeb0 0a67 	vmov.f32	s0, s15
 8002144:	f7ff f98c 	bl	8001460 <update>
 8002148:	eef0 7a40 	vmov.f32	s15, s0
 800214c:	4b98      	ldr	r3, [pc, #608]	@ (80023b0 <control_step+0x520>)
 800214e:	edc3 7a02 	vstr	s15, [r3, #8]
			yaw.u = update(yawPID, yaw.error);
 8002152:	4b92      	ldr	r3, [pc, #584]	@ (800239c <control_step+0x50c>)
 8002154:	edd3 7a03 	vldr	s15, [r3, #12]
 8002158:	4b99      	ldr	r3, [pc, #612]	@ (80023c0 <control_step+0x530>)
 800215a:	466c      	mov	r4, sp
 800215c:	f103 0210 	add.w	r2, r3, #16
 8002160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002164:	e884 0003 	stmia.w	r4, {r0, r1}
 8002168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f7ff f977 	bl	8001460 <update>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	4b89      	ldr	r3, [pc, #548]	@ (800239c <control_step+0x50c>)
 8002178:	edc3 7a02 	vstr	s15, [r3, #8]
			roll.u = update(rollPID,roll.error);
 800217c:	4b8d      	ldr	r3, [pc, #564]	@ (80023b4 <control_step+0x524>)
 800217e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002182:	4b90      	ldr	r3, [pc, #576]	@ (80023c4 <control_step+0x534>)
 8002184:	466c      	mov	r4, sp
 8002186:	f103 0210 	add.w	r2, r3, #16
 800218a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800218e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002194:	eeb0 0a67 	vmov.f32	s0, s15
 8002198:	f7ff f962 	bl	8001460 <update>
 800219c:	eef0 7a40 	vmov.f32	s15, s0
 80021a0:	4b84      	ldr	r3, [pc, #528]	@ (80023b4 <control_step+0x524>)
 80021a2:	edc3 7a02 	vstr	s15, [r3, #8]

			//--------- Changing motors behaviour ------------//

			// motor mixing algorithm
			int FR_percentage = fmin(100, fmax(0, height.u+yaw.u+pitch.u+roll.u));
 80021a6:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <control_step+0x51c>)
 80021a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80021ac:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <control_step+0x50c>)
 80021ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80021b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b6:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <control_step+0x520>)
 80021b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80021bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c0:	4b7c      	ldr	r3, [pc, #496]	@ (80023b4 <control_step+0x524>)
 80021c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	ee17 0a90 	vmov	r0, s15
 80021ce:	f7fe f971 	bl	80004b4 <__aeabi_f2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8002380 <control_step+0x4f0>
 80021da:	ec43 2b10 	vmov	d0, r2, r3
 80021de:	f004 f9cd 	bl	800657c <fmax>
 80021e2:	eeb0 7a40 	vmov.f32	s14, s0
 80021e6:	eef0 7a60 	vmov.f32	s15, s1
 80021ea:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8002388 <control_step+0x4f8>
 80021ee:	eeb0 0a47 	vmov.f32	s0, s14
 80021f2:	eef0 0a67 	vmov.f32	s1, s15
 80021f6:	f004 f9eb 	bl	80065d0 <fmin>
 80021fa:	ec53 2b10 	vmov	r2, r3, d0
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fc49 	bl	8000a98 <__aeabi_d2iz>
 8002206:	4603      	mov	r3, r0
 8002208:	60fb      	str	r3, [r7, #12]
			int FL_percentage = fmin(100, fmax(0, height.u-yaw.u+pitch.u-roll.u));
 800220a:	4b68      	ldr	r3, [pc, #416]	@ (80023ac <control_step+0x51c>)
 800220c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002210:	4b62      	ldr	r3, [pc, #392]	@ (800239c <control_step+0x50c>)
 8002212:	edd3 7a02 	vldr	s15, [r3, #8]
 8002216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <control_step+0x520>)
 800221c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002224:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <control_step+0x524>)
 8002226:	edd3 7a02 	vldr	s15, [r3, #8]
 800222a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222e:	ee17 0a90 	vmov	r0, s15
 8002232:	f7fe f93f 	bl	80004b4 <__aeabi_f2d>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002380 <control_step+0x4f0>
 800223e:	ec43 2b10 	vmov	d0, r2, r3
 8002242:	f004 f99b 	bl	800657c <fmax>
 8002246:	eeb0 7a40 	vmov.f32	s14, s0
 800224a:	eef0 7a60 	vmov.f32	s15, s1
 800224e:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8002388 <control_step+0x4f8>
 8002252:	eeb0 0a47 	vmov.f32	s0, s14
 8002256:	eef0 0a67 	vmov.f32	s1, s15
 800225a:	f004 f9b9 	bl	80065d0 <fmin>
 800225e:	ec53 2b10 	vmov	r2, r3, d0
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fc17 	bl	8000a98 <__aeabi_d2iz>
 800226a:	4603      	mov	r3, r0
 800226c:	60bb      	str	r3, [r7, #8]
			int BR_percentage = fmin(100, fmax(0, height.u-yaw.u-pitch.u+roll.u));
 800226e:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <control_step+0x51c>)
 8002270:	ed93 7a02 	vldr	s14, [r3, #8]
 8002274:	4b49      	ldr	r3, [pc, #292]	@ (800239c <control_step+0x50c>)
 8002276:	edd3 7a02 	vldr	s15, [r3, #8]
 800227a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227e:	4b4c      	ldr	r3, [pc, #304]	@ (80023b0 <control_step+0x520>)
 8002280:	edd3 7a02 	vldr	s15, [r3, #8]
 8002284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002288:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <control_step+0x524>)
 800228a:	edd3 7a02 	vldr	s15, [r3, #8]
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	ee17 0a90 	vmov	r0, s15
 8002296:	f7fe f90d 	bl	80004b4 <__aeabi_f2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8002380 <control_step+0x4f0>
 80022a2:	ec43 2b10 	vmov	d0, r2, r3
 80022a6:	f004 f969 	bl	800657c <fmax>
 80022aa:	eeb0 7a40 	vmov.f32	s14, s0
 80022ae:	eef0 7a60 	vmov.f32	s15, s1
 80022b2:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002388 <control_step+0x4f8>
 80022b6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ba:	eef0 0a67 	vmov.f32	s1, s15
 80022be:	f004 f987 	bl	80065d0 <fmin>
 80022c2:	ec53 2b10 	vmov	r2, r3, d0
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fbe5 	bl	8000a98 <__aeabi_d2iz>
 80022ce:	4603      	mov	r3, r0
 80022d0:	607b      	str	r3, [r7, #4]
			int BL_percentage = fmin(100, fmax(0, height.u+yaw.u-pitch.u-roll.u));
 80022d2:	4b36      	ldr	r3, [pc, #216]	@ (80023ac <control_step+0x51c>)
 80022d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <control_step+0x50c>)
 80022da:	edd3 7a02 	vldr	s15, [r3, #8]
 80022de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e2:	4b33      	ldr	r3, [pc, #204]	@ (80023b0 <control_step+0x520>)
 80022e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ec:	4b31      	ldr	r3, [pc, #196]	@ (80023b4 <control_step+0x524>)
 80022ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe f8db 	bl	80004b4 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8002380 <control_step+0x4f0>
 8002306:	ec43 2b10 	vmov	d0, r2, r3
 800230a:	f004 f937 	bl	800657c <fmax>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	eef0 7a60 	vmov.f32	s15, s1
 8002316:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002388 <control_step+0x4f8>
 800231a:	eeb0 0a47 	vmov.f32	s0, s14
 800231e:	eef0 0a67 	vmov.f32	s1, s15
 8002322:	f004 f955 	bl	80065d0 <fmin>
 8002326:	ec53 2b10 	vmov	r2, r3, d0
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fbb3 	bl	8000a98 <__aeabi_d2iz>
 8002332:	4603      	mov	r3, r0
 8002334:	603b      	str	r3, [r7, #0]

			motor_SetPower(&MOTOR_FRONT_RIGHT, FR_percentage);
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4823      	ldr	r0, [pc, #140]	@ (80023c8 <control_step+0x538>)
 800233a:	f7fe fded 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, FL_percentage);
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	4822      	ldr	r0, [pc, #136]	@ (80023cc <control_step+0x53c>)
 8002342:	f7fe fde9 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, BR_percentage);
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4821      	ldr	r0, [pc, #132]	@ (80023d0 <control_step+0x540>)
 800234a:	f7fe fde5 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, BL_percentage);
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	4820      	ldr	r0, [pc, #128]	@ (80023d4 <control_step+0x544>)
 8002352:	f7fe fde1 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
		}

}
 8002356:	e00f      	b.n	8002378 <control_step+0x4e8>
			motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8002358:	2100      	movs	r1, #0
 800235a:	481b      	ldr	r0, [pc, #108]	@ (80023c8 <control_step+0x538>)
 800235c:	f7fe fddc 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8002360:	2100      	movs	r1, #0
 8002362:	481a      	ldr	r0, [pc, #104]	@ (80023cc <control_step+0x53c>)
 8002364:	f7fe fdd8 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8002368:	2100      	movs	r1, #0
 800236a:	4819      	ldr	r0, [pc, #100]	@ (80023d0 <control_step+0x540>)
 800236c:	f7fe fdd4 	bl	8000f18 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8002370:	2100      	movs	r1, #0
 8002372:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <control_step+0x544>)
 8002374:	f7fe fdd0 	bl	8000f18 <motor_SetPower>
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
	...
 800238c:	40590000 	.word	0x40590000
 8002390:	200003a4 	.word	0x200003a4
 8002394:	08006690 	.word	0x08006690
 8002398:	08006694 	.word	0x08006694
 800239c:	200002ec 	.word	0x200002ec
 80023a0:	200002c8 	.word	0x200002c8
 80023a4:	08006698 	.word	0x08006698
 80023a8:	2000039c 	.word	0x2000039c
 80023ac:	200002cc 	.word	0x200002cc
 80023b0:	200002dc 	.word	0x200002dc
 80023b4:	200002fc 	.word	0x200002fc
 80023b8:	2000030c 	.word	0x2000030c
 80023bc:	20000324 	.word	0x20000324
 80023c0:	20000354 	.word	0x20000354
 80023c4:	2000033c 	.word	0x2000033c
 80023c8:	2000036c 	.word	0x2000036c
 80023cc:	20000378 	.word	0x20000378
 80023d0:	20000384 	.word	0x20000384
 80023d4:	20000390 	.word	0x20000390

080023d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_MspInit+0x4c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002416:	2007      	movs	r0, #7
 8002418:	f000 fc32 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_I2C_MspInit+0xa8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d13d      	bne.n	80024c6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a20      	ldr	r2, [pc, #128]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246c:	2312      	movs	r3, #18
 800246e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002478:	2304      	movs	r3, #4
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	4815      	ldr	r0, [pc, #84]	@ (80024d8 <HAL_I2C_MspInit+0xb0>)
 8002484:	f000 fc3e 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248e:	2312      	movs	r3, #18
 8002490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800249a:	2309      	movs	r3, #9
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <HAL_I2C_MspInit+0xb0>)
 80024a6:	f000 fc2d 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_I2C_MspInit+0xac>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40005800 	.word	0x40005800
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	@ 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a57      	ldr	r2, [pc, #348]	@ (8002658 <HAL_TIM_Base_MspInit+0x17c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	4b56      	ldr	r3, [pc, #344]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4a55      	ldr	r2, [pc, #340]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6453      	str	r3, [r2, #68]	@ 0x44
 800250e:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800251a:	e098      	b.n	800264e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002524:	d116      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a4b      	ldr	r2, [pc, #300]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	201c      	movs	r0, #28
 8002548:	f000 fba5 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800254c:	201c      	movs	r0, #28
 800254e:	f000 fbbe 	bl	8002cce <HAL_NVIC_EnableIRQ>
}
 8002552:	e07c      	b.n	800264e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_TIM_Base_MspInit+0x184>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d116      	bne.n	800258c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a3d      	ldr	r2, [pc, #244]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201d      	movs	r0, #29
 8002580:	f000 fb89 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002584:	201d      	movs	r0, #29
 8002586:	f000 fba2 	bl	8002cce <HAL_NVIC_EnableIRQ>
}
 800258a:	e060      	b.n	800264e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <HAL_TIM_Base_MspInit+0x188>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d134      	bne.n	8002600 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b30      	ldr	r3, [pc, #192]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a2f      	ldr	r2, [pc, #188]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b29      	ldr	r3, [pc, #164]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a28      	ldr	r2, [pc, #160]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b26      	ldr	r3, [pc, #152]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025ce:	2340      	movs	r3, #64	@ 0x40
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025de:	2302      	movs	r3, #2
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	481f      	ldr	r0, [pc, #124]	@ (8002668 <HAL_TIM_Base_MspInit+0x18c>)
 80025ea:	f000 fb8b 	bl	8002d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	201e      	movs	r0, #30
 80025f4:	f000 fb4f 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025f8:	201e      	movs	r0, #30
 80025fa:	f000 fb68 	bl	8002cce <HAL_NVIC_EnableIRQ>
}
 80025fe:	e026      	b.n	800264e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM5)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_TIM_Base_MspInit+0x190>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	e012      	b.n	800264e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM10)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <HAL_TIM_Base_MspInit+0x194>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10d      	bne.n	800264e <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_TIM_Base_MspInit+0x180>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
}
 800264e:	bf00      	nop
 8002650:	3738      	adds	r7, #56	@ 0x38
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40010000 	.word	0x40010000
 800265c:	40023800 	.word	0x40023800
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800
 8002668:	40020400 	.word	0x40020400
 800266c:	40000c00 	.word	0x40000c00
 8002670:	40014400 	.word	0x40014400

08002674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	@ (8002728 <HAL_TIM_MspPostInit+0xb4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d11f      	bne.n	80026d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a23      	ldr	r2, [pc, #140]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80026b2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	4818      	ldr	r0, [pc, #96]	@ (8002730 <HAL_TIM_MspPostInit+0xbc>)
 80026d0:	f000 fb18 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80026d4:	e023      	b.n	800271e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	@ (8002734 <HAL_TIM_MspPostInit+0xc0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d11e      	bne.n	800271e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	4a10      	ldr	r2, [pc, #64]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f0:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800270e:	2303      	movs	r3, #3
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4807      	ldr	r0, [pc, #28]	@ (8002738 <HAL_TIM_MspPostInit+0xc4>)
 800271a:	f000 faf3 	bl	8002d04 <HAL_GPIO_Init>
}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	@ 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000
 8002734:	40014400 	.word	0x40014400
 8002738:	40020400 	.word	0x40020400

0800273c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_UART_MspInit+0x84>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12b      	bne.n	80027b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276c:	6413      	str	r3, [r2, #64]	@ 0x40
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002796:	230c      	movs	r3, #12
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a6:	2307      	movs	r3, #7
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_UART_MspInit+0x8c>)
 80027b2:	f000 faa7 	bl	8002d04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40004400 	.word	0x40004400
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002822:	f000 f919 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <TIM2_IRQHandler+0x38>)
 8002832:	f002 fba1 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  IMU_ReadAccelGyro_Converted_All((float)IMU_PERIOD_MS/(float)1000);
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <TIM2_IRQHandler+0x3c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002842:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800286c <TIM2_IRQHandler+0x40>
 8002846:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800284a:	ee16 0a90 	vmov	r0, s13
 800284e:	f7fd fe31 	bl	80004b4 <__aeabi_f2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ec43 2b10 	vmov	d0, r2, r3
 800285a:	f7fe fd39 	bl	80012d0 <IMU_ReadAccelGyro_Converted_All>

  /* USER CODE END TIM2_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000108 	.word	0x20000108
 8002868:	20000000 	.word	0x20000000
 800286c:	447a0000 	.word	0x447a0000

08002870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002874:	4803      	ldr	r0, [pc, #12]	@ (8002884 <TIM3_IRQHandler+0x14>)
 8002876:	f002 fb7f 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  control_step();
 800287a:	f7ff fb09 	bl	8001e90 <control_step>
  /* USER CODE END TIM3_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000150 	.word	0x20000150

08002888 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (rising == 0){
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <TIM4_IRQHandler+0x98>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <TIM4_IRQHandler+0x20>
		rising_time = htim5.Instance->CNT;
 8002894:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <TIM4_IRQHandler+0x9c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	461a      	mov	r2, r3
 800289c:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <TIM4_IRQHandler+0xa0>)
 800289e:	601a      	str	r2, [r3, #0]
		rising = 1;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002920 <TIM4_IRQHandler+0x98>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e031      	b.n	800290c <TIM4_IRQHandler+0x84>
	  }
	  else{
		falling_time =  htim5.Instance->CNT;
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <TIM4_IRQHandler+0x9c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <TIM4_IRQHandler+0xa4>)
 80028b2:	601a      	str	r2, [r3, #0]
		rising = 0;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <TIM4_IRQHandler+0x98>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
		pulse_duration = falling_time - rising_time;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <TIM4_IRQHandler+0xa4>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <TIM4_IRQHandler+0xa0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002930 <TIM4_IRQHandler+0xa8>)
 80028c6:	6013      	str	r3, [r2, #0]
		ultrasound_measure_cm = (float)pulse_duration/58.31;
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <TIM4_IRQHandler+0xa8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d4:	ee17 0a90 	vmov	r0, s15
 80028d8:	f7fd fdec 	bl	80004b4 <__aeabi_f2d>
 80028dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002918 <TIM4_IRQHandler+0x90>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd ff69 	bl	80007b8 <__aeabi_ddiv>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f8fb 	bl	8000ae8 <__aeabi_d2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002934 <TIM4_IRQHandler+0xac>)
 80028f6:	6013      	str	r3, [r2, #0]

		if (pulse_duration >= 50000){
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <TIM4_IRQHandler+0xa8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002900:	4293      	cmp	r3, r2
 8002902:	dd03      	ble.n	800290c <TIM4_IRQHandler+0x84>
			rising_time = falling_time;
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <TIM4_IRQHandler+0xa4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <TIM4_IRQHandler+0xa0>)
 800290a:	6013      	str	r3, [r2, #0]
		}
	  }


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800290c:	480a      	ldr	r0, [pc, #40]	@ (8002938 <TIM4_IRQHandler+0xb0>)
 800290e:	f002 fb33 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	147ae148 	.word	0x147ae148
 800291c:	404d27ae 	.word	0x404d27ae
 8002920:	200003b0 	.word	0x200003b0
 8002924:	200001e0 	.word	0x200001e0
 8002928:	200003b4 	.word	0x200003b4
 800292c:	200003b8 	.word	0x200003b8
 8002930:	200003bc 	.word	0x200003bc
 8002934:	200003a0 	.word	0x200003a0
 8002938:	20000198 	.word	0x20000198

0800293c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002998 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002964:	f7ff ffea 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002968:	480c      	ldr	r0, [pc, #48]	@ (800299c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296a:	490d      	ldr	r1, [pc, #52]	@ (80029a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002980:	4c0a      	ldr	r4, [pc, #40]	@ (80029ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298e:	f003 fdd1 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002992:	f7fe fdc1 	bl	8001518 <main>
  bx  lr    
 8002996:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029a4:	080066cc 	.word	0x080066cc
  ldr r2, =_sbss
 80029a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80029ac:	200003c4 	.word	0x200003c4

080029b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <ADC_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <HAL_Init+0x40>)
 80029be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_Init+0x40>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	@ (80029f4 <HAL_Init+0x40>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f000 f94f 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f808 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fcf6 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_InitTick+0x54>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <HAL_InitTick+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f967 	bl	8002cea <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f000 f92f 	bl	8002c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	@ (8002a54 <HAL_InitTick+0x5c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20000008 	.word	0x20000008

08002a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x20>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	200003c0 	.word	0x200003c0

08002a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_GetTick+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200003c0 	.word	0x200003c0

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff ffee 	bl	8002a80 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d005      	beq.n	8002abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_Delay+0x44>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002abe:	bf00      	nop
 8002ac0:	f7ff ffde 	bl	8002a80 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f7      	bhi.n	8002ac0 <HAL_Delay+0x28>
  {
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b12:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <__NVIC_GetPriorityGrouping+0x18>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	f003 0307 	and.w	r3, r3, #7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db0b      	blt.n	8002b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4907      	ldr	r1, [pc, #28]	@ (8002b7c <__NVIC_EnableIRQ+0x38>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2001      	movs	r0, #1
 8002b66:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	@ (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ff8e 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff29 	bl	8002ae0 <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff3e 	bl	8002b28 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff8e 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5d 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff31 	bl	8002b44 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa2 	bl	8002c3c <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e159      	b.n	8002fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f040 8148 	bne.w	8002fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d005      	beq.n	8002d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d130      	bne.n	8002db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0201 	and.w	r2, r3, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d017      	beq.n	8002df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d123      	bne.n	8002e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a2 	beq.w	8002fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b57      	ldr	r3, [pc, #348]	@ (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	4a56      	ldr	r2, [pc, #344]	@ (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9a:	4b54      	ldr	r3, [pc, #336]	@ (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	@ (8002ff4 <HAL_GPIO_Init+0x2f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0x202>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	@ (8002ff8 <HAL_GPIO_Init+0x2f4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_GPIO_Init+0x1fe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a47      	ldr	r2, [pc, #284]	@ (8002ffc <HAL_GPIO_Init+0x2f8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a46      	ldr	r2, [pc, #280]	@ (8003000 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <HAL_GPIO_Init+0x1f6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a45      	ldr	r2, [pc, #276]	@ (8003004 <HAL_GPIO_Init+0x300>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_GPIO_Init+0x1f2>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e008      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efa:	2303      	movs	r3, #3
 8002efc:	e004      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e002      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f06:	2300      	movs	r3, #0
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f002 0203 	and.w	r2, r2, #3
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	4093      	lsls	r3, r2
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f18:	4935      	ldr	r1, [pc, #212]	@ (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b38      	ldr	r3, [pc, #224]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a24      	ldr	r2, [pc, #144]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7a:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	f67f aea2 	bls.w	8002d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	@ 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40013c00 	.word	0x40013c00

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e12b      	b.n	80032aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff f9de 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a4:	f001 fbb6 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a81      	ldr	r2, [pc, #516]	@ (80032b4 <HAL_I2C_Init+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d807      	bhi.n	80030c4 <HAL_I2C_Init+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a80      	ldr	r2, [pc, #512]	@ (80032b8 <HAL_I2C_Init+0x278>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e006      	b.n	80030d2 <HAL_I2C_Init+0x92>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a7d      	ldr	r2, [pc, #500]	@ (80032bc <HAL_I2C_Init+0x27c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0e7      	b.n	80032aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a78      	ldr	r2, [pc, #480]	@ (80032c0 <HAL_I2C_Init+0x280>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a6a      	ldr	r2, [pc, #424]	@ (80032b4 <HAL_I2C_Init+0x274>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <HAL_I2C_Init+0xd4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	e009      	b.n	8003128 <HAL_I2C_Init+0xe8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a69      	ldr	r2, [pc, #420]	@ (80032c4 <HAL_I2C_Init+0x284>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	3301      	adds	r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800313a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	495c      	ldr	r1, [pc, #368]	@ (80032b4 <HAL_I2C_Init+0x274>)
 8003144:	428b      	cmp	r3, r1
 8003146:	d819      	bhi.n	800317c <HAL_I2C_Init+0x13c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e59      	subs	r1, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb1 f3f3 	udiv	r3, r1, r3
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800315c:	400b      	ands	r3, r1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_I2C_Init+0x138>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	e051      	b.n	800321c <HAL_I2C_Init+0x1dc>
 8003178:	2304      	movs	r3, #4
 800317a:	e04f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <HAL_I2C_Init+0x168>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e012      	b.n	80031ce <HAL_I2C_Init+0x18e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x196>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10e      	bne.n	80031fc <HAL_I2C_Init+0x1bc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e58      	subs	r0, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	440b      	add	r3, r1
 80031ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031fa:	e00f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	6809      	ldr	r1, [r1, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800324a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6911      	ldr	r1, [r2, #16]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	000186a0 	.word	0x000186a0
 80032b8:	001e847f 	.word	0x001e847f
 80032bc:	003d08ff 	.word	0x003d08ff
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	10624dd3 	.word	0x10624dd3

080032c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	@ 0x30
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032e2:	f7ff fbcd 	bl	8002a80 <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 8214 	bne.w	800371e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2319      	movs	r3, #25
 80032fc:	2201      	movs	r2, #1
 80032fe:	497b      	ldr	r1, [pc, #492]	@ (80034ec <HAL_I2C_Mem_Read+0x224>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fc29 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	e207      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_I2C_Mem_Read+0x56>
 800331a:	2302      	movs	r3, #2
 800331c:	e200      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d007      	beq.n	8003344 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2222      	movs	r2, #34	@ 0x22
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2240      	movs	r2, #64	@ 0x40
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a5b      	ldr	r2, [pc, #364]	@ (80034f0 <HAL_I2C_Mem_Read+0x228>)
 8003384:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003386:	88f8      	ldrh	r0, [r7, #6]
 8003388:	893a      	ldrh	r2, [r7, #8]
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4603      	mov	r3, r0
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 faf6 	bl	8003988 <I2C_RequestMemoryRead>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1bc      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d113      	bne.n	80033d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e190      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d11b      	bne.n	8003416 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e170      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	2b02      	cmp	r3, #2
 800341c:	d11b      	bne.n	8003456 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	e150      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800346c:	e144      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	2b03      	cmp	r3, #3
 8003474:	f200 80f1 	bhi.w	800365a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d123      	bne.n	80034c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fcc9 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e145      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034c6:	e117      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d14e      	bne.n	800356e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	2200      	movs	r2, #0
 80034d8:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <HAL_I2C_Mem_Read+0x22c>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fb3c 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e11a      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
 80034ea:	bf00      	nop
 80034ec:	00100002 	.word	0x00100002
 80034f0:	ffff0000 	.word	0xffff0000
 80034f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800356c:	e0c4      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	2200      	movs	r2, #0
 8003576:	496c      	ldr	r1, [pc, #432]	@ (8003728 <HAL_I2C_Mem_Read+0x460>)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 faed 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cb      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	2200      	movs	r2, #0
 80035d2:	4955      	ldr	r1, [pc, #340]	@ (8003728 <HAL_I2C_Mem_Read+0x460>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fabf 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09d      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003658:	e04e      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fbdc 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e058      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d124      	bne.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f aeb6 	bne.w	800346e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00010004 	.word	0x00010004

0800372c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	@ 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	460b      	mov	r3, r1
 800373a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7ff f9a0 	bl	8002a80 <HAL_GetTick>
 8003740:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	f040 8111 	bne.w	8003976 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	4988      	ldr	r1, [pc, #544]	@ (8003980 <HAL_I2C_IsDeviceReady+0x254>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f9fa 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	e104      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_I2C_IsDeviceReady+0x50>
 8003778:	2302      	movs	r3, #2
 800377a:	e0fd      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d007      	beq.n	80037a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2224      	movs	r2, #36	@ 0x24
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a70      	ldr	r2, [pc, #448]	@ (8003984 <HAL_I2C_IsDeviceReady+0x258>)
 80037c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f9b8 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fc:	d103      	bne.n	8003806 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0b6      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003818:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800381a:	f7ff f931 	bl	8002a80 <HAL_GetTick>
 800381e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800384e:	e025      	b.n	800389c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7ff f916 	bl	8002a80 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <HAL_I2C_IsDeviceReady+0x13a>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	22a0      	movs	r2, #160	@ 0xa0
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80038a6:	d005      	beq.n	80038b4 <HAL_I2C_IsDeviceReady+0x188>
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_I2C_IsDeviceReady+0x188>
 80038ae:	7dbb      	ldrb	r3, [r7, #22]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0cd      	beq.n	8003850 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d129      	bne.n	800391e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2319      	movs	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	4921      	ldr	r1, [pc, #132]	@ (8003980 <HAL_I2C_IsDeviceReady+0x254>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f92c 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e036      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e02c      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003936:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2319      	movs	r3, #25
 800393e:	2201      	movs	r2, #1
 8003940:	490f      	ldr	r1, [pc, #60]	@ (8003980 <HAL_I2C_IsDeviceReady+0x254>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f908 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e012      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3301      	adds	r3, #1
 8003956:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	f4ff af32 	bcc.w	80037c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	00100002 	.word	0x00100002
 8003984:	ffff0000 	.word	0xffff0000

08003988 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4603      	mov	r3, r0
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	460b      	mov	r3, r1
 800399c:	813b      	strh	r3, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f8c2 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e8:	d103      	bne.n	80039f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0aa      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	4952      	ldr	r1, [pc, #328]	@ (8003b54 <I2C_RequestMemoryRead+0x1cc>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f91d 	bl	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e097      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	6a39      	ldr	r1, [r7, #32]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f9a8 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e076      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a64:	893b      	ldrh	r3, [r7, #8]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	e021      	b.n	8003ab4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a70:	893b      	ldrh	r3, [r7, #8]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f982 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e050      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aaa:	893b      	ldrh	r3, [r7, #8]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	6a39      	ldr	r1, [r7, #32]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f967 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ada:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e035      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f82b 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b16:	d103      	bne.n	8003b20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e013      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	4906      	ldr	r1, [pc, #24]	@ (8003b54 <I2C_RequestMemoryRead+0x1cc>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f886 	bl	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010002 	.word	0x00010002

08003b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	e048      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d044      	beq.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe ff85 	bl	8002a80 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d139      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	e00c      	b.n	8003bc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d116      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e023      	b.n	8003c44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10d      	bne.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	e00c      	b.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d093      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5a:	e071      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6a:	d123      	bne.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e067      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d041      	beq.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7fe fee0 	bl	8002a80 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d136      	bne.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10c      	bne.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e00b      	b.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e021      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10c      	bne.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e00b      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f af6d 	bne.w	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f89b 	bl	8003ed6 <I2C_IsAcknowledgeFailed>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e034      	b.n	8003e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d028      	beq.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe fe65 	bl	8002a80 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11d      	bne.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b80      	cmp	r3, #128	@ 0x80
 8003dd4:	d016      	beq.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d1c3      	bne.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e28:	e049      	b.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d119      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e030      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe fe08 	bl	8002a80 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b40      	cmp	r3, #64	@ 0x40
 8003e8e:	d016      	beq.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d1ae      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eec:	d11b      	bne.n	8003f26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e267      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d075      	beq.n	800403e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f52:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b85      	ldr	r3, [pc, #532]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b82      	ldr	r3, [pc, #520]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b7e      	ldr	r3, [pc, #504]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x108>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e242      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x74>
 8003f9a:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a75      	ldr	r2, [pc, #468]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x98>
 8003fb2:	4b70      	ldr	r3, [pc, #448]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6f      	ldr	r2, [pc, #444]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	4b69      	ldr	r3, [pc, #420]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a68      	ldr	r2, [pc, #416]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b66      	ldr	r3, [pc, #408]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fd48 	bl	8002a80 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fd44 	bl	8002a80 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e207      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b5b      	ldr	r3, [pc, #364]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fe fd34 	bl	8002a80 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe fd30 	bl	8002a80 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1f3      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b51      	ldr	r3, [pc, #324]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0xe8>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d063      	beq.n	8004112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800404a:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11c      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b44      	ldr	r3, [pc, #272]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1c7      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4937      	ldr	r1, [pc, #220]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e03a      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b34      	ldr	r3, [pc, #208]	@ (8004178 <HAL_RCC_OscConfig+0x244>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fce9 	bl	8002a80 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fe fce5 	bl	8002a80 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1a8      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4925      	ldr	r1, [pc, #148]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b24      	ldr	r3, [pc, #144]	@ (8004178 <HAL_RCC_OscConfig+0x244>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fcc8 	bl	8002a80 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fe fcc4 	bl	8002a80 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e187      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d036      	beq.n	800418c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_RCC_OscConfig+0x248>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe fca8 	bl	8002a80 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe fca4 	bl	8002a80 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e167      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x200>
 8004152:	e01b      	b.n	800418c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <HAL_RCC_OscConfig+0x248>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fe fc91 	bl	8002a80 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	e00e      	b.n	8004180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe fc8d 	bl	8002a80 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d907      	bls.n	8004180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e150      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
 8004174:	40023800 	.word	0x40023800
 8004178:	42470000 	.word	0x42470000
 800417c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b88      	ldr	r3, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ea      	bne.n	8004162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8097 	beq.w	80042c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b81      	ldr	r3, [pc, #516]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	4b7d      	ldr	r3, [pc, #500]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	4a7c      	ldr	r2, [pc, #496]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ba:	4b7a      	ldr	r3, [pc, #488]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b77      	ldr	r3, [pc, #476]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b74      	ldr	r3, [pc, #464]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fe fc4d 	bl	8002a80 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fe fc49 	bl	8002a80 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e10c      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b6a      	ldr	r3, [pc, #424]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x2ea>
 8004210:	4b64      	ldr	r3, [pc, #400]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004214:	4a63      	ldr	r2, [pc, #396]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	@ 0x70
 800421c:	e01c      	b.n	8004258 <HAL_RCC_OscConfig+0x324>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x30c>
 8004226:	4b5f      	ldr	r3, [pc, #380]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a5e      	ldr	r2, [pc, #376]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
 8004232:	4b5c      	ldr	r3, [pc, #368]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004236:	4a5b      	ldr	r2, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	@ 0x70
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x324>
 8004240:	4b58      	ldr	r3, [pc, #352]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a57      	ldr	r2, [pc, #348]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
 800424c:	4b55      	ldr	r3, [pc, #340]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004250:	4a54      	ldr	r2, [pc, #336]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fe fc0e 	bl	8002a80 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fe fc0a 	bl	8002a80 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0cb      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ee      	beq.n	8004268 <HAL_RCC_OscConfig+0x334>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7fe fbf8 	bl	8002a80 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fe fbf4 	bl	8002a80 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0b5      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ee      	bne.n	8004294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	4a38      	ldr	r2, [pc, #224]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a1 	beq.w	8004414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d2:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d05c      	beq.n	8004398 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d141      	bne.n	800436a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fe fbc8 	bl	8002a80 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe fbc4 	bl	8002a80 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e087      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	491b      	ldr	r1, [pc, #108]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fe fb9d 	bl	8002a80 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fe fb99 	bl	8002a80 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e05c      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x416>
 8004368:	e054      	b.n	8004414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe fb86 	bl	8002a80 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe fb82 	bl	8002a80 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e045      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x444>
 8004396:	e03d      	b.n	8004414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e038      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x4ec>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d028      	beq.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d121      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d11a      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043e0:	4013      	ands	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d111      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	3b01      	subs	r3, #1
 80043fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0cc      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b68      	ldr	r3, [pc, #416]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90c      	bls.n	8004460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b65      	ldr	r3, [pc, #404]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b63      	ldr	r3, [pc, #396]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0b8      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004478:	4b59      	ldr	r3, [pc, #356]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a58      	ldr	r2, [pc, #352]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004482:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004490:	4b53      	ldr	r3, [pc, #332]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a52      	ldr	r2, [pc, #328]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800449a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b50      	ldr	r3, [pc, #320]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	494d      	ldr	r1, [pc, #308]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d044      	beq.n	8004544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b47      	ldr	r3, [pc, #284]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d119      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e07f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e06f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f2:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e067      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004502:	4b37      	ldr	r3, [pc, #220]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 0203 	bic.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4934      	ldr	r1, [pc, #208]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004514:	f7fe fab4 	bl	8002a80 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	e00a      	b.n	8004532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451c:	f7fe fab0 	bl	8002a80 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e04f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	4b2b      	ldr	r3, [pc, #172]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 020c 	and.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	429a      	cmp	r2, r3
 8004542:	d1eb      	bne.n	800451c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004544:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d20c      	bcs.n	800456c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b22      	ldr	r3, [pc, #136]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e032      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004578:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4916      	ldr	r1, [pc, #88]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004596:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	490e      	ldr	r1, [pc, #56]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045aa:	f000 f821 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	490a      	ldr	r1, [pc, #40]	@ (80045e4 <HAL_RCC_ClockConfig+0x1c0>)
 80045bc:	5ccb      	ldrb	r3, [r1, r3]
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045c6:	4b09      	ldr	r3, [pc, #36]	@ (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fa14 	bl	80029f8 <HAL_InitTick>

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023c00 	.word	0x40023c00
 80045e0:	40023800 	.word	0x40023800
 80045e4:	080066a4 	.word	0x080066a4
 80045e8:	20000004 	.word	0x20000004
 80045ec:	20000008 	.word	0x20000008

080045f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f4:	b094      	sub	sp, #80	@ 0x50
 80045f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004608:	4b79      	ldr	r3, [pc, #484]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d00d      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x40>
 8004614:	2b08      	cmp	r3, #8
 8004616:	f200 80e1 	bhi.w	80047dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x34>
 800461e:	2b04      	cmp	r3, #4
 8004620:	d003      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x3a>
 8004622:	e0db      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b73      	ldr	r3, [pc, #460]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004628:	e0db      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800462a:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800462c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800462e:	e0d8      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004630:	4b6f      	ldr	r3, [pc, #444]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004638:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800463a:	4b6d      	ldr	r3, [pc, #436]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d063      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004646:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	099b      	lsrs	r3, r3, #6
 800464c:	2200      	movs	r2, #0
 800464e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004650:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	633b      	str	r3, [r7, #48]	@ 0x30
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
 800465e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004662:	4622      	mov	r2, r4
 8004664:	462b      	mov	r3, r5
 8004666:	f04f 0000 	mov.w	r0, #0
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	0159      	lsls	r1, r3, #5
 8004670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004674:	0150      	lsls	r0, r2, #5
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4621      	mov	r1, r4
 800467c:	1a51      	subs	r1, r2, r1
 800467e:	6139      	str	r1, [r7, #16]
 8004680:	4629      	mov	r1, r5
 8004682:	eb63 0301 	sbc.w	r3, r3, r1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004694:	4659      	mov	r1, fp
 8004696:	018b      	lsls	r3, r1, #6
 8004698:	4651      	mov	r1, sl
 800469a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469e:	4651      	mov	r1, sl
 80046a0:	018a      	lsls	r2, r1, #6
 80046a2:	4651      	mov	r1, sl
 80046a4:	ebb2 0801 	subs.w	r8, r2, r1
 80046a8:	4659      	mov	r1, fp
 80046aa:	eb63 0901 	sbc.w	r9, r3, r1
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c2:	4690      	mov	r8, r2
 80046c4:	4699      	mov	r9, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	eb18 0303 	adds.w	r3, r8, r3
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	462b      	mov	r3, r5
 80046d0:	eb49 0303 	adc.w	r3, r9, r3
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046e2:	4629      	mov	r1, r5
 80046e4:	024b      	lsls	r3, r1, #9
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046ec:	4621      	mov	r1, r4
 80046ee:	024a      	lsls	r2, r1, #9
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f6:	2200      	movs	r2, #0
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004700:	f7fc fa42 	bl	8000b88 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470c:	e058      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	2200      	movs	r2, #0
 8004716:	4618      	mov	r0, r3
 8004718:	4611      	mov	r1, r2
 800471a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	2300      	movs	r3, #0
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	0159      	lsls	r1, r3, #5
 8004736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473a:	0150      	lsls	r0, r2, #5
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4641      	mov	r1, r8
 8004742:	ebb2 0a01 	subs.w	sl, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb63 0b01 	sbc.w	fp, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800475c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004760:	ebb2 040a 	subs.w	r4, r2, sl
 8004764:	eb63 050b 	sbc.w	r5, r3, fp
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	00eb      	lsls	r3, r5, #3
 8004772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004776:	00e2      	lsls	r2, r4, #3
 8004778:	4614      	mov	r4, r2
 800477a:	461d      	mov	r5, r3
 800477c:	4643      	mov	r3, r8
 800477e:	18e3      	adds	r3, r4, r3
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	464b      	mov	r3, r9
 8004784:	eb45 0303 	adc.w	r3, r5, r3
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004796:	4629      	mov	r1, r5
 8004798:	028b      	lsls	r3, r1, #10
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a0:	4621      	mov	r1, r4
 80047a2:	028a      	lsls	r2, r1, #10
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047aa:	2200      	movs	r2, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	61fa      	str	r2, [r7, #28]
 80047b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b4:	f7fc f9e8 	bl	8000b88 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4613      	mov	r3, r2
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80047d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047da:	e002      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3750      	adds	r7, #80	@ 0x50
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	007a1200 	.word	0x007a1200

080047fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004818:	f7ff fff0 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0a9b      	lsrs	r3, r3, #10
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	080066b4 	.word	0x080066b4

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004840:	f7ff ffdc 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0b5b      	lsrs	r3, r3, #13
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	080066b4 	.word	0x080066b4

08004864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e041      	b.n	80048fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fe26 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 feb0 	bl	8005608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d001      	beq.n	800491c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e03c      	b.n	8004996 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1e      	ldr	r2, [pc, #120]	@ (80049a4 <HAL_TIM_Base_Start+0xa0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_TIM_Base_Start+0x5c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d013      	beq.n	8004960 <HAL_TIM_Base_Start+0x5c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1a      	ldr	r2, [pc, #104]	@ (80049a8 <HAL_TIM_Base_Start+0xa4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_Base_Start+0x5c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <HAL_TIM_Base_Start+0xa8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_TIM_Base_Start+0x5c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a17      	ldr	r2, [pc, #92]	@ (80049b0 <HAL_TIM_Base_Start+0xac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start+0x5c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a16      	ldr	r2, [pc, #88]	@ (80049b4 <HAL_TIM_Base_Start+0xb0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d010      	beq.n	8004994 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	e007      	b.n	8004994 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40014000 	.word	0x40014000

080049b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d001      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e044      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xb0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x6c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d013      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x6c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1a      	ldr	r2, [pc, #104]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xb4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00e      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x6c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x6c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x6c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d111      	bne.n	8004a48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d010      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	e007      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40014000 	.word	0x40014000

08004a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e041      	b.n	8004b12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f839 	bl	8004b1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 fda4 	bl	8005608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x24>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e022      	b.n	8004b9a <HAL_TIM_PWM_Start+0x6a>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d109      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x3e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	e015      	b.n	8004b9a <HAL_TIM_PWM_Start+0x6a>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x58>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e008      	b.n	8004b9a <HAL_TIM_PWM_Start+0x6a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e068      	b.n	8004c74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x82>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_PWM_Start+0xaa>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x92>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_PWM_Start+0xaa>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xa2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_PWM_Start+0xaa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f8e0 	bl	8005da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a23      	ldr	r2, [pc, #140]	@ (8004c7c <HAL_TIM_PWM_Start+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d107      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_TIM_PWM_Start+0x14c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d018      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x10e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c14:	d013      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x10e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	@ (8004c80 <HAL_TIM_PWM_Start+0x150>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x10e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a17      	ldr	r2, [pc, #92]	@ (8004c84 <HAL_TIM_PWM_Start+0x154>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x10e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a16      	ldr	r2, [pc, #88]	@ (8004c88 <HAL_TIM_PWM_Start+0x158>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x10e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <HAL_TIM_PWM_Start+0x15c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d111      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d010      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c60:	e007      	b.n	8004c72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000

08004c90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e041      	b.n	8004d26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f839 	bl	8004d2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fc9a 	bl	8005608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_IC_Start_IT+0x1e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e013      	b.n	8004d8a <HAL_TIM_IC_Start_IT+0x46>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_IC_Start_IT+0x2e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	e00b      	b.n	8004d8a <HAL_TIM_IC_Start_IT+0x46>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_IC_Start_IT+0x3e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e003      	b.n	8004d8a <HAL_TIM_IC_Start_IT+0x46>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d104      	bne.n	8004d9c <HAL_TIM_IC_Start_IT+0x58>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e013      	b.n	8004dc4 <HAL_TIM_IC_Start_IT+0x80>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d104      	bne.n	8004dac <HAL_TIM_IC_Start_IT+0x68>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e00b      	b.n	8004dc4 <HAL_TIM_IC_Start_IT+0x80>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d104      	bne.n	8004dbc <HAL_TIM_IC_Start_IT+0x78>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e003      	b.n	8004dc4 <HAL_TIM_IC_Start_IT+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dcc:	7b7b      	ldrb	r3, [r7, #13]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0c2      	b.n	8004f5c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_IC_Start_IT+0xa2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0xca>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_IC_Start_IT+0xb2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0xca>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_IC_Start_IT+0xc2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0xca>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_IC_Start_IT+0xda>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1c:	e013      	b.n	8004e46 <HAL_TIM_IC_Start_IT+0x102>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_IC_Start_IT+0xea>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e2c:	e00b      	b.n	8004e46 <HAL_TIM_IC_Start_IT+0x102>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Start_IT+0xfa>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e3c:	e003      	b.n	8004e46 <HAL_TIM_IC_Start_IT+0x102>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	d841      	bhi.n	8004ed0 <HAL_TIM_IC_Start_IT+0x18c>
 8004e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <HAL_TIM_IC_Start_IT+0x110>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004ed1 	.word	0x08004ed1
 8004e5c:	08004ed1 	.word	0x08004ed1
 8004e60:	08004ed1 	.word	0x08004ed1
 8004e64:	08004e9b 	.word	0x08004e9b
 8004e68:	08004ed1 	.word	0x08004ed1
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	08004ed1 	.word	0x08004ed1
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004ed1 	.word	0x08004ed1
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08004ed1 	.word	0x08004ed1
 8004e84:	08004ebf 	.word	0x08004ebf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0202 	orr.w	r2, r2, #2
 8004e96:	60da      	str	r2, [r3, #12]
      break;
 8004e98:	e01d      	b.n	8004ed6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0204 	orr.w	r2, r2, #4
 8004ea8:	60da      	str	r2, [r3, #12]
      break;
 8004eaa:	e014      	b.n	8004ed6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0208 	orr.w	r2, r2, #8
 8004eba:	60da      	str	r2, [r3, #12]
      break;
 8004ebc:	e00b      	b.n	8004ed6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0210 	orr.w	r2, r2, #16
 8004ecc:	60da      	str	r2, [r3, #12]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d13e      	bne.n	8004f5a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 ff5f 	bl	8005da8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <HAL_TIM_IC_Start_IT+0x220>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d018      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x1e2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efc:	d013      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x1e2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <HAL_TIM_IC_Start_IT+0x224>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x1e2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_TIM_IC_Start_IT+0x228>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x1e2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <HAL_TIM_IC_Start_IT+0x22c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x1e2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <HAL_TIM_IC_Start_IT+0x230>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d010      	beq.n	8004f5a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	e007      	b.n	8004f5a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40014000 	.word	0x40014000

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d020      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0202 	mvn.w	r2, #2
 8004fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb01 	bl	80055ca <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 faf3 	bl	80055b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb04 	bl	80055de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fadb 	bl	80055ca <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 facd 	bl	80055b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fade 	bl	80055de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d020      	beq.n	8005074 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0208 	mvn.w	r2, #8
 8005044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2204      	movs	r2, #4
 800504a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fab5 	bl	80055ca <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 faa7 	bl	80055b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fab8 	bl	80055de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d020      	beq.n	80050c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0210 	mvn.w	r2, #16
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2208      	movs	r2, #8
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa8f 	bl	80055ca <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa81 	bl	80055b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa92 	bl	80055de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0201 	mvn.w	r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa5f 	bl	80055a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00c      	beq.n	8005108 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 ff40 	bl	8005f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa63 	bl	80055f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0220 	mvn.w	r2, #32
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 ff12 	bl	8005f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005172:	2302      	movs	r3, #2
 8005174:	e088      	b.n	8005288 <HAL_TIM_IC_ConfigChannel+0x130>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005194:	f000 fc50 	bl	8005a38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 020c 	bic.w	r2, r2, #12
 80051a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	619a      	str	r2, [r3, #24]
 80051ba:	e060      	b.n	800527e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d11c      	bne.n	80051fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80051d2:	f000 fcc8 	bl	8005b66 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6999      	ldr	r1, [r3, #24]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	021a      	lsls	r2, r3, #8
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]
 80051fa:	e040      	b.n	800527e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005212:	f000 fd15 	bl	8005c40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 020c 	bic.w	r2, r2, #12
 8005224:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69d9      	ldr	r1, [r3, #28]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	61da      	str	r2, [r3, #28]
 8005238:	e021      	b.n	800527e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b0c      	cmp	r3, #12
 800523e:	d11c      	bne.n	800527a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005250:	f000 fd32 	bl	8005cb8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005262:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69d9      	ldr	r1, [r3, #28]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
 8005278:	e001      	b.n	800527e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e0ae      	b.n	800540c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	f200 809f 	bhi.w	80053fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052be:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	080053fd 	.word	0x080053fd
 80052cc:	080053fd 	.word	0x080053fd
 80052d0:	080053fd 	.word	0x080053fd
 80052d4:	08005339 	.word	0x08005339
 80052d8:	080053fd 	.word	0x080053fd
 80052dc:	080053fd 	.word	0x080053fd
 80052e0:	080053fd 	.word	0x080053fd
 80052e4:	0800537b 	.word	0x0800537b
 80052e8:	080053fd 	.word	0x080053fd
 80052ec:	080053fd 	.word	0x080053fd
 80052f0:	080053fd 	.word	0x080053fd
 80052f4:	080053bb 	.word	0x080053bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fa0e 	bl	8005720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0208 	orr.w	r2, r2, #8
 8005312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0204 	bic.w	r2, r2, #4
 8005322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6999      	ldr	r1, [r3, #24]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	619a      	str	r2, [r3, #24]
      break;
 8005336:	e064      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fa54 	bl	80057ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	619a      	str	r2, [r3, #24]
      break;
 8005378:	e043      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fa9f 	bl	80058c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0208 	orr.w	r2, r2, #8
 8005394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69d9      	ldr	r1, [r3, #28]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	61da      	str	r2, [r3, #28]
      break;
 80053b8:	e023      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fae9 	bl	8005998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	021a      	lsls	r2, r3, #8
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	61da      	str	r2, [r3, #28]
      break;
 80053fa:	e002      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIM_ConfigClockSource+0x1c>
 800542c:	2302      	movs	r3, #2
 800542e:	e0b4      	b.n	800559a <HAL_TIM_ConfigClockSource+0x186>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005468:	d03e      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0xd4>
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546e:	f200 8087 	bhi.w	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005476:	f000 8086 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x172>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547e:	d87f      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b70      	cmp	r3, #112	@ 0x70
 8005482:	d01a      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0xa6>
 8005484:	2b70      	cmp	r3, #112	@ 0x70
 8005486:	d87b      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b60      	cmp	r3, #96	@ 0x60
 800548a:	d050      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x11a>
 800548c:	2b60      	cmp	r3, #96	@ 0x60
 800548e:	d877      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b50      	cmp	r3, #80	@ 0x50
 8005492:	d03c      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xfa>
 8005494:	2b50      	cmp	r3, #80	@ 0x50
 8005496:	d873      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d058      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x13a>
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d86f      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b30      	cmp	r3, #48	@ 0x30
 80054a2:	d064      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054a4:	2b30      	cmp	r3, #48	@ 0x30
 80054a6:	d86b      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d060      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d867      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05c      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d05a      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	e062      	b.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ca:	f000 fc4d 	bl	8005d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	609a      	str	r2, [r3, #8]
      break;
 80054e6:	e04f      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f8:	f000 fc36 	bl	8005d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800550a:	609a      	str	r2, [r3, #8]
      break;
 800550c:	e03c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	461a      	mov	r2, r3
 800551c:	f000 faf4 	bl	8005b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2150      	movs	r1, #80	@ 0x50
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc03 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 800552c:	e02c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553a:	461a      	mov	r2, r3
 800553c:	f000 fb50 	bl	8005be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2160      	movs	r1, #96	@ 0x60
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fbf3 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 800554c:	e01c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	461a      	mov	r2, r3
 800555c:	f000 fad4 	bl	8005b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2140      	movs	r1, #64	@ 0x40
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fbe3 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 800556c:	e00c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f000 fbda 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 800557e:	e003      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e000      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3a      	ldr	r2, [pc, #232]	@ (8005704 <TIM_Base_SetConfig+0xfc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00f      	beq.n	8005640 <TIM_Base_SetConfig+0x38>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005626:	d00b      	beq.n	8005640 <TIM_Base_SetConfig+0x38>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a37      	ldr	r2, [pc, #220]	@ (8005708 <TIM_Base_SetConfig+0x100>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d007      	beq.n	8005640 <TIM_Base_SetConfig+0x38>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a36      	ldr	r2, [pc, #216]	@ (800570c <TIM_Base_SetConfig+0x104>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0x38>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <TIM_Base_SetConfig+0x108>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <TIM_Base_SetConfig+0xfc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01b      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005660:	d017      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <TIM_Base_SetConfig+0x100>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a27      	ldr	r2, [pc, #156]	@ (800570c <TIM_Base_SetConfig+0x104>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a26      	ldr	r2, [pc, #152]	@ (8005710 <TIM_Base_SetConfig+0x108>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <TIM_Base_SetConfig+0x10c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a24      	ldr	r2, [pc, #144]	@ (8005718 <TIM_Base_SetConfig+0x110>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a23      	ldr	r2, [pc, #140]	@ (800571c <TIM_Base_SetConfig+0x114>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005704 <TIM_Base_SetConfig+0xfc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]
  }
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 0201 	bic.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0302 	bic.w	r3, r3, #2
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <TIM_OC1_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a13      	ldr	r2, [pc, #76]	@ (80057e8 <TIM_OC1_SetConfig+0xc8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d111      	bne.n	80057c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40010000 	.word	0x40010000

080057ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <TIM_OC2_SetConfig+0xd4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10d      	bne.n	8005868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <TIM_OC2_SetConfig+0xd4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d113      	bne.n	8005898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000

080058c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <TIM_OC3_SetConfig+0xd0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10d      	bne.n	800593e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <TIM_OC3_SetConfig+0xd0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d113      	bne.n	800596e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000

08005998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a10      	ldr	r2, [pc, #64]	@ (8005a34 <TIM_OC4_SetConfig+0x9c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000

08005a38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0201 	bic.w	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a24      	ldr	r2, [pc, #144]	@ (8005af4 <TIM_TI1_SetConfig+0xbc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <TIM_TI1_SetConfig+0x56>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6c:	d00f      	beq.n	8005a8e <TIM_TI1_SetConfig+0x56>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <TIM_TI1_SetConfig+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_TI1_SetConfig+0x56>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a20      	ldr	r2, [pc, #128]	@ (8005afc <TIM_TI1_SetConfig+0xc4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_TI1_SetConfig+0x56>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <TIM_TI1_SetConfig+0xc8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_TI1_SetConfig+0x56>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <TIM_TI1_SetConfig+0xcc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d101      	bne.n	8005a92 <TIM_TI1_SetConfig+0x5a>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <TIM_TI1_SetConfig+0x5c>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e003      	b.n	8005ab2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f003 030a 	and.w	r3, r3, #10
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000

08005b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f023 0201 	bic.w	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 030a 	bic.w	r3, r3, #10
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b087      	sub	sp, #28
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0210 	bic.w	r2, r3, #16
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	031b      	lsls	r3, r3, #12
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f023 0303 	bic.w	r3, r3, #3
 8005c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	031b      	lsls	r3, r3, #12
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	031b      	lsls	r3, r3, #12
 8005d10:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f043 0307 	orr.w	r3, r3, #7
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	609a      	str	r2, [r3, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	609a      	str	r2, [r3, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2201      	movs	r2, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e050      	b.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d013      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10c      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40014000 	.word	0x40014000

08005ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e03d      	b.n	8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e042      	b.n	8006034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fc fbba 	bl	800273c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	@ 0x24
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f82b 	bl	800603c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b0c0      	sub	sp, #256	@ 0x100
 8006042:	af00      	add	r7, sp, #0
 8006044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	ea40 0301 	orr.w	r3, r0, r1
 8006064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006094:	f021 010c 	bic.w	r1, r1, #12
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060a2:	430b      	orrs	r3, r1
 80060a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	6999      	ldr	r1, [r3, #24]
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	ea40 0301 	orr.w	r3, r0, r1
 80060c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006308 <UART_SetConfig+0x2cc>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d005      	beq.n	80060dc <UART_SetConfig+0xa0>
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b8d      	ldr	r3, [pc, #564]	@ (800630c <UART_SetConfig+0x2d0>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d104      	bne.n	80060e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fbae 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 80060e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060e4:	e003      	b.n	80060ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060e6:	f7fe fb95 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80060ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f8:	f040 810c 	bne.w	8006314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006100:	2200      	movs	r2, #0
 8006102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800610a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	1891      	adds	r1, r2, r2
 8006114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006116:	415b      	adcs	r3, r3
 8006118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800611e:	4621      	mov	r1, r4
 8006120:	eb12 0801 	adds.w	r8, r2, r1
 8006124:	4629      	mov	r1, r5
 8006126:	eb43 0901 	adc.w	r9, r3, r1
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800613a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800613e:	4690      	mov	r8, r2
 8006140:	4699      	mov	r9, r3
 8006142:	4623      	mov	r3, r4
 8006144:	eb18 0303 	adds.w	r3, r8, r3
 8006148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800614c:	462b      	mov	r3, r5
 800614e:	eb49 0303 	adc.w	r3, r9, r3
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800616a:	460b      	mov	r3, r1
 800616c:	18db      	adds	r3, r3, r3
 800616e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006170:	4613      	mov	r3, r2
 8006172:	eb42 0303 	adc.w	r3, r2, r3
 8006176:	657b      	str	r3, [r7, #84]	@ 0x54
 8006178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800617c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006180:	f7fa fd02 	bl	8000b88 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b61      	ldr	r3, [pc, #388]	@ (8006310 <UART_SetConfig+0x2d4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	011c      	lsls	r4, r3, #4
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800619c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061ac:	415b      	adcs	r3, r3
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061b4:	4641      	mov	r1, r8
 80061b6:	eb12 0a01 	adds.w	sl, r2, r1
 80061ba:	4649      	mov	r1, r9
 80061bc:	eb43 0b01 	adc.w	fp, r3, r1
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d4:	4692      	mov	sl, r2
 80061d6:	469b      	mov	fp, r3
 80061d8:	4643      	mov	r3, r8
 80061da:	eb1a 0303 	adds.w	r3, sl, r3
 80061de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e2:	464b      	mov	r3, r9
 80061e4:	eb4b 0303 	adc.w	r3, fp, r3
 80061e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006200:	460b      	mov	r3, r1
 8006202:	18db      	adds	r3, r3, r3
 8006204:	643b      	str	r3, [r7, #64]	@ 0x40
 8006206:	4613      	mov	r3, r2
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	647b      	str	r3, [r7, #68]	@ 0x44
 800620e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006216:	f7fa fcb7 	bl	8000b88 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4611      	mov	r1, r2
 8006220:	4b3b      	ldr	r3, [pc, #236]	@ (8006310 <UART_SetConfig+0x2d4>)
 8006222:	fba3 2301 	umull	r2, r3, r3, r1
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2264      	movs	r2, #100	@ 0x64
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	1acb      	subs	r3, r1, r3
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006236:	4b36      	ldr	r3, [pc, #216]	@ (8006310 <UART_SetConfig+0x2d4>)
 8006238:	fba3 2302 	umull	r2, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006244:	441c      	add	r4, r3
 8006246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006260:	415b      	adcs	r3, r3
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006268:	4641      	mov	r1, r8
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6339      	str	r1, [r7, #48]	@ 0x30
 800626e:	4649      	mov	r1, r9
 8006270:	414b      	adcs	r3, r1
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006280:	4659      	mov	r1, fp
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628a:	4651      	mov	r1, sl
 800628c:	00ca      	lsls	r2, r1, #3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	4603      	mov	r3, r0
 8006294:	4642      	mov	r2, r8
 8006296:	189b      	adds	r3, r3, r2
 8006298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800629c:	464b      	mov	r3, r9
 800629e:	460a      	mov	r2, r1
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062d2:	f7fa fc59 	bl	8000b88 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <UART_SetConfig+0x2d4>)
 80062dc:	fba3 1302 	umull	r1, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	2164      	movs	r1, #100	@ 0x64
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	3332      	adds	r3, #50	@ 0x32
 80062ee:	4a08      	ldr	r2, [pc, #32]	@ (8006310 <UART_SetConfig+0x2d4>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f003 0207 	and.w	r2, r3, #7
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4422      	add	r2, r4
 8006302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006304:	e106      	b.n	8006514 <UART_SetConfig+0x4d8>
 8006306:	bf00      	nop
 8006308:	40011000 	.word	0x40011000
 800630c:	40011400 	.word	0x40011400
 8006310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006318:	2200      	movs	r2, #0
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800631e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	1891      	adds	r1, r2, r2
 800632c:	6239      	str	r1, [r7, #32]
 800632e:	415b      	adcs	r3, r3
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
 8006332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006336:	4641      	mov	r1, r8
 8006338:	1854      	adds	r4, r2, r1
 800633a:	4649      	mov	r1, r9
 800633c:	eb43 0501 	adc.w	r5, r3, r1
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	00eb      	lsls	r3, r5, #3
 800634a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634e:	00e2      	lsls	r2, r4, #3
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4643      	mov	r3, r8
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800635c:	464b      	mov	r3, r9
 800635e:	eb45 0303 	adc.w	r3, r5, r3
 8006362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006382:	4629      	mov	r1, r5
 8006384:	008b      	lsls	r3, r1, #2
 8006386:	4621      	mov	r1, r4
 8006388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638c:	4621      	mov	r1, r4
 800638e:	008a      	lsls	r2, r1, #2
 8006390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006394:	f7fa fbf8 	bl	8000b88 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4b60      	ldr	r3, [pc, #384]	@ (8006520 <UART_SetConfig+0x4e4>)
 800639e:	fba3 2302 	umull	r2, r3, r3, r2
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	011c      	lsls	r4, r3, #4
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	1891      	adds	r1, r2, r2
 80063be:	61b9      	str	r1, [r7, #24]
 80063c0:	415b      	adcs	r3, r3
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c8:	4641      	mov	r1, r8
 80063ca:	1851      	adds	r1, r2, r1
 80063cc:	6139      	str	r1, [r7, #16]
 80063ce:	4649      	mov	r1, r9
 80063d0:	414b      	adcs	r3, r1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e0:	4659      	mov	r1, fp
 80063e2:	00cb      	lsls	r3, r1, #3
 80063e4:	4651      	mov	r1, sl
 80063e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ea:	4651      	mov	r1, sl
 80063ec:	00ca      	lsls	r2, r1, #3
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	4642      	mov	r2, r8
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063fc:	464b      	mov	r3, r9
 80063fe:	460a      	mov	r2, r1
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006432:	f7fa fba9 	bl	8000b88 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4611      	mov	r1, r2
 800643c:	4b38      	ldr	r3, [pc, #224]	@ (8006520 <UART_SetConfig+0x4e4>)
 800643e:	fba3 2301 	umull	r2, r3, r3, r1
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	2264      	movs	r2, #100	@ 0x64
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	1acb      	subs	r3, r1, r3
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	3332      	adds	r3, #50	@ 0x32
 8006450:	4a33      	ldr	r2, [pc, #204]	@ (8006520 <UART_SetConfig+0x4e4>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800645c:	441c      	add	r4, r3
 800645e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006462:	2200      	movs	r2, #0
 8006464:	673b      	str	r3, [r7, #112]	@ 0x70
 8006466:	677a      	str	r2, [r7, #116]	@ 0x74
 8006468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	415b      	adcs	r3, r3
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647c:	4641      	mov	r1, r8
 800647e:	1851      	adds	r1, r2, r1
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	4649      	mov	r1, r9
 8006484:	414b      	adcs	r3, r1
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006494:	4659      	mov	r1, fp
 8006496:	00cb      	lsls	r3, r1, #3
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649e:	4651      	mov	r1, sl
 80064a0:	00ca      	lsls	r2, r1, #3
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	4642      	mov	r2, r8
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ae:	464b      	mov	r3, r9
 80064b0:	460a      	mov	r2, r1
 80064b2:	eb42 0303 	adc.w	r3, r2, r3
 80064b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064d0:	4649      	mov	r1, r9
 80064d2:	008b      	lsls	r3, r1, #2
 80064d4:	4641      	mov	r1, r8
 80064d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064da:	4641      	mov	r1, r8
 80064dc:	008a      	lsls	r2, r1, #2
 80064de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064e2:	f7fa fb51 	bl	8000b88 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <UART_SetConfig+0x4e4>)
 80064ec:	fba3 1302 	umull	r1, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2164      	movs	r1, #100	@ 0x64
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	3332      	adds	r3, #50	@ 0x32
 80064fe:	4a08      	ldr	r2, [pc, #32]	@ (8006520 <UART_SetConfig+0x4e4>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f003 020f 	and.w	r2, r3, #15
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4422      	add	r2, r4
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006520:	51eb851f 	.word	0x51eb851f

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	@ (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	@ (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	@ (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	@ (8006578 <__libc_init_array+0x44>)
 8006548:	f000 f896 	bl	8006678 <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	080066c4 	.word	0x080066c4
 8006570:	080066c4 	.word	0x080066c4
 8006574:	080066c4 	.word	0x080066c4
 8006578:	080066c8 	.word	0x080066c8

0800657c <fmax>:
 800657c:	b508      	push	{r3, lr}
 800657e:	ed2d 8b04 	vpush	{d8-d9}
 8006582:	eeb0 8a40 	vmov.f32	s16, s0
 8006586:	eef0 8a60 	vmov.f32	s17, s1
 800658a:	eeb0 9a41 	vmov.f32	s18, s2
 800658e:	eef0 9a61 	vmov.f32	s19, s3
 8006592:	f000 f847 	bl	8006624 <__fpclassifyd>
 8006596:	b950      	cbnz	r0, 80065ae <fmax+0x32>
 8006598:	eeb0 8a49 	vmov.f32	s16, s18
 800659c:	eef0 8a69 	vmov.f32	s17, s19
 80065a0:	eeb0 0a48 	vmov.f32	s0, s16
 80065a4:	eef0 0a68 	vmov.f32	s1, s17
 80065a8:	ecbd 8b04 	vpop	{d8-d9}
 80065ac:	bd08      	pop	{r3, pc}
 80065ae:	eeb0 0a49 	vmov.f32	s0, s18
 80065b2:	eef0 0a69 	vmov.f32	s1, s19
 80065b6:	f000 f835 	bl	8006624 <__fpclassifyd>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0f0      	beq.n	80065a0 <fmax+0x24>
 80065be:	ec53 2b19 	vmov	r2, r3, d9
 80065c2:	ec51 0b18 	vmov	r0, r1, d8
 80065c6:	f7fa fa5d 	bl	8000a84 <__aeabi_dcmpgt>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d0e4      	beq.n	8006598 <fmax+0x1c>
 80065ce:	e7e7      	b.n	80065a0 <fmax+0x24>

080065d0 <fmin>:
 80065d0:	b508      	push	{r3, lr}
 80065d2:	ed2d 8b04 	vpush	{d8-d9}
 80065d6:	eeb0 8a40 	vmov.f32	s16, s0
 80065da:	eef0 8a60 	vmov.f32	s17, s1
 80065de:	eeb0 9a41 	vmov.f32	s18, s2
 80065e2:	eef0 9a61 	vmov.f32	s19, s3
 80065e6:	f000 f81d 	bl	8006624 <__fpclassifyd>
 80065ea:	b950      	cbnz	r0, 8006602 <fmin+0x32>
 80065ec:	eeb0 8a49 	vmov.f32	s16, s18
 80065f0:	eef0 8a69 	vmov.f32	s17, s19
 80065f4:	eeb0 0a48 	vmov.f32	s0, s16
 80065f8:	eef0 0a68 	vmov.f32	s1, s17
 80065fc:	ecbd 8b04 	vpop	{d8-d9}
 8006600:	bd08      	pop	{r3, pc}
 8006602:	eeb0 0a49 	vmov.f32	s0, s18
 8006606:	eef0 0a69 	vmov.f32	s1, s19
 800660a:	f000 f80b 	bl	8006624 <__fpclassifyd>
 800660e:	2800      	cmp	r0, #0
 8006610:	d0f0      	beq.n	80065f4 <fmin+0x24>
 8006612:	ec53 2b19 	vmov	r2, r3, d9
 8006616:	ec51 0b18 	vmov	r0, r1, d8
 800661a:	f7fa fa15 	bl	8000a48 <__aeabi_dcmplt>
 800661e:	2800      	cmp	r0, #0
 8006620:	d0e4      	beq.n	80065ec <fmin+0x1c>
 8006622:	e7e7      	b.n	80065f4 <fmin+0x24>

08006624 <__fpclassifyd>:
 8006624:	ec51 0b10 	vmov	r0, r1, d0
 8006628:	b510      	push	{r4, lr}
 800662a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800662e:	460b      	mov	r3, r1
 8006630:	d019      	beq.n	8006666 <__fpclassifyd+0x42>
 8006632:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8006636:	490e      	ldr	r1, [pc, #56]	@ (8006670 <__fpclassifyd+0x4c>)
 8006638:	428a      	cmp	r2, r1
 800663a:	d90e      	bls.n	800665a <__fpclassifyd+0x36>
 800663c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8006640:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8006644:	428a      	cmp	r2, r1
 8006646:	d908      	bls.n	800665a <__fpclassifyd+0x36>
 8006648:	4a0a      	ldr	r2, [pc, #40]	@ (8006674 <__fpclassifyd+0x50>)
 800664a:	4213      	tst	r3, r2
 800664c:	d007      	beq.n	800665e <__fpclassifyd+0x3a>
 800664e:	4294      	cmp	r4, r2
 8006650:	d107      	bne.n	8006662 <__fpclassifyd+0x3e>
 8006652:	fab0 f080 	clz	r0, r0
 8006656:	0940      	lsrs	r0, r0, #5
 8006658:	bd10      	pop	{r4, pc}
 800665a:	2004      	movs	r0, #4
 800665c:	e7fc      	b.n	8006658 <__fpclassifyd+0x34>
 800665e:	2003      	movs	r0, #3
 8006660:	e7fa      	b.n	8006658 <__fpclassifyd+0x34>
 8006662:	2000      	movs	r0, #0
 8006664:	e7f8      	b.n	8006658 <__fpclassifyd+0x34>
 8006666:	2800      	cmp	r0, #0
 8006668:	d1ee      	bne.n	8006648 <__fpclassifyd+0x24>
 800666a:	2002      	movs	r0, #2
 800666c:	e7f4      	b.n	8006658 <__fpclassifyd+0x34>
 800666e:	bf00      	nop
 8006670:	7fdfffff 	.word	0x7fdfffff
 8006674:	7ff00000 	.word	0x7ff00000

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
