
drone_main_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004338  08004338  00005338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004364  08004364  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800436c  0800436c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004374  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08004380  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004380  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d647  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f65  00000000  00000000  00013683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000155e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b7  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016550  00000000  00000000  00016c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfee  00000000  00000000  0002d177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2f0  00000000  00000000  0003b165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000c9498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004320 	.word	0x08004320

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004320 	.word	0x08004320

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_uldivmod>:
 8000918:	b953      	cbnz	r3, 8000930 <__aeabi_uldivmod+0x18>
 800091a:	b94a      	cbnz	r2, 8000930 <__aeabi_uldivmod+0x18>
 800091c:	2900      	cmp	r1, #0
 800091e:	bf08      	it	eq
 8000920:	2800      	cmpeq	r0, #0
 8000922:	bf1c      	itt	ne
 8000924:	f04f 31ff 	movne.w	r1, #4294967295
 8000928:	f04f 30ff 	movne.w	r0, #4294967295
 800092c:	f000 b96a 	b.w	8000c04 <__aeabi_idiv0>
 8000930:	f1ad 0c08 	sub.w	ip, sp, #8
 8000934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000938:	f000 f806 	bl	8000948 <__udivmoddi4>
 800093c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr

08000948 <__udivmoddi4>:
 8000948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	9d08      	ldr	r5, [sp, #32]
 800094e:	460c      	mov	r4, r1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d14e      	bne.n	80009f2 <__udivmoddi4+0xaa>
 8000954:	4694      	mov	ip, r2
 8000956:	458c      	cmp	ip, r1
 8000958:	4686      	mov	lr, r0
 800095a:	fab2 f282 	clz	r2, r2
 800095e:	d962      	bls.n	8000a26 <__udivmoddi4+0xde>
 8000960:	b14a      	cbz	r2, 8000976 <__udivmoddi4+0x2e>
 8000962:	f1c2 0320 	rsb	r3, r2, #32
 8000966:	4091      	lsls	r1, r2
 8000968:	fa20 f303 	lsr.w	r3, r0, r3
 800096c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000970:	4319      	orrs	r1, r3
 8000972:	fa00 fe02 	lsl.w	lr, r0, r2
 8000976:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097a:	fa1f f68c 	uxth.w	r6, ip
 800097e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000982:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000986:	fb07 1114 	mls	r1, r7, r4, r1
 800098a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098e:	fb04 f106 	mul.w	r1, r4, r6
 8000992:	4299      	cmp	r1, r3
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x64>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f104 30ff 	add.w	r0, r4, #4294967295
 800099e:	f080 8112 	bcs.w	8000bc6 <__udivmoddi4+0x27e>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 810f 	bls.w	8000bc6 <__udivmoddi4+0x27e>
 80009a8:	3c02      	subs	r4, #2
 80009aa:	4463      	add	r3, ip
 80009ac:	1a59      	subs	r1, r3, r1
 80009ae:	fa1f f38e 	uxth.w	r3, lr
 80009b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b6:	fb07 1110 	mls	r1, r7, r0, r1
 80009ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009be:	fb00 f606 	mul.w	r6, r0, r6
 80009c2:	429e      	cmp	r6, r3
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x94>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80009ce:	f080 80fc 	bcs.w	8000bca <__udivmoddi4+0x282>
 80009d2:	429e      	cmp	r6, r3
 80009d4:	f240 80f9 	bls.w	8000bca <__udivmoddi4+0x282>
 80009d8:	4463      	add	r3, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	1b9b      	subs	r3, r3, r6
 80009de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11d      	cbz	r5, 80009ee <__udivmoddi4+0xa6>
 80009e6:	40d3      	lsrs	r3, r2
 80009e8:	2200      	movs	r2, #0
 80009ea:	e9c5 3200 	strd	r3, r2, [r5]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d905      	bls.n	8000a02 <__udivmoddi4+0xba>
 80009f6:	b10d      	cbz	r5, 80009fc <__udivmoddi4+0xb4>
 80009f8:	e9c5 0100 	strd	r0, r1, [r5]
 80009fc:	2100      	movs	r1, #0
 80009fe:	4608      	mov	r0, r1
 8000a00:	e7f5      	b.n	80009ee <__udivmoddi4+0xa6>
 8000a02:	fab3 f183 	clz	r1, r3
 8000a06:	2900      	cmp	r1, #0
 8000a08:	d146      	bne.n	8000a98 <__udivmoddi4+0x150>
 8000a0a:	42a3      	cmp	r3, r4
 8000a0c:	d302      	bcc.n	8000a14 <__udivmoddi4+0xcc>
 8000a0e:	4290      	cmp	r0, r2
 8000a10:	f0c0 80f0 	bcc.w	8000bf4 <__udivmoddi4+0x2ac>
 8000a14:	1a86      	subs	r6, r0, r2
 8000a16:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d0e6      	beq.n	80009ee <__udivmoddi4+0xa6>
 8000a20:	e9c5 6300 	strd	r6, r3, [r5]
 8000a24:	e7e3      	b.n	80009ee <__udivmoddi4+0xa6>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x204>
 8000a2c:	eba1 040c 	sub.w	r4, r1, ip
 8000a30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a34:	fa1f f78c 	uxth.w	r7, ip
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a42:	fb08 4416 	mls	r4, r8, r6, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb07 f006 	mul.w	r0, r7, r6
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x11c>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x11a>
 8000a5c:	4298      	cmp	r0, r3
 8000a5e:	f200 80cd 	bhi.w	8000bfc <__udivmoddi4+0x2b4>
 8000a62:	4626      	mov	r6, r4
 8000a64:	1a1c      	subs	r4, r3, r0
 8000a66:	fa1f f38e 	uxth.w	r3, lr
 8000a6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb00 f707 	mul.w	r7, r0, r7
 8000a7a:	429f      	cmp	r7, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x148>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x146>
 8000a88:	429f      	cmp	r7, r3
 8000a8a:	f200 80b0 	bhi.w	8000bee <__udivmoddi4+0x2a6>
 8000a8e:	4620      	mov	r0, r4
 8000a90:	1bdb      	subs	r3, r3, r7
 8000a92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a96:	e7a5      	b.n	80009e4 <__udivmoddi4+0x9c>
 8000a98:	f1c1 0620 	rsb	r6, r1, #32
 8000a9c:	408b      	lsls	r3, r1
 8000a9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000aac:	ea43 030c 	orr.w	r3, r3, ip
 8000ab0:	40f4      	lsrs	r4, r6
 8000ab2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ab6:	0c38      	lsrs	r0, r7, #16
 8000ab8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000abc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ac8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000acc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad0:	45a1      	cmp	r9, r4
 8000ad2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x1a6>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ade:	f080 8084 	bcs.w	8000bea <__udivmoddi4+0x2a2>
 8000ae2:	45a1      	cmp	r9, r4
 8000ae4:	f240 8081 	bls.w	8000bea <__udivmoddi4+0x2a2>
 8000ae8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	eba4 0409 	sub.w	r4, r4, r9
 8000af2:	fa1f f983 	uxth.w	r9, r3
 8000af6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afa:	fb00 4413 	mls	r4, r0, r3, r4
 8000afe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d907      	bls.n	8000b1a <__udivmoddi4+0x1d2>
 8000b0a:	193c      	adds	r4, r7, r4
 8000b0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b10:	d267      	bcs.n	8000be2 <__udivmoddi4+0x29a>
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d965      	bls.n	8000be2 <__udivmoddi4+0x29a>
 8000b16:	3b02      	subs	r3, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000b22:	eba4 040c 	sub.w	r4, r4, ip
 8000b26:	429c      	cmp	r4, r3
 8000b28:	46ce      	mov	lr, r9
 8000b2a:	469c      	mov	ip, r3
 8000b2c:	d351      	bcc.n	8000bd2 <__udivmoddi4+0x28a>
 8000b2e:	d04e      	beq.n	8000bce <__udivmoddi4+0x286>
 8000b30:	b155      	cbz	r5, 8000b48 <__udivmoddi4+0x200>
 8000b32:	ebb8 030e 	subs.w	r3, r8, lr
 8000b36:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b3e:	40cb      	lsrs	r3, r1
 8000b40:	431e      	orrs	r6, r3
 8000b42:	40cc      	lsrs	r4, r1
 8000b44:	e9c5 6400 	strd	r6, r4, [r5]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	e750      	b.n	80009ee <__udivmoddi4+0xa6>
 8000b4c:	f1c2 0320 	rsb	r3, r2, #32
 8000b50:	fa20 f103 	lsr.w	r1, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	fa24 f303 	lsr.w	r3, r4, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b70:	fb08 3110 	mls	r1, r8, r0, r3
 8000b74:	0c23      	lsrs	r3, r4, #16
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f107 	mul.w	r1, r0, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x24c>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b8a:	d22c      	bcs.n	8000be6 <__udivmoddi4+0x29e>
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d92a      	bls.n	8000be6 <__udivmoddi4+0x29e>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb01 f307 	mul.w	r3, r1, r7
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x276>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bb4:	d213      	bcs.n	8000bde <__udivmoddi4+0x296>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d911      	bls.n	8000bde <__udivmoddi4+0x296>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	1ae4      	subs	r4, r4, r3
 8000bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc4:	e739      	b.n	8000a3a <__udivmoddi4+0xf2>
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	e6f0      	b.n	80009ac <__udivmoddi4+0x64>
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e706      	b.n	80009dc <__udivmoddi4+0x94>
 8000bce:	45c8      	cmp	r8, r9
 8000bd0:	d2ae      	bcs.n	8000b30 <__udivmoddi4+0x1e8>
 8000bd2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bd6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bda:	3801      	subs	r0, #1
 8000bdc:	e7a8      	b.n	8000b30 <__udivmoddi4+0x1e8>
 8000bde:	4631      	mov	r1, r6
 8000be0:	e7ed      	b.n	8000bbe <__udivmoddi4+0x276>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e799      	b.n	8000b1a <__udivmoddi4+0x1d2>
 8000be6:	4630      	mov	r0, r6
 8000be8:	e7d4      	b.n	8000b94 <__udivmoddi4+0x24c>
 8000bea:	46d6      	mov	lr, sl
 8000bec:	e77f      	b.n	8000aee <__udivmoddi4+0x1a6>
 8000bee:	4463      	add	r3, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e74d      	b.n	8000a90 <__udivmoddi4+0x148>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e70f      	b.n	8000a1c <__udivmoddi4+0xd4>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	e730      	b.n	8000a64 <__udivmoddi4+0x11c>
 8000c02:	bf00      	nop

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%

void motor_ArmESC(h_motor_t* h_motor) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f848 	bl	8000ca8 <motor_SetPower>
    HAL_Delay(3000);
 8000c18:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c1c:	f001 f8f6 	bl	8001e0c <HAL_Delay>

    motor_SetPower(h_motor, 7);
 8000c20:	2107      	movs	r1, #7
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f840 	bl	8000ca8 <motor_SetPower>
    HAL_Delay(2000);
 8000c28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c2c:	f001 f8ee 	bl	8001e0c <HAL_Delay>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    int neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fd4f 	bl	80006e4 <__aeabi_i2d>
 8000c46:	a316      	add	r3, pc, #88	@ (adr r3, 8000ca0 <percentageToMicrosecondsAtHighState+0x68>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f7ff face 	bl	80001ec <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <percentageToMicrosecondsAtHighState+0x60>)
 8000c5e:	f7ff fbf5 	bl	800044c <__adddf3>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fe2d 	bl	80008c8 <__aeabi_d2iz>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]
    return (int)((COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle);
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fd36 	bl	80006e4 <__aeabi_i2d>
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <percentageToMicrosecondsAtHighState+0x64>)
 8000c7e:	f7ff fab5 	bl	80001ec <__aeabi_dmul>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff fe1d 	bl	80008c8 <__aeabi_d2iz>
 8000c8e:	4603      	mov	r3, r0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40180000 	.word	0x40180000
 8000c9c:	40690000 	.word	0x40690000
 8000ca0:	47ae147b 	.word	0x47ae147b
 8000ca4:	3fa47ae1 	.word	0x3fa47ae1

08000ca8 <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int percentage) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f7ff ffc0 	bl	8000c38 <percentageToMicrosecondsAtHighState>
 8000cb8:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <motor_SetPower+0x26>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ccc:	e018      	b.n	8000d00 <motor_SetPower+0x58>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d105      	bne.n	8000ce2 <motor_SetPower+0x3a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ce0:	e00e      	b.n	8000d00 <motor_SetPower+0x58>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d105      	bne.n	8000cf6 <motor_SetPower+0x4e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cf4:	e004      	b.n	8000d00 <motor_SetPower+0x58>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    h_motor->PercentageOfTotalPower = percentage;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <motor_Init>:

HAL_StatusTypeDef motor_Init(h_motor_t* h_motor) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f002 f882 	bl	8002e34 <HAL_TIM_PWM_Start>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
    // Initialisation spécifique à l'ESC
    motor_ArmESC(h_motor);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff67 	bl	8000c08 <motor_ArmESC>

    return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <read_IMU>:

int* read_IMU(){
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

}
 8000d48:	bf00      	nop
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d62:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 8000d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d72:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d76:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d92:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d96:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 8000d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dae:	eef0 7a66 	vmov.f32	s15, s13
}
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <update>:


float update(PID pid, float error){
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	ed2d 8b02 	vpush	{d8}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8000dd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000dd4:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 8000dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ddc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 8000de8:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 8000dec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000df0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000df4:	eeb0 1a47 	vmov.f32	s2, s14
 8000df8:	eef0 0a67 	vmov.f32	s1, s15
 8000dfc:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e00:	f7ff ffa8 	bl	8000d54 <integrate_error>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e0c:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 8000e14:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 8000e18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e1c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000e20:	eeb0 1a47 	vmov.f32	s2, s14
 8000e24:	eef0 0a67 	vmov.f32	s1, s15
 8000e28:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e2c:	f7ff ffac 	bl	8000d88 <differentiate_error>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e38:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 8000e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e54:	eeb0 0a67 	vmov.f32	s0, s15
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	ecbd 8b02 	vpop	{d8}
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr

08000e68 <read_RF>:


char* read_RF(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    
 8000e6c:	bf00      	nop
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 ff54 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f80c 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 f9b0 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e88:	f000 f984 	bl	8001194 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f934 	bl	80010f8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e90:	f000 f86e 	bl	8000f70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000e94:	f000 fa1c 	bl	80012d0 <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <main+0x20>

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b094      	sub	sp, #80	@ 0x50
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	2230      	movs	r2, #48	@ 0x30
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 f98e 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fa46 	bl	80023b4 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f2e:	f000 f9c9 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fca8 	bl	80028a4 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f5a:	f000 f9b3 	bl	80012c4 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	@ 0x58
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f90f 	bl	80041cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fae:	4b50      	ldr	r3, [pc, #320]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fb0:	4a50      	ldr	r2, [pc, #320]	@ (80010f4 <MX_TIM1_Init+0x184>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b49      	ldr	r3, [pc, #292]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fce:	4b48      	ldr	r3, [pc, #288]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b46      	ldr	r3, [pc, #280]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fda:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000fdc:	f001 fe82 	bl	8002ce4 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fe6:	f000 f96d 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483e      	ldr	r0, [pc, #248]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8000ff8:	f002 f97e 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001002:	f000 f95f 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001006:	483a      	ldr	r0, [pc, #232]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8001008:	f001 febb 	bl	8002d82 <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001012:	f000 f957 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800101e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001022:	4619      	mov	r1, r3
 8001024:	4832      	ldr	r0, [pc, #200]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8001026:	f002 fd39 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001030:	f000 f948 	bl	80012c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001034:	2360      	movs	r3, #96	@ 0x60
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	4825      	ldr	r0, [pc, #148]	@ (80010f0 <MX_TIM1_Init+0x180>)
 800105a:	f002 f88b 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001064:	f000 f92e 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	2204      	movs	r2, #4
 800106e:	4619      	mov	r1, r3
 8001070:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <MX_TIM1_Init+0x180>)
 8001072:	f002 f87f 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800107c:	f000 f922 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001084:	2208      	movs	r2, #8
 8001086:	4619      	mov	r1, r3
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <MX_TIM1_Init+0x180>)
 800108a:	f002 f873 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001094:	f000 f916 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	220c      	movs	r2, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <MX_TIM1_Init+0x180>)
 80010a2:	f002 f867 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80010ac:	f000 f90a 	bl	80012c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <MX_TIM1_Init+0x180>)
 80010d4:	f002 fd50 	bl	8003b78 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80010de:	f000 f8f1 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e2:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <MX_TIM1_Init+0x180>)
 80010e4:	f000 fd1e 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 80010e8:	bf00      	nop
 80010ea:	3758      	adds	r7, #88	@ 0x58
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000028 	.word	0x20000028
 80010f4:	40010000 	.word	0x40010000

080010f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_TIM3_Init+0x94>)
 8001116:	4a1e      	ldr	r2, [pc, #120]	@ (8001190 <MX_TIM3_Init+0x98>)
 8001118:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_TIM3_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_TIM3_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_TIM3_Init+0x94>)
 8001128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_TIM3_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_TIM3_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <MX_TIM3_Init+0x94>)
 800113c:	f001 fdd2 	bl	8002ce4 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f8bd 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_TIM3_Init+0x94>)
 8001158:	f002 f8ce 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001162:	f000 f8af 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <MX_TIM3_Init+0x94>)
 8001174:	f002 fc92 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800117e:	f000 f8a1 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000070 	.word	0x20000070
 8001190:	40000400 	.word	0x40000400

08001194 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_USART2_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011cc:	f002 fd3a 	bl	8003c44 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f875 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000b8 	.word	0x200000b8
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a25      	ldr	r2, [pc, #148]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	4812      	ldr	r0, [pc, #72]	@ (80012bc <MX_GPIO_Init+0xd4>)
 8001274:	f001 f884 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_GPIO_Init+0xd8>)
 8001290:	f000 fef2 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001294:	2320      	movs	r3, #32
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_GPIO_Init+0xd4>)
 80012ac:	f000 fee4 	bl	8002078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020800 	.word	0x40020800

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <Error_Handler+0x8>

080012d0 <init>:

char command[8];



void init(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

	flight_allowed = 1;
 80012d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001450 <init+0x180>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
	sample_time_us = 825;
 80012da:	4b5e      	ldr	r3, [pc, #376]	@ (8001454 <init+0x184>)
 80012dc:	f240 3239 	movw	r2, #825	@ 0x339
 80012e0:	601a      	str	r2, [r3, #0]

	heightPID.sample_time = sample_time_us/1000000;
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <init+0x184>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001458 <init+0x188>)
 80012e8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ec:	1492      	asrs	r2, r2, #18
 80012ee:	17db      	asrs	r3, r3, #31
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	4b58      	ldr	r3, [pc, #352]	@ (800145c <init+0x18c>)
 80012fc:	edc3 7a05 	vstr	s15, [r3, #20]
	pitchPID.sample_time = sample_time_us/1000000;
 8001300:	4b54      	ldr	r3, [pc, #336]	@ (8001454 <init+0x184>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a54      	ldr	r2, [pc, #336]	@ (8001458 <init+0x188>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	1492      	asrs	r2, r2, #18
 800130c:	17db      	asrs	r3, r3, #31
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	4b51      	ldr	r3, [pc, #324]	@ (8001460 <init+0x190>)
 800131a:	edc3 7a05 	vstr	s15, [r3, #20]
	rollPID.sample_time = sample_time_us/1000000;
 800131e:	4b4d      	ldr	r3, [pc, #308]	@ (8001454 <init+0x184>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a4d      	ldr	r2, [pc, #308]	@ (8001458 <init+0x188>)
 8001324:	fb82 1203 	smull	r1, r2, r2, r3
 8001328:	1492      	asrs	r2, r2, #18
 800132a:	17db      	asrs	r3, r3, #31
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	4b4b      	ldr	r3, [pc, #300]	@ (8001464 <init+0x194>)
 8001338:	edc3 7a05 	vstr	s15, [r3, #20]
	yawPID.sample_time = sample_time_us/1000000;
 800133c:	4b45      	ldr	r3, [pc, #276]	@ (8001454 <init+0x184>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a45      	ldr	r2, [pc, #276]	@ (8001458 <init+0x188>)
 8001342:	fb82 1203 	smull	r1, r2, r2, r3
 8001346:	1492      	asrs	r2, r2, #18
 8001348:	17db      	asrs	r3, r3, #31
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	4b44      	ldr	r3, [pc, #272]	@ (8001468 <init+0x198>)
 8001356:	edc3 7a05 	vstr	s15, [r3, #20]


	time_to_reach_1m = 5; // seconds
 800135a:	4b44      	ldr	r3, [pc, #272]	@ (800146c <init+0x19c>)
 800135c:	2205      	movs	r2, #5
 800135e:	601a      	str	r2, [r3, #0]
	time_to_make_full_rotation = 5; // seconds
 8001360:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <init+0x1a0>)
 8001362:	2205      	movs	r2, #5
 8001364:	601a      	str	r2, [r3, #0]

	height_step = sample_time_us/time_to_reach_1m;
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <init+0x184>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <init+0x19c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	4b3e      	ldr	r3, [pc, #248]	@ (8001474 <init+0x1a4>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
	yaw_step = 360*sample_time_us/time_to_make_full_rotation;
 8001380:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <init+0x184>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001388:	fb03 f202 	mul.w	r2, r3, r2
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <init+0x1a0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	fb92 f3f3 	sdiv	r3, r2, r3
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <init+0x1a8>)
 800139e:	edc3 7a00 	vstr	s15, [r3]

	// Timer clock is 84 MHz

	htim3.Instance->PSC = 84-1;
 80013a2:	4b36      	ldr	r3, [pc, #216]	@ (800147c <init+0x1ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2253      	movs	r2, #83	@ 0x53
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
	htim3.Instance->CNT = sample_time_us;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <init+0x184>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b33      	ldr	r3, [pc, #204]	@ (800147c <init+0x1ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	625a      	str	r2, [r3, #36]	@ 0x24


	MOTOR_FRONT_RIGHT.htim = &htim1;
 80013b4:	4b32      	ldr	r3, [pc, #200]	@ (8001480 <init+0x1b0>)
 80013b6:	4a33      	ldr	r2, [pc, #204]	@ (8001484 <init+0x1b4>)
 80013b8:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_RIGHT.channel = TIM_CHANNEL_1;
 80013ba:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <init+0x1b0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_RIGHT)== HAL_ERROR){
 80013c0:	482f      	ldr	r0, [pc, #188]	@ (8001480 <init+0x1b0>)
 80013c2:	f7ff fca9 	bl	8000d18 <motor_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d102      	bne.n	80013d2 <init+0x102>
    	flight_allowed = 0;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <init+0x180>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
    }


	MOTOR_FRONT_LEFT.htim = &htim1;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <init+0x1b8>)
 80013d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001484 <init+0x1b4>)
 80013d6:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_LEFT.channel = TIM_CHANNEL_2;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <init+0x1b8>)
 80013da:	2204      	movs	r2, #4
 80013dc:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_LEFT)== HAL_ERROR){
 80013de:	482a      	ldr	r0, [pc, #168]	@ (8001488 <init+0x1b8>)
 80013e0:	f7ff fc9a 	bl	8000d18 <motor_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <init+0x120>
        	flight_allowed = 0;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <init+0x180>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
        }
	MOTOR_BACK_RIGHT.htim = &htim1;
 80013f0:	4b26      	ldr	r3, [pc, #152]	@ (800148c <init+0x1bc>)
 80013f2:	4a24      	ldr	r2, [pc, #144]	@ (8001484 <init+0x1b4>)
 80013f4:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_RIGHT.channel = TIM_CHANNEL_3;
 80013f6:	4b25      	ldr	r3, [pc, #148]	@ (800148c <init+0x1bc>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_RIGHT)== HAL_ERROR){
 80013fc:	4823      	ldr	r0, [pc, #140]	@ (800148c <init+0x1bc>)
 80013fe:	f7ff fc8b 	bl	8000d18 <motor_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d102      	bne.n	800140e <init+0x13e>
	    	flight_allowed = 0;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <init+0x180>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	    }

	MOTOR_BACK_LEFT.htim = &htim1;
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <init+0x1c0>)
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <init+0x1b4>)
 8001412:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_LEFT.channel = TIM_CHANNEL_4;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <init+0x1c0>)
 8001416:	220c      	movs	r2, #12
 8001418:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_LEFT)== HAL_ERROR){
 800141a:	481d      	ldr	r0, [pc, #116]	@ (8001490 <init+0x1c0>)
 800141c:	f7ff fc7c 	bl	8000d18 <motor_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <init+0x15c>
	    	flight_allowed = 0;
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <init+0x180>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]



	

	if (flight_allowed == 1){
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <init+0x180>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <init+0x170>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	2120      	movs	r1, #32
 8001438:	4816      	ldr	r0, [pc, #88]	@ (8001494 <init+0x1c4>)
 800143a:	f000 ffa1 	bl	8002380 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	}

}
 800143e:	e004      	b.n	800144a <init+0x17a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2120      	movs	r1, #32
 8001444:	4813      	ldr	r0, [pc, #76]	@ (8001494 <init+0x1c4>)
 8001446:	f000 ff9b 	bl	8002380 <HAL_GPIO_WritePin>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001f4 	.word	0x200001f4
 8001454:	20000100 	.word	0x20000100
 8001458:	431bde83 	.word	0x431bde83
 800145c:	20000164 	.word	0x20000164
 8001460:	2000017c 	.word	0x2000017c
 8001464:	20000194 	.word	0x20000194
 8001468:	200001ac 	.word	0x200001ac
 800146c:	20000104 	.word	0x20000104
 8001470:	2000010c 	.word	0x2000010c
 8001474:	20000108 	.word	0x20000108
 8001478:	20000110 	.word	0x20000110
 800147c:	20000070 	.word	0x20000070
 8001480:	200001c4 	.word	0x200001c4
 8001484:	20000028 	.word	0x20000028
 8001488:	200001d0 	.word	0x200001d0
 800148c:	200001dc 	.word	0x200001dc
 8001490:	200001e8 	.word	0x200001e8
 8001494:	40020000 	.word	0x40020000

08001498 <control_step>:


void control_step(){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b08b      	sub	sp, #44	@ 0x2c
 800149c:	af02      	add	r7, sp, #8

		if (flight_allowed==1){
 800149e:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <control_step+0x204>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	f040 8296 	bne.w	80019d4 <control_step+0x53c>
			//--------- Reading Sensors ------------//
			read_IMU();
 80014a8:	f7ff fc4c 	bl	8000d44 <read_IMU>

			float pitch_speed;
			float yaw_speed;
			float roll_speed;

			pitch.measurement = pitch.previous_measurement + pitch_speed*sample_time_us/1000000;
 80014ac:	4b7c      	ldr	r3, [pc, #496]	@ (80016a0 <control_step+0x208>)
 80014ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80014b2:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <control_step+0x20c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014be:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014c6:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 80016a8 <control_step+0x210>
 80014ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <control_step+0x208>)
 80014d4:	edc3 7a01 	vstr	s15, [r3, #4]
			pitch.previous_measurement = pitch.measurement;
 80014d8:	4b71      	ldr	r3, [pc, #452]	@ (80016a0 <control_step+0x208>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a70      	ldr	r2, [pc, #448]	@ (80016a0 <control_step+0x208>)
 80014de:	6113      	str	r3, [r2, #16]

			roll.measurement = roll.previous_measurement + roll_speed*sample_time_us/1000000;
 80014e0:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <control_step+0x214>)
 80014e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80014e6:	4b6f      	ldr	r3, [pc, #444]	@ (80016a4 <control_step+0x20c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014fa:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 80016a8 <control_step+0x210>
 80014fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	4b69      	ldr	r3, [pc, #420]	@ (80016ac <control_step+0x214>)
 8001508:	edc3 7a01 	vstr	s15, [r3, #4]
			roll.previous_measurement = roll.measurement;
 800150c:	4b67      	ldr	r3, [pc, #412]	@ (80016ac <control_step+0x214>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a66      	ldr	r2, [pc, #408]	@ (80016ac <control_step+0x214>)
 8001512:	6113      	str	r3, [r2, #16]

			yaw.measurement = yaw.previous_measurement + yaw_speed*sample_time_us/1000000;
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <control_step+0x218>)
 8001516:	ed93 7a04 	vldr	s14, [r3, #16]
 800151a:	4b62      	ldr	r3, [pc, #392]	@ (80016a4 <control_step+0x20c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001526:	edd7 7a05 	vldr	s15, [r7, #20]
 800152a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800152e:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 80016a8 <control_step+0x210>
 8001532:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <control_step+0x218>)
 800153c:	edc3 7a01 	vstr	s15, [r3, #4]
			yaw.previous_measurement = yaw.measurement;
 8001540:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <control_step+0x218>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a5a      	ldr	r2, [pc, #360]	@ (80016b0 <control_step+0x218>)
 8001546:	6113      	str	r3, [r2, #16]


			
			read_ultrasound();
 8001548:	f000 fbbc 	bl	8001cc4 <read_ultrasound>

			//--------- Reading Commands ------------//
			
			read_RF();
 800154c:	f7ff fc8c 	bl	8000e68 <read_RF>

			if (command[0]=='$'){// Verifying that the command was entirely received
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <control_step+0x21c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b24      	cmp	r3, #36	@ 0x24
 8001556:	d10f      	bne.n	8001578 <control_step+0xe0>
				motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8001558:	2100      	movs	r1, #0
 800155a:	4857      	ldr	r0, [pc, #348]	@ (80016b8 <control_step+0x220>)
 800155c:	f7ff fba4 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	4856      	ldr	r0, [pc, #344]	@ (80016bc <control_step+0x224>)
 8001564:	f7ff fba0 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	4855      	ldr	r0, [pc, #340]	@ (80016c0 <control_step+0x228>)
 800156c:	f7ff fb9c 	bl	8000ca8 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8001570:	2100      	movs	r1, #0
 8001572:	4854      	ldr	r0, [pc, #336]	@ (80016c4 <control_step+0x22c>)
 8001574:	f7ff fb98 	bl	8000ca8 <motor_SetPower>
			}
				// Height command extraction
				if (command[1]=="1" && command[2]=="0"){
 8001578:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <control_step+0x21c>)
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	461a      	mov	r2, r3
 800157e:	4b52      	ldr	r3, [pc, #328]	@ (80016c8 <control_step+0x230>)
 8001580:	429a      	cmp	r2, r3
 8001582:	d111      	bne.n	80015a8 <control_step+0x110>
 8001584:	4b4b      	ldr	r3, [pc, #300]	@ (80016b4 <control_step+0x21c>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	4b50      	ldr	r3, [pc, #320]	@ (80016cc <control_step+0x234>)
 800158c:	429a      	cmp	r2, r3
 800158e:	d10b      	bne.n	80015a8 <control_step+0x110>
					height.command+=height_step;
 8001590:	4b4f      	ldr	r3, [pc, #316]	@ (80016d0 <control_step+0x238>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	4b4f      	ldr	r3, [pc, #316]	@ (80016d4 <control_step+0x23c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	4b4b      	ldr	r3, [pc, #300]	@ (80016d0 <control_step+0x238>)
 80015a2:	edc3 7a00 	vstr	s15, [r3]
 80015a6:	e016      	b.n	80015d6 <control_step+0x13e>
				}
				else if (command[2]=="1" && command[1]=="0"){
 80015a8:	4b42      	ldr	r3, [pc, #264]	@ (80016b4 <control_step+0x21c>)
 80015aa:	789b      	ldrb	r3, [r3, #2]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <control_step+0x230>)
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d110      	bne.n	80015d6 <control_step+0x13e>
 80015b4:	4b3f      	ldr	r3, [pc, #252]	@ (80016b4 <control_step+0x21c>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <control_step+0x234>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	d10a      	bne.n	80015d6 <control_step+0x13e>
					height.command-= height_step;
 80015c0:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <control_step+0x238>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <control_step+0x23c>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d0:	4b3f      	ldr	r3, [pc, #252]	@ (80016d0 <control_step+0x238>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
				}


				// Pitch command extraction
				if (command[3]=="1" && command[4]=="0"){
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <control_step+0x21c>)
 80015d8:	78db      	ldrb	r3, [r3, #3]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <control_step+0x230>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10a      	bne.n	80015f8 <control_step+0x160>
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <control_step+0x21c>)
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b38      	ldr	r3, [pc, #224]	@ (80016cc <control_step+0x234>)
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d104      	bne.n	80015f8 <control_step+0x160>
					pitch.command=1;
 80015ee:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <control_step+0x208>)
 80015f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e013      	b.n	8001620 <control_step+0x188>
				}
				else if (command[4]=="1" && command[3]=="0"){
 80015f8:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <control_step+0x21c>)
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <control_step+0x230>)
 8001600:	429a      	cmp	r2, r3
 8001602:	d109      	bne.n	8001618 <control_step+0x180>
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <control_step+0x21c>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	461a      	mov	r2, r3
 800160a:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <control_step+0x234>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d103      	bne.n	8001618 <control_step+0x180>
					pitch.command=-1;
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <control_step+0x208>)
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <control_step+0x240>)
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e003      	b.n	8001620 <control_step+0x188>
				}

				else{
					pitch.command=0;
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <control_step+0x208>)
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
				}


				// Roll command extraction
				if (command[5]=="1" && command[6]=="0"){
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <control_step+0x21c>)
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	461a      	mov	r2, r3
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <control_step+0x230>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d10a      	bne.n	8001642 <control_step+0x1aa>
 800162c:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <control_step+0x21c>)
 800162e:	799b      	ldrb	r3, [r3, #6]
 8001630:	461a      	mov	r2, r3
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <control_step+0x234>)
 8001634:	429a      	cmp	r2, r3
 8001636:	d104      	bne.n	8001642 <control_step+0x1aa>
					roll.command=1;
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <control_step+0x214>)
 800163a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e013      	b.n	800166a <control_step+0x1d2>
				}
				else if (command[6]=="1" && command[5]=="0"){
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <control_step+0x21c>)
 8001644:	799b      	ldrb	r3, [r3, #6]
 8001646:	461a      	mov	r2, r3
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <control_step+0x230>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d109      	bne.n	8001662 <control_step+0x1ca>
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <control_step+0x21c>)
 8001650:	795b      	ldrb	r3, [r3, #5]
 8001652:	461a      	mov	r2, r3
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <control_step+0x234>)
 8001656:	429a      	cmp	r2, r3
 8001658:	d103      	bne.n	8001662 <control_step+0x1ca>
					roll.command=-1;
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <control_step+0x214>)
 800165c:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <control_step+0x240>)
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e003      	b.n	800166a <control_step+0x1d2>
				}

				else{
					roll.command=0;
 8001662:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <control_step+0x214>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
				}

				// Yaw command extraction
				if (command[7]=="1" && command[8]=="0"){
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <control_step+0x21c>)
 800166c:	79db      	ldrb	r3, [r3, #7]
 800166e:	461a      	mov	r2, r3
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <control_step+0x230>)
 8001672:	429a      	cmp	r2, r3
 8001674:	d134      	bne.n	80016e0 <control_step+0x248>
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <control_step+0x21c>)
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	461a      	mov	r2, r3
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <control_step+0x234>)
 800167e:	429a      	cmp	r2, r3
 8001680:	d12e      	bne.n	80016e0 <control_step+0x248>
					yaw.command+=yaw_step;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <control_step+0x218>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <control_step+0x244>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <control_step+0x218>)
 8001694:	edc3 7a00 	vstr	s15, [r3]
 8001698:	e039      	b.n	800170e <control_step+0x276>
 800169a:	bf00      	nop
 800169c:	200001f4 	.word	0x200001f4
 80016a0:	20000128 	.word	0x20000128
 80016a4:	20000100 	.word	0x20000100
 80016a8:	49742400 	.word	0x49742400
 80016ac:	20000150 	.word	0x20000150
 80016b0:	2000013c 	.word	0x2000013c
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	200001c4 	.word	0x200001c4
 80016bc:	200001d0 	.word	0x200001d0
 80016c0:	200001dc 	.word	0x200001dc
 80016c4:	200001e8 	.word	0x200001e8
 80016c8:	08004338 	.word	0x08004338
 80016cc:	0800433c 	.word	0x0800433c
 80016d0:	20000114 	.word	0x20000114
 80016d4:	20000108 	.word	0x20000108
 80016d8:	bf800000 	.word	0xbf800000
 80016dc:	20000110 	.word	0x20000110
				}
				else if (command[8]=="1" && command[7]=="0"){
 80016e0:	4bcb      	ldr	r3, [pc, #812]	@ (8001a10 <control_step+0x578>)
 80016e2:	7a1b      	ldrb	r3, [r3, #8]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4bcb      	ldr	r3, [pc, #812]	@ (8001a14 <control_step+0x57c>)
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d110      	bne.n	800170e <control_step+0x276>
 80016ec:	4bc8      	ldr	r3, [pc, #800]	@ (8001a10 <control_step+0x578>)
 80016ee:	79db      	ldrb	r3, [r3, #7]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4bc9      	ldr	r3, [pc, #804]	@ (8001a18 <control_step+0x580>)
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10a      	bne.n	800170e <control_step+0x276>
					yaw.command-= yaw_step;
 80016f8:	4bc8      	ldr	r3, [pc, #800]	@ (8001a1c <control_step+0x584>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4bc8      	ldr	r3, [pc, #800]	@ (8001a20 <control_step+0x588>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	4bc4      	ldr	r3, [pc, #784]	@ (8001a1c <control_step+0x584>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
				}

				if (strcmp(command, "$11111111")==0){
 800170e:	49c5      	ldr	r1, [pc, #788]	@ (8001a24 <control_step+0x58c>)
 8001710:	48bf      	ldr	r0, [pc, #764]	@ (8001a10 <control_step+0x578>)
 8001712:	f7fe fd61 	bl	80001d8 <strcmp>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <control_step+0x28a>
					flight_allowed = 0;
 800171c:	4bc2      	ldr	r3, [pc, #776]	@ (8001a28 <control_step+0x590>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
			}

			//--------- Processing data ------------//
			// Calculating control inputs

			height.error = height.measurement - height.command;
 8001722:	4bc2      	ldr	r3, [pc, #776]	@ (8001a2c <control_step+0x594>)
 8001724:	ed93 7a01 	vldr	s14, [r3, #4]
 8001728:	4bc0      	ldr	r3, [pc, #768]	@ (8001a2c <control_step+0x594>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001732:	4bbe      	ldr	r3, [pc, #760]	@ (8001a2c <control_step+0x594>)
 8001734:	edc3 7a03 	vstr	s15, [r3, #12]
			pitch.error = pitch.measurement - pitch.command;
 8001738:	4bbd      	ldr	r3, [pc, #756]	@ (8001a30 <control_step+0x598>)
 800173a:	ed93 7a01 	vldr	s14, [r3, #4]
 800173e:	4bbc      	ldr	r3, [pc, #752]	@ (8001a30 <control_step+0x598>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	4bb9      	ldr	r3, [pc, #740]	@ (8001a30 <control_step+0x598>)
 800174a:	edc3 7a03 	vstr	s15, [r3, #12]
			yaw.error = yaw.measurement - yaw.command;
 800174e:	4bb3      	ldr	r3, [pc, #716]	@ (8001a1c <control_step+0x584>)
 8001750:	ed93 7a01 	vldr	s14, [r3, #4]
 8001754:	4bb1      	ldr	r3, [pc, #708]	@ (8001a1c <control_step+0x584>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175e:	4baf      	ldr	r3, [pc, #700]	@ (8001a1c <control_step+0x584>)
 8001760:	edc3 7a03 	vstr	s15, [r3, #12]
			roll.error = roll.measurement - roll.command;
 8001764:	4bb3      	ldr	r3, [pc, #716]	@ (8001a34 <control_step+0x59c>)
 8001766:	ed93 7a01 	vldr	s14, [r3, #4]
 800176a:	4bb2      	ldr	r3, [pc, #712]	@ (8001a34 <control_step+0x59c>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001774:	4baf      	ldr	r3, [pc, #700]	@ (8001a34 <control_step+0x59c>)
 8001776:	edc3 7a03 	vstr	s15, [r3, #12]

			// Calculating control outputs

			height.u = update(heightPID,height.error);
 800177a:	4bac      	ldr	r3, [pc, #688]	@ (8001a2c <control_step+0x594>)
 800177c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001780:	4bad      	ldr	r3, [pc, #692]	@ (8001a38 <control_step+0x5a0>)
 8001782:	466c      	mov	r4, sp
 8001784:	f103 0210 	add.w	r2, r3, #16
 8001788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800178c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f7ff fb13 	bl	8000dc0 <update>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	4ba3      	ldr	r3, [pc, #652]	@ (8001a2c <control_step+0x594>)
 80017a0:	edc3 7a02 	vstr	s15, [r3, #8]
			pitch.u = update(pitchPID, pitch.error);
 80017a4:	4ba2      	ldr	r3, [pc, #648]	@ (8001a30 <control_step+0x598>)
 80017a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017aa:	4ba4      	ldr	r3, [pc, #656]	@ (8001a3c <control_step+0x5a4>)
 80017ac:	466c      	mov	r4, sp
 80017ae:	f103 0210 	add.w	r2, r3, #16
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80017ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f7ff fafe 	bl	8000dc0 <update>
 80017c4:	eef0 7a40 	vmov.f32	s15, s0
 80017c8:	4b99      	ldr	r3, [pc, #612]	@ (8001a30 <control_step+0x598>)
 80017ca:	edc3 7a02 	vstr	s15, [r3, #8]
			yaw.u = update(yawPID, yaw.error);
 80017ce:	4b93      	ldr	r3, [pc, #588]	@ (8001a1c <control_step+0x584>)
 80017d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a40 <control_step+0x5a8>)
 80017d6:	466c      	mov	r4, sp
 80017d8:	f103 0210 	add.w	r2, r3, #16
 80017dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80017e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	f7ff fae9 	bl	8000dc0 <update>
 80017ee:	eef0 7a40 	vmov.f32	s15, s0
 80017f2:	4b8a      	ldr	r3, [pc, #552]	@ (8001a1c <control_step+0x584>)
 80017f4:	edc3 7a02 	vstr	s15, [r3, #8]
			roll.u = update(rollPID,roll.error);
 80017f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a34 <control_step+0x59c>)
 80017fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80017fe:	4b91      	ldr	r3, [pc, #580]	@ (8001a44 <control_step+0x5ac>)
 8001800:	466c      	mov	r4, sp
 8001802:	f103 0210 	add.w	r2, r3, #16
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e884 0003 	stmia.w	r4, {r0, r1}
 800180e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fad4 	bl	8000dc0 <update>
 8001818:	eef0 7a40 	vmov.f32	s15, s0
 800181c:	4b85      	ldr	r3, [pc, #532]	@ (8001a34 <control_step+0x59c>)
 800181e:	edc3 7a02 	vstr	s15, [r3, #8]

			//--------- Changing motors behaviour ------------//

			// motor mixing algorithm
			int FR_percentage = fmin(100, fmax(0, height.u+yaw.u+pitch.u+roll.u));
 8001822:	4b82      	ldr	r3, [pc, #520]	@ (8001a2c <control_step+0x594>)
 8001824:	ed93 7a02 	vldr	s14, [r3, #8]
 8001828:	4b7c      	ldr	r3, [pc, #496]	@ (8001a1c <control_step+0x584>)
 800182a:	edd3 7a02 	vldr	s15, [r3, #8]
 800182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001832:	4b7f      	ldr	r3, [pc, #508]	@ (8001a30 <control_step+0x598>)
 8001834:	edd3 7a02 	vldr	s15, [r3, #8]
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a34 <control_step+0x59c>)
 800183e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe ff5d 	bl	8000708 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 8001a00 <control_step+0x568>
 8001856:	ec43 2b10 	vmov	d0, r2, r3
 800185a:	f002 fce3 	bl	8004224 <fmax>
 800185e:	eeb0 7a40 	vmov.f32	s14, s0
 8001862:	eef0 7a60 	vmov.f32	s15, s1
 8001866:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8001a08 <control_step+0x570>
 800186a:	eeb0 0a47 	vmov.f32	s0, s14
 800186e:	eef0 0a67 	vmov.f32	s1, s15
 8001872:	f002 fd01 	bl	8004278 <fmin>
 8001876:	ec53 2b10 	vmov	r2, r3, d0
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f823 	bl	80008c8 <__aeabi_d2iz>
 8001882:	4603      	mov	r3, r0
 8001884:	613b      	str	r3, [r7, #16]
			int FL_percentage = fmin(100, fmax(0, height.u-yaw.u+pitch.u-roll.u));
 8001886:	4b69      	ldr	r3, [pc, #420]	@ (8001a2c <control_step+0x594>)
 8001888:	ed93 7a02 	vldr	s14, [r3, #8]
 800188c:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <control_step+0x584>)
 800188e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001896:	4b66      	ldr	r3, [pc, #408]	@ (8001a30 <control_step+0x598>)
 8001898:	edd3 7a02 	vldr	s15, [r3, #8]
 800189c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a0:	4b64      	ldr	r3, [pc, #400]	@ (8001a34 <control_step+0x59c>)
 80018a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	ee17 0a90 	vmov	r0, s15
 80018ae:	f7fe ff2b 	bl	8000708 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8001a00 <control_step+0x568>
 80018ba:	ec43 2b10 	vmov	d0, r2, r3
 80018be:	f002 fcb1 	bl	8004224 <fmax>
 80018c2:	eeb0 7a40 	vmov.f32	s14, s0
 80018c6:	eef0 7a60 	vmov.f32	s15, s1
 80018ca:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001a08 <control_step+0x570>
 80018ce:	eeb0 0a47 	vmov.f32	s0, s14
 80018d2:	eef0 0a67 	vmov.f32	s1, s15
 80018d6:	f002 fccf 	bl	8004278 <fmin>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7fe fff1 	bl	80008c8 <__aeabi_d2iz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	60fb      	str	r3, [r7, #12]
			int BR_percentage = fmin(100, fmax(0, height.u-yaw.u-pitch.u+roll.u));
 80018ea:	4b50      	ldr	r3, [pc, #320]	@ (8001a2c <control_step+0x594>)
 80018ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <control_step+0x584>)
 80018f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001a30 <control_step+0x598>)
 80018fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <control_step+0x59c>)
 8001906:	edd3 7a02 	vldr	s15, [r3, #8]
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190e:	ee17 0a90 	vmov	r0, s15
 8001912:	f7fe fef9 	bl	8000708 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8001a00 <control_step+0x568>
 800191e:	ec43 2b10 	vmov	d0, r2, r3
 8001922:	f002 fc7f 	bl	8004224 <fmax>
 8001926:	eeb0 7a40 	vmov.f32	s14, s0
 800192a:	eef0 7a60 	vmov.f32	s15, s1
 800192e:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8001a08 <control_step+0x570>
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	eef0 0a67 	vmov.f32	s1, s15
 800193a:	f002 fc9d 	bl	8004278 <fmin>
 800193e:	ec53 2b10 	vmov	r2, r3, d0
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7fe ffbf 	bl	80008c8 <__aeabi_d2iz>
 800194a:	4603      	mov	r3, r0
 800194c:	60bb      	str	r3, [r7, #8]
			int BL_percentage = fmin(100, fmax(0, height.u+yaw.u-pitch.u-roll.u));
 800194e:	4b37      	ldr	r3, [pc, #220]	@ (8001a2c <control_step+0x594>)
 8001950:	ed93 7a02 	vldr	s14, [r3, #8]
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <control_step+0x584>)
 8001956:	edd3 7a02 	vldr	s15, [r3, #8]
 800195a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <control_step+0x598>)
 8001960:	edd3 7a02 	vldr	s15, [r3, #8]
 8001964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <control_step+0x59c>)
 800196a:	edd3 7a02 	vldr	s15, [r3, #8]
 800196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001972:	ee17 0a90 	vmov	r0, s15
 8001976:	f7fe fec7 	bl	8000708 <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8001a00 <control_step+0x568>
 8001982:	ec43 2b10 	vmov	d0, r2, r3
 8001986:	f002 fc4d 	bl	8004224 <fmax>
 800198a:	eeb0 7a40 	vmov.f32	s14, s0
 800198e:	eef0 7a60 	vmov.f32	s15, s1
 8001992:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001a08 <control_step+0x570>
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	f002 fc6b 	bl	8004278 <fmin>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7fe ff8d 	bl	80008c8 <__aeabi_d2iz>
 80019ae:	4603      	mov	r3, r0
 80019b0:	607b      	str	r3, [r7, #4]

			motor_SetPower(&MOTOR_FRONT_RIGHT, FR_percentage);
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	4824      	ldr	r0, [pc, #144]	@ (8001a48 <control_step+0x5b0>)
 80019b6:	f7ff f977 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, FL_percentage);
 80019ba:	68f9      	ldr	r1, [r7, #12]
 80019bc:	4823      	ldr	r0, [pc, #140]	@ (8001a4c <control_step+0x5b4>)
 80019be:	f7ff f973 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, BR_percentage);
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	4822      	ldr	r0, [pc, #136]	@ (8001a50 <control_step+0x5b8>)
 80019c6:	f7ff f96f 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, BL_percentage);
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4821      	ldr	r0, [pc, #132]	@ (8001a54 <control_step+0x5bc>)
 80019ce:	f7ff f96b 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
		}

}
 80019d2:	e00f      	b.n	80019f4 <control_step+0x55c>
			motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 80019d4:	2100      	movs	r1, #0
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <control_step+0x5b0>)
 80019d8:	f7ff f966 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	481b      	ldr	r0, [pc, #108]	@ (8001a4c <control_step+0x5b4>)
 80019e0:	f7ff f962 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	481a      	ldr	r0, [pc, #104]	@ (8001a50 <control_step+0x5b8>)
 80019e8:	f7ff f95e 	bl	8000ca8 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
 80019ec:	2100      	movs	r1, #0
 80019ee:	4819      	ldr	r0, [pc, #100]	@ (8001a54 <control_step+0x5bc>)
 80019f0:	f7ff f95a 	bl	8000ca8 <motor_SetPower>
}
 80019f4:	bf00      	nop
 80019f6:	3724      	adds	r7, #36	@ 0x24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	f3af 8000 	nop.w
	...
 8001a0c:	40590000 	.word	0x40590000
 8001a10:	200001f8 	.word	0x200001f8
 8001a14:	08004338 	.word	0x08004338
 8001a18:	0800433c 	.word	0x0800433c
 8001a1c:	2000013c 	.word	0x2000013c
 8001a20:	20000110 	.word	0x20000110
 8001a24:	08004340 	.word	0x08004340
 8001a28:	200001f4 	.word	0x200001f4
 8001a2c:	20000114 	.word	0x20000114
 8001a30:	20000128 	.word	0x20000128
 8001a34:	20000150 	.word	0x20000150
 8001a38:	20000164 	.word	0x20000164
 8001a3c:	2000017c 	.word	0x2000017c
 8001a40:	200001ac 	.word	0x200001ac
 8001a44:	20000194 	.word	0x20000194
 8001a48:	200001c4 	.word	0x200001c4
 8001a4c:	200001d0 	.word	0x200001d0
 8001a50:	200001dc 	.word	0x200001dc
 8001a54:	200001e8 	.word	0x200001e8

08001a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a96:	2007      	movs	r0, #7
 8001a98:	f000 faac 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a18      	ldr	r2, [pc, #96]	@ (8001b18 <HAL_TIM_Base_MspInit+0x70>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ad6:	e01a      	b.n	8001b0e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_TIM_Base_MspInit+0x78>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d115      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <HAL_TIM_Base_MspInit+0x74>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	201d      	movs	r0, #29
 8001b04:	f000 fa81 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b08:	201d      	movs	r0, #29
 8001b0a:	f000 fa9a 	bl	8002042 <HAL_NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40000400 	.word	0x40000400

08001b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11e      	bne.n	8001b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <HAL_TIM_MspPostInit+0x70>)
 8001b80:	f000 fa7a 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <HAL_UART_MspInit+0x84>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12b      	bne.n	8001c12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c02:	2307      	movs	r3, #7
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <HAL_UART_MspInit+0x8c>)
 8001c0e:	f000 fa33 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f000 f8a5 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <TIM3_IRQHandler+0x14>)
 8001c8e:	f001 f981 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  control_step();
 8001c92:	f7ff fc01 	bl	8001498 <control_step>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000070 	.word	0x20000070

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <read_ultrasound>:


int* read_ultrasound(){
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
    
 8001cc8:	bf00      	nop
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd8:	f7ff ffe2 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	@ (8001d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f002 fa6b 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff f8b7 	bl	8000e78 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d18:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8001d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d20:	20000204 	.word	0x20000204

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 f94f 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fe7c 	bl	8001a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f967 	bl	800205e <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 f92f 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000200 	.word	0x20000200

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000200 	.word	0x20000200

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	@ (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e159      	b.n	8002348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8148 	bne.w	8002342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a2 	beq.w	8002342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x202>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x1fe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a47      	ldr	r2, [pc, #284]	@ (8002370 <HAL_GPIO_Init+0x2f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x1fa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_GPIO_Init+0x2fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x1f6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a45      	ldr	r2, [pc, #276]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x1f2>
 8002266:	2304      	movs	r3, #4
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226a:	2307      	movs	r3, #7
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x204>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_GPIO_Init+0x304>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_GPIO_Init+0x304>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f aea2 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e267      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d075      	beq.n	80024be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023d2:	4b88      	ldr	r3, [pc, #544]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d00c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b85      	ldr	r3, [pc, #532]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d112      	bne.n	8002410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f6:	d10b      	bne.n	8002410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	4b7e      	ldr	r3, [pc, #504]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05b      	beq.n	80024bc <HAL_RCC_OscConfig+0x108>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d157      	bne.n	80024bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e242      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002418:	d106      	bne.n	8002428 <HAL_RCC_OscConfig+0x74>
 800241a:	4b76      	ldr	r3, [pc, #472]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a75      	ldr	r2, [pc, #468]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xb0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x98>
 8002432:	4b70      	ldr	r3, [pc, #448]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6f      	ldr	r2, [pc, #444]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b6d      	ldr	r3, [pc, #436]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6c      	ldr	r2, [pc, #432]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xb0>
 800244c:	4b69      	ldr	r3, [pc, #420]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a68      	ldr	r2, [pc, #416]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a65      	ldr	r2, [pc, #404]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff fcc2 	bl	8001df4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fcbe 	bl	8001df4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e207      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xc0>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fcae 	bl	8001df4 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fcaa 	bl	8001df4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1f3      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b51      	ldr	r3, [pc, #324]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0xe8>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b47      	ldr	r3, [pc, #284]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b44      	ldr	r3, [pc, #272]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b41      	ldr	r3, [pc, #260]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x152>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1c7      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4937      	ldr	r1, [pc, #220]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e03a      	b.n	8002592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b34      	ldr	r3, [pc, #208]	@ (80025f8 <HAL_RCC_OscConfig+0x244>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff fc63 	bl	8001df4 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7ff fc5f 	bl	8001df4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e1a8      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4925      	ldr	r1, [pc, #148]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_RCC_OscConfig+0x244>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fc42 	bl	8001df4 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fc3e 	bl	8001df4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e187      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d036      	beq.n	800260c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d016      	beq.n	80025d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <HAL_RCC_OscConfig+0x248>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7ff fc22 	bl	8001df4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff fc1e 	bl	8001df4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e167      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x200>
 80025d2:	e01b      	b.n	800260c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_RCC_OscConfig+0x248>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff fc0b 	bl	8001df4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	e00e      	b.n	8002600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7ff fc07 	bl	8001df4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d907      	bls.n	8002600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e150      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470000 	.word	0x42470000
 80025fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	4b88      	ldr	r3, [pc, #544]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ea      	bne.n	80025e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8097 	beq.w	8002748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b81      	ldr	r3, [pc, #516]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b7d      	ldr	r3, [pc, #500]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a7c      	ldr	r2, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b7a      	ldr	r3, [pc, #488]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b77      	ldr	r3, [pc, #476]	@ (8002828 <HAL_RCC_OscConfig+0x474>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b74      	ldr	r3, [pc, #464]	@ (8002828 <HAL_RCC_OscConfig+0x474>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a73      	ldr	r2, [pc, #460]	@ (8002828 <HAL_RCC_OscConfig+0x474>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fbc7 	bl	8001df4 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fbc3 	bl	8001df4 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e10c      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <HAL_RCC_OscConfig+0x474>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x2ea>
 8002690:	4b64      	ldr	r3, [pc, #400]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a63      	ldr	r2, [pc, #396]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	e01c      	b.n	80026d8 <HAL_RCC_OscConfig+0x324>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x30c>
 80026a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0x324>
 80026c0:	4b58      	ldr	r3, [pc, #352]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a57      	ldr	r2, [pc, #348]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80026cc:	4b55      	ldr	r3, [pc, #340]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	4a54      	ldr	r2, [pc, #336]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80026d2:	f023 0304 	bic.w	r3, r3, #4
 80026d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d015      	beq.n	800270c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7ff fb88 	bl	8001df4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7ff fb84 	bl	8001df4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0cb      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fe:	4b49      	ldr	r3, [pc, #292]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0ee      	beq.n	80026e8 <HAL_RCC_OscConfig+0x334>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7ff fb72 	bl	8001df4 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7ff fb6e 	bl	8001df4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0b5      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272a:	4b3e      	ldr	r3, [pc, #248]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ee      	bne.n	8002714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	4a38      	ldr	r2, [pc, #224]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80a1 	beq.w	8002894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002752:	4b34      	ldr	r3, [pc, #208]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d05c      	beq.n	8002818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d141      	bne.n	80027ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <HAL_RCC_OscConfig+0x478>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fb42 	bl	8001df4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7ff fb3e 	bl	8001df4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e087      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	041b      	lsls	r3, r3, #16
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	491b      	ldr	r1, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_RCC_OscConfig+0x478>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fb17 	bl	8001df4 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7ff fb13 	bl	8001df4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e05c      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x416>
 80027e8:	e054      	b.n	8002894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_RCC_OscConfig+0x478>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff fb00 	bl	8001df4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7ff fafc 	bl	8001df4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e045      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_RCC_OscConfig+0x470>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x444>
 8002816:	e03d      	b.n	8002894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e038      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000
 800282c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x4ec>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d028      	beq.n	8002890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d121      	bne.n	8002890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d11a      	bne.n	8002890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	4293      	cmp	r3, r2
 800286a:	d111      	bne.n	8002890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800

080028a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0cc      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b68      	ldr	r3, [pc, #416]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d90c      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b65      	ldr	r3, [pc, #404]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4b59      	ldr	r3, [pc, #356]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a58      	ldr	r2, [pc, #352]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002910:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a52      	ldr	r2, [pc, #328]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800291a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b50      	ldr	r3, [pc, #320]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	494d      	ldr	r1, [pc, #308]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d044      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b47      	ldr	r3, [pc, #284]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d119      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d003      	beq.n	8002962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295e:	2b03      	cmp	r3, #3
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e067      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002982:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4934      	ldr	r1, [pc, #208]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002994:	f7ff fa2e 	bl	8001df4 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7ff fa2a 	bl	8001df4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e04f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 020c 	and.w	r2, r3, #12
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1eb      	bne.n	800299c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c4:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d20c      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4916      	ldr	r1, [pc, #88]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	490e      	ldr	r1, [pc, #56]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2a:	f000 f821 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490a      	ldr	r1, [pc, #40]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f98e 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023c00 	.word	0x40023c00
 8002a60:	40023800 	.word	0x40023800
 8002a64:	0800434c 	.word	0x0800434c
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a74:	b094      	sub	sp, #80	@ 0x50
 8002a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a88:	4b79      	ldr	r3, [pc, #484]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d00d      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	f200 80e1 	bhi.w	8002c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002aa2:	e0db      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aa8:	e0db      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aaa:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aae:	e0d8      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aba:	4b6d      	ldr	r3, [pc, #436]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d063      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ada:	2300      	movs	r3, #0
 8002adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	f04f 0000 	mov.w	r0, #0
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	0159      	lsls	r1, r3, #5
 8002af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af4:	0150      	lsls	r0, r2, #5
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4621      	mov	r1, r4
 8002afc:	1a51      	subs	r1, r2, r1
 8002afe:	6139      	str	r1, [r7, #16]
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb63 0301 	sbc.w	r3, r3, r1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b14:	4659      	mov	r1, fp
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	4651      	mov	r1, sl
 8002b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1e:	4651      	mov	r1, sl
 8002b20:	018a      	lsls	r2, r1, #6
 8002b22:	4651      	mov	r1, sl
 8002b24:	ebb2 0801 	subs.w	r8, r2, r1
 8002b28:	4659      	mov	r1, fp
 8002b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b42:	4690      	mov	r8, r2
 8002b44:	4699      	mov	r9, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	eb18 0303 	adds.w	r3, r8, r3
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	462b      	mov	r3, r5
 8002b50:	eb49 0303 	adc.w	r3, r9, r3
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b62:	4629      	mov	r1, r5
 8002b64:	024b      	lsls	r3, r1, #9
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	024a      	lsls	r2, r1, #9
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b80:	f7fd feca 	bl	8000918 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b8c:	e058      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	2200      	movs	r2, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	4611      	mov	r1, r2
 8002b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b9e:	623b      	str	r3, [r7, #32]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	0159      	lsls	r1, r3, #5
 8002bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bba:	0150      	lsls	r0, r2, #5
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be0:	ebb2 040a 	subs.w	r4, r2, sl
 8002be4:	eb63 050b 	sbc.w	r5, r3, fp
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	00eb      	lsls	r3, r5, #3
 8002bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf6:	00e2      	lsls	r2, r4, #3
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	4643      	mov	r3, r8
 8002bfe:	18e3      	adds	r3, r4, r3
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	464b      	mov	r3, r9
 8002c04:	eb45 0303 	adc.w	r3, r5, r3
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c16:	4629      	mov	r1, r5
 8002c18:	028b      	lsls	r3, r1, #10
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c20:	4621      	mov	r1, r4
 8002c22:	028a      	lsls	r2, r1, #10
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	61fa      	str	r2, [r7, #28]
 8002c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c34:	f7fd fe70 	bl	8000918 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3750      	adds	r7, #80	@ 0x50
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	007a1200 	.word	0x007a1200

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	@ (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	0800435c 	.word	0x0800435c

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc0:	f7ff ffdc 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0b5b      	lsrs	r3, r3, #13
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4903      	ldr	r1, [pc, #12]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	0800435c 	.word	0x0800435c

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e041      	b.n	8002d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fecc 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fbe2 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e041      	b.n	8002e18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f839 	bl	8002e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 fb93 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start+0x24>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e022      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d109      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x3e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e015      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x58>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e008      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e068      	b.n	8002f78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0x82>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb4:	e013      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x92>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed4:	e003      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fdb2 	bl	8003a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	@ (8002f80 <HAL_TIM_PWM_Start+0x14c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_TIM_PWM_Start+0x14c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f18:	d013      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <HAL_TIM_PWM_Start+0x150>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_TIM_PWM_Start+0x154>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <HAL_TIM_PWM_Start+0x158>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x10e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	@ (8002f90 <HAL_TIM_PWM_Start+0x15c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d111      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d010      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	e007      	b.n	8002f76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40014000 	.word	0x40014000

08002f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0202 	mvn.w	r2, #2
 8002fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa65 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa57 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa68 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0204 	mvn.w	r2, #4
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa3f 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa31 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fa42 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa19 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa0b 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa1c 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d020      	beq.n	80030dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0210 	mvn.w	r2, #16
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2208      	movs	r2, #8
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9f3 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9e5 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f9f6 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9c3 	bl	8003486 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fd86 	bl	8003c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f9c7 	bl	80034d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0220 	mvn.w	r2, #32
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fd58 	bl	8003c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0ae      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	f200 809f 	bhi.w	80032e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031a2:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031dd 	.word	0x080031dd
 80031ac:	080032e1 	.word	0x080032e1
 80031b0:	080032e1 	.word	0x080032e1
 80031b4:	080032e1 	.word	0x080032e1
 80031b8:	0800321d 	.word	0x0800321d
 80031bc:	080032e1 	.word	0x080032e1
 80031c0:	080032e1 	.word	0x080032e1
 80031c4:	080032e1 	.word	0x080032e1
 80031c8:	0800325f 	.word	0x0800325f
 80031cc:	080032e1 	.word	0x080032e1
 80031d0:	080032e1 	.word	0x080032e1
 80031d4:	080032e1 	.word	0x080032e1
 80031d8:	0800329f 	.word	0x0800329f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fa0e 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6999      	ldr	r1, [r3, #24]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	619a      	str	r2, [r3, #24]
      break;
 800321a:	e064      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fa54 	bl	80036d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6999      	ldr	r1, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	619a      	str	r2, [r3, #24]
      break;
 800325c:	e043      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa9f 	bl	80037a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0208 	orr.w	r2, r2, #8
 8003278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0204 	bic.w	r2, r2, #4
 8003288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	61da      	str	r2, [r3, #28]
      break;
 800329c:	e023      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fae9 	bl	800387c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	021a      	lsls	r2, r3, #8
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	61da      	str	r2, [r3, #28]
      break;
 80032de:	e002      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	75fb      	strb	r3, [r7, #23]
      break;
 80032e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e0b4      	b.n	800347e <HAL_TIM_ConfigClockSource+0x186>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800333a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800334c:	d03e      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xd4>
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003352:	f200 8087 	bhi.w	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335a:	f000 8086 	beq.w	800346a <HAL_TIM_ConfigClockSource+0x172>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003362:	d87f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b70      	cmp	r3, #112	@ 0x70
 8003366:	d01a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0xa6>
 8003368:	2b70      	cmp	r3, #112	@ 0x70
 800336a:	d87b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b60      	cmp	r3, #96	@ 0x60
 800336e:	d050      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x11a>
 8003370:	2b60      	cmp	r3, #96	@ 0x60
 8003372:	d877      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b50      	cmp	r3, #80	@ 0x50
 8003376:	d03c      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003378:	2b50      	cmp	r3, #80	@ 0x50
 800337a:	d873      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d058      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x13a>
 8003380:	2b40      	cmp	r3, #64	@ 0x40
 8003382:	d86f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b30      	cmp	r3, #48	@ 0x30
 8003386:	d064      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b30      	cmp	r3, #48	@ 0x30
 800338a:	d86b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d060      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d867      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d05a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	e062      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ae:	f000 fb2f 	bl	8003a10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
      break;
 80033ca:	e04f      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	f000 fb18 	bl	8003a10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e03c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 fa8c 	bl	800391c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2150      	movs	r1, #80	@ 0x50
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fae5 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003410:	e02c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	461a      	mov	r2, r3
 8003420:	f000 faab 	bl	800397a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2160      	movs	r1, #96	@ 0x60
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fad5 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003430:	e01c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	461a      	mov	r2, r3
 8003440:	f000 fa6c 	bl	800391c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2140      	movs	r1, #64	@ 0x40
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fac5 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003450:	e00c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 fabc 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003462:	e003      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e000      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800346a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3a      	ldr	r2, [pc, #232]	@ (80035e8 <TIM_Base_SetConfig+0xfc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00f      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d00b      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a37      	ldr	r2, [pc, #220]	@ (80035ec <TIM_Base_SetConfig+0x100>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a36      	ldr	r2, [pc, #216]	@ (80035f0 <TIM_Base_SetConfig+0x104>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a35      	ldr	r2, [pc, #212]	@ (80035f4 <TIM_Base_SetConfig+0x108>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2b      	ldr	r2, [pc, #172]	@ (80035e8 <TIM_Base_SetConfig+0xfc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01b      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003544:	d017      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <TIM_Base_SetConfig+0x100>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a27      	ldr	r2, [pc, #156]	@ (80035f0 <TIM_Base_SetConfig+0x104>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00f      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a26      	ldr	r2, [pc, #152]	@ (80035f4 <TIM_Base_SetConfig+0x108>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a25      	ldr	r2, [pc, #148]	@ (80035f8 <TIM_Base_SetConfig+0x10c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a24      	ldr	r2, [pc, #144]	@ (80035fc <TIM_Base_SetConfig+0x110>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a23      	ldr	r2, [pc, #140]	@ (8003600 <TIM_Base_SetConfig+0x114>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d108      	bne.n	8003588 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	@ (80035e8 <TIM_Base_SetConfig+0xfc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d103      	bne.n	80035bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]
  }
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 0201 	bic.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <TIM_OC1_SetConfig+0xc8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10c      	bne.n	800367a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0308 	bic.w	r3, r3, #8
 8003666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a13      	ldr	r2, [pc, #76]	@ (80036cc <TIM_OC1_SetConfig+0xc8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d111      	bne.n	80036a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40010000 	.word	0x40010000

080036d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 0210 	bic.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0320 	bic.w	r3, r3, #32
 800371a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <TIM_OC2_SetConfig+0xd4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10d      	bne.n	800374c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800374a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a15      	ldr	r2, [pc, #84]	@ (80037a4 <TIM_OC2_SetConfig+0xd4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d113      	bne.n	800377c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800375a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000

080037a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a14      	ldr	r2, [pc, #80]	@ (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000

0800387c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <TIM_OC4_SetConfig+0x9c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000

0800391c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0201 	bic.w	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 030a 	bic.w	r3, r3, #10
 8003958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397a:	b480      	push	{r7}
 800397c:	b087      	sub	sp, #28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f023 0210 	bic.w	r2, r3, #16
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	031b      	lsls	r3, r3, #12
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f043 0307 	orr.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	021a      	lsls	r2, r3, #8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2201      	movs	r2, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e050      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d013      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a18      	ldr	r2, [pc, #96]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a13      	ldr	r2, [pc, #76]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40014000 	.word	0x40014000

08003b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e03d      	b.n	8003c10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e042      	b.n	8003cdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd ff94 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	@ 0x24
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f82b 	bl	8003ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0c0      	sub	sp, #256	@ 0x100
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	68d9      	ldr	r1, [r3, #12]
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	ea40 0301 	orr.w	r3, r0, r1
 8003d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d3c:	f021 010c 	bic.w	r1, r1, #12
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	ea40 0301 	orr.w	r3, r0, r1
 8003d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb0 <UART_SetConfig+0x2cc>)
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d005      	beq.n	8003d84 <UART_SetConfig+0xa0>
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8003fb4 <UART_SetConfig+0x2d0>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d104      	bne.n	8003d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d84:	f7fe ff9a 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 8003d88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d8c:	e003      	b.n	8003d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d8e:	f7fe ff81 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8003d92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da0:	f040 810c 	bne.w	8003fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	1891      	adds	r1, r2, r2
 8003dbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dbe:	415b      	adcs	r3, r3
 8003dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	eb12 0801 	adds.w	r8, r2, r1
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb43 0901 	adc.w	r9, r3, r1
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de6:	4690      	mov	r8, r2
 8003de8:	4699      	mov	r9, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	eb18 0303 	adds.w	r3, r8, r3
 8003df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003df4:	462b      	mov	r3, r5
 8003df6:	eb49 0303 	adc.w	r3, r9, r3
 8003dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e12:	460b      	mov	r3, r1
 8003e14:	18db      	adds	r3, r3, r3
 8003e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e18:	4613      	mov	r3, r2
 8003e1a:	eb42 0303 	adc.w	r3, r2, r3
 8003e1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e28:	f7fc fd76 	bl	8000918 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4b61      	ldr	r3, [pc, #388]	@ (8003fb8 <UART_SetConfig+0x2d4>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	011c      	lsls	r4, r3, #4
 8003e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	1891      	adds	r1, r2, r2
 8003e52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e54:	415b      	adcs	r3, r3
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e62:	4649      	mov	r1, r9
 8003e64:	eb43 0b01 	adc.w	fp, r3, r1
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e7c:	4692      	mov	sl, r2
 8003e7e:	469b      	mov	fp, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	eb1a 0303 	adds.w	r3, sl, r3
 8003e86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	18db      	adds	r3, r3, r3
 8003eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eae:	4613      	mov	r3, r2
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ebe:	f7fc fd2b 	bl	8000918 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <UART_SetConfig+0x2d4>)
 8003eca:	fba3 2301 	umull	r2, r3, r3, r1
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2264      	movs	r2, #100	@ 0x64
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	1acb      	subs	r3, r1, r3
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ede:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <UART_SetConfig+0x2d4>)
 8003ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eec:	441c      	add	r4, r3
 8003eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f10:	4641      	mov	r1, r8
 8003f12:	1851      	adds	r1, r2, r1
 8003f14:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f16:	4649      	mov	r1, r9
 8003f18:	414b      	adcs	r3, r1
 8003f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f28:	4659      	mov	r1, fp
 8003f2a:	00cb      	lsls	r3, r1, #3
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f32:	4651      	mov	r1, sl
 8003f34:	00ca      	lsls	r2, r1, #3
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f44:	464b      	mov	r3, r9
 8003f46:	460a      	mov	r2, r1
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f64:	460b      	mov	r3, r1
 8003f66:	18db      	adds	r3, r3, r3
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f7a:	f7fc fccd 	bl	8000918 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <UART_SetConfig+0x2d4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	@ 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	3332      	adds	r3, #50	@ 0x32
 8003f96:	4a08      	ldr	r2, [pc, #32]	@ (8003fb8 <UART_SetConfig+0x2d4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 0207 	and.w	r2, r3, #7
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4422      	add	r2, r4
 8003faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fac:	e106      	b.n	80041bc <UART_SetConfig+0x4d8>
 8003fae:	bf00      	nop
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	40011400 	.word	0x40011400
 8003fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fce:	4642      	mov	r2, r8
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	1891      	adds	r1, r2, r2
 8003fd4:	6239      	str	r1, [r7, #32]
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fde:	4641      	mov	r1, r8
 8003fe0:	1854      	adds	r4, r2, r1
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	eb43 0501 	adc.w	r5, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	00eb      	lsls	r3, r5, #3
 8003ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff6:	00e2      	lsls	r2, r4, #3
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	4643      	mov	r3, r8
 8003ffe:	18e3      	adds	r3, r4, r3
 8004000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004004:	464b      	mov	r3, r9
 8004006:	eb45 0303 	adc.w	r3, r5, r3
 800400a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800401a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800402a:	4629      	mov	r1, r5
 800402c:	008b      	lsls	r3, r1, #2
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004034:	4621      	mov	r1, r4
 8004036:	008a      	lsls	r2, r1, #2
 8004038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800403c:	f7fc fc6c 	bl	8000918 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4b60      	ldr	r3, [pc, #384]	@ (80041c8 <UART_SetConfig+0x4e4>)
 8004046:	fba3 2302 	umull	r2, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	011c      	lsls	r4, r3, #4
 800404e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004058:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800405c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	1891      	adds	r1, r2, r2
 8004066:	61b9      	str	r1, [r7, #24]
 8004068:	415b      	adcs	r3, r3
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	4641      	mov	r1, r8
 8004072:	1851      	adds	r1, r2, r1
 8004074:	6139      	str	r1, [r7, #16]
 8004076:	4649      	mov	r1, r9
 8004078:	414b      	adcs	r3, r1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004088:	4659      	mov	r1, fp
 800408a:	00cb      	lsls	r3, r1, #3
 800408c:	4651      	mov	r1, sl
 800408e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004092:	4651      	mov	r1, sl
 8004094:	00ca      	lsls	r2, r1, #3
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	4603      	mov	r3, r0
 800409c:	4642      	mov	r2, r8
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040a4:	464b      	mov	r3, r9
 80040a6:	460a      	mov	r2, r1
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040c8:	4649      	mov	r1, r9
 80040ca:	008b      	lsls	r3, r1, #2
 80040cc:	4641      	mov	r1, r8
 80040ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d2:	4641      	mov	r1, r8
 80040d4:	008a      	lsls	r2, r1, #2
 80040d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040da:	f7fc fc1d 	bl	8000918 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	4b38      	ldr	r3, [pc, #224]	@ (80041c8 <UART_SetConfig+0x4e4>)
 80040e6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2264      	movs	r2, #100	@ 0x64
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	1acb      	subs	r3, r1, r3
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	3332      	adds	r3, #50	@ 0x32
 80040f8:	4a33      	ldr	r2, [pc, #204]	@ (80041c8 <UART_SetConfig+0x4e4>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	441c      	add	r4, r3
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	673b      	str	r3, [r7, #112]	@ 0x70
 800410e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004110:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	1891      	adds	r1, r2, r2
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	415b      	adcs	r3, r3
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004124:	4641      	mov	r1, r8
 8004126:	1851      	adds	r1, r2, r1
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800413c:	4659      	mov	r1, fp
 800413e:	00cb      	lsls	r3, r1, #3
 8004140:	4651      	mov	r1, sl
 8004142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004146:	4651      	mov	r1, sl
 8004148:	00ca      	lsls	r2, r1, #3
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	4603      	mov	r3, r0
 8004150:	4642      	mov	r2, r8
 8004152:	189b      	adds	r3, r3, r2
 8004154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004156:	464b      	mov	r3, r9
 8004158:	460a      	mov	r2, r1
 800415a:	eb42 0303 	adc.w	r3, r2, r3
 800415e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	663b      	str	r3, [r7, #96]	@ 0x60
 800416a:	667a      	str	r2, [r7, #100]	@ 0x64
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004178:	4649      	mov	r1, r9
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	4641      	mov	r1, r8
 800417e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004182:	4641      	mov	r1, r8
 8004184:	008a      	lsls	r2, r1, #2
 8004186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800418a:	f7fc fbc5 	bl	8000918 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <UART_SetConfig+0x4e4>)
 8004194:	fba3 1302 	umull	r1, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2164      	movs	r1, #100	@ 0x64
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	3332      	adds	r3, #50	@ 0x32
 80041a6:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <UART_SetConfig+0x4e4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4422      	add	r2, r4
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c8:	51eb851f 	.word	0x51eb851f

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	@ (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	@ (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f896 	bl	8004320 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	0800436c 	.word	0x0800436c
 8004218:	0800436c 	.word	0x0800436c
 800421c:	0800436c 	.word	0x0800436c
 8004220:	08004370 	.word	0x08004370

08004224 <fmax>:
 8004224:	b508      	push	{r3, lr}
 8004226:	ed2d 8b04 	vpush	{d8-d9}
 800422a:	eeb0 8a40 	vmov.f32	s16, s0
 800422e:	eef0 8a60 	vmov.f32	s17, s1
 8004232:	eeb0 9a41 	vmov.f32	s18, s2
 8004236:	eef0 9a61 	vmov.f32	s19, s3
 800423a:	f000 f847 	bl	80042cc <__fpclassifyd>
 800423e:	b950      	cbnz	r0, 8004256 <fmax+0x32>
 8004240:	eeb0 8a49 	vmov.f32	s16, s18
 8004244:	eef0 8a69 	vmov.f32	s17, s19
 8004248:	eeb0 0a48 	vmov.f32	s0, s16
 800424c:	eef0 0a68 	vmov.f32	s1, s17
 8004250:	ecbd 8b04 	vpop	{d8-d9}
 8004254:	bd08      	pop	{r3, pc}
 8004256:	eeb0 0a49 	vmov.f32	s0, s18
 800425a:	eef0 0a69 	vmov.f32	s1, s19
 800425e:	f000 f835 	bl	80042cc <__fpclassifyd>
 8004262:	2800      	cmp	r0, #0
 8004264:	d0f0      	beq.n	8004248 <fmax+0x24>
 8004266:	ec53 2b19 	vmov	r2, r3, d9
 800426a:	ec51 0b18 	vmov	r0, r1, d8
 800426e:	f7fc fb21 	bl	80008b4 <__aeabi_dcmpgt>
 8004272:	2800      	cmp	r0, #0
 8004274:	d0e4      	beq.n	8004240 <fmax+0x1c>
 8004276:	e7e7      	b.n	8004248 <fmax+0x24>

08004278 <fmin>:
 8004278:	b508      	push	{r3, lr}
 800427a:	ed2d 8b04 	vpush	{d8-d9}
 800427e:	eeb0 8a40 	vmov.f32	s16, s0
 8004282:	eef0 8a60 	vmov.f32	s17, s1
 8004286:	eeb0 9a41 	vmov.f32	s18, s2
 800428a:	eef0 9a61 	vmov.f32	s19, s3
 800428e:	f000 f81d 	bl	80042cc <__fpclassifyd>
 8004292:	b950      	cbnz	r0, 80042aa <fmin+0x32>
 8004294:	eeb0 8a49 	vmov.f32	s16, s18
 8004298:	eef0 8a69 	vmov.f32	s17, s19
 800429c:	eeb0 0a48 	vmov.f32	s0, s16
 80042a0:	eef0 0a68 	vmov.f32	s1, s17
 80042a4:	ecbd 8b04 	vpop	{d8-d9}
 80042a8:	bd08      	pop	{r3, pc}
 80042aa:	eeb0 0a49 	vmov.f32	s0, s18
 80042ae:	eef0 0a69 	vmov.f32	s1, s19
 80042b2:	f000 f80b 	bl	80042cc <__fpclassifyd>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d0f0      	beq.n	800429c <fmin+0x24>
 80042ba:	ec53 2b19 	vmov	r2, r3, d9
 80042be:	ec51 0b18 	vmov	r0, r1, d8
 80042c2:	f7fc fad9 	bl	8000878 <__aeabi_dcmplt>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d0e4      	beq.n	8004294 <fmin+0x1c>
 80042ca:	e7e7      	b.n	800429c <fmin+0x24>

080042cc <__fpclassifyd>:
 80042cc:	ec51 0b10 	vmov	r0, r1, d0
 80042d0:	b510      	push	{r4, lr}
 80042d2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80042d6:	460b      	mov	r3, r1
 80042d8:	d019      	beq.n	800430e <__fpclassifyd+0x42>
 80042da:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80042de:	490e      	ldr	r1, [pc, #56]	@ (8004318 <__fpclassifyd+0x4c>)
 80042e0:	428a      	cmp	r2, r1
 80042e2:	d90e      	bls.n	8004302 <__fpclassifyd+0x36>
 80042e4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80042e8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80042ec:	428a      	cmp	r2, r1
 80042ee:	d908      	bls.n	8004302 <__fpclassifyd+0x36>
 80042f0:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <__fpclassifyd+0x50>)
 80042f2:	4213      	tst	r3, r2
 80042f4:	d007      	beq.n	8004306 <__fpclassifyd+0x3a>
 80042f6:	4294      	cmp	r4, r2
 80042f8:	d107      	bne.n	800430a <__fpclassifyd+0x3e>
 80042fa:	fab0 f080 	clz	r0, r0
 80042fe:	0940      	lsrs	r0, r0, #5
 8004300:	bd10      	pop	{r4, pc}
 8004302:	2004      	movs	r0, #4
 8004304:	e7fc      	b.n	8004300 <__fpclassifyd+0x34>
 8004306:	2003      	movs	r0, #3
 8004308:	e7fa      	b.n	8004300 <__fpclassifyd+0x34>
 800430a:	2000      	movs	r0, #0
 800430c:	e7f8      	b.n	8004300 <__fpclassifyd+0x34>
 800430e:	2800      	cmp	r0, #0
 8004310:	d1ee      	bne.n	80042f0 <__fpclassifyd+0x24>
 8004312:	2002      	movs	r0, #2
 8004314:	e7f4      	b.n	8004300 <__fpclassifyd+0x34>
 8004316:	bf00      	nop
 8004318:	7fdfffff 	.word	0x7fdfffff
 800431c:	7ff00000 	.word	0x7ff00000

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
