
main_code_L476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007bbc  08007bbc  00008bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c18  08007c18  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c18  08007c18  00008c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c20  08007c20  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c20  08007c20  00008c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007c28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000010  08007c38  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007c38  0000941c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149b1  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a67  00000000  00000000  0001d9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00020458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e73  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279c6  00000000  00000000  00022533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017023  00000000  00000000  00049ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d92  00000000  00000000  00060f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005044  00000000  00000000  00156cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ba4 	.word	0x08007ba4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007ba4 	.word	0x08007ba4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	@ 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96a 	b.w	8000e64 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	460c      	mov	r4, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14e      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	458c      	cmp	ip, r1
 8000bb8:	4686      	mov	lr, r0
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	d962      	bls.n	8000c86 <__udivmoddi4+0xde>
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0320 	rsb	r3, r2, #32
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f f68c 	uxth.w	r6, ip
 8000bde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bee:	fb04 f106 	mul.w	r1, r4, r6
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfe:	f080 8112 	bcs.w	8000e26 <__udivmoddi4+0x27e>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 810f 	bls.w	8000e26 <__udivmoddi4+0x27e>
 8000c08:	3c02      	subs	r4, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	fa1f f38e 	uxth.w	r3, lr
 8000c12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c16:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f606 	mul.w	r6, r0, r6
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x94>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2e:	f080 80fc 	bcs.w	8000e2a <__udivmoddi4+0x282>
 8000c32:	429e      	cmp	r6, r3
 8000c34:	f240 80f9 	bls.w	8000e2a <__udivmoddi4+0x282>
 8000c38:	4463      	add	r3, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11d      	cbz	r5, 8000c4e <__udivmoddi4+0xa6>
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d905      	bls.n	8000c62 <__udivmoddi4+0xba>
 8000c56:	b10d      	cbz	r5, 8000c5c <__udivmoddi4+0xb4>
 8000c58:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e7f5      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d146      	bne.n	8000cf8 <__udivmoddi4+0x150>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xcc>
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	f0c0 80f0 	bcc.w	8000e54 <__udivmoddi4+0x2ac>
 8000c74:	1a86      	subs	r6, r0, r2
 8000c76:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d0e6      	beq.n	8000c4e <__udivmoddi4+0xa6>
 8000c80:	e9c5 6300 	strd	r6, r3, [r5]
 8000c84:	e7e3      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x204>
 8000c8c:	eba1 040c 	sub.w	r4, r1, ip
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb07 f006 	mul.w	r0, r7, r6
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x11c>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x11a>
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	f200 80cd 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000cc2:	4626      	mov	r6, r4
 8000cc4:	1a1c      	subs	r4, r3, r0
 8000cc6:	fa1f f38e 	uxth.w	r3, lr
 8000cca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cce:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb00 f707 	mul.w	r7, r0, r7
 8000cda:	429f      	cmp	r7, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x148>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x146>
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	f200 80b0 	bhi.w	8000e4e <__udivmoddi4+0x2a6>
 8000cee:	4620      	mov	r0, r4
 8000cf0:	1bdb      	subs	r3, r3, r7
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0x9c>
 8000cf8:	f1c1 0620 	rsb	r6, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000d02:	431f      	orrs	r7, r3
 8000d04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d08:	fa04 f301 	lsl.w	r3, r4, r1
 8000d0c:	ea43 030c 	orr.w	r3, r3, ip
 8000d10:	40f4      	lsrs	r4, r6
 8000d12:	fa00 f801 	lsl.w	r8, r0, r1
 8000d16:	0c38      	lsrs	r0, r7, #16
 8000d18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fb00 441e 	mls	r4, r0, lr, r4
 8000d28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x1a6>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3e:	f080 8084 	bcs.w	8000e4a <__udivmoddi4+0x2a2>
 8000d42:	45a1      	cmp	r9, r4
 8000d44:	f240 8081 	bls.w	8000e4a <__udivmoddi4+0x2a2>
 8000d48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	eba4 0409 	sub.w	r4, r4, r9
 8000d52:	fa1f f983 	uxth.w	r9, r3
 8000d56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x1d2>
 8000d6a:	193c      	adds	r4, r7, r4
 8000d6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d70:	d267      	bcs.n	8000e42 <__udivmoddi4+0x29a>
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d965      	bls.n	8000e42 <__udivmoddi4+0x29a>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d82:	eba4 040c 	sub.w	r4, r4, ip
 8000d86:	429c      	cmp	r4, r3
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	d351      	bcc.n	8000e32 <__udivmoddi4+0x28a>
 8000d8e:	d04e      	beq.n	8000e2e <__udivmoddi4+0x286>
 8000d90:	b155      	cbz	r5, 8000da8 <__udivmoddi4+0x200>
 8000d92:	ebb8 030e 	subs.w	r3, r8, lr
 8000d96:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	431e      	orrs	r6, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	e9c5 6400 	strd	r6, r4, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e750      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dbc:	4094      	lsls	r4, r2
 8000dbe:	430c      	orrs	r4, r1
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd4:	0c23      	lsrs	r3, r4, #16
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f107 	mul.w	r1, r0, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x24c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dea:	d22c      	bcs.n	8000e46 <__udivmoddi4+0x29e>
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d92a      	bls.n	8000e46 <__udivmoddi4+0x29e>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dfc:	fb08 3311 	mls	r3, r8, r1, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb01 f307 	mul.w	r3, r1, r7
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x276>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e14:	d213      	bcs.n	8000e3e <__udivmoddi4+0x296>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d911      	bls.n	8000e3e <__udivmoddi4+0x296>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4464      	add	r4, ip
 8000e1e:	1ae4      	subs	r4, r4, r3
 8000e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e24:	e739      	b.n	8000c9a <__udivmoddi4+0xf2>
 8000e26:	4604      	mov	r4, r0
 8000e28:	e6f0      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e706      	b.n	8000c3c <__udivmoddi4+0x94>
 8000e2e:	45c8      	cmp	r8, r9
 8000e30:	d2ae      	bcs.n	8000d90 <__udivmoddi4+0x1e8>
 8000e32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7a8      	b.n	8000d90 <__udivmoddi4+0x1e8>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e7ed      	b.n	8000e1e <__udivmoddi4+0x276>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e799      	b.n	8000d7a <__udivmoddi4+0x1d2>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e7d4      	b.n	8000df4 <__udivmoddi4+0x24c>
 8000e4a:	46d6      	mov	lr, sl
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1a6>
 8000e4e:	4463      	add	r3, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e74d      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e54:	4606      	mov	r6, r0
 8000e56:	4623      	mov	r3, r4
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e70f      	b.n	8000c7c <__udivmoddi4+0xd4>
 8000e5c:	3e02      	subs	r6, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	e730      	b.n	8000cc4 <__udivmoddi4+0x11c>
 8000e62:	bf00      	nop

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%

void motor_ArmESC(h_motor_t* h_motor) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f848 	bl	8000f08 <motor_SetPower>
    HAL_Delay(3000);
 8000e78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e7c:	f001 fe8a 	bl	8002b94 <HAL_Delay>

    motor_SetPower(h_motor, 7);
 8000e80:	2107      	movs	r1, #7
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f840 	bl	8000f08 <motor_SetPower>
    HAL_Delay(2000);
 8000e88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e8c:	f001 fe82 	bl	8002b94 <HAL_Delay>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    int neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff faed 	bl	8000480 <__aeabi_i2d>
 8000ea6:	a316      	add	r3, pc, #88	@ (adr r3, 8000f00 <percentageToMicrosecondsAtHighState+0x68>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fb52 	bl	8000554 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <percentageToMicrosecondsAtHighState+0x60>)
 8000ebe:	f7ff f993 	bl	80001e8 <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fddd 	bl	8000a88 <__aeabi_d2iz>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60fb      	str	r3, [r7, #12]
    return (int)((COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle);
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fad4 	bl	8000480 <__aeabi_i2d>
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <percentageToMicrosecondsAtHighState+0x64>)
 8000ede:	f7ff fb39 	bl	8000554 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fdcd 	bl	8000a88 <__aeabi_d2iz>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40180000 	.word	0x40180000
 8000efc:	40690000 	.word	0x40690000
 8000f00:	47ae147b 	.word	0x47ae147b
 8000f04:	3fa47ae1 	.word	0x3fa47ae1

08000f08 <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int percentage) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f7ff ffc0 	bl	8000e98 <percentageToMicrosecondsAtHighState>
 8000f18:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d105      	bne.n	8000f2e <motor_SetPower+0x26>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f2c:	e02c      	b.n	8000f88 <motor_SetPower+0x80>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d105      	bne.n	8000f42 <motor_SetPower+0x3a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f40:	e022      	b.n	8000f88 <motor_SetPower+0x80>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d105      	bne.n	8000f56 <motor_SetPower+0x4e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f54:	e018      	b.n	8000f88 <motor_SetPower+0x80>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d105      	bne.n	8000f6a <motor_SetPower+0x62>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	e00e      	b.n	8000f88 <motor_SetPower+0x80>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d105      	bne.n	8000f7e <motor_SetPower+0x76>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7c:	e004      	b.n	8000f88 <motor_SetPower+0x80>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	65d3      	str	r3, [r2, #92]	@ 0x5c
    h_motor->PercentageOfTotalPower = percentage;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <motor_Init>:

HAL_StatusTypeDef motor_Init(h_motor_t* h_motor) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f004 fb40 	bl	8005638 <HAL_TIM_PWM_Start>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
    // Initialisation spécifique à l'ESC
    motor_ArmESC(h_motor);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff53 	bl	8000e68 <motor_ArmESC>

    return result;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <IMU_ReadRegister>:
float accel_g[3], gyro_dps[3], gyro_angle[3];


//FIRST TRY (CHECKING IF IMU IS AVAILABLE)

HAL_StatusTypeDef IMU_ReadRegister(uint16_t reg, uint8_t *data) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, 1, HAL_MAX_DELAY);
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21d0      	movs	r1, #208	@ 0xd0
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <IMU_ReadRegister+0x34>)
 8000fee:	f002 f965 	bl	80032bc <HAL_I2C_Mem_Read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
    return error;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000006c 	.word	0x2000006c

08001004 <IMU_ReadRegisters>:

HAL_StatusTypeDef IMU_ReadRegisters(uint16_t reg, uint8_t *data, uint16_t length) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af04      	add	r7, sp, #16
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	4613      	mov	r3, r2
 8001012:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, length, HAL_MAX_DELAY);
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	21d0      	movs	r1, #208	@ 0xd0
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <IMU_ReadRegisters+0x38>)
 800102a:	f002 f947 	bl	80032bc <HAL_I2C_Mem_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
    return error;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000006c 	.word	0x2000006c

08001040 <IMU_Calibrate>:

HAL_StatusTypeDef IMU_Calibrate() {
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	@ 0x40
 8001044:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    int32_t accel_sum[3] = {0, 0, 0};
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    int32_t gyro_sum[3] = {0, 0, 0};
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
    int num_samples = 1000;  // Number of samples for averaging
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 0; i < num_samples; i++) {
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001068:	e061      	b.n	800112e <IMU_Calibrate+0xee>
        if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	220e      	movs	r2, #14
 8001070:	4619      	mov	r1, r3
 8001072:	203b      	movs	r0, #59	@ 0x3b
 8001074:	f7ff ffc6 	bl	8001004 <IMU_ReadRegisters>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <IMU_Calibrate+0x42>
            return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e07f      	b.n	8001182 <IMU_Calibrate+0x142>
        }

        int16_t accelX = (buffer[0] << 8) | buffer[1];
 8001082:	7e3b      	ldrb	r3, [r7, #24]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	867b      	strh	r3, [r7, #50]	@ 0x32
        int16_t accelY = (buffer[2] << 8) | buffer[3];
 8001090:	7ebb      	ldrb	r3, [r7, #26]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7efb      	ldrb	r3, [r7, #27]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	863b      	strh	r3, [r7, #48]	@ 0x30
        int16_t accelZ = (buffer[4] << 8) | buffer[5];
 800109e:	7f3b      	ldrb	r3, [r7, #28]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7f7b      	ldrb	r3, [r7, #29]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        int16_t gyroX = (buffer[8] << 8) | buffer[9];
 80010ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        int16_t gyroY = (buffer[10] << 8) | buffer[11];
 80010be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t gyroZ = (buffer[12] << 8) | buffer[13];
 80010d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	853b      	strh	r3, [r7, #40]	@ 0x28

        // Sum values for averaging
        accel_sum[0] += accelX;
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80010e8:	4413      	add	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
        accel_sum[1] += accelY;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80010f2:	4413      	add	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        accel_sum[2] += (accelZ - 16384);  // Remove gravity effect
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80010fc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001100:	4413      	add	r3, r2
 8001102:	617b      	str	r3, [r7, #20]

        gyro_sum[0] += gyroX;
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800110a:	4413      	add	r3, r2
 800110c:	603b      	str	r3, [r7, #0]
        gyro_sum[1] += gyroY;
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001114:	4413      	add	r3, r2
 8001116:	607b      	str	r3, [r7, #4]
        gyro_sum[2] += gyroZ;
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800111e:	4413      	add	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
        HAL_Delay(2);
 8001122:	2002      	movs	r0, #2
 8001124:	f001 fd36 	bl	8002b94 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8001128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800112a:	3301      	adds	r3, #1
 800112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800112e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001132:	429a      	cmp	r2, r3
 8001134:	db99      	blt.n	800106a <IMU_Calibrate+0x2a>
    }

    // Compute average offset
    for (int i = 0; i < 3; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800113a:	e01e      	b.n	800117a <IMU_Calibrate+0x13a>
        accel_offset[i] = accel_sum[i] / num_samples;
 800113c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	3340      	adds	r3, #64	@ 0x40
 8001142:	443b      	add	r3, r7
 8001144:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114a:	fb92 f3f3 	sdiv	r3, r2, r3
 800114e:	b219      	sxth	r1, r3
 8001150:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <IMU_Calibrate+0x14c>)
 8001152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        gyro_offset[i] = gyro_sum[i] / num_samples;
 8001158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	3340      	adds	r3, #64	@ 0x40
 800115e:	443b      	add	r3, r7
 8001160:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001166:	fb92 f3f3 	sdiv	r3, r2, r3
 800116a:	b219      	sxth	r1, r3
 800116c:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <IMU_Calibrate+0x150>)
 800116e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 3; i++) {
 8001174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001176:	3301      	adds	r3, #1
 8001178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800117a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800117c:	2b02      	cmp	r3, #2
 800117e:	dddd      	ble.n	800113c <IMU_Calibrate+0xfc>
    }

    return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3740      	adds	r7, #64	@ 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000034 	.word	0x20000034
 8001190:	2000002c 	.word	0x2000002c

08001194 <IMU_Init>:





HAL_StatusTypeDef IMU_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    uint8_t who_am_i;


    if (HAL_I2C_IsDeviceReady(&hi2c2, IMU_I2C_ADDR, 2, HAL_MAX_DELAY)!= HAL_OK){
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	2202      	movs	r2, #2
 80011a0:	21d0      	movs	r1, #208	@ 0xd0
 80011a2:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <IMU_Init+0x54>)
 80011a4:	f002 f9a4 	bl	80034f0 <HAL_I2C_IsDeviceReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <IMU_Init+0x1e>
    	return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e016      	b.n	80011e0 <IMU_Init+0x4c>
    }

    if (IMU_ReadRegister(WHO_AM_I_REG, &who_am_i)!= HAL_OK){
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	4619      	mov	r1, r3
 80011b6:	2075      	movs	r0, #117	@ 0x75
 80011b8:	f7ff ff08 	bl	8000fcc <IMU_ReadRegister>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <IMU_Init+0x32>
    	return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00c      	b.n	80011e0 <IMU_Init+0x4c>
    }
    else{
    	if (who_am_i!=0x71){
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b71      	cmp	r3, #113	@ 0x71
 80011ca:	d001      	beq.n	80011d0 <IMU_Init+0x3c>
    		return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e007      	b.n	80011e0 <IMU_Init+0x4c>
    	}
    }


    if (IMU_Calibrate()!= HAL_OK){
 80011d0:	f7ff ff36 	bl	8001040 <IMU_Calibrate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <IMU_Init+0x4a>
    	return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <IMU_Init+0x4c>
    }

    return HAL_OK;
 80011de:	2300      	movs	r3, #0


}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000006c 	.word	0x2000006c

080011ec <Convert_IMU_Data_All>:




void Convert_IMU_Data_All(int16_t *raw_accel, int16_t *raw_gyro, float *accel_g, float *gyro_dps, float *gyro_angle, float dt) {
 80011ec:	b480      	push	{r7}
 80011ee:	b08b      	sub	sp, #44	@ 0x2c
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6178      	str	r0, [r7, #20]
 80011f4:	6139      	str	r1, [r7, #16]
 80011f6:	60fa      	str	r2, [r7, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_sensitivity = 16384.0f;  // ±2g
 80011fe:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8001202:	623b      	str	r3, [r7, #32]
    float gyro_sensitivity  = 131.0f;    // ±250°/s
 8001204:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <Convert_IMU_Data_All+0xf4>)
 8001206:	61fb      	str	r3, [r7, #28]

    // Static variable to hold cumulative integration between calls
    static float integrated_angle[3] = {0.0f, 0.0f, 0.0f};
    float treshold_dps = 1.0;
 8001208:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800120c:	61bb      	str	r3, [r7, #24]

    // Convert accelerometer values to g
    // Convert gyroscope values to °/s and integrate to get angle
    for (int i = 0; i < 3; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
 8001212:	e05b      	b.n	80012cc <Convert_IMU_Data_All+0xe0>
        accel_g[i] = raw_accel[i] / accel_sensitivity;
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4413      	add	r3, r2
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	ed97 7a08 	vldr	s14, [r7, #32]
 8001234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001238:	edc3 7a00 	vstr	s15, [r3]

        gyro_dps[i] = raw_gyro[i] / gyro_sensitivity;
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4413      	add	r3, r2
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	4413      	add	r3, r2
 8001258:	ed97 7a07 	vldr	s14, [r7, #28]
 800125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001260:	edc3 7a00 	vstr	s15, [r3]


        if (fabs(gyro_dps[i])>treshold_dps){
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	eef0 7ae7 	vabs.f32	s15, s15
 8001274:	ed97 7a06 	vldr	s14, [r7, #24]
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d517      	bpl.n	80012b2 <Convert_IMU_Data_All+0xc6>
        	integrated_angle[i] += gyro_dps[i] * dt;
 8001282:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <Convert_IMU_Data_All+0xf8>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	ed93 7a00 	vldr	s14, [r3]
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	edd3 6a00 	vldr	s13, [r3]
 800129a:	edd7 7a01 	vldr	s15, [r7, #4]
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <Convert_IMU_Data_All+0xf8>)
 80012a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	edc3 7a00 	vstr	s15, [r3]
        }

        gyro_angle[i] = integrated_angle[i];
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012b8:	4413      	add	r3, r2
 80012ba:	490a      	ldr	r1, [pc, #40]	@ (80012e4 <Convert_IMU_Data_All+0xf8>)
 80012bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	440a      	add	r2, r1
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	dda0      	ble.n	8001214 <Convert_IMU_Data_All+0x28>

    }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	372c      	adds	r7, #44	@ 0x2c
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	43030000 	.word	0x43030000
 80012e4:	20000060 	.word	0x20000060

080012e8 <IMU_ReadAccelGyro_Converted_All>:


HAL_StatusTypeDef IMU_ReadAccelGyro_Converted_All(float dt) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buffer[14];

    if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	220e      	movs	r2, #14
 80012f8:	4619      	mov	r1, r3
 80012fa:	203b      	movs	r0, #59	@ 0x3b
 80012fc:	f7ff fe82 	bl	8001004 <IMU_ReadRegisters>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <IMU_ReadAccelGyro_Converted_All+0x22>
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e072      	b.n	80013f0 <IMU_ReadAccelGyro_Converted_All+0x108>

    int16_t raw_accel[3];
    int16_t raw_gyro[3];

    // Apply offsets
    raw_accel[0] = ((buffer[0] << 8) | buffer[1]) - accel_offset[0];
 800130a:	7e3b      	ldrb	r3, [r7, #24]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	7e7b      	ldrb	r3, [r7, #25]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <IMU_ReadAccelGyro_Converted_All+0x110>)
 800131c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001320:	b29b      	uxth	r3, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21b      	sxth	r3, r3
 8001328:	823b      	strh	r3, [r7, #16]
    raw_accel[1] = ((buffer[2] << 8) | buffer[3]) - accel_offset[1];
 800132a:	7ebb      	ldrb	r3, [r7, #26]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	7efb      	ldrb	r3, [r7, #27]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <IMU_ReadAccelGyro_Converted_All+0x110>)
 800133c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001340:	b29b      	uxth	r3, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	b21b      	sxth	r3, r3
 8001348:	827b      	strh	r3, [r7, #18]
    raw_accel[2] = ((buffer[4] << 8) | buffer[5]) - accel_offset[2];
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7f7b      	ldrb	r3, [r7, #29]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <IMU_ReadAccelGyro_Converted_All+0x110>)
 800135c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	b21b      	sxth	r3, r3
 8001368:	82bb      	strh	r3, [r7, #20]

    raw_gyro[0] = ((buffer[8] << 8) | buffer[9]) - gyro_offset[0];
 800136a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <IMU_ReadAccelGyro_Converted_All+0x114>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	b29b      	uxth	r3, r3
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	b21b      	sxth	r3, r3
 800138c:	813b      	strh	r3, [r7, #8]
    raw_gyro[1] = ((buffer[10] << 8) | buffer[11]) - gyro_offset[1];
 800138e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21b      	sxth	r3, r3
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <IMU_ReadAccelGyro_Converted_All+0x114>)
 80013a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	817b      	strh	r3, [r7, #10]
    raw_gyro[2] = ((buffer[12] << 8) | buffer[13]) - gyro_offset[2];
 80013b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <IMU_ReadAccelGyro_Converted_All+0x114>)
 80013c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	81bb      	strh	r3, [r7, #12]

    // Convert to g and dps, and integrate gyroscope values into angles
    Convert_IMU_Data_All(raw_accel, raw_gyro, accel_g, gyro_dps, gyro_angle, dt);
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	f107 0010 	add.w	r0, r7, #16
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <IMU_ReadAccelGyro_Converted_All+0x118>)
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <IMU_ReadAccelGyro_Converted_All+0x11c>)
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <IMU_ReadAccelGyro_Converted_All+0x120>)
 80013ea:	f7ff feff 	bl	80011ec <Convert_IMU_Data_All>

    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000034 	.word	0x20000034
 80013fc:	2000002c 	.word	0x2000002c
 8001400:	20000054 	.word	0x20000054
 8001404:	20000048 	.word	0x20000048
 8001408:	2000003c 	.word	0x2000003c

0800140c <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	ed87 0a03 	vstr	s0, [r7, #12]
 8001416:	edc7 0a02 	vstr	s1, [r7, #8]
 800141a:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 800141e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001422:	edd7 7a01 	vldr	s15, [r7, #4]
 8001426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142a:	edd7 7a02 	vldr	s15, [r7, #8]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a03 	vstr	s0, [r7, #12]
 800144a:	edc7 0a02 	vstr	s1, [r7, #8]
 800144e:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 8001452:	ed97 7a03 	vldr	s14, [r7, #12]
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001466:	eef0 7a66 	vmov.f32	s15, s13
}
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <update>:


float update(PID pid, float error){
 8001478:	b084      	sub	sp, #16
 800147a:	b580      	push	{r7, lr}
 800147c:	ed2d 8b02 	vpush	{d8}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001488:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800148c:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 8001490:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001494:	ed97 7a01 	vldr	s14, [r7, #4]
 8001498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149c:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 80014a0:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 80014a4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80014ac:	eeb0 1a47 	vmov.f32	s2, s14
 80014b0:	eef0 0a67 	vmov.f32	s1, s15
 80014b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80014b8:	f7ff ffa8 	bl	800140c <integrate_error>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014c4:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 80014cc:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 80014d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014d4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80014d8:	eeb0 1a47 	vmov.f32	s2, s14
 80014dc:	eef0 0a67 	vmov.f32	s1, s15
 80014e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80014e4:	f7ff ffac 	bl	8001440 <differentiate_error>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
 80014ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014f0:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 80014f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	ecbd 8b02 	vpop	{d8}
 8001518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800151c:	b004      	add	sp, #16
 800151e:	4770      	bx	lr

08001520 <read_RF>:


char* read_RF(){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    
 8001524:	bf00      	nop
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f001 fab2 	bl	8002a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f816 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 fbb0 	bl	8001ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fb7e 	bl	8001c40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001544:	f000 f8a2 	bl	800168c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001548:	f000 f970 	bl	800182c <MX_TIM2_Init>
  MX_TIM3_Init();
 800154c:	f000 f9bc 	bl	80018c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001550:	f000 fa08 	bl	8001964 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001554:	f000 fa78 	bl	8001a48 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001558:	f000 f858 	bl	800160c <MX_I2C2_Init>
  MX_TIM8_Init();
 800155c:	f000 fac2 	bl	8001ae4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001560:	f000 fc0a 	bl	8001d78 <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <main+0x34>

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	@ 0x58
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2244      	movs	r2, #68	@ 0x44
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fa69 	bl	8007a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800158e:	f002 fbaf 	bl	8003cf0 <HAL_PWREx_ControlVoltageScaling>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001598:	f000 fbe8 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a6:	2310      	movs	r3, #16
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ae:	2302      	movs	r3, #2
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015b6:	230a      	movs	r3, #10
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ba:	2307      	movs	r3, #7
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fbe6 	bl	8003d9c <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015d6:	f000 fbc9 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2303      	movs	r3, #3
 80015e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2104      	movs	r1, #4
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 ffae 	bl	8004554 <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015fe:	f000 fbb5 	bl	8001d6c <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3758      	adds	r7, #88	@ 0x58
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_I2C2_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <MX_I2C2_Init+0x7c>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_I2C2_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_I2C2_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_I2C2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	@ (8001680 <MX_I2C2_Init+0x74>)
 8001648:	f001 fd9c 	bl	8003184 <HAL_I2C_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001652:	f000 fb8b 	bl	8001d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4809      	ldr	r0, [pc, #36]	@ (8001680 <MX_I2C2_Init+0x74>)
 800165a:	f002 faa3 	bl	8003ba4 <HAL_I2CEx_ConfigAnalogFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 fb82 	bl	8001d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_I2C2_Init+0x74>)
 800166c:	f002 fae5 	bl	8003c3a <HAL_I2CEx_ConfigDigitalFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fb79 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000006c 	.word	0x2000006c
 8001684:	40005800 	.word	0x40005800
 8001688:	10d19ce4 	.word	0x10d19ce4

0800168c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09a      	sub	sp, #104	@ 0x68
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	222c      	movs	r2, #44	@ 0x2c
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 f9c1 	bl	8007a4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016cc:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016ce:	4a56      	ldr	r2, [pc, #344]	@ (8001828 <MX_TIM1_Init+0x19c>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016d2:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b52      	ldr	r3, [pc, #328]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016de:	4b51      	ldr	r3, [pc, #324]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f8:	484a      	ldr	r0, [pc, #296]	@ (8001824 <MX_TIM1_Init+0x198>)
 80016fa:	f003 fe0b 	bl	8005314 <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 fb32 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001712:	4619      	mov	r1, r3
 8001714:	4843      	ldr	r0, [pc, #268]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001716:	f004 fcf9 	bl	800610c <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 fb24 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001724:	483f      	ldr	r0, [pc, #252]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001726:	f003 ff25 	bl	8005574 <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001730:	f000 fb1c 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001740:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001744:	4619      	mov	r1, r3
 8001746:	4837      	ldr	r0, [pc, #220]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001748:	f005 fb3c 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001752:	f000 fb0b 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	@ 0x60
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001762:	2300      	movs	r3, #0
 8001764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	482a      	ldr	r0, [pc, #168]	@ (8001824 <MX_TIM1_Init+0x198>)
 800177c:	f004 fbb2 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001786:	f000 faf1 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800178e:	2204      	movs	r2, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4824      	ldr	r0, [pc, #144]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001794:	f004 fba6 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800179e:	f000 fae5 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017a6:	2208      	movs	r2, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	481e      	ldr	r0, [pc, #120]	@ (8001824 <MX_TIM1_Init+0x198>)
 80017ac:	f004 fb9a 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80017b6:	f000 fad9 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017be:	220c      	movs	r2, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	4818      	ldr	r0, [pc, #96]	@ (8001824 <MX_TIM1_Init+0x198>)
 80017c4:	f004 fb8e 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80017ce:	f000 facd 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001808:	f005 fb64 	bl	8006ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001812:	f000 faab 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001816:	4803      	ldr	r0, [pc, #12]	@ (8001824 <MX_TIM1_Init+0x198>)
 8001818:	f000 ff92 	bl	8002740 <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3768      	adds	r7, #104	@ 0x68
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000c0 	.word	0x200000c0
 8001828:	40012c00 	.word	0x40012c00

0800182c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <MX_TIM2_Init+0x98>)
 800184c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_TIM2_Init+0x98>)
 8001854:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM2_Init+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM2_Init+0x98>)
 8001862:	22c8      	movs	r2, #200	@ 0xc8
 8001864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_TIM2_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_TIM2_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <MX_TIM2_Init+0x98>)
 8001874:	f003 fd4e 	bl	8005314 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800187e:	f000 fa75 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <MX_TIM2_Init+0x98>)
 8001890:	f004 fc3c 	bl	800610c <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800189a:	f000 fa67 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <MX_TIM2_Init+0x98>)
 80018ac:	f005 fa8a 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018b6:	f000 fa59 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000010c 	.word	0x2000010c

080018c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_TIM3_Init+0x94>)
 80018e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <MX_TIM3_Init+0x98>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_TIM3_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM3_Init+0x94>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_TIM3_Init+0x94>)
 80018fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_TIM3_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_TIM3_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800190c:	4813      	ldr	r0, [pc, #76]	@ (800195c <MX_TIM3_Init+0x94>)
 800190e:	f003 fd01 	bl	8005314 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001918:	f000 fa28 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <MX_TIM3_Init+0x94>)
 800192a:	f004 fbef 	bl	800610c <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001934:	f000 fa1a 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM3_Init+0x94>)
 8001946:	f005 fa3d 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001950:	f000 fa0c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000158 	.word	0x20000158
 8001960:	40000400 	.word	0x40000400

08001964 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001990:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 8001992:	4a2c      	ldr	r2, [pc, #176]	@ (8001a44 <MX_TIM4_Init+0xe0>)
 8001994:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 8001998:	224f      	movs	r2, #79	@ 0x4f
 800199a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019a2:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019b6:	4822      	ldr	r0, [pc, #136]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019b8:	f003 fcac 	bl	8005314 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80019c2:	f000 f9d3 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4619      	mov	r1, r3
 80019d2:	481b      	ldr	r0, [pc, #108]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019d4:	f004 fb9a 	bl	800610c <HAL_TIM_ConfigClockSource>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019de:	f000 f9c5 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80019e2:	4817      	ldr	r0, [pc, #92]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 80019e4:	f003 ff2e 	bl	8005844 <HAL_TIM_IC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80019ee:	f000 f9bd 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 8001a02:	f005 f9df 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001a0c:	f000 f9ae 	bl	8001d6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a14:	2301      	movs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_TIM4_Init+0xdc>)
 8001a28:	f004 f9bf 	bl	8005daa <HAL_TIM_IC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001a32:	f000 f99b 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	@ 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200001a4 	.word	0x200001a4
 8001a44:	40000800 	.word	0x40000800

08001a48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <MX_TIM5_Init+0x98>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a6e:	224f      	movs	r2, #79	@ 0x4f
 8001a70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a8c:	4813      	ldr	r0, [pc, #76]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001a8e:	f003 fc41 	bl	8005314 <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a98:	f000 f968 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001aaa:	f004 fb2f 	bl	800610c <HAL_TIM_ConfigClockSource>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ab4:	f000 f95a 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_TIM5_Init+0x94>)
 8001ac6:	f005 f97d 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f000 f94c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200001f0 	.word	0x200001f0
 8001ae0:	40000c00 	.word	0x40000c00

08001ae4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09a      	sub	sp, #104	@ 0x68
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	222c      	movs	r2, #44	@ 0x2c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 ff95 	bl	8007a4e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b24:	4b44      	ldr	r3, [pc, #272]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b26:	4a45      	ldr	r2, [pc, #276]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 800-1;
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b2c:	f240 321f 	movw	r2, #799	@ 0x31f
 8001b30:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b3e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b46:	4b3c      	ldr	r3, [pc, #240]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b52:	4839      	ldr	r0, [pc, #228]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b54:	f003 fbde 	bl	8005314 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001b5e:	f000 f905 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b66:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4832      	ldr	r0, [pc, #200]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b70:	f004 facc 	bl	800610c <HAL_TIM_ConfigClockSource>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001b7a:	f000 f8f7 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b7e:	482e      	ldr	r0, [pc, #184]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001b80:	f003 fcf8 	bl	8005574 <HAL_TIM_PWM_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001b8a:	f000 f8ef 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4825      	ldr	r0, [pc, #148]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001ba2:	f005 f90f 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001bac:	f000 f8de 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb0:	2360      	movs	r3, #96	@ 0x60
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4818      	ldr	r0, [pc, #96]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001bd6:	f004 f985 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001be0:	f000 f8c4 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001c1a:	f005 f95b 	bl	8006ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001c24:	f000 f8a2 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <MX_TIM8_Init+0x154>)
 8001c2a:	f000 fd89 	bl	8002740 <HAL_TIM_MspPostInit>

}
 8001c2e:	bf00      	nop
 8001c30:	3768      	adds	r7, #104	@ 0x68
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000023c 	.word	0x2000023c
 8001c3c:	40013400 	.word	0x40013400

08001c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c46:	4a15      	ldr	r2, [pc, #84]	@ (8001c9c <MX_USART2_UART_Init+0x5c>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c84:	f005 f9c2 	bl	800700c <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f86d 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000288 	.word	0x20000288
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a24      	ldr	r2, [pc, #144]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <MX_GPIO_Init+0xc4>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2120      	movs	r1, #32
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d1e:	f001 fa19 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001d3a:	f001 f861 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f001 f852 	bl	8002e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000800 	.word	0x48000800

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <Error_Handler+0x8>

08001d78 <init>:
// Command received via RF
char command[9];



void init(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

	// Variable initializations
	flight_allowed = 1;
 8001d7c:	4b68      	ldr	r3, [pc, #416]	@ (8001f20 <init+0x1a8>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
	sample_time_us = 825;
 8001d82:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <init+0x1ac>)
 8001d84:	f240 3239 	movw	r2, #825	@ 0x339
 8001d88:	601a      	str	r2, [r3, #0]

	heightPID.sample_time = sample_time_us/1000000;
 8001d8a:	4b66      	ldr	r3, [pc, #408]	@ (8001f24 <init+0x1ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <init+0x1b0>)
 8001d90:	fb82 1203 	smull	r1, r2, r2, r3
 8001d94:	1492      	asrs	r2, r2, #18
 8001d96:	17db      	asrs	r3, r3, #31
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da2:	4b62      	ldr	r3, [pc, #392]	@ (8001f2c <init+0x1b4>)
 8001da4:	edc3 7a05 	vstr	s15, [r3, #20]
	pitchPID.sample_time = sample_time_us/1000000;
 8001da8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f24 <init+0x1ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5e      	ldr	r2, [pc, #376]	@ (8001f28 <init+0x1b0>)
 8001dae:	fb82 1203 	smull	r1, r2, r2, r3
 8001db2:	1492      	asrs	r2, r2, #18
 8001db4:	17db      	asrs	r3, r3, #31
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f30 <init+0x1b8>)
 8001dc2:	edc3 7a05 	vstr	s15, [r3, #20]
	rollPID.sample_time = sample_time_us/1000000;
 8001dc6:	4b57      	ldr	r3, [pc, #348]	@ (8001f24 <init+0x1ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <init+0x1b0>)
 8001dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd0:	1492      	asrs	r2, r2, #18
 8001dd2:	17db      	asrs	r3, r3, #31
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	4b55      	ldr	r3, [pc, #340]	@ (8001f34 <init+0x1bc>)
 8001de0:	edc3 7a05 	vstr	s15, [r3, #20]
	yawPID.sample_time = sample_time_us/1000000;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <init+0x1ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f28 <init+0x1b0>)
 8001dea:	fb82 1203 	smull	r1, r2, r2, r3
 8001dee:	1492      	asrs	r2, r2, #18
 8001df0:	17db      	asrs	r3, r3, #31
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <init+0x1c0>)
 8001dfe:	edc3 7a05 	vstr	s15, [r3, #20]


	time_to_reach_1m = 5; // seconds
 8001e02:	4b4e      	ldr	r3, [pc, #312]	@ (8001f3c <init+0x1c4>)
 8001e04:	2205      	movs	r2, #5
 8001e06:	601a      	str	r2, [r3, #0]
	time_to_make_full_rotation = 5; // seconds
 8001e08:	4b4d      	ldr	r3, [pc, #308]	@ (8001f40 <init+0x1c8>)
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	601a      	str	r2, [r3, #0]

	height_step = sample_time_us/time_to_reach_1m;
 8001e0e:	4b45      	ldr	r3, [pc, #276]	@ (8001f24 <init+0x1ac>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b4a      	ldr	r3, [pc, #296]	@ (8001f3c <init+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	4b48      	ldr	r3, [pc, #288]	@ (8001f44 <init+0x1cc>)
 8001e24:	edc3 7a00 	vstr	s15, [r3]
	yaw_step = 360*sample_time_us/time_to_make_full_rotation;
 8001e28:	4b3e      	ldr	r3, [pc, #248]	@ (8001f24 <init+0x1ac>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001e30:	fb03 f202 	mul.w	r2, r3, r2
 8001e34:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <init+0x1c8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <init+0x1d0>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]


	// Initialization of the mainloop timer
	htim3.Instance->PSC = 84-1;// Timer clock is 84 MHz
 8001e4a:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <init+0x1d4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2253      	movs	r2, #83	@ 0x53
 8001e50:	629a      	str	r2, [r3, #40]	@ 0x28
	htim3.Instance->CNT = sample_time_us;
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <init+0x1ac>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <init+0x1d4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24


	// IMU initialization

	IMU_Init();
 8001e5c:	f7ff f99a 	bl	8001194 <IMU_Init>


	// Motors initialization
	MOTOR_FRONT_RIGHT.htim = &htim1;
 8001e60:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <init+0x1d8>)
 8001e62:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <init+0x1dc>)
 8001e64:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_RIGHT.channel = TIM_CHANNEL_1;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <init+0x1d8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_RIGHT)== HAL_ERROR){
 8001e6c:	4838      	ldr	r0, [pc, #224]	@ (8001f50 <init+0x1d8>)
 8001e6e:	f7ff f897 	bl	8000fa0 <motor_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <init+0x106>
    	flight_allowed = 0;
 8001e78:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <init+0x1a8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
    }


	MOTOR_FRONT_LEFT.htim = &htim1;
 8001e7e:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <init+0x1e0>)
 8001e80:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <init+0x1dc>)
 8001e82:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_LEFT.channel = TIM_CHANNEL_2;
 8001e84:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <init+0x1e0>)
 8001e86:	2204      	movs	r2, #4
 8001e88:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_LEFT)== HAL_ERROR){
 8001e8a:	4833      	ldr	r0, [pc, #204]	@ (8001f58 <init+0x1e0>)
 8001e8c:	f7ff f888 	bl	8000fa0 <motor_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <init+0x124>
        	flight_allowed = 0;
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <init+0x1a8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
        }
	MOTOR_BACK_RIGHT.htim = &htim1;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <init+0x1e4>)
 8001e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <init+0x1dc>)
 8001ea0:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_RIGHT.channel = TIM_CHANNEL_3;
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <init+0x1e4>)
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_RIGHT)== HAL_ERROR){
 8001ea8:	482c      	ldr	r0, [pc, #176]	@ (8001f5c <init+0x1e4>)
 8001eaa:	f7ff f879 	bl	8000fa0 <motor_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <init+0x142>
	    	flight_allowed = 0;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <init+0x1a8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
	    }

	MOTOR_BACK_LEFT.htim = &htim1;
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <init+0x1e8>)
 8001ebc:	4a25      	ldr	r2, [pc, #148]	@ (8001f54 <init+0x1dc>)
 8001ebe:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_LEFT.channel = TIM_CHANNEL_4;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <init+0x1e8>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_LEFT)== HAL_ERROR){
 8001ec6:	4826      	ldr	r0, [pc, #152]	@ (8001f60 <init+0x1e8>)
 8001ec8:	f7ff f86a 	bl	8000fa0 <motor_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <init+0x160>
	    	flight_allowed = 0;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <init+0x1a8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
	    }


	// Indicator for sucess (user led)
	if (flight_allowed == 1){
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <init+0x1a8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <init+0x176>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f001 f934 	bl	8003154 <HAL_GPIO_WritePin>
 8001eec:	e005      	b.n	8001efa <init+0x182>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef6:	f001 f92d 	bl	8003154 <HAL_GPIO_WritePin>
	}


	// Timers start

	HAL_TIM_Base_Start(&htim5); // time reference
 8001efa:	481a      	ldr	r0, [pc, #104]	@ (8001f64 <init+0x1ec>)
 8001efc:	f003 fa62 	bl	80053c4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // ultrasound trigger
 8001f00:	2100      	movs	r1, #0
 8001f02:	4819      	ldr	r0, [pc, #100]	@ (8001f68 <init+0x1f0>)
 8001f04:	f003 fb98 	bl	8005638 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // ultrasound read
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4818      	ldr	r0, [pc, #96]	@ (8001f6c <init+0x1f4>)
 8001f0c:	f003 fcfc 	bl	8005908 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2); // IMU trigger
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <init+0x1f8>)
 8001f12:	f003 fabf 	bl	8005494 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3); // main loop
 8001f16:	480d      	ldr	r0, [pc, #52]	@ (8001f4c <init+0x1d4>)
 8001f18:	f003 fabc 	bl	8005494 <HAL_TIM_Base_Start_IT>

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200003f4 	.word	0x200003f4
 8001f24:	20000310 	.word	0x20000310
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	20000364 	.word	0x20000364
 8001f30:	2000037c 	.word	0x2000037c
 8001f34:	20000394 	.word	0x20000394
 8001f38:	200003ac 	.word	0x200003ac
 8001f3c:	20000314 	.word	0x20000314
 8001f40:	2000031c 	.word	0x2000031c
 8001f44:	20000318 	.word	0x20000318
 8001f48:	20000320 	.word	0x20000320
 8001f4c:	20000158 	.word	0x20000158
 8001f50:	200003c4 	.word	0x200003c4
 8001f54:	200000c0 	.word	0x200000c0
 8001f58:	200003d0 	.word	0x200003d0
 8001f5c:	200003dc 	.word	0x200003dc
 8001f60:	200003e8 	.word	0x200003e8
 8001f64:	200001f0 	.word	0x200001f0
 8001f68:	2000023c 	.word	0x2000023c
 8001f6c:	200001a4 	.word	0x200001a4
 8001f70:	2000010c 	.word	0x2000010c
 8001f74:	00000000 	.word	0x00000000

08001f78 <control_step>:


void control_step(){
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af02      	add	r7, sp, #8

		if (flight_allowed==1){
 8001f7e:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <control_step+0x18c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 825c 	bne.w	8002440 <control_step+0x4c8>
			//--------- Reading Sensors ------------//

			roll.measurement = gyro_angle[0];
 8001f88:	4b5f      	ldr	r3, [pc, #380]	@ (8002108 <control_step+0x190>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <control_step+0x194>)
 8001f8e:	6053      	str	r3, [r2, #4]
			pitch.measurement = gyro_angle[1];
 8001f90:	4b5d      	ldr	r3, [pc, #372]	@ (8002108 <control_step+0x190>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a5e      	ldr	r2, [pc, #376]	@ (8002110 <control_step+0x198>)
 8001f96:	6053      	str	r3, [r2, #4]
			yaw.measurement = gyro_angle[2];
 8001f98:	4b5b      	ldr	r3, [pc, #364]	@ (8002108 <control_step+0x190>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002114 <control_step+0x19c>)
 8001f9e:	6053      	str	r3, [r2, #4]

			

			height.measurement = ultrasound_measure_cm/100;
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8002118 <control_step+0x1a0>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 800211c <control_step+0x1a4>
 8001faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fae:	4b5c      	ldr	r3, [pc, #368]	@ (8002120 <control_step+0x1a8>)
 8001fb0:	edc3 7a01 	vstr	s15, [r3, #4]

			//--------- Reading Commands ------------//
			
			read_RF();
 8001fb4:	f7ff fab4 	bl	8001520 <read_RF>

			if (command[0]=='$'){// Verifying that the command was entirely received
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <control_step+0x1ac>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b24      	cmp	r3, #36	@ 0x24
 8001fbe:	d10f      	bne.n	8001fe0 <control_step+0x68>
				motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4859      	ldr	r0, [pc, #356]	@ (8002128 <control_step+0x1b0>)
 8001fc4:	f7fe ffa0 	bl	8000f08 <motor_SetPower>
				motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4858      	ldr	r0, [pc, #352]	@ (800212c <control_step+0x1b4>)
 8001fcc:	f7fe ff9c 	bl	8000f08 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4857      	ldr	r0, [pc, #348]	@ (8002130 <control_step+0x1b8>)
 8001fd4:	f7fe ff98 	bl	8000f08 <motor_SetPower>
				motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4856      	ldr	r0, [pc, #344]	@ (8002134 <control_step+0x1bc>)
 8001fdc:	f7fe ff94 	bl	8000f08 <motor_SetPower>
			}
				// Height command extraction
				if (command[1]=="1" && command[2]=="0"){
 8001fe0:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <control_step+0x1ac>)
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <control_step+0x1c0>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d111      	bne.n	8002010 <control_step+0x98>
 8001fec:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <control_step+0x1ac>)
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b52      	ldr	r3, [pc, #328]	@ (800213c <control_step+0x1c4>)
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d10b      	bne.n	8002010 <control_step+0x98>
					height.command+=height_step;
 8001ff8:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <control_step+0x1a8>)
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	4b50      	ldr	r3, [pc, #320]	@ (8002140 <control_step+0x1c8>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <control_step+0x1a8>)
 800200a:	edc3 7a00 	vstr	s15, [r3]
 800200e:	e016      	b.n	800203e <control_step+0xc6>
					//height.command = min(height.command, 1.5);
				}
				else if (command[2]=="1" && command[1]=="0"){
 8002010:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <control_step+0x1ac>)
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	461a      	mov	r2, r3
 8002016:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <control_step+0x1c0>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d110      	bne.n	800203e <control_step+0xc6>
 800201c:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <control_step+0x1ac>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	461a      	mov	r2, r3
 8002022:	4b46      	ldr	r3, [pc, #280]	@ (800213c <control_step+0x1c4>)
 8002024:	429a      	cmp	r2, r3
 8002026:	d10a      	bne.n	800203e <control_step+0xc6>
					height.command-= height_step;
 8002028:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <control_step+0x1a8>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <control_step+0x1c8>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002038:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <control_step+0x1a8>)
 800203a:	edc3 7a00 	vstr	s15, [r3]
					//height.command = max(height.command, 0);
				}


				// Pitch command extraction
				if (command[3]=="1" && command[4]=="0"){
 800203e:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <control_step+0x1ac>)
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	461a      	mov	r2, r3
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <control_step+0x1c0>)
 8002046:	429a      	cmp	r2, r3
 8002048:	d10a      	bne.n	8002060 <control_step+0xe8>
 800204a:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <control_step+0x1ac>)
 800204c:	791b      	ldrb	r3, [r3, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	4b3a      	ldr	r3, [pc, #232]	@ (800213c <control_step+0x1c4>)
 8002052:	429a      	cmp	r2, r3
 8002054:	d104      	bne.n	8002060 <control_step+0xe8>
					pitch.command=1;
 8002056:	4b2e      	ldr	r3, [pc, #184]	@ (8002110 <control_step+0x198>)
 8002058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e013      	b.n	8002088 <control_step+0x110>
				}
				else if (command[4]=="1" && command[3]=="0"){
 8002060:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <control_step+0x1ac>)
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	461a      	mov	r2, r3
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <control_step+0x1c0>)
 8002068:	429a      	cmp	r2, r3
 800206a:	d109      	bne.n	8002080 <control_step+0x108>
 800206c:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <control_step+0x1ac>)
 800206e:	78db      	ldrb	r3, [r3, #3]
 8002070:	461a      	mov	r2, r3
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <control_step+0x1c4>)
 8002074:	429a      	cmp	r2, r3
 8002076:	d103      	bne.n	8002080 <control_step+0x108>
					pitch.command=-1;
 8002078:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <control_step+0x198>)
 800207a:	4a32      	ldr	r2, [pc, #200]	@ (8002144 <control_step+0x1cc>)
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e003      	b.n	8002088 <control_step+0x110>
				}

				else{
					pitch.command=0;
 8002080:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <control_step+0x198>)
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
				}


				// Roll command extraction
				if (command[5]=="1" && command[6]=="0"){
 8002088:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <control_step+0x1ac>)
 800208a:	795b      	ldrb	r3, [r3, #5]
 800208c:	461a      	mov	r2, r3
 800208e:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <control_step+0x1c0>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d10a      	bne.n	80020aa <control_step+0x132>
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <control_step+0x1ac>)
 8002096:	799b      	ldrb	r3, [r3, #6]
 8002098:	461a      	mov	r2, r3
 800209a:	4b28      	ldr	r3, [pc, #160]	@ (800213c <control_step+0x1c4>)
 800209c:	429a      	cmp	r2, r3
 800209e:	d104      	bne.n	80020aa <control_step+0x132>
					roll.command=1;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <control_step+0x194>)
 80020a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e013      	b.n	80020d2 <control_step+0x15a>
				}
				else if (command[6]=="1" && command[5]=="0"){
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <control_step+0x1ac>)
 80020ac:	799b      	ldrb	r3, [r3, #6]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <control_step+0x1c0>)
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d109      	bne.n	80020ca <control_step+0x152>
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <control_step+0x1ac>)
 80020b8:	795b      	ldrb	r3, [r3, #5]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <control_step+0x1c4>)
 80020be:	429a      	cmp	r2, r3
 80020c0:	d103      	bne.n	80020ca <control_step+0x152>
					roll.command=-1;
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <control_step+0x194>)
 80020c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002144 <control_step+0x1cc>)
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e003      	b.n	80020d2 <control_step+0x15a>
				}

				else{
					roll.command=0;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <control_step+0x194>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
				}

				// Yaw command extraction
				if (command[7]=="1" && command[8]=="0"){
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <control_step+0x1ac>)
 80020d4:	79db      	ldrb	r3, [r3, #7]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <control_step+0x1c0>)
 80020da:	429a      	cmp	r2, r3
 80020dc:	d136      	bne.n	800214c <control_step+0x1d4>
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <control_step+0x1ac>)
 80020e0:	7a1b      	ldrb	r3, [r3, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <control_step+0x1c4>)
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d130      	bne.n	800214c <control_step+0x1d4>
					yaw.command+=yaw_step;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <control_step+0x19c>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <control_step+0x1d0>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <control_step+0x19c>)
 80020fc:	edc3 7a00 	vstr	s15, [r3]
 8002100:	e03b      	b.n	800217a <control_step+0x202>
 8002102:	bf00      	nop
 8002104:	200003f4 	.word	0x200003f4
 8002108:	20000054 	.word	0x20000054
 800210c:	20000354 	.word	0x20000354
 8002110:	20000334 	.word	0x20000334
 8002114:	20000344 	.word	0x20000344
 8002118:	200003f8 	.word	0x200003f8
 800211c:	42c80000 	.word	0x42c80000
 8002120:	20000324 	.word	0x20000324
 8002124:	200003fc 	.word	0x200003fc
 8002128:	200003c4 	.word	0x200003c4
 800212c:	200003d0 	.word	0x200003d0
 8002130:	200003dc 	.word	0x200003dc
 8002134:	200003e8 	.word	0x200003e8
 8002138:	08007bbc 	.word	0x08007bbc
 800213c:	08007bc0 	.word	0x08007bc0
 8002140:	20000318 	.word	0x20000318
 8002144:	bf800000 	.word	0xbf800000
 8002148:	20000320 	.word	0x20000320
				}
				else if (command[8]=="1" && command[7]=="0"){
 800214c:	4bca      	ldr	r3, [pc, #808]	@ (8002478 <control_step+0x500>)
 800214e:	7a1b      	ldrb	r3, [r3, #8]
 8002150:	461a      	mov	r2, r3
 8002152:	4bca      	ldr	r3, [pc, #808]	@ (800247c <control_step+0x504>)
 8002154:	429a      	cmp	r2, r3
 8002156:	d110      	bne.n	800217a <control_step+0x202>
 8002158:	4bc7      	ldr	r3, [pc, #796]	@ (8002478 <control_step+0x500>)
 800215a:	79db      	ldrb	r3, [r3, #7]
 800215c:	461a      	mov	r2, r3
 800215e:	4bc8      	ldr	r3, [pc, #800]	@ (8002480 <control_step+0x508>)
 8002160:	429a      	cmp	r2, r3
 8002162:	d10a      	bne.n	800217a <control_step+0x202>
					yaw.command-= yaw_step;
 8002164:	4bc7      	ldr	r3, [pc, #796]	@ (8002484 <control_step+0x50c>)
 8002166:	ed93 7a00 	vldr	s14, [r3]
 800216a:	4bc7      	ldr	r3, [pc, #796]	@ (8002488 <control_step+0x510>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002174:	4bc3      	ldr	r3, [pc, #780]	@ (8002484 <control_step+0x50c>)
 8002176:	edc3 7a00 	vstr	s15, [r3]
				}

				if (strcmp(command, "$11111111")==0){
 800217a:	49c4      	ldr	r1, [pc, #784]	@ (800248c <control_step+0x514>)
 800217c:	48be      	ldr	r0, [pc, #760]	@ (8002478 <control_step+0x500>)
 800217e:	f7fe f823 	bl	80001c8 <strcmp>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <control_step+0x216>
					flight_allowed = 0;
 8002188:	4bc1      	ldr	r3, [pc, #772]	@ (8002490 <control_step+0x518>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
			}

			//--------- Processing data ------------//
			// Calculating control inputs

			height.error = height.measurement - height.command;
 800218e:	4bc1      	ldr	r3, [pc, #772]	@ (8002494 <control_step+0x51c>)
 8002190:	ed93 7a01 	vldr	s14, [r3, #4]
 8002194:	4bbf      	ldr	r3, [pc, #764]	@ (8002494 <control_step+0x51c>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	4bbd      	ldr	r3, [pc, #756]	@ (8002494 <control_step+0x51c>)
 80021a0:	edc3 7a03 	vstr	s15, [r3, #12]
			pitch.error = pitch.measurement - pitch.command;
 80021a4:	4bbc      	ldr	r3, [pc, #752]	@ (8002498 <control_step+0x520>)
 80021a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80021aa:	4bbb      	ldr	r3, [pc, #748]	@ (8002498 <control_step+0x520>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002498 <control_step+0x520>)
 80021b6:	edc3 7a03 	vstr	s15, [r3, #12]
			yaw.error = yaw.measurement - yaw.command;
 80021ba:	4bb2      	ldr	r3, [pc, #712]	@ (8002484 <control_step+0x50c>)
 80021bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80021c0:	4bb0      	ldr	r3, [pc, #704]	@ (8002484 <control_step+0x50c>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ca:	4bae      	ldr	r3, [pc, #696]	@ (8002484 <control_step+0x50c>)
 80021cc:	edc3 7a03 	vstr	s15, [r3, #12]
			roll.error = roll.measurement - roll.command;
 80021d0:	4bb2      	ldr	r3, [pc, #712]	@ (800249c <control_step+0x524>)
 80021d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80021d6:	4bb1      	ldr	r3, [pc, #708]	@ (800249c <control_step+0x524>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e0:	4bae      	ldr	r3, [pc, #696]	@ (800249c <control_step+0x524>)
 80021e2:	edc3 7a03 	vstr	s15, [r3, #12]

			// Calculating control outputs

			height.u = update(heightPID,height.error);
 80021e6:	4bab      	ldr	r3, [pc, #684]	@ (8002494 <control_step+0x51c>)
 80021e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ec:	4bac      	ldr	r3, [pc, #688]	@ (80024a0 <control_step+0x528>)
 80021ee:	466c      	mov	r4, sp
 80021f0:	f103 0210 	add.w	r2, r3, #16
 80021f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80021fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f7ff f939 	bl	8001478 <update>
 8002206:	eef0 7a40 	vmov.f32	s15, s0
 800220a:	4ba2      	ldr	r3, [pc, #648]	@ (8002494 <control_step+0x51c>)
 800220c:	edc3 7a02 	vstr	s15, [r3, #8]
			pitch.u = update(pitchPID, pitch.error);
 8002210:	4ba1      	ldr	r3, [pc, #644]	@ (8002498 <control_step+0x520>)
 8002212:	edd3 7a03 	vldr	s15, [r3, #12]
 8002216:	4ba3      	ldr	r3, [pc, #652]	@ (80024a4 <control_step+0x52c>)
 8002218:	466c      	mov	r4, sp
 800221a:	f103 0210 	add.w	r2, r3, #16
 800221e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002222:	e884 0003 	stmia.w	r4, {r0, r1}
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	eeb0 0a67 	vmov.f32	s0, s15
 800222c:	f7ff f924 	bl	8001478 <update>
 8002230:	eef0 7a40 	vmov.f32	s15, s0
 8002234:	4b98      	ldr	r3, [pc, #608]	@ (8002498 <control_step+0x520>)
 8002236:	edc3 7a02 	vstr	s15, [r3, #8]
			yaw.u = update(yawPID, yaw.error);
 800223a:	4b92      	ldr	r3, [pc, #584]	@ (8002484 <control_step+0x50c>)
 800223c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002240:	4b99      	ldr	r3, [pc, #612]	@ (80024a8 <control_step+0x530>)
 8002242:	466c      	mov	r4, sp
 8002244:	f103 0210 	add.w	r2, r3, #16
 8002248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800224c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002252:	eeb0 0a67 	vmov.f32	s0, s15
 8002256:	f7ff f90f 	bl	8001478 <update>
 800225a:	eef0 7a40 	vmov.f32	s15, s0
 800225e:	4b89      	ldr	r3, [pc, #548]	@ (8002484 <control_step+0x50c>)
 8002260:	edc3 7a02 	vstr	s15, [r3, #8]
			roll.u = update(rollPID,roll.error);
 8002264:	4b8d      	ldr	r3, [pc, #564]	@ (800249c <control_step+0x524>)
 8002266:	edd3 7a03 	vldr	s15, [r3, #12]
 800226a:	4b90      	ldr	r3, [pc, #576]	@ (80024ac <control_step+0x534>)
 800226c:	466c      	mov	r4, sp
 800226e:	f103 0210 	add.w	r2, r3, #16
 8002272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002276:	e884 0003 	stmia.w	r4, {r0, r1}
 800227a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	f7ff f8fa 	bl	8001478 <update>
 8002284:	eef0 7a40 	vmov.f32	s15, s0
 8002288:	4b84      	ldr	r3, [pc, #528]	@ (800249c <control_step+0x524>)
 800228a:	edc3 7a02 	vstr	s15, [r3, #8]

			//--------- Changing motors behaviour ------------//

			// motor mixing algorithm
			int FR_percentage = fmin(100, fmax(0, height.u+yaw.u+pitch.u+roll.u));
 800228e:	4b81      	ldr	r3, [pc, #516]	@ (8002494 <control_step+0x51c>)
 8002290:	ed93 7a02 	vldr	s14, [r3, #8]
 8002294:	4b7b      	ldr	r3, [pc, #492]	@ (8002484 <control_step+0x50c>)
 8002296:	edd3 7a02 	vldr	s15, [r3, #8]
 800229a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800229e:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <control_step+0x520>)
 80022a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a8:	4b7c      	ldr	r3, [pc, #496]	@ (800249c <control_step+0x524>)
 80022aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	ee17 0a90 	vmov	r0, s15
 80022b6:	f7fe f8f5 	bl	80004a4 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8002468 <control_step+0x4f0>
 80022c2:	ec43 2b10 	vmov	d0, r2, r3
 80022c6:	f005 fbef 	bl	8007aa8 <fmax>
 80022ca:	eeb0 7a40 	vmov.f32	s14, s0
 80022ce:	eef0 7a60 	vmov.f32	s15, s1
 80022d2:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8002470 <control_step+0x4f8>
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f005 fc0d 	bl	8007afc <fmin>
 80022e2:	ec53 2b10 	vmov	r2, r3, d0
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fbcd 	bl	8000a88 <__aeabi_d2iz>
 80022ee:	4603      	mov	r3, r0
 80022f0:	60fb      	str	r3, [r7, #12]
			int FL_percentage = fmin(100, fmax(0, height.u-yaw.u+pitch.u-roll.u));
 80022f2:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <control_step+0x51c>)
 80022f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80022f8:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <control_step+0x50c>)
 80022fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80022fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002302:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <control_step+0x520>)
 8002304:	edd3 7a02 	vldr	s15, [r3, #8]
 8002308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230c:	4b63      	ldr	r3, [pc, #396]	@ (800249c <control_step+0x524>)
 800230e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	ee17 0a90 	vmov	r0, s15
 800231a:	f7fe f8c3 	bl	80004a4 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002468 <control_step+0x4f0>
 8002326:	ec43 2b10 	vmov	d0, r2, r3
 800232a:	f005 fbbd 	bl	8007aa8 <fmax>
 800232e:	eeb0 7a40 	vmov.f32	s14, s0
 8002332:	eef0 7a60 	vmov.f32	s15, s1
 8002336:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8002470 <control_step+0x4f8>
 800233a:	eeb0 0a47 	vmov.f32	s0, s14
 800233e:	eef0 0a67 	vmov.f32	s1, s15
 8002342:	f005 fbdb 	bl	8007afc <fmin>
 8002346:	ec53 2b10 	vmov	r2, r3, d0
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7fe fb9b 	bl	8000a88 <__aeabi_d2iz>
 8002352:	4603      	mov	r3, r0
 8002354:	60bb      	str	r3, [r7, #8]
			int BR_percentage = fmin(100, fmax(0, height.u-yaw.u-pitch.u+roll.u));
 8002356:	4b4f      	ldr	r3, [pc, #316]	@ (8002494 <control_step+0x51c>)
 8002358:	ed93 7a02 	vldr	s14, [r3, #8]
 800235c:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <control_step+0x50c>)
 800235e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002366:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <control_step+0x520>)
 8002368:	edd3 7a02 	vldr	s15, [r3, #8]
 800236c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002370:	4b4a      	ldr	r3, [pc, #296]	@ (800249c <control_step+0x524>)
 8002372:	edd3 7a02 	vldr	s15, [r3, #8]
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	ee17 0a90 	vmov	r0, s15
 800237e:	f7fe f891 	bl	80004a4 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8002468 <control_step+0x4f0>
 800238a:	ec43 2b10 	vmov	d0, r2, r3
 800238e:	f005 fb8b 	bl	8007aa8 <fmax>
 8002392:	eeb0 7a40 	vmov.f32	s14, s0
 8002396:	eef0 7a60 	vmov.f32	s15, s1
 800239a:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002470 <control_step+0x4f8>
 800239e:	eeb0 0a47 	vmov.f32	s0, s14
 80023a2:	eef0 0a67 	vmov.f32	s1, s15
 80023a6:	f005 fba9 	bl	8007afc <fmin>
 80023aa:	ec53 2b10 	vmov	r2, r3, d0
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fb69 	bl	8000a88 <__aeabi_d2iz>
 80023b6:	4603      	mov	r3, r0
 80023b8:	607b      	str	r3, [r7, #4]
			int BL_percentage = fmin(100, fmax(0, height.u+yaw.u-pitch.u-roll.u));
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <control_step+0x51c>)
 80023bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80023c0:	4b30      	ldr	r3, [pc, #192]	@ (8002484 <control_step+0x50c>)
 80023c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <control_step+0x520>)
 80023cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80023d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d4:	4b31      	ldr	r3, [pc, #196]	@ (800249c <control_step+0x524>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023de:	ee17 0a90 	vmov	r0, s15
 80023e2:	f7fe f85f 	bl	80004a4 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8002468 <control_step+0x4f0>
 80023ee:	ec43 2b10 	vmov	d0, r2, r3
 80023f2:	f005 fb59 	bl	8007aa8 <fmax>
 80023f6:	eeb0 7a40 	vmov.f32	s14, s0
 80023fa:	eef0 7a60 	vmov.f32	s15, s1
 80023fe:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002470 <control_step+0x4f8>
 8002402:	eeb0 0a47 	vmov.f32	s0, s14
 8002406:	eef0 0a67 	vmov.f32	s1, s15
 800240a:	f005 fb77 	bl	8007afc <fmin>
 800240e:	ec53 2b10 	vmov	r2, r3, d0
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fb37 	bl	8000a88 <__aeabi_d2iz>
 800241a:	4603      	mov	r3, r0
 800241c:	603b      	str	r3, [r7, #0]

			motor_SetPower(&MOTOR_FRONT_RIGHT, FR_percentage);
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	4823      	ldr	r0, [pc, #140]	@ (80024b0 <control_step+0x538>)
 8002422:	f7fe fd71 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, FL_percentage);
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	4822      	ldr	r0, [pc, #136]	@ (80024b4 <control_step+0x53c>)
 800242a:	f7fe fd6d 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, BR_percentage);
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4821      	ldr	r0, [pc, #132]	@ (80024b8 <control_step+0x540>)
 8002432:	f7fe fd69 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, BL_percentage);
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	4820      	ldr	r0, [pc, #128]	@ (80024bc <control_step+0x544>)
 800243a:	f7fe fd65 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
		}

}
 800243e:	e00f      	b.n	8002460 <control_step+0x4e8>
			motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 8002440:	2100      	movs	r1, #0
 8002442:	481b      	ldr	r0, [pc, #108]	@ (80024b0 <control_step+0x538>)
 8002444:	f7fe fd60 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8002448:	2100      	movs	r1, #0
 800244a:	481a      	ldr	r0, [pc, #104]	@ (80024b4 <control_step+0x53c>)
 800244c:	f7fe fd5c 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 8002450:	2100      	movs	r1, #0
 8002452:	4819      	ldr	r0, [pc, #100]	@ (80024b8 <control_step+0x540>)
 8002454:	f7fe fd58 	bl	8000f08 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8002458:	2100      	movs	r1, #0
 800245a:	4818      	ldr	r0, [pc, #96]	@ (80024bc <control_step+0x544>)
 800245c:	f7fe fd54 	bl	8000f08 <motor_SetPower>
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
	...
 8002474:	40590000 	.word	0x40590000
 8002478:	200003fc 	.word	0x200003fc
 800247c:	08007bbc 	.word	0x08007bbc
 8002480:	08007bc0 	.word	0x08007bc0
 8002484:	20000344 	.word	0x20000344
 8002488:	20000320 	.word	0x20000320
 800248c:	08007bc4 	.word	0x08007bc4
 8002490:	200003f4 	.word	0x200003f4
 8002494:	20000324 	.word	0x20000324
 8002498:	20000334 	.word	0x20000334
 800249c:	20000354 	.word	0x20000354
 80024a0:	20000364 	.word	0x20000364
 80024a4:	2000037c 	.word	0x2000037c
 80024a8:	200003ac 	.word	0x200003ac
 80024ac:	20000394 	.word	0x20000394
 80024b0:	200003c4 	.word	0x200003c4
 80024b4:	200003d0 	.word	0x200003d0
 80024b8:	200003dc 	.word	0x200003dc
 80024bc:	200003e8 	.word	0x200003e8

080024c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_MspInit+0x44>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <HAL_MspInit+0x44>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_MspInit+0x44>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_MspInit+0x44>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0ac      	sub	sp, #176	@ 0xb0
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2288      	movs	r2, #136	@ 0x88
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fa90 	bl	8007a4e <memset>
  if(hi2c->Instance==I2C2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <HAL_I2C_MspInit+0xb0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d13b      	bne.n	80025b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800253c:	2300      	movs	r3, #0
 800253e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fa29 	bl	800499c <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002550:	f7ff fc0c 	bl	8001d6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002560:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002574:	2312      	movs	r3, #18
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002586:	2304      	movs	r3, #4
 8002588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002590:	4619      	mov	r1, r3
 8002592:	480b      	ldr	r0, [pc, #44]	@ (80025c0 <HAL_I2C_MspInit+0xb8>)
 8002594:	f000 fc34 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 800259e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_I2C_MspInit+0xb4>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025b0:	bf00      	nop
 80025b2:	37b0      	adds	r7, #176	@ 0xb0
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40005800 	.word	0x40005800
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48000400 	.word	0x48000400

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	@ 0x38
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_TIM_Base_MspInit+0x160>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10c      	bne.n	8002600 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80025ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80025f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80025fe:	e08c      	b.n	800271a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d114      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800260a:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	4a46      	ldr	r2, [pc, #280]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
 8002616:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	201c      	movs	r0, #28
 8002628:	f000 fbb3 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800262c:	201c      	movs	r0, #28
 800262e:	f000 fbcc 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 8002632:	e072      	b.n	800271a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3c      	ldr	r2, [pc, #240]	@ (800272c <HAL_TIM_Base_MspInit+0x168>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d114      	bne.n	8002668 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263e:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	4a39      	ldr	r2, [pc, #228]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6593      	str	r3, [r2, #88]	@ 0x58
 800264a:	4b37      	ldr	r3, [pc, #220]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	201d      	movs	r0, #29
 800265c:	f000 fb99 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002660:	201d      	movs	r0, #29
 8002662:	f000 fbb2 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 8002666:	e058      	b.n	800271a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a30      	ldr	r2, [pc, #192]	@ (8002730 <HAL_TIM_Base_MspInit+0x16c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d130      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a2c      	ldr	r2, [pc, #176]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
 800267e:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a2:	2340      	movs	r3, #64	@ 0x40
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026b2:	2302      	movs	r3, #2
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	481d      	ldr	r0, [pc, #116]	@ (8002734 <HAL_TIM_Base_MspInit+0x170>)
 80026be:	f000 fb9f 	bl	8002e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201e      	movs	r0, #30
 80026c8:	f000 fb63 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026cc:	201e      	movs	r0, #30
 80026ce:	f000 fb7c 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 80026d2:	e022      	b.n	800271a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <HAL_TIM_Base_MspInit+0x174>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
}
 80026f6:	e010      	b.n	800271a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0f      	ldr	r2, [pc, #60]	@ (800273c <HAL_TIM_Base_MspInit+0x178>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10b      	bne.n	800271a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002708:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800270c:	6613      	str	r3, [r2, #96]	@ 0x60
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_TIM_Base_MspInit+0x164>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
}
 800271a:	bf00      	nop
 800271c:	3738      	adds	r7, #56	@ 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	48000400 	.word	0x48000400
 8002738:	40000c00 	.word	0x40000c00
 800273c:	40013400 	.word	0x40013400

08002740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a23      	ldr	r2, [pc, #140]	@ (80027ec <HAL_TIM_MspPostInit+0xac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11e      	bne.n	80027a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b23      	ldr	r3, [pc, #140]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a22      	ldr	r2, [pc, #136]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800277a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800278c:	2301      	movs	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800279a:	f000 fb31 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800279e:	e020      	b.n	80027e2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <HAL_TIM_MspPostInit+0xb4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d11b      	bne.n	80027e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <HAL_TIM_MspPostInit+0xb0>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c2:	2340      	movs	r3, #64	@ 0x40
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027d2:	2303      	movs	r3, #3
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4806      	ldr	r0, [pc, #24]	@ (80027f8 <HAL_TIM_MspPostInit+0xb8>)
 80027de:	f000 fb0f 	bl	8002e00 <HAL_GPIO_Init>
}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	@ 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40013400 	.word	0x40013400
 80027f8:	48000800 	.word	0x48000800

080027fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0ac      	sub	sp, #176	@ 0xb0
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2288      	movs	r2, #136	@ 0x88
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f005 f916 	bl	8007a4e <memset>
  if(huart->Instance==USART2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	@ (80028ac <HAL_UART_MspInit+0xb0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d13b      	bne.n	80028a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800282c:	2302      	movs	r3, #2
 800282e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002830:	2300      	movs	r3, #0
 8002832:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4618      	mov	r0, r3
 800283a:	f002 f8af 	bl	800499c <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002844:	f7ff fa92 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002852:	6593      	str	r3, [r2, #88]	@ 0x58
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_UART_MspInit+0xb4>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002878:	230c      	movs	r3, #12
 800287a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002890:	2307      	movs	r3, #7
 8002892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a0:	f000 faae 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80028a4:	bf00      	nop
 80028a6:	37b0      	adds	r7, #176	@ 0xb0
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40004400 	.word	0x40004400
 80028b0:	40021000 	.word	0x40021000

080028b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <NMI_Handler+0x4>

080028bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <MemManage_Handler+0x4>

080028cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <UsageFault_Handler+0x4>

080028dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290a:	f000 f923 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <TIM2_IRQHandler+0x38>)
 800291a:	f003 f93f 	bl	8005b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  IMU_ReadAccelGyro_Converted_All((float)IMU_PERIOD_MS/(float)1000);
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <TIM2_IRQHandler+0x3c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002954 <TIM2_IRQHandler+0x40>
 800292e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002932:	ee16 0a90 	vmov	r0, s13
 8002936:	f7fd fdb5 	bl	80004a4 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	ec43 2b10 	vmov	d0, r2, r3
 8002942:	f7fe fcd1 	bl	80012e8 <IMU_ReadAccelGyro_Converted_All>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000010c 	.word	0x2000010c
 8002950:	20000000 	.word	0x20000000
 8002954:	447a0000 	.word	0x447a0000

08002958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800295c:	4803      	ldr	r0, [pc, #12]	@ (800296c <TIM3_IRQHandler+0x14>)
 800295e:	f003 f91d 	bl	8005b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  control_step();
 8002962:	f7ff fb09 	bl	8001f78 <control_step>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000158 	.word	0x20000158

08002970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (rising == 0){
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <TIM4_IRQHandler+0x98>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <TIM4_IRQHandler+0x20>
			rising_time = htim5.Instance->CNT;
 800297c:	4b23      	ldr	r3, [pc, #140]	@ (8002a0c <TIM4_IRQHandler+0x9c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	461a      	mov	r2, r3
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <TIM4_IRQHandler+0xa0>)
 8002986:	601a      	str	r2, [r3, #0]
			rising = 1;
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <TIM4_IRQHandler+0x98>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e031      	b.n	80029f4 <TIM4_IRQHandler+0x84>
		  }
		  else{
			falling_time =  htim5.Instance->CNT;
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <TIM4_IRQHandler+0x9c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	461a      	mov	r2, r3
 8002998:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <TIM4_IRQHandler+0xa4>)
 800299a:	601a      	str	r2, [r3, #0]
			rising = 0;
 800299c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <TIM4_IRQHandler+0x98>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
			pulse_duration = falling_time - rising_time;
 80029a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <TIM4_IRQHandler+0xa4>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <TIM4_IRQHandler+0xa0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <TIM4_IRQHandler+0xa8>)
 80029ae:	6013      	str	r3, [r2, #0]
			ultrasound_measure_cm = (float)pulse_duration/58.31;
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <TIM4_IRQHandler+0xa8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029bc:	ee17 0a90 	vmov	r0, s15
 80029c0:	f7fd fd70 	bl	80004a4 <__aeabi_f2d>
 80029c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002a00 <TIM4_IRQHandler+0x90>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd feed 	bl	80007a8 <__aeabi_ddiv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f87f 	bl	8000ad8 <__aeabi_d2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <TIM4_IRQHandler+0xac>)
 80029de:	6013      	str	r3, [r2, #0]

			if (pulse_duration >= 50000){
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <TIM4_IRQHandler+0xa8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80029e8:	4293      	cmp	r3, r2
 80029ea:	dd03      	ble.n	80029f4 <TIM4_IRQHandler+0x84>
				rising_time = falling_time;
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <TIM4_IRQHandler+0xa4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	@ (8002a10 <TIM4_IRQHandler+0xa0>)
 80029f2:	6013      	str	r3, [r2, #0]
			}
		  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029f4:	480a      	ldr	r0, [pc, #40]	@ (8002a20 <TIM4_IRQHandler+0xb0>)
 80029f6:	f003 f8d1 	bl	8005b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	147ae148 	.word	0x147ae148
 8002a04:	404d27ae 	.word	0x404d27ae
 8002a08:	20000408 	.word	0x20000408
 8002a0c:	200001f0 	.word	0x200001f0
 8002a10:	2000040c 	.word	0x2000040c
 8002a14:	20000410 	.word	0x20000410
 8002a18:	20000414 	.word	0x20000414
 8002a1c:	200003f8 	.word	0x200003f8
 8002a20:	200001a4 	.word	0x200001a4

08002a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <SystemInit+0x20>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2e:	4a05      	ldr	r2, [pc, #20]	@ (8002a44 <SystemInit+0x20>)
 8002a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a4c:	f7ff ffea 	bl	8002a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a50:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a52:	490d      	ldr	r1, [pc, #52]	@ (8002a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a54:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <LoopForever+0xe>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a68:	4c0a      	ldr	r4, [pc, #40]	@ (8002a94 <LoopForever+0x16>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a76:	f004 fff3 	bl	8007a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a7a:	f7fe fd59 	bl	8001530 <main>

08002a7e <LoopForever>:

LoopForever:
    b LoopForever
 8002a7e:	e7fe      	b.n	8002a7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a8c:	08007c28 	.word	0x08007c28
  ldr r2, =_sbss
 8002a90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a94:	2000041c 	.word	0x2000041c

08002a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC1_2_IRQHandler>
	...

08002a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <HAL_Init+0x3c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <HAL_Init+0x3c>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f000 f962 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f80f 	bl	8002adc <HAL_InitTick>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	71fb      	strb	r3, [r7, #7]
 8002ac8:	e001      	b.n	8002ace <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aca:	f7ff fcf9 	bl	80024c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ace:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40022000 	.word	0x40022000

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <HAL_InitTick+0x6c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002af0:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_InitTick+0x70>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <HAL_InitTick+0x6c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f96d 	bl	8002de6 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d809      	bhi.n	8002b2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f000 f937 	bl	8002d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_InitTick+0x74>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e007      	b.n	8002b3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e004      	b.n	8002b3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e001      	b.n	8002b3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	20000418 	.word	0x20000418

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000418 	.word	0x20000418

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	@ (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff8e 	bl	8002c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff29 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff3e 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff8e 	bl	8002cd0 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff5d 	bl	8002c7c <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff31 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffa2 	bl	8002d38 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	e17f      	b.n	8003110 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8171 	beq.w	800310a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d005      	beq.n	8002e40 <HAL_GPIO_Init+0x40>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d130      	bne.n	8002ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e76:	2201      	movs	r2, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0201 	and.w	r2, r3, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d118      	bne.n	8002ee0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	6939      	ldr	r1, [r7, #16]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80ac 	beq.w	800310a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8003130 <HAL_GPIO_Init+0x330>)
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <HAL_GPIO_Init+0x330>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003130 <HAL_GPIO_Init+0x330>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fca:	4a5a      	ldr	r2, [pc, #360]	@ (8003134 <HAL_GPIO_Init+0x334>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ff4:	d025      	beq.n	8003042 <HAL_GPIO_Init+0x242>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8003138 <HAL_GPIO_Init+0x338>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01f      	beq.n	800303e <HAL_GPIO_Init+0x23e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4e      	ldr	r2, [pc, #312]	@ (800313c <HAL_GPIO_Init+0x33c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d019      	beq.n	800303a <HAL_GPIO_Init+0x23a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4d      	ldr	r2, [pc, #308]	@ (8003140 <HAL_GPIO_Init+0x340>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x236>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_GPIO_Init+0x344>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00d      	beq.n	8003032 <HAL_GPIO_Init+0x232>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <HAL_GPIO_Init+0x348>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_GPIO_Init+0x22e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4a      	ldr	r2, [pc, #296]	@ (800314c <HAL_GPIO_Init+0x34c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_GPIO_Init+0x22a>
 8003026:	2306      	movs	r3, #6
 8003028:	e00c      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800302a:	2307      	movs	r3, #7
 800302c:	e00a      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800302e:	2305      	movs	r3, #5
 8003030:	e008      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003032:	2304      	movs	r3, #4
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003036:	2303      	movs	r3, #3
 8003038:	e004      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800303a:	2302      	movs	r3, #2
 800303c:	e002      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003042:	2300      	movs	r3, #0
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	f002 0203 	and.w	r2, r2, #3
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4093      	lsls	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003054:	4937      	ldr	r1, [pc, #220]	@ (8003134 <HAL_GPIO_Init+0x334>)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003062:	4b3b      	ldr	r3, [pc, #236]	@ (8003150 <HAL_GPIO_Init+0x350>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003086:	4a32      	ldr	r2, [pc, #200]	@ (8003150 <HAL_GPIO_Init+0x350>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800308c:	4b30      	ldr	r3, [pc, #192]	@ (8003150 <HAL_GPIO_Init+0x350>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b0:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_GPIO_Init+0x350>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030b6:	4b26      	ldr	r3, [pc, #152]	@ (8003150 <HAL_GPIO_Init+0x350>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030da:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <HAL_GPIO_Init+0x350>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_GPIO_Init+0x350>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003104:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <HAL_GPIO_Init+0x350>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3301      	adds	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ae78 	bne.w	8002e10 <HAL_GPIO_Init+0x10>
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	40010000 	.word	0x40010000
 8003138:	48000400 	.word	0x48000400
 800313c:	48000800 	.word	0x48000800
 8003140:	48000c00 	.word	0x48000c00
 8003144:	48001000 	.word	0x48001000
 8003148:	48001400 	.word	0x48001400
 800314c:	48001800 	.word	0x48001800
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003170:	e002      	b.n	8003178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e08d      	b.n	80032b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f9ac 	bl	8002508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	@ 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e006      	b.n	800320c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800320a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d108      	bne.n	8003226 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	e007      	b.n	8003236 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b20      	cmp	r3, #32
 80032e0:	f040 80fd 	bne.w	80034de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x34>
 80032ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0f1      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2C_Mem_Read+0x4e>
 8003306:	2302      	movs	r3, #2
 8003308:	e0ea      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003312:	f7ff fc33 	bl	8002b7c <HAL_GetTick>
 8003316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2319      	movs	r3, #25
 800331e:	2201      	movs	r2, #1
 8003320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa47 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d5      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2222      	movs	r2, #34	@ 0x22
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	@ 0x40
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800335c:	88f8      	ldrh	r0, [r7, #6]
 800335e:	893a      	ldrh	r2, [r7, #8]
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4603      	mov	r3, r0
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f9ab 	bl	80036c8 <I2C_RequestMemoryRead>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0ad      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2bff      	cmp	r3, #255	@ 0xff
 800338c:	d90e      	bls.n	80033ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	4b52      	ldr	r3, [pc, #328]	@ (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fbcb 	bl	8003b40 <I2C_TransferConfig>
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	4b4a      	ldr	r3, [pc, #296]	@ (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fbba 	bl	8003b40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	2200      	movs	r2, #0
 80033d4:	2104      	movs	r1, #4
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9ee 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07c      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d034      	beq.n	800348c <HAL_I2C_Mem_Read+0x1d0>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d130      	bne.n	800348c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f9bf 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04d      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fb6b 	bl	8003b40 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fb5a 	bl	8003b40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19a      	bne.n	80033cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa2c 	bl	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01a      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_I2C_Mem_Read+0x230>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	80002400 	.word	0x80002400
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	@ 0x28
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b20      	cmp	r3, #32
 800350e:	f040 80d6 	bne.w	80036be <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003520:	d101      	bne.n	8003526 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e0cc      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2C_IsDeviceReady+0x44>
 8003530:	2302      	movs	r3, #2
 8003532:	e0c5      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2224      	movs	r2, #36	@ 0x24
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <HAL_I2C_IsDeviceReady+0x72>
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800355c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003560:	e006      	b.n	8003570 <HAL_I2C_IsDeviceReady+0x80>
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800356c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003576:	f7ff fb01 	bl	8002b7c <HAL_GetTick>
 800357a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b10      	cmp	r3, #16
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80035a8:	e034      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d01a      	beq.n	80035e8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff fae3 	bl	8002b7c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <HAL_I2C_IsDeviceReady+0xd8>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e06b      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_I2C_IsDeviceReady+0x130>
 800361a:	7fbb      	ldrb	r3, [r7, #30]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0c4      	beq.n	80035aa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b10      	cmp	r3, #16
 800362c:	d01a      	beq.n	8003664 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	2120      	movs	r1, #32
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f8bd 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e03b      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2220      	movs	r2, #32
 800364e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e02d      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	2120      	movs	r1, #32
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8a2 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e020      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2210      	movs	r2, #16
 8003684:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3301      	adds	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	f63f af56 	bhi.w	800354a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	4b20      	ldr	r3, [pc, #128]	@ (800376c <I2C_RequestMemoryRead+0xa4>)
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa26 	bl	8003b40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	69b9      	ldr	r1, [r7, #24]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8b6 	bl	800386a <I2C_WaitOnTXISFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e02c      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	629a      	str	r2, [r3, #40]	@ 0x28
 8003718:	e015      	b.n	8003746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	b29b      	uxth	r3, r3
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f89c 	bl	800386a <I2C_WaitOnTXISFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e012      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2200      	movs	r2, #0
 800374e:	2140      	movs	r1, #64	@ 0x40
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f831 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	80002000 	.word	0x80002000

08003770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d103      	bne.n	800378e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	619a      	str	r2, [r3, #24]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c8:	e03b      	b.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8d6 	bl	8003980 <I2C_IsErrorOccurred>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d02d      	beq.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f9c9 	bl	8002b7c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d122      	bne.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	429a      	cmp	r2, r3
 8003818:	d113      	bne.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00f      	b.n	8003862 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d0b4      	beq.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003876:	e033      	b.n	80038e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f87f 	bl	8003980 <I2C_IsErrorOccurred>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e031      	b.n	80038f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d025      	beq.n	80038e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7ff f972 	bl	8002b7c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11a      	bne.n	80038e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d013      	beq.n	80038e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e007      	b.n	80038f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d1c4      	bne.n	8003878 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003904:	e02f      	b.n	8003966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f838 	bl	8003980 <I2C_IsErrorOccurred>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02d      	b.n	8003976 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7ff f92f 	bl	8002b7c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11a      	bne.n	8003966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d013      	beq.n	8003966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e007      	b.n	8003976 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d1c8      	bne.n	8003906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d068      	beq.n	8003a7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039b4:	e049      	b.n	8003a4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d045      	beq.n	8003a4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7ff f8dd 	bl	8002b7c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <I2C_IsErrorOccurred+0x54>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13a      	bne.n	8003a4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f6:	d121      	bne.n	8003a3c <I2C_IsErrorOccurred+0xbc>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039fe:	d01d      	beq.n	8003a3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d01a      	beq.n	8003a3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a16:	f7ff f8b1 	bl	8002b7c <HAL_GetTick>
 8003a1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a1c:	e00e      	b.n	8003a3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a1e:	f7ff f8ad 	bl	8002b7c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b19      	cmp	r3, #25
 8003a2a:	d907      	bls.n	8003a3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f043 0320 	orr.w	r3, r3, #32
 8003a32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a3a:	e006      	b.n	8003a4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d1e9      	bne.n	8003a1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d003      	beq.n	8003a60 <I2C_IsErrorOccurred+0xe0>
 8003a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0aa      	beq.n	80039b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f043 0308 	orr.w	r3, r3, #8
 8003ab8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ac2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f043 0302 	orr.w	r3, r3, #2
 8003ada:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01c      	beq.n	8003b2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fe3b 	bl	8003770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <I2C_IsErrorOccurred+0x1bc>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3728      	adds	r7, #40	@ 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	fe00e800 	.word	0xfe00e800

08003b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b58:	7a7b      	ldrb	r3, [r7, #9]
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	0d5b      	lsrs	r3, r3, #21
 8003b7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <I2C_TransferConfig+0x60>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	43db      	mvns	r3, r3
 8003b84:	ea02 0103 	and.w	r1, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	03ff63ff 	.word	0x03ff63ff

08003ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d138      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e032      	b.n	8003c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d139      	bne.n	8003cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e033      	b.n	8003cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2224      	movs	r2, #36	@ 0x24
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <HAL_PWREx_GetVoltageRange+0x18>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfe:	d130      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d00:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d038      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d16:	4a1e      	ldr	r2, [pc, #120]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2232      	movs	r2, #50	@ 0x32
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d34:	e002      	b.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d48:	d102      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f2      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d50:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d110      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d007      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d78:	4a05      	ldr	r2, [pc, #20]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000
 8003d94:	20000004 	.word	0x20000004
 8003d98:	431bde83 	.word	0x431bde83

08003d9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e3ca      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4b97      	ldr	r3, [pc, #604]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db8:	4b94      	ldr	r3, [pc, #592]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80e4 	beq.w	8003f98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCC_OscConfig+0x4a>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	f040 808b 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8087 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de6:	4b89      	ldr	r3, [pc, #548]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e3a2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	4b82      	ldr	r3, [pc, #520]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCC_OscConfig+0x7c>
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_OscConfig+0x88>
 8003e18:	4b7c      	ldr	r3, [pc, #496]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d223      	bcs.n	8003e70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fd55 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e383      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3c:	4b73      	ldr	r3, [pc, #460]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a72      	ldr	r2, [pc, #456]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e42:	f043 0308 	orr.w	r3, r3, #8
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b70      	ldr	r3, [pc, #448]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	496d      	ldr	r1, [pc, #436]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	4968      	ldr	r1, [pc, #416]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e70:	4b66      	ldr	r3, [pc, #408]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a65      	ldr	r2, [pc, #404]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b63      	ldr	r3, [pc, #396]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4960      	ldr	r1, [pc, #384]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	495b      	ldr	r1, [pc, #364]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fd15 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e343      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ebc:	f000 fc4a 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b52      	ldr	r3, [pc, #328]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	4950      	ldr	r1, [pc, #320]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	@ (8004014 <HAL_RCC_OscConfig+0x278>)
 8003eda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003edc:	4b4e      	ldr	r3, [pc, #312]	@ (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fdfb 	bl	8002adc <HAL_InitTick>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d052      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	e327      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d032      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003efc:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fe38 	bl	8002b7c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f10:	f7fe fe34 	bl	8002b7c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e310      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f22:	4b3a      	ldr	r3, [pc, #232]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a36      	ldr	r2, [pc, #216]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4931      	ldr	r1, [pc, #196]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	492c      	ldr	r1, [pc, #176]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	e01a      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a29      	ldr	r2, [pc, #164]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fe05 	bl	8002b7c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f76:	f7fe fe01 	bl	8002b7c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e2dd      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f88:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1da>
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d074      	beq.n	800408e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x21a>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d10e      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d064      	beq.n	800408c <HAL_RCC_OscConfig+0x2f0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d160      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e2ba      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x24a>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e026      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fee:	d115      	bne.n	800401c <HAL_RCC_OscConfig+0x280>
 8003ff0:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a05      	ldr	r2, [pc, #20]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a02      	ldr	r2, [pc, #8]	@ (800400c <HAL_RCC_OscConfig+0x270>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	08007bd0 	.word	0x08007bd0
 8004014:	20000004 	.word	0x20000004
 8004018:	20000008 	.word	0x20000008
 800401c:	4ba0      	ldr	r3, [pc, #640]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a9f      	ldr	r2, [pc, #636]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b9d      	ldr	r3, [pc, #628]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9c      	ldr	r2, [pc, #624]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fd9e 	bl	8002b7c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fe fd9a 	bl	8002b7c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e276      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	4b92      	ldr	r3, [pc, #584]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2a8>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fd8a 	bl	8002b7c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fd86 	bl	8002b7c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e262      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407e:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x2d0>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d060      	beq.n	800415c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x310>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d119      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d116      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ac:	4b7c      	ldr	r3, [pc, #496]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x328>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e23f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b76      	ldr	r3, [pc, #472]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	4973      	ldr	r1, [pc, #460]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	e040      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d023      	beq.n	800412a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e2:	4b6f      	ldr	r3, [pc, #444]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fd45 	bl	8002b7c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fd41 	bl	8002b7c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e21d      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004108:	4b65      	ldr	r3, [pc, #404]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b62      	ldr	r3, [pc, #392]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	495f      	ldr	r1, [pc, #380]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
 8004128:	e018      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b5d      	ldr	r3, [pc, #372]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5c      	ldr	r2, [pc, #368]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fe fd21 	bl	8002b7c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413e:	f7fe fd1d 	bl	8002b7c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1f9      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004150:	4b53      	ldr	r3, [pc, #332]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004170:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004176:	4a4a      	ldr	r2, [pc, #296]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe fcfc 	bl	8002b7c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004188:	f7fe fcf8 	bl	8002b7c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1d4      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419a:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCC_OscConfig+0x3ec>
 80041a8:	e01b      	b.n	80041e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041aa:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b0:	4a3b      	ldr	r2, [pc, #236]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe fcdf 	bl	8002b7c <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe fcdb 	bl	8002b7c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1b7      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d4:	4b32      	ldr	r3, [pc, #200]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ef      	bne.n	80041c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a6 	beq.w	800433c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f4:	4b2a      	ldr	r3, [pc, #168]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	4a26      	ldr	r2, [pc, #152]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	@ 0x58
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_RCC_OscConfig+0x508>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d118      	bne.n	800425a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004228:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	@ (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004234:	f7fe fca2 	bl	8002b7c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fe fc9e 	bl	8002b7c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e17a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <HAL_RCC_OscConfig+0x508>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d108      	bne.n	8004274 <HAL_RCC_OscConfig+0x4d8>
 8004262:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004272:	e029      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d115      	bne.n	80042a8 <HAL_RCC_OscConfig+0x50c>
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	4a07      	ldr	r2, [pc, #28]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	4a03      	ldr	r2, [pc, #12]	@ (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800429c:	e014      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	4b9c      	ldr	r3, [pc, #624]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ae:	4a9b      	ldr	r2, [pc, #620]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042b8:	4b98      	ldr	r3, [pc, #608]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042be:	4a97      	ldr	r2, [pc, #604]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe fc54 	bl	8002b7c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe fc50 	bl	8002b7c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e12a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ee:	4b8b      	ldr	r3, [pc, #556]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ed      	beq.n	80042d8 <HAL_RCC_OscConfig+0x53c>
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fe fc3d 	bl	8002b7c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fe fc39 	bl	8002b7c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e113      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431c:	4b7f      	ldr	r3, [pc, #508]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ed      	bne.n	8004306 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b7a      	ldr	r3, [pc, #488]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	4a79      	ldr	r2, [pc, #484]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80fe 	beq.w	8004542 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b02      	cmp	r3, #2
 800434c:	f040 80d0 	bne.w	80044f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004350:	4b72      	ldr	r3, [pc, #456]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d130      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	3b01      	subs	r3, #1
 8004370:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d127      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11f      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004390:	2a07      	cmp	r2, #7
 8004392:	bf14      	ite	ne
 8004394:	2201      	movne	r2, #1
 8004396:	2200      	moveq	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d06e      	beq.n	80044a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d069      	beq.n	80044a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043cc:	4b53      	ldr	r3, [pc, #332]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043d8:	4b50      	ldr	r3, [pc, #320]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0ad      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043e8:	4b4c      	ldr	r3, [pc, #304]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f4:	f7fe fbc2 	bl	8002b7c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe fbbe 	bl	8002b7c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e09a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	4b43      	ldr	r3, [pc, #268]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441a:	4b40      	ldr	r3, [pc, #256]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b40      	ldr	r3, [pc, #256]	@ (8004520 <HAL_RCC_OscConfig+0x784>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800442a:	3a01      	subs	r2, #1
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004434:	0212      	lsls	r2, r2, #8
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800443c:	0852      	lsrs	r2, r2, #1
 800443e:	3a01      	subs	r2, #1
 8004440:	0552      	lsls	r2, r2, #21
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004448:	0852      	lsrs	r2, r2, #1
 800444a:	3a01      	subs	r2, #1
 800444c:	0652      	lsls	r2, r2, #25
 800444e:	4311      	orrs	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004454:	0912      	lsrs	r2, r2, #4
 8004456:	0452      	lsls	r2, r2, #17
 8004458:	430a      	orrs	r2, r1
 800445a:	4930      	ldr	r1, [pc, #192]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 800445c:	4313      	orrs	r3, r2
 800445e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004460:	4b2e      	ldr	r3, [pc, #184]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a2a      	ldr	r2, [pc, #168]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004476:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004478:	f7fe fb80 	bl	8002b7c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe fb7c 	bl	8002b7c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e058      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	4b22      	ldr	r3, [pc, #136]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449e:	e050      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a4:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d148      	bne.n	8004542 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c8:	f7fe fb58 	bl	8002b7c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fb54 	bl	8002b7c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e030      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	4b0e      	ldr	r3, [pc, #56]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x734>
 80044ee:	e028      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a08      	ldr	r2, [pc, #32]	@ (800451c <HAL_RCC_OscConfig+0x780>)
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe fb3b 	bl	8002b7c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	e00c      	b.n	8004524 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe fb37 	bl	8002b7c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d905      	bls.n	8004524 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e013      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
 800451c:	40021000 	.word	0x40021000
 8004520:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ec      	bne.n	800450a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4905      	ldr	r1, [pc, #20]	@ (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_RCC_OscConfig+0x7b4>)
 8004538:	4013      	ands	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
 800453c:	e001      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	feeefffc 	.word	0xfeeefffc

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0e7      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b75      	ldr	r3, [pc, #468]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b72      	ldr	r3, [pc, #456]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4970      	ldr	r1, [pc, #448]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b6e      	ldr	r3, [pc, #440]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0cf      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b66      	ldr	r3, [pc, #408]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b63      	ldr	r3, [pc, #396]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4960      	ldr	r1, [pc, #384]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04c      	beq.n	800466c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b5a      	ldr	r3, [pc, #360]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d121      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0a6      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	4b54      	ldr	r3, [pc, #336]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d115      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e09a      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800460a:	4b4e      	ldr	r3, [pc, #312]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e08e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461a:	4b4a      	ldr	r3, [pc, #296]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e086      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800462a:	4b46      	ldr	r3, [pc, #280]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4943      	ldr	r1, [pc, #268]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fe fa9e 	bl	8002b7c <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7fe fa9a 	bl	8002b7c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e06e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b3a      	ldr	r3, [pc, #232]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	492b      	ldr	r1, [pc, #172]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469a:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d210      	bcs.n	80046ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a8:	4b25      	ldr	r3, [pc, #148]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	4923      	ldr	r1, [pc, #140]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b8:	4b21      	ldr	r3, [pc, #132]	@ (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e036      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4918      	ldr	r1, [pc, #96]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4910      	ldr	r1, [pc, #64]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004708:	f000 f824 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	490b      	ldr	r1, [pc, #44]	@ (8004748 <HAL_RCC_ClockConfig+0x1f4>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	4a09      	ldr	r2, [pc, #36]	@ (800474c <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <HAL_RCC_ClockConfig+0x1fc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe f9d5 	bl	8002adc <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	72fb      	strb	r3, [r7, #11]

  return status;
 8004736:	7afb      	ldrb	r3, [r7, #11]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	08007bd0 	.word	0x08007bd0
 800474c:	20000004 	.word	0x20000004
 8004750:	20000008 	.word	0x20000008

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	@ 0x24
 8004758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004762:	4b3e      	ldr	r3, [pc, #248]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800476c:	4b3b      	ldr	r3, [pc, #236]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d121      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11e      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004788:	4b34      	ldr	r3, [pc, #208]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004794:	4b31      	ldr	r3, [pc, #196]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a4:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047cc:	4b25      	ldr	r3, [pc, #148]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e004      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d8:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 80047da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d134      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0xa6>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xac>
 80047f8:	e005      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	e005      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004800:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	e002      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	617b      	str	r3, [r7, #20]
      break;
 800480a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800480c:	4b13      	ldr	r3, [pc, #76]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	3301      	adds	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800481a:	4b10      	ldr	r3, [pc, #64]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004832:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0e5b      	lsrs	r3, r3, #25
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	3301      	adds	r3, #1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800484c:	69bb      	ldr	r3, [r7, #24]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	@ 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	08007be8 	.word	0x08007be8
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b03      	ldr	r3, [pc, #12]	@ (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	08007be0 	.word	0x08007be0

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b4:	f7ff ffda 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0adb      	lsrs	r3, r3, #11
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	@ (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	08007be0 	.word	0x08007be0

080048dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f4:	f7ff f9ee 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 80048f8:	6178      	str	r0, [r7, #20]
 80048fa:	e014      	b.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	4b25      	ldr	r3, [pc, #148]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	4a24      	ldr	r2, [pc, #144]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	@ 0x58
 8004908:	4b22      	ldr	r3, [pc, #136]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004914:	f7ff f9de 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 8004918:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492c:	d10b      	bne.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b80      	cmp	r3, #128	@ 0x80
 8004932:	d919      	bls.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2ba0      	cmp	r3, #160	@ 0xa0
 8004938:	d902      	bls.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493a:	2302      	movs	r3, #2
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e013      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004940:	2301      	movs	r3, #1
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e010      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b80      	cmp	r3, #128	@ 0x80
 800494a:	d902      	bls.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800494c:	2303      	movs	r3, #3
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e00a      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d102      	bne.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004958:	2302      	movs	r3, #2
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e004      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b70      	cmp	r3, #112	@ 0x70
 8004962:	d101      	bne.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004964:	2301      	movs	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004968:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 0207 	bic.w	r2, r3, #7
 8004970:	4909      	ldr	r1, [pc, #36]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	40022000 	.word	0x40022000

0800499c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a4:	2300      	movs	r3, #0
 80049a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d041      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c0:	d02a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c6:	d824      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049cc:	d008      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d2:	d81e      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049dc:	d010      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049de:	e018      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e0:	4b86      	ldr	r3, [pc, #536]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a85      	ldr	r2, [pc, #532]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e015      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fabb 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fe:	e00c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3320      	adds	r3, #32
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fba6 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	74fb      	strb	r3, [r7, #19]
      break;
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a20:	4b76      	ldr	r3, [pc, #472]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a2e:	4973      	ldr	r1, [pc, #460]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d041      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a50:	d02a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a56:	d824      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a62:	d81e      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a6c:	d010      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a70:	4b62      	ldr	r3, [pc, #392]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a61      	ldr	r2, [pc, #388]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7c:	e015      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fa73 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8e:	e00c      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3320      	adds	r3, #32
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fb5e 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab0:	4b52      	ldr	r3, [pc, #328]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abe:	494f      	ldr	r1, [pc, #316]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80a0 	beq.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ade:	4b47      	ldr	r3, [pc, #284]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b41      	ldr	r3, [pc, #260]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af8:	4a40      	ldr	r2, [pc, #256]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b00:	4b3e      	ldr	r3, [pc, #248]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b10:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3a      	ldr	r2, [pc, #232]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1c:	f7fe f82e 	bl	8002b7c <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b22:	e009      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fe f82a 	bl	8002b7c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	74fb      	strb	r3, [r7, #19]
        break;
 8004b36:	e005      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b38:	4b31      	ldr	r3, [pc, #196]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d15c      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d019      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b68:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b74:	4b21      	ldr	r3, [pc, #132]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	4a20      	ldr	r2, [pc, #128]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b94:	4a19      	ldr	r2, [pc, #100]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd ffe9 	bl	8002b7c <HAL_GetTick>
 8004baa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fd ffe5 	bl	8002b7c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d902      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ec      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bea:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c08:	7c7b      	ldrb	r3, [r7, #17]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d105      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	4a9d      	ldr	r2, [pc, #628]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c26:	4b98      	ldr	r3, [pc, #608]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f023 0203 	bic.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	4994      	ldr	r1, [pc, #592]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c48:	4b8f      	ldr	r3, [pc, #572]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f023 020c 	bic.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	498c      	ldr	r1, [pc, #560]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6a:	4b87      	ldr	r3, [pc, #540]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	4983      	ldr	r1, [pc, #524]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	497b      	ldr	r1, [pc, #492]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cae:	4b76      	ldr	r3, [pc, #472]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbc:	4972      	ldr	r1, [pc, #456]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	496a      	ldr	r1, [pc, #424]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf2:	4b65      	ldr	r3, [pc, #404]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	4961      	ldr	r1, [pc, #388]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d14:	4b5c      	ldr	r3, [pc, #368]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d22:	4959      	ldr	r1, [pc, #356]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d36:	4b54      	ldr	r3, [pc, #336]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	4950      	ldr	r1, [pc, #320]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d58:	4b4b      	ldr	r3, [pc, #300]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	4948      	ldr	r1, [pc, #288]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d7a:	4b43      	ldr	r3, [pc, #268]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	493f      	ldr	r1, [pc, #252]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004daa:	4937      	ldr	r1, [pc, #220]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dba:	d106      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbc:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dc6:	60d3      	str	r3, [r2, #12]
 8004dc8:	e011      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f8c8 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d028      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	491f      	ldr	r1, [pc, #124]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e24:	60d3      	str	r3, [r2, #12]
 8004e26:	e011      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f899 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02b      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e66:	4908      	ldr	r1, [pc, #32]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a02      	ldr	r2, [pc, #8]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e014      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f867 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02f      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eca:	4928      	ldr	r1, [pc, #160]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f844 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d014      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	74bb      	strb	r3, [r7, #18]
 8004ef6:	e011      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3320      	adds	r3, #32
 8004f06:	2102      	movs	r1, #2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f925 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f28:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f36:	490d      	ldr	r1, [pc, #52]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4a:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5a:	4904      	ldr	r1, [pc, #16]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f62:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000

08004f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f7e:	4b75      	ldr	r3, [pc, #468]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f8a:	4b72      	ldr	r3, [pc, #456]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d10d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d047      	beq.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e044      	b.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d018      	beq.n	8004ff6 <RCCEx_PLLSAI1_Config+0x86>
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d825      	bhi.n	8005014 <RCCEx_PLLSAI1_Config+0xa4>
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d002      	beq.n	8004fd2 <RCCEx_PLLSAI1_Config+0x62>
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d009      	beq.n	8004fe4 <RCCEx_PLLSAI1_Config+0x74>
 8004fd0:	e020      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fd2:	4b60      	ldr	r3, [pc, #384]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11d      	bne.n	800501a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe2:	e01a      	b.n	800501a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d116      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff4:	e013      	b.n	800501e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ff6:	4b57      	ldr	r3, [pc, #348]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005002:	4b54      	ldr	r3, [pc, #336]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005012:	e006      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e004      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005022:	bf00      	nop
    }

    if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800502a:	4b4a      	ldr	r3, [pc, #296]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	430b      	orrs	r3, r1
 8005040:	4944      	ldr	r1, [pc, #272]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d17d      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800504c:	4b41      	ldr	r3, [pc, #260]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a40      	ldr	r2, [pc, #256]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fd90 	bl	8002b7c <HAL_GetTick>
 800505c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505e:	e009      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005060:	f7fd fd8c 	bl	8002b7c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d902      	bls.n	8005074 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	73fb      	strb	r3, [r7, #15]
        break;
 8005072:	e005      	b.n	8005080 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005074:	4b37      	ldr	r3, [pc, #220]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ef      	bne.n	8005060 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d160      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d111      	bne.n	80050b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800508c:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6892      	ldr	r2, [r2, #8]
 800509c:	0211      	lsls	r1, r2, #8
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68d2      	ldr	r2, [r2, #12]
 80050a2:	0912      	lsrs	r2, r2, #4
 80050a4:	0452      	lsls	r2, r2, #17
 80050a6:	430a      	orrs	r2, r1
 80050a8:	492a      	ldr	r1, [pc, #168]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]
 80050ae:	e027      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d112      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b6:	4b27      	ldr	r3, [pc, #156]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	0211      	lsls	r1, r2, #8
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6912      	ldr	r2, [r2, #16]
 80050cc:	0852      	lsrs	r2, r2, #1
 80050ce:	3a01      	subs	r2, #1
 80050d0:	0552      	lsls	r2, r2, #21
 80050d2:	430a      	orrs	r2, r1
 80050d4:	491f      	ldr	r1, [pc, #124]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
 80050da:	e011      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	0211      	lsls	r1, r2, #8
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6952      	ldr	r2, [r2, #20]
 80050f2:	0852      	lsrs	r2, r2, #1
 80050f4:	3a01      	subs	r2, #1
 80050f6:	0652      	lsls	r2, r2, #25
 80050f8:	430a      	orrs	r2, r1
 80050fa:	4916      	ldr	r1, [pc, #88]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005100:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800510a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fd fd36 	bl	8002b7c <HAL_GetTick>
 8005110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005112:	e009      	b.n	8005128 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005114:	f7fd fd32 	bl	8002b7c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	73fb      	strb	r3, [r7, #15]
          break;
 8005126:	e005      	b.n	8005134 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ef      	beq.n	8005114 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800513a:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	4904      	ldr	r1, [pc, #16]	@ (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005166:	4b6a      	ldr	r3, [pc, #424]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d018      	beq.n	80051a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005172:	4b67      	ldr	r3, [pc, #412]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0203 	and.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d10d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
       ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800518a:	4b61      	ldr	r3, [pc, #388]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
       ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d047      	beq.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e044      	b.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d018      	beq.n	80051de <RCCEx_PLLSAI2_Config+0x86>
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d825      	bhi.n	80051fc <RCCEx_PLLSAI2_Config+0xa4>
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d002      	beq.n	80051ba <RCCEx_PLLSAI2_Config+0x62>
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d009      	beq.n	80051cc <RCCEx_PLLSAI2_Config+0x74>
 80051b8:	e020      	b.n	80051fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ba:	4b55      	ldr	r3, [pc, #340]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11d      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ca:	e01a      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051cc:	4b50      	ldr	r3, [pc, #320]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051dc:	e013      	b.n	8005206 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051de:	4b4c      	ldr	r3, [pc, #304]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051ea:	4b49      	ldr	r3, [pc, #292]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051fa:	e006      	b.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e004      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520a:	bf00      	nop
    }

    if(status == HAL_OK)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005212:	4b3f      	ldr	r3, [pc, #252]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	430b      	orrs	r3, r1
 8005228:	4939      	ldr	r1, [pc, #228]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d167      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005234:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a35      	ldr	r2, [pc, #212]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005240:	f7fd fc9c 	bl	8002b7c <HAL_GetTick>
 8005244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005246:	e009      	b.n	800525c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005248:	f7fd fc98 	bl	8002b7c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d902      	bls.n	800525c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	73fb      	strb	r3, [r7, #15]
        break;
 800525a:	e005      	b.n	8005268 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525c:	4b2c      	ldr	r3, [pc, #176]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ef      	bne.n	8005248 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d14a      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d111      	bne.n	8005298 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005274:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800527c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	0211      	lsls	r1, r2, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	0912      	lsrs	r2, r2, #4
 800528c:	0452      	lsls	r2, r2, #17
 800528e:	430a      	orrs	r2, r1
 8005290:	491f      	ldr	r1, [pc, #124]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	614b      	str	r3, [r1, #20]
 8005296:	e011      	b.n	80052bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005298:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6892      	ldr	r2, [r2, #8]
 80052a8:	0211      	lsls	r1, r2, #8
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6912      	ldr	r2, [r2, #16]
 80052ae:	0852      	lsrs	r2, r2, #1
 80052b0:	3a01      	subs	r2, #1
 80052b2:	0652      	lsls	r2, r2, #25
 80052b4:	430a      	orrs	r2, r1
 80052b6:	4916      	ldr	r1, [pc, #88]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052bc:	4b14      	ldr	r3, [pc, #80]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd fc58 	bl	8002b7c <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d0:	f7fd fc54 	bl	8002b7c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
          break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4904      	ldr	r1, [pc, #16]	@ (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd f942 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 ffd6 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e047      	b.n	800546c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a23      	ldr	r2, [pc, #140]	@ (8005478 <HAL_TIM_Base_Start+0xb4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d018      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1f      	ldr	r2, [pc, #124]	@ (800547c <HAL_TIM_Base_Start+0xb8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1e      	ldr	r2, [pc, #120]	@ (8005480 <HAL_TIM_Base_Start+0xbc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <HAL_TIM_Base_Start+0xc0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <HAL_TIM_Base_Start+0xc4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_TIM_Base_Start+0x66>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_TIM_Base_Start+0xc8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d115      	bne.n	8005456 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <HAL_TIM_Base_Start+0xcc>)
 8005432:	4013      	ands	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d015      	beq.n	8005468 <HAL_TIM_Base_Start+0xa4>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005442:	d011      	beq.n	8005468 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	e008      	b.n	8005468 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e000      	b.n	800546a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	00010007 	.word	0x00010007

08005494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e04f      	b.n	800554c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <HAL_TIM_Base_Start_IT+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01d      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d018      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <HAL_TIM_Base_Start_IT+0xc8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <HAL_TIM_Base_Start_IT+0xcc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <HAL_TIM_Base_Start_IT+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005568 <HAL_TIM_Base_Start_IT+0xd4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIM_Base_Start_IT+0x76>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	@ (800556c <HAL_TIM_Base_Start_IT+0xd8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d115      	bne.n	8005536 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	4b17      	ldr	r3, [pc, #92]	@ (8005570 <HAL_TIM_Base_Start_IT+0xdc>)
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d015      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0xb4>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d011      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	e008      	b.n	8005548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e000      	b.n	800554a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e049      	b.n	800561a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f841 	bl	8005622 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 fea6 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start+0x24>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e03c      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d109      	bne.n	8005676 <HAL_TIM_PWM_Start+0x3e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e02f      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d109      	bne.n	8005690 <HAL_TIM_PWM_Start+0x58>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e022      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d109      	bne.n	80056aa <HAL_TIM_PWM_Start+0x72>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e015      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x8c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e008      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e09c      	b.n	8005818 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0xb6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ec:	e023      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Start+0xc6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056fc:	e01b      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0xd6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800570c:	e013      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0xe6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800571c:	e00b      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b10      	cmp	r3, #16
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xf6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800572c:	e003      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f001 fb1a 	bl	8006d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a35      	ldr	r2, [pc, #212]	@ (8005820 <HAL_TIM_PWM_Start+0x1e8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_TIM_PWM_Start+0x13e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a34      	ldr	r2, [pc, #208]	@ (8005824 <HAL_TIM_PWM_Start+0x1ec>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_TIM_PWM_Start+0x13e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <HAL_TIM_PWM_Start+0x1f0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_TIM_PWM_Start+0x13e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a31      	ldr	r2, [pc, #196]	@ (800582c <HAL_TIM_PWM_Start+0x1f4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIM_PWM_Start+0x13e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2f      	ldr	r2, [pc, #188]	@ (8005830 <HAL_TIM_PWM_Start+0x1f8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_TIM_PWM_Start+0x142>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_TIM_PWM_Start+0x144>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800578e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <HAL_TIM_PWM_Start+0x1e8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01d      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a2:	d018      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_TIM_PWM_Start+0x1fc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <HAL_TIM_PWM_Start+0x200>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <HAL_TIM_PWM_Start+0x204>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a17      	ldr	r2, [pc, #92]	@ (8005824 <HAL_TIM_PWM_Start+0x1ec>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x19e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a15      	ldr	r2, [pc, #84]	@ (8005828 <HAL_TIM_PWM_Start+0x1f0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d115      	bne.n	8005802 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	4b18      	ldr	r3, [pc, #96]	@ (8005840 <HAL_TIM_PWM_Start+0x208>)
 80057de:	4013      	ands	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d015      	beq.n	8005814 <HAL_TIM_PWM_Start+0x1dc>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ee:	d011      	beq.n	8005814 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	e008      	b.n	8005814 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e000      	b.n	8005816 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	00010007 	.word	0x00010007

08005844 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e049      	b.n	80058ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f841 	bl	80058f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fd3e 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_IC_Start_IT+0x1e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e023      	b.n	800596e <HAL_TIM_IC_Start_IT+0x66>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x2e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e01b      	b.n	800596e <HAL_TIM_IC_Start_IT+0x66>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start_IT+0x3e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e013      	b.n	800596e <HAL_TIM_IC_Start_IT+0x66>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d104      	bne.n	8005956 <HAL_TIM_IC_Start_IT+0x4e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e00b      	b.n	800596e <HAL_TIM_IC_Start_IT+0x66>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b10      	cmp	r3, #16
 800595a:	d104      	bne.n	8005966 <HAL_TIM_IC_Start_IT+0x5e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e003      	b.n	800596e <HAL_TIM_IC_Start_IT+0x66>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800596c:	b2db      	uxtb	r3, r3
 800596e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_TIM_IC_Start_IT+0x78>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e013      	b.n	80059a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d104      	bne.n	8005990 <HAL_TIM_IC_Start_IT+0x88>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e00b      	b.n	80059a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b08      	cmp	r3, #8
 8005994:	d104      	bne.n	80059a0 <HAL_TIM_IC_Start_IT+0x98>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e003      	b.n	80059a8 <HAL_TIM_IC_Start_IT+0xa0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d102      	bne.n	80059b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059b0:	7b7b      	ldrb	r3, [r7, #13]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d001      	beq.n	80059ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0dd      	b.n	8005b76 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_IC_Start_IT+0xc2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059c8:	e023      	b.n	8005a12 <HAL_TIM_IC_Start_IT+0x10a>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Start_IT+0xd2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059d8:	e01b      	b.n	8005a12 <HAL_TIM_IC_Start_IT+0x10a>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_IC_Start_IT+0xe2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059e8:	e013      	b.n	8005a12 <HAL_TIM_IC_Start_IT+0x10a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_IC_Start_IT+0xf2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059f8:	e00b      	b.n	8005a12 <HAL_TIM_IC_Start_IT+0x10a>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_IC_Start_IT+0x102>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a08:	e003      	b.n	8005a12 <HAL_TIM_IC_Start_IT+0x10a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0x11a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a20:	e013      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x142>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0x12a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x142>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_IC_Start_IT+0x13a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a40:	e003      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x142>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d841      	bhi.n	8005ad4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_TIM_IC_Start_IT+0x150>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005ad5 	.word	0x08005ad5
 8005a60:	08005ad5 	.word	0x08005ad5
 8005a64:	08005ad5 	.word	0x08005ad5
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005ad5 	.word	0x08005ad5
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	08005ab1 	.word	0x08005ab1
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005ad5 	.word	0x08005ad5
 8005a88:	08005ac3 	.word	0x08005ac3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0202 	orr.w	r2, r2, #2
 8005a9a:	60da      	str	r2, [r3, #12]
      break;
 8005a9c:	e01d      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0204 	orr.w	r2, r2, #4
 8005aac:	60da      	str	r2, [r3, #12]
      break;
 8005aae:	e014      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0208 	orr.w	r2, r2, #8
 8005abe:	60da      	str	r2, [r3, #12]
      break;
 8005ac0:	e00b      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0210 	orr.w	r2, r2, #16
 8005ad0:	60da      	str	r2, [r3, #12]
      break;
 8005ad2:	e002      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d149      	bne.n	8005b74 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 f945 	bl	8006d78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a23      	ldr	r2, [pc, #140]	@ (8005b80 <HAL_TIM_IC_Start_IT+0x278>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d01d      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b00:	d018      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <HAL_TIM_IC_Start_IT+0x27c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <HAL_TIM_IC_Start_IT+0x280>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <HAL_TIM_IC_Start_IT+0x284>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1a      	ldr	r2, [pc, #104]	@ (8005b90 <HAL_TIM_IC_Start_IT+0x288>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_TIM_IC_Start_IT+0x22c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a19      	ldr	r2, [pc, #100]	@ (8005b94 <HAL_TIM_IC_Start_IT+0x28c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d115      	bne.n	8005b60 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <HAL_TIM_IC_Start_IT+0x290>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d015      	beq.n	8005b72 <HAL_TIM_IC_Start_IT+0x26a>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4c:	d011      	beq.n	8005b72 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5e:	e008      	b.n	8005b72 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	00010007 	.word	0x00010007

08005b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01b      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0202 	mvn.w	r2, #2
 8005bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb6d 	bl	80062c6 <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb5f 	bl	80062b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb70 	bl	80062da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d020      	beq.n	8005c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0204 	mvn.w	r2, #4
 8005c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fb47 	bl	80062c6 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb39 	bl	80062b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb4a 	bl	80062da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d020      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0208 	mvn.w	r2, #8
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fb21 	bl	80062c6 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb13 	bl	80062b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fb24 	bl	80062da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0210 	mvn.w	r2, #16
 8005cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fafb 	bl	80062c6 <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 faed 	bl	80062b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fafe 	bl	80062da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0201 	mvn.w	r2, #1
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 facb 	bl	800629e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f957 	bl	8006fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00c      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 f94f 	bl	8006ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fab8 	bl	80062ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0220 	mvn.w	r2, #32
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 f917 	bl	8006fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e088      	b.n	8005eda <HAL_TIM_IC_ConfigChannel+0x130>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11b      	bne.n	8005e0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005de6:	f000 fe09 	bl	80069fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 020c 	bic.w	r2, r2, #12
 8005df8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6999      	ldr	r1, [r3, #24]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	619a      	str	r2, [r3, #24]
 8005e0c:	e060      	b.n	8005ed0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d11c      	bne.n	8005e4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005e24:	f000 fe87 	bl	8006b36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	619a      	str	r2, [r3, #24]
 8005e4c:	e040      	b.n	8005ed0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d11b      	bne.n	8005e8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e64:	f000 fed4 	bl	8006c10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 020c 	bic.w	r2, r2, #12
 8005e76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69d9      	ldr	r1, [r3, #28]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	61da      	str	r2, [r3, #28]
 8005e8a:	e021      	b.n	8005ed0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d11c      	bne.n	8005ecc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005ea2:	f000 fef1 	bl	8006c88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005eb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69d9      	ldr	r1, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	61da      	str	r2, [r3, #28]
 8005eca:	e001      	b.n	8005ed0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e0ff      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b14      	cmp	r3, #20
 8005f0e:	f200 80f0 	bhi.w	80060f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	080060f3 	.word	0x080060f3
 8005f20:	080060f3 	.word	0x080060f3
 8005f24:	080060f3 	.word	0x080060f3
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	080060f3 	.word	0x080060f3
 8005f30:	080060f3 	.word	0x080060f3
 8005f34:	080060f3 	.word	0x080060f3
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	080060f3 	.word	0x080060f3
 8005f40:	080060f3 	.word	0x080060f3
 8005f44:	080060f3 	.word	0x080060f3
 8005f48:	0800602f 	.word	0x0800602f
 8005f4c:	080060f3 	.word	0x080060f3
 8005f50:	080060f3 	.word	0x080060f3
 8005f54:	080060f3 	.word	0x080060f3
 8005f58:	08006071 	.word	0x08006071
 8005f5c:	080060f3 	.word	0x080060f3
 8005f60:	080060f3 	.word	0x080060f3
 8005f64:	080060f3 	.word	0x080060f3
 8005f68:	080060b1 	.word	0x080060b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa6c 	bl	8006450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
      break;
 8005faa:	e0a5      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fadc 	bl	8006570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
      break;
 8005fec:	e084      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb45 	bl	8006684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0204 	bic.w	r2, r2, #4
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
      break;
 800602c:	e064      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fbad 	bl	8006794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	021a      	lsls	r2, r3, #8
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	61da      	str	r2, [r3, #28]
      break;
 800606e:	e043      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fbf6 	bl	8006868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060ae:	e023      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fc3a 	bl	8006930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060f0:	e002      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop

0800610c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIM_ConfigClockSource+0x1c>
 8006124:	2302      	movs	r3, #2
 8006126:	e0b6      	b.n	8006296 <HAL_TIM_ConfigClockSource+0x18a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006146:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800614a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006164:	d03e      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0xd8>
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616a:	f200 8087 	bhi.w	800627c <HAL_TIM_ConfigClockSource+0x170>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006172:	f000 8086 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x176>
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617a:	d87f      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800617c:	2b70      	cmp	r3, #112	@ 0x70
 800617e:	d01a      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xaa>
 8006180:	2b70      	cmp	r3, #112	@ 0x70
 8006182:	d87b      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 8006184:	2b60      	cmp	r3, #96	@ 0x60
 8006186:	d050      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x11e>
 8006188:	2b60      	cmp	r3, #96	@ 0x60
 800618a:	d877      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800618c:	2b50      	cmp	r3, #80	@ 0x50
 800618e:	d03c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0xfe>
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d873      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 8006194:	2b40      	cmp	r3, #64	@ 0x40
 8006196:	d058      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x13e>
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d86f      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 800619c:	2b30      	cmp	r3, #48	@ 0x30
 800619e:	d064      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061a0:	2b30      	cmp	r3, #48	@ 0x30
 80061a2:	d86b      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d060      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d867      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x170>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d05c      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d05a      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x15e>
 80061b4:	e062      	b.n	800627c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061c6:	f000 fdb7 	bl	8006d38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	609a      	str	r2, [r3, #8]
      break;
 80061e2:	e04f      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f4:	f000 fda0 	bl	8006d38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006206:	609a      	str	r2, [r3, #8]
      break;
 8006208:	e03c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	461a      	mov	r2, r3
 8006218:	f000 fc5e 	bl	8006ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2150      	movs	r1, #80	@ 0x50
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fd6d 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 8006228:	e02c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006236:	461a      	mov	r2, r3
 8006238:	f000 fcba 	bl	8006bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2160      	movs	r1, #96	@ 0x60
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fd5d 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 8006248:	e01c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fc3e 	bl	8006ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2140      	movs	r1, #64	@ 0x40
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fd4d 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 8006268:	e00c      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f000 fd44 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 800627a:	e003      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      break;
 8006280:	e000      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a46      	ldr	r2, [pc, #280]	@ (8006430 <TIM_Base_SetConfig+0x12c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d013      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006322:	d00f      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a43      	ldr	r2, [pc, #268]	@ (8006434 <TIM_Base_SetConfig+0x130>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00b      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a42      	ldr	r2, [pc, #264]	@ (8006438 <TIM_Base_SetConfig+0x134>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a41      	ldr	r2, [pc, #260]	@ (800643c <TIM_Base_SetConfig+0x138>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a40      	ldr	r2, [pc, #256]	@ (8006440 <TIM_Base_SetConfig+0x13c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d108      	bne.n	8006356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a35      	ldr	r2, [pc, #212]	@ (8006430 <TIM_Base_SetConfig+0x12c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01f      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006364:	d01b      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a32      	ldr	r2, [pc, #200]	@ (8006434 <TIM_Base_SetConfig+0x130>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d017      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a31      	ldr	r2, [pc, #196]	@ (8006438 <TIM_Base_SetConfig+0x134>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a30      	ldr	r2, [pc, #192]	@ (800643c <TIM_Base_SetConfig+0x138>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2f      	ldr	r2, [pc, #188]	@ (8006440 <TIM_Base_SetConfig+0x13c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2e      	ldr	r2, [pc, #184]	@ (8006444 <TIM_Base_SetConfig+0x140>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2d      	ldr	r2, [pc, #180]	@ (8006448 <TIM_Base_SetConfig+0x144>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_Base_SetConfig+0x9a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2c      	ldr	r2, [pc, #176]	@ (800644c <TIM_Base_SetConfig+0x148>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d108      	bne.n	80063b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <TIM_Base_SetConfig+0x12c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00f      	beq.n	80063fc <TIM_Base_SetConfig+0xf8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <TIM_Base_SetConfig+0x13c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_Base_SetConfig+0xf8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <TIM_Base_SetConfig+0x140>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_Base_SetConfig+0xf8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <TIM_Base_SetConfig+0x144>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0xf8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a15      	ldr	r2, [pc, #84]	@ (800644c <TIM_Base_SetConfig+0x148>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d103      	bne.n	8006404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d105      	bne.n	8006422 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]
  }
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	40013400 	.word	0x40013400
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800

08006450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f023 0201 	bic.w	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0302 	bic.w	r3, r3, #2
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <TIM_OC1_SetConfig+0x10c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_OC1_SetConfig+0x80>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <TIM_OC1_SetConfig+0x110>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_OC1_SetConfig+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006564 <TIM_OC1_SetConfig+0x114>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_OC1_SetConfig+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a29      	ldr	r2, [pc, #164]	@ (8006568 <TIM_OC1_SetConfig+0x118>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC1_SetConfig+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a28      	ldr	r2, [pc, #160]	@ (800656c <TIM_OC1_SetConfig+0x11c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10c      	bne.n	80064ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0308 	bic.w	r3, r3, #8
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 0304 	bic.w	r3, r3, #4
 80064e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <TIM_OC1_SetConfig+0x10c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00f      	beq.n	8006512 <TIM_OC1_SetConfig+0xc2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006560 <TIM_OC1_SetConfig+0x110>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00b      	beq.n	8006512 <TIM_OC1_SetConfig+0xc2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a19      	ldr	r2, [pc, #100]	@ (8006564 <TIM_OC1_SetConfig+0x114>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_OC1_SetConfig+0xc2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a18      	ldr	r2, [pc, #96]	@ (8006568 <TIM_OC1_SetConfig+0x118>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC1_SetConfig+0xc2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a17      	ldr	r2, [pc, #92]	@ (800656c <TIM_OC1_SetConfig+0x11c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d111      	bne.n	8006536 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	621a      	str	r2, [r3, #32]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40012c00 	.word	0x40012c00
 8006560:	40013400 	.word	0x40013400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800

08006570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f023 0210 	bic.w	r2, r3, #16
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0320 	bic.w	r3, r3, #32
 80065be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a28      	ldr	r2, [pc, #160]	@ (8006670 <TIM_OC2_SetConfig+0x100>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_OC2_SetConfig+0x6c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a27      	ldr	r2, [pc, #156]	@ (8006674 <TIM_OC2_SetConfig+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d10d      	bne.n	80065f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006670 <TIM_OC2_SetConfig+0x100>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_OC2_SetConfig+0xb0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <TIM_OC2_SetConfig+0x104>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00b      	beq.n	8006620 <TIM_OC2_SetConfig+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1b      	ldr	r2, [pc, #108]	@ (8006678 <TIM_OC2_SetConfig+0x108>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_OC2_SetConfig+0xb0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a1a      	ldr	r2, [pc, #104]	@ (800667c <TIM_OC2_SetConfig+0x10c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_OC2_SetConfig+0xb0>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a19      	ldr	r2, [pc, #100]	@ (8006680 <TIM_OC2_SetConfig+0x110>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d113      	bne.n	8006648 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800662e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a27      	ldr	r2, [pc, #156]	@ (8006780 <TIM_OC3_SetConfig+0xfc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_OC3_SetConfig+0x6a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a26      	ldr	r2, [pc, #152]	@ (8006784 <TIM_OC3_SetConfig+0x100>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10d      	bne.n	800670a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1c      	ldr	r2, [pc, #112]	@ (8006780 <TIM_OC3_SetConfig+0xfc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00f      	beq.n	8006732 <TIM_OC3_SetConfig+0xae>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1b      	ldr	r2, [pc, #108]	@ (8006784 <TIM_OC3_SetConfig+0x100>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00b      	beq.n	8006732 <TIM_OC3_SetConfig+0xae>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <TIM_OC3_SetConfig+0x104>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d007      	beq.n	8006732 <TIM_OC3_SetConfig+0xae>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a19      	ldr	r2, [pc, #100]	@ (800678c <TIM_OC3_SetConfig+0x108>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d003      	beq.n	8006732 <TIM_OC3_SetConfig+0xae>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a18      	ldr	r2, [pc, #96]	@ (8006790 <TIM_OC3_SetConfig+0x10c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d113      	bne.n	800675a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40013400 	.word	0x40013400
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800

08006794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <TIM_OC4_SetConfig+0xc0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00f      	beq.n	8006818 <TIM_OC4_SetConfig+0x84>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a17      	ldr	r2, [pc, #92]	@ (8006858 <TIM_OC4_SetConfig+0xc4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00b      	beq.n	8006818 <TIM_OC4_SetConfig+0x84>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC4_SetConfig+0xc8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d007      	beq.n	8006818 <TIM_OC4_SetConfig+0x84>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <TIM_OC4_SetConfig+0xcc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC4_SetConfig+0x84>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a14      	ldr	r2, [pc, #80]	@ (8006864 <TIM_OC4_SetConfig+0xd0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40013400 	.word	0x40013400
 800685c:	40014000 	.word	0x40014000
 8006860:	40014400 	.word	0x40014400
 8006864:	40014800 	.word	0x40014800

08006868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a17      	ldr	r2, [pc, #92]	@ (800691c <TIM_OC5_SetConfig+0xb4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_OC5_SetConfig+0x7a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a16      	ldr	r2, [pc, #88]	@ (8006920 <TIM_OC5_SetConfig+0xb8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_OC5_SetConfig+0x7a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a15      	ldr	r2, [pc, #84]	@ (8006924 <TIM_OC5_SetConfig+0xbc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_OC5_SetConfig+0x7a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a14      	ldr	r2, [pc, #80]	@ (8006928 <TIM_OC5_SetConfig+0xc0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC5_SetConfig+0x7a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <TIM_OC5_SetConfig+0xc4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d109      	bne.n	80068f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	621a      	str	r2, [r3, #32]
}
 8006910:	bf00      	nop
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40014000 	.word	0x40014000
 8006928:	40014400 	.word	0x40014400
 800692c:	40014800 	.word	0x40014800

08006930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	051b      	lsls	r3, r3, #20
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <TIM_OC6_SetConfig+0xb8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00f      	beq.n	80069ac <TIM_OC6_SetConfig+0x7c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	@ (80069ec <TIM_OC6_SetConfig+0xbc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_OC6_SetConfig+0x7c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <TIM_OC6_SetConfig+0xc0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_OC6_SetConfig+0x7c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <TIM_OC6_SetConfig+0xc4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC6_SetConfig+0x7c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <TIM_OC6_SetConfig+0xc8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d109      	bne.n	80069c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	029b      	lsls	r3, r3, #10
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f023 0201 	bic.w	r2, r3, #1
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <TIM_TI1_SetConfig+0xc4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d017      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a30:	d013      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a23      	ldr	r2, [pc, #140]	@ (8006ac4 <TIM_TI1_SetConfig+0xc8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	@ (8006ac8 <TIM_TI1_SetConfig+0xcc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a21      	ldr	r2, [pc, #132]	@ (8006acc <TIM_TI1_SetConfig+0xd0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	@ (8006ad0 <TIM_TI1_SetConfig+0xd4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_TI1_SetConfig+0x5e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad4 <TIM_TI1_SetConfig+0xd8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <TIM_TI1_SetConfig+0x62>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <TIM_TI1_SetConfig+0x64>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e003      	b.n	8006a7e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f023 030a 	bic.w	r3, r3, #10
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f003 030a 	and.w	r3, r3, #10
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40014000 	.word	0x40014000

08006ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0201 	bic.w	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f023 030a 	bic.w	r3, r3, #10
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0210 	bic.w	r2, r3, #16
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	031b      	lsls	r3, r3, #12
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	621a      	str	r2, [r3, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0210 	bic.w	r2, r3, #16
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	031b      	lsls	r3, r3, #12
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	031b      	lsls	r3, r3, #12
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006cda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	031b      	lsls	r3, r3, #12
 8006ce0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f043 0307 	orr.w	r3, r3, #7
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	609a      	str	r2, [r3, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	021a      	lsls	r2, r3, #8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	609a      	str	r2, [r3, #8]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1a      	ldr	r2, [r3, #32]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	fa01 f303 	lsl.w	r3, r1, r3
 8006db0:	431a      	orrs	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e068      	b.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2e      	ldr	r2, [pc, #184]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1e      	ldr	r2, [pc, #120]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01d      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4e:	d018      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a18      	ldr	r2, [pc, #96]	@ (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a13      	ldr	r2, [pc, #76]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	@ (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10c      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800
 8006ecc:	40000c00 	.word	0x40000c00
 8006ed0:	40014000 	.word	0x40014000

08006ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e065      	b.n	8006fbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a16      	ldr	r2, [pc, #88]	@ (8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a14      	ldr	r2, [pc, #80]	@ (8006fcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d115      	bne.n	8006faa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	051b      	lsls	r3, r3, #20
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40013400 	.word	0x40013400

08006fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e040      	b.n	80070a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fb fbe4 	bl	80027fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	@ 0x24
 8007038:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fae0 	bl	8007618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f825 	bl	80070a8 <UART_SetConfig>
 800705e:	4603      	mov	r3, r0
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e01b      	b.n	80070a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb5f 	bl	800775c <UART_CheckIdleState>
 800709e:	4603      	mov	r3, r0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070ac:	b08a      	sub	sp, #40	@ 0x28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4ba4      	ldr	r3, [pc, #656]	@ (8007368 <UART_SetConfig+0x2c0>)
 80070d8:	4013      	ands	r3, r2
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a99      	ldr	r2, [pc, #612]	@ (800736c <UART_SetConfig+0x2c4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007110:	4313      	orrs	r3, r2
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a90      	ldr	r2, [pc, #576]	@ (8007370 <UART_SetConfig+0x2c8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d126      	bne.n	8007180 <UART_SetConfig+0xd8>
 8007132:	4b90      	ldr	r3, [pc, #576]	@ (8007374 <UART_SetConfig+0x2cc>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	2b03      	cmp	r3, #3
 800713e:	d81b      	bhi.n	8007178 <UART_SetConfig+0xd0>
 8007140:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0xa0>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007159 	.word	0x08007159
 800714c:	08007169 	.word	0x08007169
 8007150:	08007161 	.word	0x08007161
 8007154:	08007171 	.word	0x08007171
 8007158:	2301      	movs	r3, #1
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715e:	e116      	b.n	800738e <UART_SetConfig+0x2e6>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007166:	e112      	b.n	800738e <UART_SetConfig+0x2e6>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716e:	e10e      	b.n	800738e <UART_SetConfig+0x2e6>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007176:	e10a      	b.n	800738e <UART_SetConfig+0x2e6>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717e:	e106      	b.n	800738e <UART_SetConfig+0x2e6>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a7c      	ldr	r2, [pc, #496]	@ (8007378 <UART_SetConfig+0x2d0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d138      	bne.n	80071fc <UART_SetConfig+0x154>
 800718a:	4b7a      	ldr	r3, [pc, #488]	@ (8007374 <UART_SetConfig+0x2cc>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b0c      	cmp	r3, #12
 8007196:	d82d      	bhi.n	80071f4 <UART_SetConfig+0x14c>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0xf8>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	080071e5 	.word	0x080071e5
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f5 	.word	0x080071f5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071ed 	.word	0x080071ed
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071da:	e0d8      	b.n	800738e <UART_SetConfig+0x2e6>
 80071dc:	2302      	movs	r3, #2
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e0d4      	b.n	800738e <UART_SetConfig+0x2e6>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e0d0      	b.n	800738e <UART_SetConfig+0x2e6>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f2:	e0cc      	b.n	800738e <UART_SetConfig+0x2e6>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e0c8      	b.n	800738e <UART_SetConfig+0x2e6>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a5e      	ldr	r2, [pc, #376]	@ (800737c <UART_SetConfig+0x2d4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d125      	bne.n	8007252 <UART_SetConfig+0x1aa>
 8007206:	4b5b      	ldr	r3, [pc, #364]	@ (8007374 <UART_SetConfig+0x2cc>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007210:	2b30      	cmp	r3, #48	@ 0x30
 8007212:	d016      	beq.n	8007242 <UART_SetConfig+0x19a>
 8007214:	2b30      	cmp	r3, #48	@ 0x30
 8007216:	d818      	bhi.n	800724a <UART_SetConfig+0x1a2>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d00a      	beq.n	8007232 <UART_SetConfig+0x18a>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d814      	bhi.n	800724a <UART_SetConfig+0x1a2>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <UART_SetConfig+0x182>
 8007224:	2b10      	cmp	r3, #16
 8007226:	d008      	beq.n	800723a <UART_SetConfig+0x192>
 8007228:	e00f      	b.n	800724a <UART_SetConfig+0x1a2>
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007230:	e0ad      	b.n	800738e <UART_SetConfig+0x2e6>
 8007232:	2302      	movs	r3, #2
 8007234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007238:	e0a9      	b.n	800738e <UART_SetConfig+0x2e6>
 800723a:	2304      	movs	r3, #4
 800723c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007240:	e0a5      	b.n	800738e <UART_SetConfig+0x2e6>
 8007242:	2308      	movs	r3, #8
 8007244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007248:	e0a1      	b.n	800738e <UART_SetConfig+0x2e6>
 800724a:	2310      	movs	r3, #16
 800724c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007250:	e09d      	b.n	800738e <UART_SetConfig+0x2e6>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4a      	ldr	r2, [pc, #296]	@ (8007380 <UART_SetConfig+0x2d8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d125      	bne.n	80072a8 <UART_SetConfig+0x200>
 800725c:	4b45      	ldr	r3, [pc, #276]	@ (8007374 <UART_SetConfig+0x2cc>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007262:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007266:	2bc0      	cmp	r3, #192	@ 0xc0
 8007268:	d016      	beq.n	8007298 <UART_SetConfig+0x1f0>
 800726a:	2bc0      	cmp	r3, #192	@ 0xc0
 800726c:	d818      	bhi.n	80072a0 <UART_SetConfig+0x1f8>
 800726e:	2b80      	cmp	r3, #128	@ 0x80
 8007270:	d00a      	beq.n	8007288 <UART_SetConfig+0x1e0>
 8007272:	2b80      	cmp	r3, #128	@ 0x80
 8007274:	d814      	bhi.n	80072a0 <UART_SetConfig+0x1f8>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <UART_SetConfig+0x1d8>
 800727a:	2b40      	cmp	r3, #64	@ 0x40
 800727c:	d008      	beq.n	8007290 <UART_SetConfig+0x1e8>
 800727e:	e00f      	b.n	80072a0 <UART_SetConfig+0x1f8>
 8007280:	2300      	movs	r3, #0
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007286:	e082      	b.n	800738e <UART_SetConfig+0x2e6>
 8007288:	2302      	movs	r3, #2
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728e:	e07e      	b.n	800738e <UART_SetConfig+0x2e6>
 8007290:	2304      	movs	r3, #4
 8007292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007296:	e07a      	b.n	800738e <UART_SetConfig+0x2e6>
 8007298:	2308      	movs	r3, #8
 800729a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729e:	e076      	b.n	800738e <UART_SetConfig+0x2e6>
 80072a0:	2310      	movs	r3, #16
 80072a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a6:	e072      	b.n	800738e <UART_SetConfig+0x2e6>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a35      	ldr	r2, [pc, #212]	@ (8007384 <UART_SetConfig+0x2dc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d12a      	bne.n	8007308 <UART_SetConfig+0x260>
 80072b2:	4b30      	ldr	r3, [pc, #192]	@ (8007374 <UART_SetConfig+0x2cc>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072c0:	d01a      	beq.n	80072f8 <UART_SetConfig+0x250>
 80072c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072c6:	d81b      	bhi.n	8007300 <UART_SetConfig+0x258>
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072cc:	d00c      	beq.n	80072e8 <UART_SetConfig+0x240>
 80072ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d2:	d815      	bhi.n	8007300 <UART_SetConfig+0x258>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <UART_SetConfig+0x238>
 80072d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072dc:	d008      	beq.n	80072f0 <UART_SetConfig+0x248>
 80072de:	e00f      	b.n	8007300 <UART_SetConfig+0x258>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e6:	e052      	b.n	800738e <UART_SetConfig+0x2e6>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ee:	e04e      	b.n	800738e <UART_SetConfig+0x2e6>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f6:	e04a      	b.n	800738e <UART_SetConfig+0x2e6>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fe:	e046      	b.n	800738e <UART_SetConfig+0x2e6>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007306:	e042      	b.n	800738e <UART_SetConfig+0x2e6>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a17      	ldr	r2, [pc, #92]	@ (800736c <UART_SetConfig+0x2c4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d13a      	bne.n	8007388 <UART_SetConfig+0x2e0>
 8007312:	4b18      	ldr	r3, [pc, #96]	@ (8007374 <UART_SetConfig+0x2cc>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007318:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800731c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007320:	d01a      	beq.n	8007358 <UART_SetConfig+0x2b0>
 8007322:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007326:	d81b      	bhi.n	8007360 <UART_SetConfig+0x2b8>
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800732c:	d00c      	beq.n	8007348 <UART_SetConfig+0x2a0>
 800732e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007332:	d815      	bhi.n	8007360 <UART_SetConfig+0x2b8>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <UART_SetConfig+0x298>
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733c:	d008      	beq.n	8007350 <UART_SetConfig+0x2a8>
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x2b8>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007346:	e022      	b.n	800738e <UART_SetConfig+0x2e6>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800734e:	e01e      	b.n	800738e <UART_SetConfig+0x2e6>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007356:	e01a      	b.n	800738e <UART_SetConfig+0x2e6>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735e:	e016      	b.n	800738e <UART_SetConfig+0x2e6>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007366:	e012      	b.n	800738e <UART_SetConfig+0x2e6>
 8007368:	efff69f3 	.word	0xefff69f3
 800736c:	40008000 	.word	0x40008000
 8007370:	40013800 	.word	0x40013800
 8007374:	40021000 	.word	0x40021000
 8007378:	40004400 	.word	0x40004400
 800737c:	40004800 	.word	0x40004800
 8007380:	40004c00 	.word	0x40004c00
 8007384:	40005000 	.word	0x40005000
 8007388:	2310      	movs	r3, #16
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a9f      	ldr	r2, [pc, #636]	@ (8007610 <UART_SetConfig+0x568>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d17a      	bne.n	800748e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007398:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800739c:	2b08      	cmp	r3, #8
 800739e:	d824      	bhi.n	80073ea <UART_SetConfig+0x342>
 80073a0:	a201      	add	r2, pc, #4	@ (adr r2, 80073a8 <UART_SetConfig+0x300>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073eb 	.word	0x080073eb
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	080073eb 	.word	0x080073eb
 80073b8:	080073db 	.word	0x080073db
 80073bc:	080073eb 	.word	0x080073eb
 80073c0:	080073eb 	.word	0x080073eb
 80073c4:	080073eb 	.word	0x080073eb
 80073c8:	080073e3 	.word	0x080073e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073cc:	f7fd fa5a 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80073d0:	61f8      	str	r0, [r7, #28]
        break;
 80073d2:	e010      	b.n	80073f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007614 <UART_SetConfig+0x56c>)
 80073d6:	61fb      	str	r3, [r7, #28]
        break;
 80073d8:	e00d      	b.n	80073f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073da:	f7fd f9bb 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 80073de:	61f8      	str	r0, [r7, #28]
        break;
 80073e0:	e009      	b.n	80073f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073e6:	61fb      	str	r3, [r7, #28]
        break;
 80073e8:	e005      	b.n	80073f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80fb 	beq.w	80075f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	429a      	cmp	r2, r3
 800740c:	d305      	bcc.n	800741a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	429a      	cmp	r2, r3
 8007418:	d903      	bls.n	8007422 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007420:	e0e8      	b.n	80075f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2200      	movs	r2, #0
 8007426:	461c      	mov	r4, r3
 8007428:	4615      	mov	r5, r2
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	022b      	lsls	r3, r5, #8
 8007434:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007438:	0222      	lsls	r2, r4, #8
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	6849      	ldr	r1, [r1, #4]
 800743e:	0849      	lsrs	r1, r1, #1
 8007440:	2000      	movs	r0, #0
 8007442:	4688      	mov	r8, r1
 8007444:	4681      	mov	r9, r0
 8007446:	eb12 0a08 	adds.w	sl, r2, r8
 800744a:	eb43 0b09 	adc.w	fp, r3, r9
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800745c:	4650      	mov	r0, sl
 800745e:	4659      	mov	r1, fp
 8007460:	f7f9 fb8a 	bl	8000b78 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4613      	mov	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007472:	d308      	bcc.n	8007486 <UART_SetConfig+0x3de>
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800747a:	d204      	bcs.n	8007486 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	e0b6      	b.n	80075f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800748c:	e0b2      	b.n	80075f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007496:	d15e      	bne.n	8007556 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800749c:	2b08      	cmp	r3, #8
 800749e:	d828      	bhi.n	80074f2 <UART_SetConfig+0x44a>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0x400>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074cd 	.word	0x080074cd
 80074ac:	080074d5 	.word	0x080074d5
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074f3 	.word	0x080074f3
 80074b8:	080074e3 	.word	0x080074e3
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074f3 	.word	0x080074f3
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	080074eb 	.word	0x080074eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074cc:	f7fd f9da 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80074d0:	61f8      	str	r0, [r7, #28]
        break;
 80074d2:	e014      	b.n	80074fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d4:	f7fd f9ec 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 80074d8:	61f8      	str	r0, [r7, #28]
        break;
 80074da:	e010      	b.n	80074fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007614 <UART_SetConfig+0x56c>)
 80074de:	61fb      	str	r3, [r7, #28]
        break;
 80074e0:	e00d      	b.n	80074fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e2:	f7fd f937 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 80074e6:	61f8      	str	r0, [r7, #28]
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ee:	61fb      	str	r3, [r7, #28]
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d077      	beq.n	80075f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	005a      	lsls	r2, r3, #1
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	441a      	add	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b0f      	cmp	r3, #15
 800751e:	d916      	bls.n	800754e <UART_SetConfig+0x4a6>
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007526:	d212      	bcs.n	800754e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f023 030f 	bic.w	r3, r3, #15
 8007530:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	b29b      	uxth	r3, r3
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	b29a      	uxth	r2, r3
 800753e:	8afb      	ldrh	r3, [r7, #22]
 8007540:	4313      	orrs	r3, r2
 8007542:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	8afa      	ldrh	r2, [r7, #22]
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	e052      	b.n	80075f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007554:	e04e      	b.n	80075f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800755a:	2b08      	cmp	r3, #8
 800755c:	d827      	bhi.n	80075ae <UART_SetConfig+0x506>
 800755e:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <UART_SetConfig+0x4bc>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	080075af 	.word	0x080075af
 8007574:	0800759f 	.word	0x0800759f
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
 8007584:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fd f97c 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 800758c:	61f8      	str	r0, [r7, #28]
        break;
 800758e:	e014      	b.n	80075ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fd f98e 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8007594:	61f8      	str	r0, [r7, #28]
        break;
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b1e      	ldr	r3, [pc, #120]	@ (8007614 <UART_SetConfig+0x56c>)
 800759a:	61fb      	str	r3, [r7, #28]
        break;
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd f8d9 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 80075a2:	61f8      	str	r0, [r7, #28]
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075aa:	61fb      	str	r3, [r7, #28]
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80075b8:	bf00      	nop
    }

    if (pclk != 0U)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d019      	beq.n	80075f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085a      	lsrs	r2, r3, #1
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d909      	bls.n	80075ee <UART_SetConfig+0x546>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e0:	d205      	bcs.n	80075ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e002      	b.n	80075f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007600:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	@ 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800760e:	bf00      	nop
 8007610:	40008000 	.word	0x40008000
 8007614:	00f42400 	.word	0x00f42400

08007618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007716:	d10a      	bne.n	800772e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b098      	sub	sp, #96	@ 0x60
 8007760:	af02      	add	r7, sp, #8
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800776c:	f7fb fa06 	bl	8002b7c <HAL_GetTick>
 8007770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d12e      	bne.n	80077de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007788:	2200      	movs	r2, #0
 800778a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f88c 	bl	80078ac <UART_WaitOnFlagUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d021      	beq.n	80077de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e062      	b.n	80078a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d149      	bne.n	8007880 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f4:	2200      	movs	r2, #0
 80077f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f856 	bl	80078ac <UART_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d03c      	beq.n	8007880 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	623b      	str	r3, [r7, #32]
   return(result);
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800781a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007824:	633b      	str	r3, [r7, #48]	@ 0x30
 8007826:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800782a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	60fb      	str	r3, [r7, #12]
   return(result);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	617b      	str	r3, [r7, #20]
   return(result);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e011      	b.n	80078a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3758      	adds	r7, #88	@ 0x58
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078bc:	e04f      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d04b      	beq.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c6:	f7fb f959 	bl	8002b7c <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d302      	bcc.n	80078dc <UART_WaitOnFlagUntilTimeout+0x30>
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e04e      	b.n	800797e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d037      	beq.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b80      	cmp	r3, #128	@ 0x80
 80078f2:	d034      	beq.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b40      	cmp	r3, #64	@ 0x40
 80078f8:	d031      	beq.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b08      	cmp	r3, #8
 8007906:	d110      	bne.n	800792a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2208      	movs	r2, #8
 800790e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f838 	bl	8007986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2208      	movs	r2, #8
 800791a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e029      	b.n	800797e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007938:	d111      	bne.n	800795e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f81e 	bl	8007986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e00f      	b.n	800797e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	429a      	cmp	r2, r3
 800797a:	d0a0      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007986:	b480      	push	{r7}
 8007988:	b095      	sub	sp, #84	@ 0x54
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80079ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e6      	bne.n	800798e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e5      	bne.n	80079c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d118      	bne.n	8007a2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f023 0310 	bic.w	r3, r3, #16
 8007a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a1a:	61bb      	str	r3, [r7, #24]
 8007a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6979      	ldr	r1, [r7, #20]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	613b      	str	r3, [r7, #16]
   return(result);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a42:	bf00      	nop
 8007a44:	3754      	adds	r7, #84	@ 0x54
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <memset>:
 8007a4e:	4402      	add	r2, r0
 8007a50:	4603      	mov	r3, r0
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d100      	bne.n	8007a58 <memset+0xa>
 8007a56:	4770      	bx	lr
 8007a58:	f803 1b01 	strb.w	r1, [r3], #1
 8007a5c:	e7f9      	b.n	8007a52 <memset+0x4>
	...

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4d0d      	ldr	r5, [pc, #52]	@ (8007a98 <__libc_init_array+0x38>)
 8007a64:	4c0d      	ldr	r4, [pc, #52]	@ (8007a9c <__libc_init_array+0x3c>)
 8007a66:	1b64      	subs	r4, r4, r5
 8007a68:	10a4      	asrs	r4, r4, #2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	4d0b      	ldr	r5, [pc, #44]	@ (8007aa0 <__libc_init_array+0x40>)
 8007a72:	4c0c      	ldr	r4, [pc, #48]	@ (8007aa4 <__libc_init_array+0x44>)
 8007a74:	f000 f896 	bl	8007ba4 <_init>
 8007a78:	1b64      	subs	r4, r4, r5
 8007a7a:	10a4      	asrs	r4, r4, #2
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	08007c20 	.word	0x08007c20
 8007a9c:	08007c20 	.word	0x08007c20
 8007aa0:	08007c20 	.word	0x08007c20
 8007aa4:	08007c24 	.word	0x08007c24

08007aa8 <fmax>:
 8007aa8:	b508      	push	{r3, lr}
 8007aaa:	ed2d 8b04 	vpush	{d8-d9}
 8007aae:	eeb0 8a40 	vmov.f32	s16, s0
 8007ab2:	eef0 8a60 	vmov.f32	s17, s1
 8007ab6:	eeb0 9a41 	vmov.f32	s18, s2
 8007aba:	eef0 9a61 	vmov.f32	s19, s3
 8007abe:	f000 f847 	bl	8007b50 <__fpclassifyd>
 8007ac2:	b950      	cbnz	r0, 8007ada <fmax+0x32>
 8007ac4:	eeb0 8a49 	vmov.f32	s16, s18
 8007ac8:	eef0 8a69 	vmov.f32	s17, s19
 8007acc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ad0:	eef0 0a68 	vmov.f32	s1, s17
 8007ad4:	ecbd 8b04 	vpop	{d8-d9}
 8007ad8:	bd08      	pop	{r3, pc}
 8007ada:	eeb0 0a49 	vmov.f32	s0, s18
 8007ade:	eef0 0a69 	vmov.f32	s1, s19
 8007ae2:	f000 f835 	bl	8007b50 <__fpclassifyd>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d0f0      	beq.n	8007acc <fmax+0x24>
 8007aea:	ec53 2b19 	vmov	r2, r3, d9
 8007aee:	ec51 0b18 	vmov	r0, r1, d8
 8007af2:	f7f8 ffbf 	bl	8000a74 <__aeabi_dcmpgt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d0e4      	beq.n	8007ac4 <fmax+0x1c>
 8007afa:	e7e7      	b.n	8007acc <fmax+0x24>

08007afc <fmin>:
 8007afc:	b508      	push	{r3, lr}
 8007afe:	ed2d 8b04 	vpush	{d8-d9}
 8007b02:	eeb0 8a40 	vmov.f32	s16, s0
 8007b06:	eef0 8a60 	vmov.f32	s17, s1
 8007b0a:	eeb0 9a41 	vmov.f32	s18, s2
 8007b0e:	eef0 9a61 	vmov.f32	s19, s3
 8007b12:	f000 f81d 	bl	8007b50 <__fpclassifyd>
 8007b16:	b950      	cbnz	r0, 8007b2e <fmin+0x32>
 8007b18:	eeb0 8a49 	vmov.f32	s16, s18
 8007b1c:	eef0 8a69 	vmov.f32	s17, s19
 8007b20:	eeb0 0a48 	vmov.f32	s0, s16
 8007b24:	eef0 0a68 	vmov.f32	s1, s17
 8007b28:	ecbd 8b04 	vpop	{d8-d9}
 8007b2c:	bd08      	pop	{r3, pc}
 8007b2e:	eeb0 0a49 	vmov.f32	s0, s18
 8007b32:	eef0 0a69 	vmov.f32	s1, s19
 8007b36:	f000 f80b 	bl	8007b50 <__fpclassifyd>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d0f0      	beq.n	8007b20 <fmin+0x24>
 8007b3e:	ec53 2b19 	vmov	r2, r3, d9
 8007b42:	ec51 0b18 	vmov	r0, r1, d8
 8007b46:	f7f8 ff77 	bl	8000a38 <__aeabi_dcmplt>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0e4      	beq.n	8007b18 <fmin+0x1c>
 8007b4e:	e7e7      	b.n	8007b20 <fmin+0x24>

08007b50 <__fpclassifyd>:
 8007b50:	ec51 0b10 	vmov	r0, r1, d0
 8007b54:	b510      	push	{r4, lr}
 8007b56:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	d019      	beq.n	8007b92 <__fpclassifyd+0x42>
 8007b5e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8007b62:	490e      	ldr	r1, [pc, #56]	@ (8007b9c <__fpclassifyd+0x4c>)
 8007b64:	428a      	cmp	r2, r1
 8007b66:	d90e      	bls.n	8007b86 <__fpclassifyd+0x36>
 8007b68:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8007b6c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8007b70:	428a      	cmp	r2, r1
 8007b72:	d908      	bls.n	8007b86 <__fpclassifyd+0x36>
 8007b74:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba0 <__fpclassifyd+0x50>)
 8007b76:	4213      	tst	r3, r2
 8007b78:	d007      	beq.n	8007b8a <__fpclassifyd+0x3a>
 8007b7a:	4294      	cmp	r4, r2
 8007b7c:	d107      	bne.n	8007b8e <__fpclassifyd+0x3e>
 8007b7e:	fab0 f080 	clz	r0, r0
 8007b82:	0940      	lsrs	r0, r0, #5
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	2004      	movs	r0, #4
 8007b88:	e7fc      	b.n	8007b84 <__fpclassifyd+0x34>
 8007b8a:	2003      	movs	r0, #3
 8007b8c:	e7fa      	b.n	8007b84 <__fpclassifyd+0x34>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e7f8      	b.n	8007b84 <__fpclassifyd+0x34>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d1ee      	bne.n	8007b74 <__fpclassifyd+0x24>
 8007b96:	2002      	movs	r0, #2
 8007b98:	e7f4      	b.n	8007b84 <__fpclassifyd+0x34>
 8007b9a:	bf00      	nop
 8007b9c:	7fdfffff 	.word	0x7fdfffff
 8007ba0:	7ff00000 	.word	0x7ff00000

08007ba4 <_init>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr

08007bb0 <_fini>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr
