
main_code_L476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e318  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800e4a8  0800e4a8  0000f4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e940  0800e940  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e940  0800e940  0000f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e948  0800e948  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e948  0800e948  0000f948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e94c  0800e94c  0000f94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e950  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  200001d8  0800eb28  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  0800eb28  0001082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e41  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d0  00000000  00000000  00029049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0002c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011db  00000000  00000000  0002dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029441  00000000  00000000  0002edd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be28  00000000  00000000  00058214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad9e  00000000  00000000  0007403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016edda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007678  00000000  00000000  0016ee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00176498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e490 	.word	0x0800e490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e490 	.word	0x0800e490

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <motor_ArmESC>:

#define COUNTER_PERIOD 19999 // Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%

void motor_ArmESC(h_motor_t* h_motor) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    motor_SetPower(h_motor, 0);
 800100c:	2100      	movs	r1, #0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f842 	bl	8001098 <motor_SetPower>
    //HAL_Delay(3000);

    motor_SetPower(h_motor, 7);
 8001014:	2107      	movs	r1, #7
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f83e 	bl	8001098 <motor_SetPower>
    //HAL_Delay(2000);
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0000      	movs	r0, r0
	...

08001028 <percentageToMicrosecondsAtHighState>:

int percentageToMicrosecondsAtHighState(int percentage) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    int neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fa87 	bl	8000544 <__aeabi_i2d>
 8001036:	a316      	add	r3, pc, #88	@ (adr r3, 8001090 <percentageToMicrosecondsAtHighState+0x68>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff faec 	bl	8000618 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <percentageToMicrosecondsAtHighState+0x60>)
 800104e:	f7ff f92d 	bl	80002ac <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd8d 	bl	8000b78 <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	60fb      	str	r3, [r7, #12]
    return (int)((COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle);
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff fa6e 	bl	8000544 <__aeabi_i2d>
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <percentageToMicrosecondsAtHighState+0x64>)
 800106e:	f7ff fad3 	bl	8000618 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fd7d 	bl	8000b78 <__aeabi_d2iz>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40180000 	.word	0x40180000
 800108c:	40690000 	.word	0x40690000
 8001090:	47ae147b 	.word	0x47ae147b
 8001094:	3fa47ae1 	.word	0x3fa47ae1

08001098 <motor_SetPower>:

void motor_SetPower(h_motor_t* h_motor, int percentage) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f7ff ffc0 	bl	8001028 <percentageToMicrosecondsAtHighState>
 80010a8:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <motor_SetPower+0x26>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80010bc:	e02c      	b.n	8001118 <motor_SetPower+0x80>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d105      	bne.n	80010d2 <motor_SetPower+0x3a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80010d0:	e022      	b.n	8001118 <motor_SetPower+0x80>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d105      	bne.n	80010e6 <motor_SetPower+0x4e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010e4:	e018      	b.n	8001118 <motor_SetPower+0x80>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d105      	bne.n	80010fa <motor_SetPower+0x62>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f8:	e00e      	b.n	8001118 <motor_SetPower+0x80>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d105      	bne.n	800110e <motor_SetPower+0x76>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6593      	str	r3, [r2, #88]	@ 0x58
 800110c:	e004      	b.n	8001118 <motor_SetPower+0x80>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	65d3      	str	r3, [r2, #92]	@ 0x5c
    h_motor->PercentageOfTotalPower = percentage;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <motor_Init>:

HAL_StatusTypeDef motor_Init(h_motor_t* h_motor) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_TIM_PWM_Start(h_motor->htim, h_motor->channel);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f006 f9be 	bl	80074c4 <HAL_TIM_PWM_Start>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
    // Initialisation spécifique à l'ESC
    motor_ArmESC(h_motor);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff59 	bl	8001004 <motor_ArmESC>

    return result;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <IMU_ReadRegister>:
float accel_g[3], gyro_dps[3], gyro_angle[3];


//FIRST TRY (CHECKING IF IMU IS AVAILABLE)

HAL_StatusTypeDef IMU_ReadRegister(uint16_t reg, uint8_t *data) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af04      	add	r7, sp, #16
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, 1, 1000);
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	21d0      	movs	r1, #208	@ 0xd0
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <IMU_ReadRegister+0x34>)
 800117e:	f002 ff4d 	bl	800401c <HAL_I2C_Mem_Read>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
    return error;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000234 	.word	0x20000234

08001194 <IMU_ReadRegisters>:

HAL_StatusTypeDef IMU_ReadRegisters(uint16_t reg, uint8_t *data, uint16_t length) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af04      	add	r7, sp, #16
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	4613      	mov	r3, r2
 80011a2:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef error;
    error = HAL_I2C_Mem_Read(&hi2c2, IMU_I2C_ADDR, reg, 1, data, length, 1000);
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	21d0      	movs	r1, #208	@ 0xd0
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <IMU_ReadRegisters+0x38>)
 80011ba:	f002 ff2f 	bl	800401c <HAL_I2C_Mem_Read>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
    return error;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000234 	.word	0x20000234

080011d0 <IMU_Calibrate>:

HAL_StatusTypeDef IMU_Calibrate() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	@ 0x40
 80011d4:	af00      	add	r7, sp, #0
    uint8_t buffer[14];
    int32_t accel_sum[3] = {0, 0, 0};
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
    int32_t gyro_sum[3] = {0, 0, 0};
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
    int num_samples = 1000;  // Number of samples for averaging
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 0; i < num_samples; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011f8:	e061      	b.n	80012be <IMU_Calibrate+0xee>
        if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	220e      	movs	r2, #14
 8001200:	4619      	mov	r1, r3
 8001202:	203b      	movs	r0, #59	@ 0x3b
 8001204:	f7ff ffc6 	bl	8001194 <IMU_ReadRegisters>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <IMU_Calibrate+0x42>
            return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07f      	b.n	8001312 <IMU_Calibrate+0x142>
        }

        int16_t accelX = (buffer[0] << 8) | buffer[1];
 8001212:	7e3b      	ldrb	r3, [r7, #24]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7e7b      	ldrb	r3, [r7, #25]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	867b      	strh	r3, [r7, #50]	@ 0x32
        int16_t accelY = (buffer[2] << 8) | buffer[3];
 8001220:	7ebb      	ldrb	r3, [r7, #26]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	863b      	strh	r3, [r7, #48]	@ 0x30
        int16_t accelZ = (buffer[4] << 8) | buffer[5];
 800122e:	7f3b      	ldrb	r3, [r7, #28]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7f7b      	ldrb	r3, [r7, #29]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        int16_t gyroX = (buffer[8] << 8) | buffer[9];
 800123c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        int16_t gyroY = (buffer[10] << 8) | buffer[11];
 800124e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t gyroZ = (buffer[12] << 8) | buffer[13];
 8001260:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	853b      	strh	r3, [r7, #40]	@ 0x28

        // Sum values for averaging
        accel_sum[0] += accelX;
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
        accel_sum[1] += accelY;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001282:	4413      	add	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        accel_sum[2] += (accelZ - 16384);  // Remove gravity effect
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800128c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

        gyro_sum[0] += gyroX;
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800129a:	4413      	add	r3, r2
 800129c:	603b      	str	r3, [r7, #0]
        gyro_sum[1] += gyroY;
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80012a4:	4413      	add	r3, r2
 80012a6:	607b      	str	r3, [r7, #4]
        gyro_sum[2] += gyroZ;
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80012ae:	4413      	add	r3, r2
 80012b0:	60bb      	str	r3, [r7, #8]
        HAL_Delay(2);
 80012b2:	2002      	movs	r0, #2
 80012b4:	f002 faac 	bl	8003810 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 80012b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ba:	3301      	adds	r3, #1
 80012bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	429a      	cmp	r2, r3
 80012c4:	db99      	blt.n	80011fa <IMU_Calibrate+0x2a>
    }

    // Compute average offset
    for (int i = 0; i < 3; i++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012ca:	e01e      	b.n	800130a <IMU_Calibrate+0x13a>
        accel_offset[i] = accel_sum[i] / num_samples;
 80012cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	3340      	adds	r3, #64	@ 0x40
 80012d2:	443b      	add	r3, r7
 80012d4:	f853 2c34 	ldr.w	r2, [r3, #-52]
 80012d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012da:	fb92 f3f3 	sdiv	r3, r2, r3
 80012de:	b219      	sxth	r1, r3
 80012e0:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <IMU_Calibrate+0x14c>)
 80012e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        gyro_offset[i] = gyro_sum[i] / num_samples;
 80012e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	443b      	add	r3, r7
 80012f0:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80012f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012fa:	b219      	sxth	r1, r3
 80012fc:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <IMU_Calibrate+0x150>)
 80012fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 3; i++) {
 8001304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001306:	3301      	adds	r3, #1
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800130a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800130c:	2b02      	cmp	r3, #2
 800130e:	dddd      	ble.n	80012cc <IMU_Calibrate+0xfc>
    }

    return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3740      	adds	r7, #64	@ 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001fc 	.word	0x200001fc
 8001320:	200001f4 	.word	0x200001f4

08001324 <IMU_Init>:





HAL_StatusTypeDef IMU_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
    uint8_t who_am_i;


    if (HAL_I2C_IsDeviceReady(&hi2c2, IMU_I2C_ADDR, 2, 1000)!= HAL_OK){
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	2202      	movs	r2, #2
 8001330:	21d0      	movs	r1, #208	@ 0xd0
 8001332:	4811      	ldr	r0, [pc, #68]	@ (8001378 <IMU_Init+0x54>)
 8001334:	f002 ff8c 	bl	8004250 <HAL_I2C_IsDeviceReady>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <IMU_Init+0x1e>
    	return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e016      	b.n	8001370 <IMU_Init+0x4c>
    }

    if (IMU_ReadRegister(WHO_AM_I_REG, &who_am_i)!= HAL_OK){
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	4619      	mov	r1, r3
 8001346:	2075      	movs	r0, #117	@ 0x75
 8001348:	f7ff ff08 	bl	800115c <IMU_ReadRegister>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <IMU_Init+0x32>
    	return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00c      	b.n	8001370 <IMU_Init+0x4c>
    }
    else{
    	if (who_am_i!=0x71){
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b71      	cmp	r3, #113	@ 0x71
 800135a:	d001      	beq.n	8001360 <IMU_Init+0x3c>
    		return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e007      	b.n	8001370 <IMU_Init+0x4c>
    	}
    }


    if (IMU_Calibrate()!= HAL_OK){
 8001360:	f7ff ff36 	bl	80011d0 <IMU_Calibrate>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <IMU_Init+0x4a>
    	return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <IMU_Init+0x4c>
    }

    return HAL_OK;
 800136e:	2300      	movs	r3, #0


}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000234 	.word	0x20000234

0800137c <Convert_IMU_Data_All>:




void Convert_IMU_Data_All(int16_t *raw_accel, int16_t *raw_gyro, float *accel_g, float *gyro_dps, float *gyro_angle, float dt) {
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	@ 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6178      	str	r0, [r7, #20]
 8001384:	6139      	str	r1, [r7, #16]
 8001386:	60fa      	str	r2, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_sensitivity = 16384.0f;  // ±2g
 800138e:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8001392:	623b      	str	r3, [r7, #32]
    float gyro_sensitivity  = 131.0f;    // ±250°/s
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <Convert_IMU_Data_All+0xf4>)
 8001396:	61fb      	str	r3, [r7, #28]

    // Static variable to hold cumulative integration between calls
    static float integrated_angle[3] = {0.0f, 0.0f, 0.0f};
    float treshold_dps = 1.0;
 8001398:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800139c:	61bb      	str	r3, [r7, #24]

    // Convert accelerometer values to g
    // Convert gyroscope values to °/s and integrate to get angle
    for (int i = 0; i < 3; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	e05b      	b.n	800145c <Convert_IMU_Data_All+0xe0>
        accel_g[i] = raw_accel[i] / accel_sensitivity;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4413      	add	r3, r2
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c8:	edc3 7a00 	vstr	s15, [r3]

        gyro_dps[i] = raw_gyro[i] / gyro_sensitivity;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4413      	add	r3, r2
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	edc3 7a00 	vstr	s15, [r3]


        if (fabs(gyro_dps[i])>treshold_dps){
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eef0 7ae7 	vabs.f32	s15, s15
 8001404:	ed97 7a06 	vldr	s14, [r7, #24]
 8001408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d517      	bpl.n	8001442 <Convert_IMU_Data_All+0xc6>
        	integrated_angle[i] += gyro_dps[i] * dt;
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <Convert_IMU_Data_All+0xf8>)
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	edd3 6a00 	vldr	s13, [r3]
 800142a:	edd7 7a01 	vldr	s15, [r7, #4]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001436:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <Convert_IMU_Data_All+0xf8>)
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	edc3 7a00 	vstr	s15, [r3]
        }

        gyro_angle[i] = integrated_angle[i];
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001448:	4413      	add	r3, r2
 800144a:	490a      	ldr	r1, [pc, #40]	@ (8001474 <Convert_IMU_Data_All+0xf8>)
 800144c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	440a      	add	r2, r1
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	2b02      	cmp	r3, #2
 8001460:	dda0      	ble.n	80013a4 <Convert_IMU_Data_All+0x28>

    }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	372c      	adds	r7, #44	@ 0x2c
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	43030000 	.word	0x43030000
 8001474:	20000228 	.word	0x20000228

08001478 <IMU_ReadAccelGyro_Converted_All>:


HAL_StatusTypeDef IMU_ReadAccelGyro_Converted_All(float dt) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	@ 0x30
 800147c:	af02      	add	r7, sp, #8
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buffer[14];

    if (IMU_ReadRegisters(0x3B, buffer, 14) != HAL_OK) {
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	220e      	movs	r2, #14
 8001488:	4619      	mov	r1, r3
 800148a:	203b      	movs	r0, #59	@ 0x3b
 800148c:	f7ff fe82 	bl	8001194 <IMU_ReadRegisters>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <IMU_ReadAccelGyro_Converted_All+0x22>
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e072      	b.n	8001580 <IMU_ReadAccelGyro_Converted_All+0x108>

    int16_t raw_accel[3];
    int16_t raw_gyro[3];

    // Apply offsets
    raw_accel[0] = ((buffer[0] << 8) | buffer[1]) - accel_offset[0];
 800149a:	7e3b      	ldrb	r3, [r7, #24]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	7e7b      	ldrb	r3, [r7, #25]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <IMU_ReadAccelGyro_Converted_All+0x110>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	823b      	strh	r3, [r7, #16]
    raw_accel[1] = ((buffer[2] << 8) | buffer[3]) - accel_offset[1];
 80014ba:	7ebb      	ldrb	r3, [r7, #26]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <IMU_ReadAccelGyro_Converted_All+0x110>)
 80014cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	827b      	strh	r3, [r7, #18]
    raw_accel[2] = ((buffer[4] << 8) | buffer[5]) - accel_offset[2];
 80014da:	7f3b      	ldrb	r3, [r7, #28]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7f7b      	ldrb	r3, [r7, #29]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <IMU_ReadAccelGyro_Converted_All+0x110>)
 80014ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	82bb      	strh	r3, [r7, #20]

    raw_gyro[0] = ((buffer[8] << 8) | buffer[9]) - gyro_offset[0];
 80014fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21b      	sxth	r3, r3
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <IMU_ReadAccelGyro_Converted_All+0x114>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21b      	sxth	r3, r3
 800151c:	813b      	strh	r3, [r7, #8]
    raw_gyro[1] = ((buffer[10] << 8) | buffer[11]) - gyro_offset[1];
 800151e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <IMU_ReadAccelGyro_Converted_All+0x114>)
 8001534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001538:	b29b      	uxth	r3, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21b      	sxth	r3, r3
 8001540:	817b      	strh	r3, [r7, #10]
    raw_gyro[2] = ((buffer[12] << 8) | buffer[13]) - gyro_offset[2];
 8001542:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <IMU_ReadAccelGyro_Converted_All+0x114>)
 8001558:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21b      	sxth	r3, r3
 8001564:	81bb      	strh	r3, [r7, #12]

    // Convert to g and dps, and integrate gyroscope values into angles
    Convert_IMU_Data_All(raw_accel, raw_gyro, accel_g, gyro_dps, gyro_angle, dt);
 8001566:	f107 0108 	add.w	r1, r7, #8
 800156a:	f107 0010 	add.w	r0, r7, #16
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <IMU_ReadAccelGyro_Converted_All+0x118>)
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	ed97 0a01 	vldr	s0, [r7, #4]
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <IMU_ReadAccelGyro_Converted_All+0x11c>)
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <IMU_ReadAccelGyro_Converted_All+0x120>)
 800157a:	f7ff feff 	bl	800137c <Convert_IMU_Data_All>

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200001fc 	.word	0x200001fc
 800158c:	200001f4 	.word	0x200001f4
 8001590:	2000021c 	.word	0x2000021c
 8001594:	20000210 	.word	0x20000210
 8001598:	20000204 	.word	0x20000204

0800159c <integrate_error>:
#include "PID.h"

float integrate_error(float new_error_point, float previous_integrated_error, float sample_time){
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80015a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80015aa:	ed87 1a01 	vstr	s2, [r7, #4]
	return previous_integrated_error + new_error_point*sample_time;
 80015ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <differentiate_error>:

float differentiate_error(float new_error_point, float previous_error, float sample_time){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80015da:	edc7 0a02 	vstr	s1, [r7, #8]
 80015de:	ed87 1a01 	vstr	s2, [r7, #4]
	return (new_error_point-previous_error)/sample_time;
 80015e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <update>:


float update(PID pid, float error){
 8001608:	b084      	sub	sp, #16
 800160a:	b580      	push	{r7, lr}
 800160c:	ed2d 8b02 	vpush	{d8}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001618:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800161c:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_term = pid.kp*error;
 8001620:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001624:	ed97 7a01 	vldr	s14, [r7, #4]
 8001628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162c:	edc7 7a05 	vstr	s15, [r7, #20]
	float i_term = pid.ki*integrate_error(error, pid.previous_integrated_error, pid.sample_time);
 8001630:	ed97 8a0c 	vldr	s16, [r7, #48]	@ 0x30
 8001634:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001638:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800163c:	eeb0 1a47 	vmov.f32	s2, s14
 8001640:	eef0 0a67 	vmov.f32	s1, s15
 8001644:	ed97 0a01 	vldr	s0, [r7, #4]
 8001648:	f7ff ffa8 	bl	800159c <integrate_error>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001654:	edc7 7a04 	vstr	s15, [r7, #16]
	pid.previous_integrated_error = i_term;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
	float d_term = pid.kd*differentiate_error(error, pid.previous_error, pid.sample_time);
 800165c:	ed97 8a0b 	vldr	s16, [r7, #44]	@ 0x2c
 8001660:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001664:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001668:	eeb0 1a47 	vmov.f32	s2, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	ed97 0a01 	vldr	s0, [r7, #4]
 8001674:	f7ff ffac 	bl	80015d0 <differentiate_error>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001680:	edc7 7a03 	vstr	s15, [r7, #12]
	pid.previous_error = error;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
	return p_term+i_term+d_term;
 8001688:	ed97 7a05 	vldr	s14, [r7, #20]
 800168c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	edd7 7a03 	vldr	s15, [r7, #12]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	ecbd 8b02 	vpop	{d8}
 80016a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ac:	b004      	add	sp, #16
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_EXTI_Callback>:
extern char received_command[NRF24L01P_PAYLOAD_LENGTH];
extern char rx_data[NRF24L01P_PAYLOAD_LENGTH];
extern int message_flag;
extern float ultrasound_measure_cm;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016c0:	d109      	bne.n	80016d6 <HAL_GPIO_EXTI_Callback+0x26>
	    nrf24l01p_rx_receive(rx_data);
 80016c2:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80016c4:	f001 f9f2 	bl	8002aac <nrf24l01p_rx_receive>
	    strcpy(received_command, rx_data);
 80016c8:	4905      	ldr	r1, [pc, #20]	@ (80016e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80016cc:	f00a f91d 	bl	800b90a <strcpy>
	    message_flag=1;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
	}

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000650 	.word	0x20000650
 80016e4:	20000630 	.word	0x20000630
 80016e8:	20000628 	.word	0x20000628

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f002 f812 	bl	8003718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f818 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f000 fbee 	bl	8001ed8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016fc:	f000 fbbc 	bl	8001e78 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001700:	f000 f8e2 	bl	80018c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001704:	f000 f9b0 	bl	8001a68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001708:	f000 f9fc 	bl	8001b04 <MX_TIM3_Init>
  MX_TIM4_Init();
 800170c:	f000 fa48 	bl	8001ba0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001710:	f000 fab8 	bl	8001c84 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001714:	f000 f85a 	bl	80017cc <MX_I2C2_Init>
  MX_TIM8_Init();
 8001718:	f000 fb02 	bl	8001d20 <MX_TIM8_Init>
  MX_SPI2_Init();
 800171c:	f000 f896 	bl	800184c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  run();
 8001720:	f000 fc68 	bl	8001ff4 <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <main+0x38>

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	@ 0x58
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	2244      	movs	r2, #68	@ 0x44
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00a f855 	bl	800b7e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800174a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800174e:	f003 f97f 	bl	8004a50 <HAL_PWREx_ControlVoltageScaling>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001758:	f000 fc46 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175c:	2302      	movs	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001766:	2310      	movs	r3, #16
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001776:	230a      	movs	r3, #10
 8001778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800177a:	2307      	movs	r3, #7
 800177c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f9b6 	bl	8004afc <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001796:	f000 fc27 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2303      	movs	r3, #3
 80017a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	2104      	movs	r1, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fd7e 	bl	80052b4 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017be:	f000 fc13 	bl	8001fe8 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3758      	adds	r7, #88	@ 0x58
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <MX_I2C2_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <MX_I2C2_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_I2C2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001806:	480e      	ldr	r0, [pc, #56]	@ (8001840 <MX_I2C2_Init+0x74>)
 8001808:	f002 fb6c 	bl	8003ee4 <HAL_I2C_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001812:	f000 fbe9 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <MX_I2C2_Init+0x74>)
 800181a:	f003 f873 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fbe0 	bl	8001fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_I2C2_Init+0x74>)
 800182c:	f003 f8b5 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001836:	f000 fbd7 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000234 	.word	0x20000234
 8001844:	40005800 	.word	0x40005800
 8001848:	10d19ce4 	.word	0x10d19ce4

0800184c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <MX_SPI2_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001866:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800186a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800187a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001882:	2230      	movs	r2, #48	@ 0x30
 8001884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <MX_SPI2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_SPI2_Init+0x74>)
 800189a:	2207      	movs	r2, #7
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_SPI2_Init+0x74>)
 80018ac:	f004 fbe2 	bl	8006074 <HAL_SPI_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 fb97 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000288 	.word	0x20000288
 80018c4:	40003800 	.word	0x40003800

080018c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09a      	sub	sp, #104	@ 0x68
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	222c      	movs	r2, #44	@ 0x2c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f009 ff6f 	bl	800b7e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001908:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <MX_TIM1_Init+0x198>)
 800190a:	4a56      	ldr	r2, [pc, #344]	@ (8001a64 <MX_TIM1_Init+0x19c>)
 800190c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800190e:	4b54      	ldr	r3, [pc, #336]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b52      	ldr	r3, [pc, #328]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800191a:	4b51      	ldr	r3, [pc, #324]	@ (8001a60 <MX_TIM1_Init+0x198>)
 800191c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001928:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <MX_TIM1_Init+0x198>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001934:	484a      	ldr	r0, [pc, #296]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001936:	f005 fbdd 	bl	80070f4 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001940:	f000 fb52 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001948:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800194e:	4619      	mov	r1, r3
 8001950:	4843      	ldr	r0, [pc, #268]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001952:	f006 fc75 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800195c:	f000 fb44 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001960:	483f      	ldr	r0, [pc, #252]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001962:	f005 fd4e 	bl	8007402 <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800196c:	f000 fb3c 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001980:	4619      	mov	r1, r3
 8001982:	4837      	ldr	r0, [pc, #220]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001984:	f007 fab8 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800198e:	f000 fb2b 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	@ 0x60
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	482a      	ldr	r0, [pc, #168]	@ (8001a60 <MX_TIM1_Init+0x198>)
 80019b8:	f006 fb2e 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019c2:	f000 fb11 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4824      	ldr	r0, [pc, #144]	@ (8001a60 <MX_TIM1_Init+0x198>)
 80019d0:	f006 fb22 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80019da:	f000 fb05 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e2:	2208      	movs	r2, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	481e      	ldr	r0, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0x198>)
 80019e8:	f006 fb16 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80019f2:	f000 faf9 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019fa:	220c      	movs	r2, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4818      	ldr	r0, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001a00:	f006 fb0a 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001a0a:	f000 faed 	bl	8001fe8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001a44:	f007 fae0 	bl	8009008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001a4e:	f000 facb 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a52:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM1_Init+0x198>)
 8001a54:	f001 fbc8 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3768      	adds	r7, #104	@ 0x68
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002ec 	.word	0x200002ec
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9e:	22c8      	movs	r2, #200	@ 0xc8
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f005 fb20 	bl	80070f4 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fa95 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f006 fbb8 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fa87 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f007 fa06 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fa79 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000338 	.word	0x20000338

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b24:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <MX_TIM3_Init+0x98>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b48:	4813      	ldr	r0, [pc, #76]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b4a:	f005 fad3 	bl	80070f4 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b54:	f000 fa48 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b66:	f006 fb6b 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b70:	f000 fa3a 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_TIM3_Init+0x94>)
 8001b82:	f007 f9b9 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b8c:	f000 fa2c 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000384 	.word	0x20000384
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001bce:	4a2c      	ldr	r2, [pc, #176]	@ (8001c80 <MX_TIM4_Init+0xe0>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001bd4:	224f      	movs	r2, #79	@ 0x4f
 8001bd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001be4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bf2:	4822      	ldr	r0, [pc, #136]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001bf4:	f005 fa7e 	bl	80070f4 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001bfe:	f000 f9f3 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c06:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481b      	ldr	r0, [pc, #108]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001c10:	f006 fb16 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f000 f9e5 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c1e:	4817      	ldr	r0, [pc, #92]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001c20:	f005 fdec 	bl	80077fc <HAL_TIM_IC_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001c2a:	f000 f9dd 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480f      	ldr	r0, [pc, #60]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001c3e:	f007 f95b 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001c48:	f000 f9ce 	bl	8001fe8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <MX_TIM4_Init+0xdc>)
 8001c64:	f006 f93b 	bl	8007ede <HAL_TIM_IC_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001c6e:	f000 f9bb 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	@ 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200003d0 	.word	0x200003d0
 8001c80:	40000800 	.word	0x40000800

08001c84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <MX_TIM5_Init+0x98>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001caa:	224f      	movs	r2, #79	@ 0x4f
 8001cac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cc8:	4813      	ldr	r0, [pc, #76]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001cca:	f005 fa13 	bl	80070f4 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001cd4:	f000 f988 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001ce6:	f006 faab 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001cf0:	f000 f97a 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_TIM5_Init+0x94>)
 8001d02:	f007 f8f9 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d0c:	f000 f96c 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000041c 	.word	0x2000041c
 8001d1c:	40000c00 	.word	0x40000c00

08001d20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b09a      	sub	sp, #104	@ 0x68
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
 8001d50:	615a      	str	r2, [r3, #20]
 8001d52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	222c      	movs	r2, #44	@ 0x2c
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f009 fd43 	bl	800b7e6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d62:	4a44      	ldr	r2, [pc, #272]	@ (8001e74 <MX_TIM8_Init+0x154>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8001d66:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d68:	224f      	movs	r2, #79	@ 0x4f
 8001d6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d72:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d78:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d80:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d8c:	4838      	ldr	r0, [pc, #224]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001d8e:	f005 f9b1 	bl	80070f4 <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f000 f926 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001da2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001da6:	4619      	mov	r1, r3
 8001da8:	4831      	ldr	r0, [pc, #196]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001daa:	f006 fa49 	bl	8008240 <HAL_TIM_ConfigClockSource>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001db4:	f000 f918 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001db8:	482d      	ldr	r0, [pc, #180]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001dba:	f005 fb22 	bl	8007402 <HAL_TIM_PWM_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001dc4:	f000 f910 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4825      	ldr	r0, [pc, #148]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001ddc:	f007 f88c 	bl	8008ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001de6:	f000 f8ff 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dea:	2360      	movs	r3, #96	@ 0x60
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 250;
 8001dee:	23fa      	movs	r3, #250	@ 0xfa
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df2:	2300      	movs	r3, #0
 8001df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001e10:	f006 f902 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001e1a:	f000 f8e5 	bl	8001fe8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001e54:	f007 f8d8 	bl	8009008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001e5e:	f000 f8c3 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM8_Init+0x150>)
 8001e64:	f001 f9c0 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3768      	adds	r7, #104	@ 0x68
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000468 	.word	0x20000468
 8001e74:	40013400 	.word	0x40013400

08001e78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <MX_USART2_UART_Init+0x5c>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001ebc:	f007 f940 	bl	8009140 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ec6:	f000 f88f 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200004b4 	.word	0x200004b4
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efa:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f06:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	4a35      	ldr	r2, [pc, #212]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f12:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4a29      	ldr	r2, [pc, #164]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f42:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <MX_GPIO_Init+0x108>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2120      	movs	r1, #32
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f56:	f001 ff7b 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	4821      	ldr	r0, [pc, #132]	@ (8001fe4 <MX_GPIO_Init+0x10c>)
 8001f60:	f001 ff76 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CE_GPIO_Port, SPI2_CE_Pin, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f6a:	481e      	ldr	r0, [pc, #120]	@ (8001fe4 <MX_GPIO_Init+0x10c>)
 8001f6c:	f001 ff70 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin SPI2_IRQ_Pin */
  GPIO_InitStruct.Pin = B1_Pin|SPI2_IRQ_Pin;
 8001f70:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <MX_GPIO_Init+0x10c>)
 8001f88:	f001 fdb8 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa6:	f001 fda9 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_CE_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_CE_Pin;
 8001faa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <MX_GPIO_Init+0x10c>)
 8001fc4:	f001 fd9a 	bl	8003afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f001 fd1e 	bl	8003a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd2:	2017      	movs	r0, #23
 8001fd4:	f001 fd37 	bl	8003a46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	@ 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48000800 	.word	0x48000800

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <Error_Handler+0x8>

08001ff4 <run>:
//extern int pulse_width;
//extern int last_capture;
//extern int current_capture;

extern int pulse_duration;
void run(){
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0

	// Initialize RF communication
	nrf24l01p_rx_init(2500, _250kbps);
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002000:	f000 fd26 	bl	8002a50 <nrf24l01p_rx_init>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002004:	2120      	movs	r1, #32
 8002006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800200a:	f001 ff39 	bl	8003e80 <HAL_GPIO_TogglePin>

	state = IDLE_STATE;
 800200e:	4b61      	ldr	r3, [pc, #388]	@ (8002194 <run+0x1a0>)
 8002010:	2202      	movs	r2, #2
 8002012:	601a      	str	r2, [r3, #0]
	while(1){
		if (ultrasound_measure_flag ==1){
 8002014:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <run+0x1a4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d119      	bne.n	8002050 <run+0x5c>
			memset(message, 0, 100);
 800201c:	2264      	movs	r2, #100	@ 0x64
 800201e:	2100      	movs	r1, #0
 8002020:	485e      	ldr	r0, [pc, #376]	@ (800219c <run+0x1a8>)
 8002022:	f009 fbe0 	bl	800b7e6 <memset>
			sprintf(message, "%f \n\r", ultrasound_measure_cm);
 8002026:	4b5e      	ldr	r3, [pc, #376]	@ (80021a0 <run+0x1ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa9c 	bl	8000568 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	495b      	ldr	r1, [pc, #364]	@ (80021a4 <run+0x1b0>)
 8002036:	4859      	ldr	r0, [pc, #356]	@ (800219c <run+0x1a8>)
 8002038:	f009 fb72 	bl	800b720 <siprintf>
			HAL_UART_Transmit(&huart2,message,100,1000);
 800203c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002040:	2264      	movs	r2, #100	@ 0x64
 8002042:	4956      	ldr	r1, [pc, #344]	@ (800219c <run+0x1a8>)
 8002044:	4858      	ldr	r0, [pc, #352]	@ (80021a8 <run+0x1b4>)
 8002046:	f007 f8c9 	bl	80091dc <HAL_UART_Transmit>
			ultrasound_measure_flag = 0;
 800204a:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <run+0x1a4>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
		}


		

		if (state == IDLE_STATE){
 8002050:	4b50      	ldr	r3, [pc, #320]	@ (8002194 <run+0x1a0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d101      	bne.n	800205c <run+0x68>
			init();
 8002058:	f000 f8b2 	bl	80021c0 <init>
			state == FLYING_STATE;
		}

		if (state == STOP_STATE){
 800205c:	4b4d      	ldr	r3, [pc, #308]	@ (8002194 <run+0x1a0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d104      	bne.n	800206e <run+0x7a>
			stop();
 8002064:	f000 f9b4 	bl	80023d0 <stop>
			state = IDLE_STATE;
 8002068:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <run+0x1a0>)
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]

		}

		if (state == COEFFICENT_MODIFICATION_STATE){
 800206e:	4b49      	ldr	r3, [pc, #292]	@ (8002194 <run+0x1a0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d1ce      	bne.n	8002014 <run+0x20>
			PID modified_pid;

			switch(validated_command[1]){
 8002076:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <run+0x1b8>)
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	3b48      	subs	r3, #72	@ 0x48
 800207c:	2b11      	cmp	r3, #17
 800207e:	d853      	bhi.n	8002128 <run+0x134>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <run+0x94>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	080020d1 	.word	0x080020d1
 800208c:	08002129 	.word	0x08002129
 8002090:	08002129 	.word	0x08002129
 8002094:	08002129 	.word	0x08002129
 8002098:	08002129 	.word	0x08002129
 800209c:	08002129 	.word	0x08002129
 80020a0:	08002129 	.word	0x08002129
 80020a4:	08002129 	.word	0x08002129
 80020a8:	080020e7 	.word	0x080020e7
 80020ac:	08002129 	.word	0x08002129
 80020b0:	080020fd 	.word	0x080020fd
 80020b4:	08002129 	.word	0x08002129
 80020b8:	08002129 	.word	0x08002129
 80020bc:	08002129 	.word	0x08002129
 80020c0:	08002129 	.word	0x08002129
 80020c4:	08002129 	.word	0x08002129
 80020c8:	08002129 	.word	0x08002129
 80020cc:	08002113 	.word	0x08002113
				case 'H':
				    modified_pid = heightPID;
 80020d0:	4b37      	ldr	r3, [pc, #220]	@ (80021b0 <run+0x1bc>)
 80020d2:	f107 0408 	add.w	r4, r7, #8
 80020d6:	461d      	mov	r5, r3
 80020d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020e0:	e884 0003 	stmia.w	r4, {r0, r1}
                    break;
 80020e4:	e020      	b.n	8002128 <run+0x134>
				case 'P':
				    modified_pid = pitchPID;
 80020e6:	4b33      	ldr	r3, [pc, #204]	@ (80021b4 <run+0x1c0>)
 80020e8:	f107 0408 	add.w	r4, r7, #8
 80020ec:	461d      	mov	r5, r3
 80020ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020f6:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 80020fa:	e015      	b.n	8002128 <run+0x134>
				case 'R':
				    modified_pid = rollPID;
 80020fc:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <run+0x1c4>)
 80020fe:	f107 0408 	add.w	r4, r7, #8
 8002102:	461d      	mov	r5, r3
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0003 	ldmia.w	r5, {r0, r1}
 800210c:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8002110:	e00a      	b.n	8002128 <run+0x134>
				case 'Y':
				    modified_pid = yawPID;
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <run+0x1c8>)
 8002114:	f107 0408 	add.w	r4, r7, #8
 8002118:	461d      	mov	r5, r3
 800211a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800211e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002122:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8002126:	bf00      	nop
			}

			char value_string[5];
			for (int i = 0; i < 5; i++){
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
 800212c:	e00b      	b.n	8002146 <run+0x152>
				value_string[i] = validated_command[i+3];
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3303      	adds	r3, #3
 8002132:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <run+0x1b8>)
 8002134:	5cd1      	ldrb	r1, [r2, r3]
 8002136:	463a      	mov	r2, r7
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	4413      	add	r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 5; i++){
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	3301      	adds	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	2b04      	cmp	r3, #4
 800214a:	ddf0      	ble.n	800212e <run+0x13a>
			}
			float value = atof(value_string);
 800214c:	463b      	mov	r3, r7
 800214e:	4618      	mov	r0, r3
 8002150:	f007 fda1 	bl	8009c96 <atof>
 8002154:	ec53 2b10 	vmov	r2, r3, d0
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd54 	bl	8000c08 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	623b      	str	r3, [r7, #32]


			switch(validated_command[2]) {
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <run+0x1b8>)
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	2b50      	cmp	r3, #80	@ 0x50
 800216a:	d006      	beq.n	800217a <run+0x186>
 800216c:	2b50      	cmp	r3, #80	@ 0x50
 800216e:	dc0d      	bgt.n	800218c <run+0x198>
 8002170:	2b44      	cmp	r3, #68	@ 0x44
 8002172:	d008      	beq.n	8002186 <run+0x192>
 8002174:	2b49      	cmp	r3, #73	@ 0x49
 8002176:	d003      	beq.n	8002180 <run+0x18c>
 8002178:	e008      	b.n	800218c <run+0x198>
				case 'P':
				    modified_pid.kp = value;
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	60bb      	str	r3, [r7, #8]
				    break;
 800217e:	e005      	b.n	800218c <run+0x198>
				case 'I':
				    modified_pid.ki = value;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	613b      	str	r3, [r7, #16]
					break;
 8002184:	e002      	b.n	800218c <run+0x198>
				case 'D':
				    modified_pid.kd = value;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	60fb      	str	r3, [r7, #12]
					break;
 800218a:	bf00      	nop
			}
			state = IDLE_STATE;
 800218c:	4b01      	ldr	r3, [pc, #4]	@ (8002194 <run+0x1a0>)
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
		if (ultrasound_measure_flag ==1){
 8002192:	e73f      	b.n	8002014 <run+0x20>
 8002194:	2000053c 	.word	0x2000053c
 8002198:	200006c4 	.word	0x200006c4
 800219c:	20000660 	.word	0x20000660
 80021a0:	2000062c 	.word	0x2000062c
 80021a4:	0800e4a8 	.word	0x0800e4a8
 80021a8:	200004b4 	.word	0x200004b4
 80021ac:	20000640 	.word	0x20000640
 80021b0:	20000594 	.word	0x20000594
 80021b4:	200005ac 	.word	0x200005ac
 80021b8:	200005c4 	.word	0x200005c4
 80021bc:	200005dc 	.word	0x200005dc

080021c0 <init>:

			}

}

void init(){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	// Starting time reference
	HAL_TIM_Base_Start(&htim5);
 80021c4:	486d      	ldr	r0, [pc, #436]	@ (800237c <init+0x1bc>)
 80021c6:	f004 ffed 	bl	80071a4 <HAL_TIM_Base_Start>

	// Variable initializations
	flight_allowed = 1	;
 80021ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002380 <init+0x1c0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
	sample_time_us = 825;
 80021d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002384 <init+0x1c4>)
 80021d2:	f240 3239 	movw	r2, #825	@ 0x339
 80021d6:	601a      	str	r2, [r3, #0]

	heightPID.sample_time = sample_time_us/1000000;
 80021d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <init+0x1c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002388 <init+0x1c8>)
 80021de:	fb82 1203 	smull	r1, r2, r2, r3
 80021e2:	1492      	asrs	r2, r2, #18
 80021e4:	17db      	asrs	r3, r3, #31
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <init+0x1cc>)
 80021f2:	edc3 7a05 	vstr	s15, [r3, #20]
	pitchPID.sample_time = sample_time_us/1000000;
 80021f6:	4b63      	ldr	r3, [pc, #396]	@ (8002384 <init+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a63      	ldr	r2, [pc, #396]	@ (8002388 <init+0x1c8>)
 80021fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002200:	1492      	asrs	r2, r2, #18
 8002202:	17db      	asrs	r3, r3, #31
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220e:	4b60      	ldr	r3, [pc, #384]	@ (8002390 <init+0x1d0>)
 8002210:	edc3 7a05 	vstr	s15, [r3, #20]
	rollPID.sample_time = sample_time_us/1000000;
 8002214:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <init+0x1c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5b      	ldr	r2, [pc, #364]	@ (8002388 <init+0x1c8>)
 800221a:	fb82 1203 	smull	r1, r2, r2, r3
 800221e:	1492      	asrs	r2, r2, #18
 8002220:	17db      	asrs	r3, r3, #31
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	4b59      	ldr	r3, [pc, #356]	@ (8002394 <init+0x1d4>)
 800222e:	edc3 7a05 	vstr	s15, [r3, #20]
	yawPID.sample_time = sample_time_us/1000000;
 8002232:	4b54      	ldr	r3, [pc, #336]	@ (8002384 <init+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a54      	ldr	r2, [pc, #336]	@ (8002388 <init+0x1c8>)
 8002238:	fb82 1203 	smull	r1, r2, r2, r3
 800223c:	1492      	asrs	r2, r2, #18
 800223e:	17db      	asrs	r3, r3, #31
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <init+0x1d8>)
 800224c:	edc3 7a05 	vstr	s15, [r3, #20]


	time_to_reach_1m = 5; // seconds
 8002250:	4b52      	ldr	r3, [pc, #328]	@ (800239c <init+0x1dc>)
 8002252:	2205      	movs	r2, #5
 8002254:	601a      	str	r2, [r3, #0]
	time_to_make_full_rotation = 5; // seconds
 8002256:	4b52      	ldr	r3, [pc, #328]	@ (80023a0 <init+0x1e0>)
 8002258:	2205      	movs	r2, #5
 800225a:	601a      	str	r2, [r3, #0]

	height_step = sample_time_us/time_to_reach_1m;
 800225c:	4b49      	ldr	r3, [pc, #292]	@ (8002384 <init+0x1c4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <init+0x1dc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fb92 f3f3 	sdiv	r3, r2, r3
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	4b4c      	ldr	r3, [pc, #304]	@ (80023a4 <init+0x1e4>)
 8002272:	edc3 7a00 	vstr	s15, [r3]
	yaw_step = 360*sample_time_us/time_to_make_full_rotation;
 8002276:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <init+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800227e:	fb03 f202 	mul.w	r2, r3, r2
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <init+0x1e0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fb92 f3f3 	sdiv	r3, r2, r3
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002292:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <init+0x1e8>)
 8002294:	edc3 7a00 	vstr	s15, [r3]


	// Initialization of the mainloop timer
	htim3.Instance->PSC = 84-1;// Timer clock is 84 MHz
 8002298:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <init+0x1ec>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2253      	movs	r2, #83	@ 0x53
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
	htim3.Instance->CNT = sample_time_us;
 80022a0:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <init+0x1c4>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <init+0x1ec>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24


	// IMU initialization

	if (IMU_Init() == HAL_ERROR){
 80022aa:	f7ff f83b 	bl	8001324 <IMU_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d103      	bne.n	80022bc <init+0xfc>
		flight_allowed = 0;
 80022b4:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <init+0x1c0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e002      	b.n	80022c2 <init+0x102>
	}
	else{
		HAL_TIM_Base_Start_IT(&htim2); // IMU trigger
 80022bc:	483c      	ldr	r0, [pc, #240]	@ (80023b0 <init+0x1f0>)
 80022be:	f005 f801 	bl	80072c4 <HAL_TIM_Base_Start_IT>
	}


	// Motors initialization
	MOTOR_FRONT_RIGHT.htim = &htim1;
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <init+0x1f4>)
 80022c4:	4a3c      	ldr	r2, [pc, #240]	@ (80023b8 <init+0x1f8>)
 80022c6:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_RIGHT.channel = TIM_CHANNEL_1;
 80022c8:	4b3a      	ldr	r3, [pc, #232]	@ (80023b4 <init+0x1f4>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_RIGHT)== HAL_ERROR){
 80022ce:	4839      	ldr	r0, [pc, #228]	@ (80023b4 <init+0x1f4>)
 80022d0:	f7fe ff2e 	bl	8001130 <motor_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <init+0x120>
    	flight_allowed = 0;
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <init+0x1c0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    }


	MOTOR_FRONT_LEFT.htim = &htim1;
 80022e0:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <init+0x1fc>)
 80022e2:	4a35      	ldr	r2, [pc, #212]	@ (80023b8 <init+0x1f8>)
 80022e4:	601a      	str	r2, [r3, #0]
    MOTOR_FRONT_LEFT.channel = TIM_CHANNEL_2;
 80022e6:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <init+0x1fc>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	605a      	str	r2, [r3, #4]
    if (motor_Init(&MOTOR_FRONT_LEFT)== HAL_ERROR){
 80022ec:	4833      	ldr	r0, [pc, #204]	@ (80023bc <init+0x1fc>)
 80022ee:	f7fe ff1f 	bl	8001130 <motor_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <init+0x13e>
        	flight_allowed = 0;
 80022f8:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <init+0x1c0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
        }
	MOTOR_BACK_RIGHT.htim = &htim1;
 80022fe:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <init+0x200>)
 8002300:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <init+0x1f8>)
 8002302:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_RIGHT.channel = TIM_CHANNEL_3;
 8002304:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <init+0x200>)
 8002306:	2208      	movs	r2, #8
 8002308:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_RIGHT)== HAL_ERROR){
 800230a:	482d      	ldr	r0, [pc, #180]	@ (80023c0 <init+0x200>)
 800230c:	f7fe ff10 	bl	8001130 <motor_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <init+0x15c>
	    	flight_allowed = 0;
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <init+0x1c0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
	    }

	MOTOR_BACK_LEFT.htim = &htim1;
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <init+0x204>)
 800231e:	4a26      	ldr	r2, [pc, #152]	@ (80023b8 <init+0x1f8>)
 8002320:	601a      	str	r2, [r3, #0]
	MOTOR_BACK_LEFT.channel = TIM_CHANNEL_4;
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <init+0x204>)
 8002324:	220c      	movs	r2, #12
 8002326:	605a      	str	r2, [r3, #4]
	if (motor_Init(&MOTOR_BACK_LEFT)== HAL_ERROR){
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <init+0x204>)
 800232a:	f7fe ff01 	bl	8001130 <motor_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <init+0x17a>
	    	flight_allowed = 0;
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <init+0x1c0>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
	    }


	// Indicator for success (user led)
	if (flight_allowed == 1){
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <init+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d106      	bne.n	8002350 <init+0x190>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002342:	2201      	movs	r2, #1
 8002344:	2120      	movs	r1, #32
 8002346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234a:	f001 fd81 	bl	8003e50 <HAL_GPIO_WritePin>
 800234e:	e005      	b.n	800235c <init+0x19c>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2120      	movs	r1, #32
 8002354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002358:	f001 fd7a 	bl	8003e50 <HAL_GPIO_WritePin>
	}


	// Timers start
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // ultrasound trigger
 800235c:	2100      	movs	r1, #0
 800235e:	481a      	ldr	r0, [pc, #104]	@ (80023c8 <init+0x208>)
 8002360:	f005 f8b0 	bl	80074c4 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // ultrasound read
 8002364:	2100      	movs	r1, #0
 8002366:	4819      	ldr	r0, [pc, #100]	@ (80023cc <init+0x20c>)
 8002368:	f005 faaa 	bl	80078c0 <HAL_TIM_IC_Start_IT>


	HAL_TIM_Base_Start_IT(&htim3); // main loop
 800236c:	480f      	ldr	r0, [pc, #60]	@ (80023ac <init+0x1ec>)
 800236e:	f004 ffa9 	bl	80072c4 <HAL_TIM_Base_Start_IT>


	flight_allowed = 1;
 8002372:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <init+0x1c0>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000041c 	.word	0x2000041c
 8002380:	20000624 	.word	0x20000624
 8002384:	20000540 	.word	0x20000540
 8002388:	431bde83 	.word	0x431bde83
 800238c:	20000594 	.word	0x20000594
 8002390:	200005ac 	.word	0x200005ac
 8002394:	200005c4 	.word	0x200005c4
 8002398:	200005dc 	.word	0x200005dc
 800239c:	20000544 	.word	0x20000544
 80023a0:	2000054c 	.word	0x2000054c
 80023a4:	20000548 	.word	0x20000548
 80023a8:	20000550 	.word	0x20000550
 80023ac:	20000384 	.word	0x20000384
 80023b0:	20000338 	.word	0x20000338
 80023b4:	200005f4 	.word	0x200005f4
 80023b8:	200002ec 	.word	0x200002ec
 80023bc:	20000600 	.word	0x20000600
 80023c0:	2000060c 	.word	0x2000060c
 80023c4:	20000618 	.word	0x20000618
 80023c8:	20000468 	.word	0x20000468
 80023cc:	200003d0 	.word	0x200003d0

080023d0 <stop>:

void stop(){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	flight_allowed = 0;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <stop+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Stop(&htim5); // time reference
 80023da:	4812      	ldr	r0, [pc, #72]	@ (8002424 <stop+0x54>)
 80023dc:	f004 ff4a 	bl	8007274 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1); // ultrasound trigger
 80023e0:	2100      	movs	r1, #0
 80023e2:	4811      	ldr	r0, [pc, #68]	@ (8002428 <stop+0x58>)
 80023e4:	f005 f974 	bl	80076d0 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1); // ultrasound read
 80023e8:	2100      	movs	r1, #0
 80023ea:	4810      	ldr	r0, [pc, #64]	@ (800242c <stop+0x5c>)
 80023ec:	f005 fbb2 	bl	8007b54 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2); // IMU trigger
 80023f0:	480f      	ldr	r0, [pc, #60]	@ (8002430 <stop+0x60>)
 80023f2:	f004 ffd7 	bl	80073a4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3); // main loop
 80023f6:	480f      	ldr	r0, [pc, #60]	@ (8002434 <stop+0x64>)
 80023f8:	f004 ffd4 	bl	80073a4 <HAL_TIM_Base_Stop_IT>

	motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 80023fc:	2100      	movs	r1, #0
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <stop+0x68>)
 8002400:	f7fe fe4a 	bl	8001098 <motor_SetPower>
	motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 8002404:	2100      	movs	r1, #0
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <stop+0x6c>)
 8002408:	f7fe fe46 	bl	8001098 <motor_SetPower>
	motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 800240c:	2100      	movs	r1, #0
 800240e:	480c      	ldr	r0, [pc, #48]	@ (8002440 <stop+0x70>)
 8002410:	f7fe fe42 	bl	8001098 <motor_SetPower>
	motor_SetPower(&MOTOR_BACK_LEFT, 0);
 8002414:	2100      	movs	r1, #0
 8002416:	480b      	ldr	r0, [pc, #44]	@ (8002444 <stop+0x74>)
 8002418:	f7fe fe3e 	bl	8001098 <motor_SetPower>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000624 	.word	0x20000624
 8002424:	2000041c 	.word	0x2000041c
 8002428:	20000468 	.word	0x20000468
 800242c:	200003d0 	.word	0x200003d0
 8002430:	20000338 	.word	0x20000338
 8002434:	20000384 	.word	0x20000384
 8002438:	200005f4 	.word	0x200005f4
 800243c:	20000600 	.word	0x20000600
 8002440:	2000060c 	.word	0x2000060c
 8002444:	20000618 	.word	0x20000618

08002448 <control_step>:


void control_step(){
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b087      	sub	sp, #28
 800244c:	af02      	add	r7, sp, #8

		if (flight_allowed==1){
 800244e:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <control_step+0x168>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 823a 	bne.w	80028cc <control_step+0x484>
			//--------- Reading Sensors ------------//

			roll.measurement = gyro_angle[0];
 8002458:	4b56      	ldr	r3, [pc, #344]	@ (80025b4 <control_step+0x16c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a56      	ldr	r2, [pc, #344]	@ (80025b8 <control_step+0x170>)
 800245e:	6053      	str	r3, [r2, #4]
			pitch.measurement = gyro_angle[1];
 8002460:	4b54      	ldr	r3, [pc, #336]	@ (80025b4 <control_step+0x16c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a55      	ldr	r2, [pc, #340]	@ (80025bc <control_step+0x174>)
 8002466:	6053      	str	r3, [r2, #4]
			yaw.measurement = gyro_angle[2];
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <control_step+0x16c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a54      	ldr	r2, [pc, #336]	@ (80025c0 <control_step+0x178>)
 800246e:	6053      	str	r3, [r2, #4]

			

			height.measurement = ultrasound_measure_cm/100;
 8002470:	4b54      	ldr	r3, [pc, #336]	@ (80025c4 <control_step+0x17c>)
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80025c8 <control_step+0x180>
 800247a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800247e:	4b53      	ldr	r3, [pc, #332]	@ (80025cc <control_step+0x184>)
 8002480:	edc3 7a01 	vstr	s15, [r3, #4]

			//--------- Reading Commands ------------//

			// Height command extraction
			if (validated_command[1]=='1' && validated_command[2]=='0'){
 8002484:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <control_step+0x188>)
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b31      	cmp	r3, #49	@ 0x31
 800248a:	d120      	bne.n	80024ce <control_step+0x86>
 800248c:	4b50      	ldr	r3, [pc, #320]	@ (80025d0 <control_step+0x188>)
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	2b30      	cmp	r3, #48	@ 0x30
 8002492:	d11c      	bne.n	80024ce <control_step+0x86>
				height.command+=height_step;
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <control_step+0x184>)
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	4b4e      	ldr	r3, [pc, #312]	@ (80025d4 <control_step+0x18c>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	4b49      	ldr	r3, [pc, #292]	@ (80025cc <control_step+0x184>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]
				height.command = MIN(height.command, 1.5);
 80024aa:	4b48      	ldr	r3, [pc, #288]	@ (80025cc <control_step+0x184>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80024b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d502      	bpl.n	80024c4 <control_step+0x7c>
 80024be:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <control_step+0x184>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e001      	b.n	80024c8 <control_step+0x80>
 80024c4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80024c8:	4a40      	ldr	r2, [pc, #256]	@ (80025cc <control_step+0x184>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e021      	b.n	8002512 <control_step+0xca>
			}
			else if (validated_command[2]=='1' && validated_command[1]=='0'){
 80024ce:	4b40      	ldr	r3, [pc, #256]	@ (80025d0 <control_step+0x188>)
 80024d0:	789b      	ldrb	r3, [r3, #2]
 80024d2:	2b31      	cmp	r3, #49	@ 0x31
 80024d4:	d11d      	bne.n	8002512 <control_step+0xca>
 80024d6:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <control_step+0x188>)
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b30      	cmp	r3, #48	@ 0x30
 80024dc:	d119      	bne.n	8002512 <control_step+0xca>
				height.command-= height_step;
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <control_step+0x184>)
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <control_step+0x18c>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ee:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <control_step+0x184>)
 80024f0:	edc3 7a00 	vstr	s15, [r3]
				height.command = MAX(height.command, 0);
 80024f4:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <control_step+0x184>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	dd02      	ble.n	800250a <control_step+0xc2>
 8002504:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <control_step+0x184>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e001      	b.n	800250e <control_step+0xc6>
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	4a2f      	ldr	r2, [pc, #188]	@ (80025cc <control_step+0x184>)
 8002510:	6013      	str	r3, [r2, #0]
			}


			// Pitch command extraction
			if (validated_command[3]=='1' && validated_command[4]=='0'){
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <control_step+0x188>)
 8002514:	78db      	ldrb	r3, [r3, #3]
 8002516:	2b31      	cmp	r3, #49	@ 0x31
 8002518:	d108      	bne.n	800252c <control_step+0xe4>
 800251a:	4b2d      	ldr	r3, [pc, #180]	@ (80025d0 <control_step+0x188>)
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	2b30      	cmp	r3, #48	@ 0x30
 8002520:	d104      	bne.n	800252c <control_step+0xe4>
				pitch.command=1;
 8002522:	4b26      	ldr	r3, [pc, #152]	@ (80025bc <control_step+0x174>)
 8002524:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00f      	b.n	800254c <control_step+0x104>
			}
			else if (validated_command[4]=='1' && validated_command[3]=='0'){
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <control_step+0x188>)
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	2b31      	cmp	r3, #49	@ 0x31
 8002532:	d107      	bne.n	8002544 <control_step+0xfc>
 8002534:	4b26      	ldr	r3, [pc, #152]	@ (80025d0 <control_step+0x188>)
 8002536:	78db      	ldrb	r3, [r3, #3]
 8002538:	2b30      	cmp	r3, #48	@ 0x30
 800253a:	d103      	bne.n	8002544 <control_step+0xfc>
				pitch.command=-1;
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <control_step+0x174>)
 800253e:	4a26      	ldr	r2, [pc, #152]	@ (80025d8 <control_step+0x190>)
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e003      	b.n	800254c <control_step+0x104>
			}

			else{
				pitch.command=0;
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <control_step+0x174>)
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
			}


			// Roll command extraction
			if (validated_command[5]=='1' && validated_command[6]=='0'){
 800254c:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <control_step+0x188>)
 800254e:	795b      	ldrb	r3, [r3, #5]
 8002550:	2b31      	cmp	r3, #49	@ 0x31
 8002552:	d108      	bne.n	8002566 <control_step+0x11e>
 8002554:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <control_step+0x188>)
 8002556:	799b      	ldrb	r3, [r3, #6]
 8002558:	2b30      	cmp	r3, #48	@ 0x30
 800255a:	d104      	bne.n	8002566 <control_step+0x11e>
				roll.command=1;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <control_step+0x170>)
 800255e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e00f      	b.n	8002586 <control_step+0x13e>
			}
			else if (validated_command[6]=='1' && validated_command[5]=='0'){
 8002566:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <control_step+0x188>)
 8002568:	799b      	ldrb	r3, [r3, #6]
 800256a:	2b31      	cmp	r3, #49	@ 0x31
 800256c:	d107      	bne.n	800257e <control_step+0x136>
 800256e:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <control_step+0x188>)
 8002570:	795b      	ldrb	r3, [r3, #5]
 8002572:	2b30      	cmp	r3, #48	@ 0x30
 8002574:	d103      	bne.n	800257e <control_step+0x136>
				roll.command=-1;
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <control_step+0x170>)
 8002578:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <control_step+0x190>)
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e003      	b.n	8002586 <control_step+0x13e>
			}

			else{
				roll.command=0;
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <control_step+0x170>)
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
			}

			// Yaw command extraction
			if (validated_command[7]=='1' && validated_command[8]=='0'){
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <control_step+0x188>)
 8002588:	79db      	ldrb	r3, [r3, #7]
 800258a:	2b31      	cmp	r3, #49	@ 0x31
 800258c:	d128      	bne.n	80025e0 <control_step+0x198>
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <control_step+0x188>)
 8002590:	7a1b      	ldrb	r3, [r3, #8]
 8002592:	2b30      	cmp	r3, #48	@ 0x30
 8002594:	d124      	bne.n	80025e0 <control_step+0x198>
				yaw.command+=yaw_step;
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <control_step+0x178>)
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <control_step+0x194>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <control_step+0x178>)
 80025a8:	edc3 7a00 	vstr	s15, [r3]
 80025ac:	e02b      	b.n	8002606 <control_step+0x1be>
 80025ae:	bf00      	nop
 80025b0:	20000624 	.word	0x20000624
 80025b4:	2000021c 	.word	0x2000021c
 80025b8:	20000584 	.word	0x20000584
 80025bc:	20000564 	.word	0x20000564
 80025c0:	20000574 	.word	0x20000574
 80025c4:	2000062c 	.word	0x2000062c
 80025c8:	42c80000 	.word	0x42c80000
 80025cc:	20000554 	.word	0x20000554
 80025d0:	20000640 	.word	0x20000640
 80025d4:	20000548 	.word	0x20000548
 80025d8:	bf800000 	.word	0xbf800000
 80025dc:	20000550 	.word	0x20000550
			}
			else if (validated_command[8]=='1' && validated_command[7]=='0'){
 80025e0:	4bc9      	ldr	r3, [pc, #804]	@ (8002908 <control_step+0x4c0>)
 80025e2:	7a1b      	ldrb	r3, [r3, #8]
 80025e4:	2b31      	cmp	r3, #49	@ 0x31
 80025e6:	d10e      	bne.n	8002606 <control_step+0x1be>
 80025e8:	4bc7      	ldr	r3, [pc, #796]	@ (8002908 <control_step+0x4c0>)
 80025ea:	79db      	ldrb	r3, [r3, #7]
 80025ec:	2b30      	cmp	r3, #48	@ 0x30
 80025ee:	d10a      	bne.n	8002606 <control_step+0x1be>
				yaw.command-= yaw_step;
 80025f0:	4bc6      	ldr	r3, [pc, #792]	@ (800290c <control_step+0x4c4>)
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	4bc6      	ldr	r3, [pc, #792]	@ (8002910 <control_step+0x4c8>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002600:	4bc2      	ldr	r3, [pc, #776]	@ (800290c <control_step+0x4c4>)
 8002602:	edc3 7a00 	vstr	s15, [r3]
			}

			if (strcmp(validated_command, "$11111111")==0){
 8002606:	49c3      	ldr	r1, [pc, #780]	@ (8002914 <control_step+0x4cc>)
 8002608:	48bf      	ldr	r0, [pc, #764]	@ (8002908 <control_step+0x4c0>)
 800260a:	f7fd fde1 	bl	80001d0 <strcmp>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <control_step+0x1d2>
				flight_allowed = 0;
 8002614:	4bc0      	ldr	r3, [pc, #768]	@ (8002918 <control_step+0x4d0>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
			}

			//--------- Processing data ------------//
			// Calculating control inputs

			height.error = height.measurement - height.command;
 800261a:	4bc0      	ldr	r3, [pc, #768]	@ (800291c <control_step+0x4d4>)
 800261c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002620:	4bbe      	ldr	r3, [pc, #760]	@ (800291c <control_step+0x4d4>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262a:	4bbc      	ldr	r3, [pc, #752]	@ (800291c <control_step+0x4d4>)
 800262c:	edc3 7a03 	vstr	s15, [r3, #12]
			pitch.error = pitch.measurement - pitch.command;
 8002630:	4bbb      	ldr	r3, [pc, #748]	@ (8002920 <control_step+0x4d8>)
 8002632:	ed93 7a01 	vldr	s14, [r3, #4]
 8002636:	4bba      	ldr	r3, [pc, #744]	@ (8002920 <control_step+0x4d8>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002640:	4bb7      	ldr	r3, [pc, #732]	@ (8002920 <control_step+0x4d8>)
 8002642:	edc3 7a03 	vstr	s15, [r3, #12]
			yaw.error = yaw.measurement - yaw.command;
 8002646:	4bb1      	ldr	r3, [pc, #708]	@ (800290c <control_step+0x4c4>)
 8002648:	ed93 7a01 	vldr	s14, [r3, #4]
 800264c:	4baf      	ldr	r3, [pc, #700]	@ (800290c <control_step+0x4c4>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002656:	4bad      	ldr	r3, [pc, #692]	@ (800290c <control_step+0x4c4>)
 8002658:	edc3 7a03 	vstr	s15, [r3, #12]
			roll.error = roll.measurement - roll.command;
 800265c:	4bb1      	ldr	r3, [pc, #708]	@ (8002924 <control_step+0x4dc>)
 800265e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002662:	4bb0      	ldr	r3, [pc, #704]	@ (8002924 <control_step+0x4dc>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	4bad      	ldr	r3, [pc, #692]	@ (8002924 <control_step+0x4dc>)
 800266e:	edc3 7a03 	vstr	s15, [r3, #12]

			// Calculating control outputs

			height.u = update(heightPID,height.error);
 8002672:	4baa      	ldr	r3, [pc, #680]	@ (800291c <control_step+0x4d4>)
 8002674:	edd3 7a03 	vldr	s15, [r3, #12]
 8002678:	4bab      	ldr	r3, [pc, #684]	@ (8002928 <control_step+0x4e0>)
 800267a:	466c      	mov	r4, sp
 800267c:	f103 0210 	add.w	r2, r3, #16
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	e884 0003 	stmia.w	r4, {r0, r1}
 8002688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268a:	eeb0 0a67 	vmov.f32	s0, s15
 800268e:	f7fe ffbb 	bl	8001608 <update>
 8002692:	eef0 7a40 	vmov.f32	s15, s0
 8002696:	4ba1      	ldr	r3, [pc, #644]	@ (800291c <control_step+0x4d4>)
 8002698:	edc3 7a02 	vstr	s15, [r3, #8]
			pitch.u = update(pitchPID, pitch.error);
 800269c:	4ba0      	ldr	r3, [pc, #640]	@ (8002920 <control_step+0x4d8>)
 800269e:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a2:	4ba2      	ldr	r3, [pc, #648]	@ (800292c <control_step+0x4e4>)
 80026a4:	466c      	mov	r4, sp
 80026a6:	f103 0210 	add.w	r2, r3, #16
 80026aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80026b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	f7fe ffa6 	bl	8001608 <update>
 80026bc:	eef0 7a40 	vmov.f32	s15, s0
 80026c0:	4b97      	ldr	r3, [pc, #604]	@ (8002920 <control_step+0x4d8>)
 80026c2:	edc3 7a02 	vstr	s15, [r3, #8]
			yaw.u = update(yawPID, yaw.error);
 80026c6:	4b91      	ldr	r3, [pc, #580]	@ (800290c <control_step+0x4c4>)
 80026c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80026cc:	4b98      	ldr	r3, [pc, #608]	@ (8002930 <control_step+0x4e8>)
 80026ce:	466c      	mov	r4, sp
 80026d0:	f103 0210 	add.w	r2, r3, #16
 80026d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80026dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026de:	eeb0 0a67 	vmov.f32	s0, s15
 80026e2:	f7fe ff91 	bl	8001608 <update>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	4b88      	ldr	r3, [pc, #544]	@ (800290c <control_step+0x4c4>)
 80026ec:	edc3 7a02 	vstr	s15, [r3, #8]
			roll.u = update(rollPID,roll.error);
 80026f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002924 <control_step+0x4dc>)
 80026f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80026f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002934 <control_step+0x4ec>)
 80026f8:	466c      	mov	r4, sp
 80026fa:	f103 0210 	add.w	r2, r3, #16
 80026fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002702:	e884 0003 	stmia.w	r4, {r0, r1}
 8002706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002708:	eeb0 0a67 	vmov.f32	s0, s15
 800270c:	f7fe ff7c 	bl	8001608 <update>
 8002710:	eef0 7a40 	vmov.f32	s15, s0
 8002714:	4b83      	ldr	r3, [pc, #524]	@ (8002924 <control_step+0x4dc>)
 8002716:	edc3 7a02 	vstr	s15, [r3, #8]

			//--------- Changing motors behaviour ------------//

			// motor mixing algorithm
			int FR_percentage = fmin(100, fmax(0, height.u+yaw.u+pitch.u+roll.u));
 800271a:	4b80      	ldr	r3, [pc, #512]	@ (800291c <control_step+0x4d4>)
 800271c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002720:	4b7a      	ldr	r3, [pc, #488]	@ (800290c <control_step+0x4c4>)
 8002722:	edd3 7a02 	vldr	s15, [r3, #8]
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	4b7d      	ldr	r3, [pc, #500]	@ (8002920 <control_step+0x4d8>)
 800272c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002734:	4b7b      	ldr	r3, [pc, #492]	@ (8002924 <control_step+0x4dc>)
 8002736:	edd3 7a02 	vldr	s15, [r3, #8]
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	ee17 0a90 	vmov	r0, s15
 8002742:	f7fd ff11 	bl	8000568 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 80028f8 <control_step+0x4b0>
 800274e:	ec43 2b10 	vmov	d0, r2, r3
 8002752:	f00b fe1f 	bl	800e394 <fmax>
 8002756:	eeb0 7a40 	vmov.f32	s14, s0
 800275a:	eef0 7a60 	vmov.f32	s15, s1
 800275e:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8002900 <control_step+0x4b8>
 8002762:	eeb0 0a47 	vmov.f32	s0, s14
 8002766:	eef0 0a67 	vmov.f32	s1, s15
 800276a:	f00b fe3d 	bl	800e3e8 <fmin>
 800276e:	ec53 2b10 	vmov	r2, r3, d0
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f9ff 	bl	8000b78 <__aeabi_d2iz>
 800277a:	4603      	mov	r3, r0
 800277c:	60fb      	str	r3, [r7, #12]
			int FL_percentage = fmin(100, fmax(0, height.u-yaw.u+pitch.u-roll.u));
 800277e:	4b67      	ldr	r3, [pc, #412]	@ (800291c <control_step+0x4d4>)
 8002780:	ed93 7a02 	vldr	s14, [r3, #8]
 8002784:	4b61      	ldr	r3, [pc, #388]	@ (800290c <control_step+0x4c4>)
 8002786:	edd3 7a02 	vldr	s15, [r3, #8]
 800278a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800278e:	4b64      	ldr	r3, [pc, #400]	@ (8002920 <control_step+0x4d8>)
 8002790:	edd3 7a02 	vldr	s15, [r3, #8]
 8002794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002798:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <control_step+0x4dc>)
 800279a:	edd3 7a02 	vldr	s15, [r3, #8]
 800279e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a2:	ee17 0a90 	vmov	r0, s15
 80027a6:	f7fd fedf 	bl	8000568 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 80028f8 <control_step+0x4b0>
 80027b2:	ec43 2b10 	vmov	d0, r2, r3
 80027b6:	f00b fded 	bl	800e394 <fmax>
 80027ba:	eeb0 7a40 	vmov.f32	s14, s0
 80027be:	eef0 7a60 	vmov.f32	s15, s1
 80027c2:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002900 <control_step+0x4b8>
 80027c6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ca:	eef0 0a67 	vmov.f32	s1, s15
 80027ce:	f00b fe0b 	bl	800e3e8 <fmin>
 80027d2:	ec53 2b10 	vmov	r2, r3, d0
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7fe f9cd 	bl	8000b78 <__aeabi_d2iz>
 80027de:	4603      	mov	r3, r0
 80027e0:	60bb      	str	r3, [r7, #8]
			int BR_percentage = fmin(100, fmax(0, height.u-yaw.u-pitch.u+roll.u));
 80027e2:	4b4e      	ldr	r3, [pc, #312]	@ (800291c <control_step+0x4d4>)
 80027e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80027e8:	4b48      	ldr	r3, [pc, #288]	@ (800290c <control_step+0x4c4>)
 80027ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <control_step+0x4d8>)
 80027f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027fc:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <control_step+0x4dc>)
 80027fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	ee17 0a90 	vmov	r0, s15
 800280a:	f7fd fead 	bl	8000568 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 80028f8 <control_step+0x4b0>
 8002816:	ec43 2b10 	vmov	d0, r2, r3
 800281a:	f00b fdbb 	bl	800e394 <fmax>
 800281e:	eeb0 7a40 	vmov.f32	s14, s0
 8002822:	eef0 7a60 	vmov.f32	s15, s1
 8002826:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8002900 <control_step+0x4b8>
 800282a:	eeb0 0a47 	vmov.f32	s0, s14
 800282e:	eef0 0a67 	vmov.f32	s1, s15
 8002832:	f00b fdd9 	bl	800e3e8 <fmin>
 8002836:	ec53 2b10 	vmov	r2, r3, d0
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f99b 	bl	8000b78 <__aeabi_d2iz>
 8002842:	4603      	mov	r3, r0
 8002844:	607b      	str	r3, [r7, #4]
			int BL_percentage = fmin(100, fmax(0, height.u+yaw.u-pitch.u-roll.u));
 8002846:	4b35      	ldr	r3, [pc, #212]	@ (800291c <control_step+0x4d4>)
 8002848:	ed93 7a02 	vldr	s14, [r3, #8]
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <control_step+0x4c4>)
 800284e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <control_step+0x4d8>)
 8002858:	edd3 7a02 	vldr	s15, [r3, #8]
 800285c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <control_step+0x4dc>)
 8002862:	edd3 7a02 	vldr	s15, [r3, #8]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe7b 	bl	8000568 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 80028f8 <control_step+0x4b0>
 800287a:	ec43 2b10 	vmov	d0, r2, r3
 800287e:	f00b fd89 	bl	800e394 <fmax>
 8002882:	eeb0 7a40 	vmov.f32	s14, s0
 8002886:	eef0 7a60 	vmov.f32	s15, s1
 800288a:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8002900 <control_step+0x4b8>
 800288e:	eeb0 0a47 	vmov.f32	s0, s14
 8002892:	eef0 0a67 	vmov.f32	s1, s15
 8002896:	f00b fda7 	bl	800e3e8 <fmin>
 800289a:	ec53 2b10 	vmov	r2, r3, d0
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f969 	bl	8000b78 <__aeabi_d2iz>
 80028a6:	4603      	mov	r3, r0
 80028a8:	603b      	str	r3, [r7, #0]

			motor_SetPower(&MOTOR_FRONT_RIGHT, FR_percentage);
 80028aa:	68f9      	ldr	r1, [r7, #12]
 80028ac:	4822      	ldr	r0, [pc, #136]	@ (8002938 <control_step+0x4f0>)
 80028ae:	f7fe fbf3 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, FL_percentage);
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	4821      	ldr	r0, [pc, #132]	@ (800293c <control_step+0x4f4>)
 80028b6:	f7fe fbef 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, BR_percentage);
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4820      	ldr	r0, [pc, #128]	@ (8002940 <control_step+0x4f8>)
 80028be:	f7fe fbeb 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, BL_percentage);
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	481f      	ldr	r0, [pc, #124]	@ (8002944 <control_step+0x4fc>)
 80028c6:	f7fe fbe7 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
		}

}
 80028ca:	e00f      	b.n	80028ec <control_step+0x4a4>
			motor_SetPower(&MOTOR_FRONT_RIGHT, 0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	481a      	ldr	r0, [pc, #104]	@ (8002938 <control_step+0x4f0>)
 80028d0:	f7fe fbe2 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_FRONT_LEFT, 0);
 80028d4:	2100      	movs	r1, #0
 80028d6:	4819      	ldr	r0, [pc, #100]	@ (800293c <control_step+0x4f4>)
 80028d8:	f7fe fbde 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_RIGHT, 0);
 80028dc:	2100      	movs	r1, #0
 80028de:	4818      	ldr	r0, [pc, #96]	@ (8002940 <control_step+0x4f8>)
 80028e0:	f7fe fbda 	bl	8001098 <motor_SetPower>
			motor_SetPower(&MOTOR_BACK_LEFT, 0);
 80028e4:	2100      	movs	r1, #0
 80028e6:	4817      	ldr	r0, [pc, #92]	@ (8002944 <control_step+0x4fc>)
 80028e8:	f7fe fbd6 	bl	8001098 <motor_SetPower>
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	f3af 8000 	nop.w
	...
 8002904:	40590000 	.word	0x40590000
 8002908:	20000640 	.word	0x20000640
 800290c:	20000574 	.word	0x20000574
 8002910:	20000550 	.word	0x20000550
 8002914:	0800e4c0 	.word	0x0800e4c0
 8002918:	20000624 	.word	0x20000624
 800291c:	20000554 	.word	0x20000554
 8002920:	20000564 	.word	0x20000564
 8002924:	20000584 	.word	0x20000584
 8002928:	20000594 	.word	0x20000594
 800292c:	200005ac 	.word	0x200005ac
 8002930:	200005dc 	.word	0x200005dc
 8002934:	200005c4 	.word	0x200005c4
 8002938:	200005f4 	.word	0x200005f4
 800293c:	20000600 	.word	0x20000600
 8002940:	2000060c 	.word	0x2000060c
 8002944:	20000618 	.word	0x20000618

08002948 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	2180      	movs	r1, #128	@ 0x80
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <cs_high+0x14>)
 8002952:	f001 fa7d 	bl	8003e50 <HAL_GPIO_WritePin>
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	48000800 	.word	0x48000800

08002960 <cs_low>:

static void cs_low()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <cs_low+0x14>)
 800296a:	f001 fa71 	bl	8003e50 <HAL_GPIO_WritePin>
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	48000800 	.word	0x48000800

08002978 <ce_high>:

static void ce_high()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002982:	4802      	ldr	r0, [pc, #8]	@ (800298c <ce_high+0x14>)
 8002984:	f001 fa64 	bl	8003e50 <HAL_GPIO_WritePin>
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	48000800 	.word	0x48000800

08002990 <ce_low>:

static void ce_low()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800299a:	4802      	ldr	r0, [pc, #8]	@ (80029a4 <ce_low+0x14>)
 800299c:	f001 fa58 	bl	8003e50 <HAL_GPIO_WritePin>
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	48000800 	.word	0x48000800

080029a8 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80029b6:	f7ff ffd3 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80029ba:	f107 020e 	add.w	r2, r7, #14
 80029be:	f107 010f 	add.w	r1, r7, #15
 80029c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	4809      	ldr	r0, [pc, #36]	@ (80029f0 <read_register+0x48>)
 80029cc:	f003 fea3 	bl	8006716 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80029d0:	f107 010d 	add.w	r1, r7, #13
 80029d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029d8:	2201      	movs	r2, #1
 80029da:	4805      	ldr	r0, [pc, #20]	@ (80029f0 <read_register+0x48>)
 80029dc:	f003 fd63 	bl	80064a6 <HAL_SPI_Receive>
    cs_high();
 80029e0:	f7ff ffb2 	bl	8002948 <cs_high>

    return read_val;
 80029e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000288 	.word	0x20000288

080029f4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4603      	mov	r3, r0
 80029fc:	460a      	mov	r2, r1
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	737b      	strb	r3, [r7, #13]

    cs_low();
 8002a12:	f7ff ffa5 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002a16:	f107 020e 	add.w	r2, r7, #14
 8002a1a:	f107 010f 	add.w	r1, r7, #15
 8002a1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2301      	movs	r3, #1
 8002a26:	4809      	ldr	r0, [pc, #36]	@ (8002a4c <write_register+0x58>)
 8002a28:	f003 fe75 	bl	8006716 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8002a2c:	f107 010d 	add.w	r1, r7, #13
 8002a30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a34:	2201      	movs	r2, #1
 8002a36:	4805      	ldr	r0, [pc, #20]	@ (8002a4c <write_register+0x58>)
 8002a38:	f003 fbbf 	bl	80061ba <HAL_SPI_Transmit>
    cs_high();
 8002a3c:	f7ff ff84 	bl	8002948 <cs_high>

    return write_val;
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000288 	.word	0x20000288

08002a50 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	80fb      	strh	r3, [r7, #6]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8002a60:	f000 f838 	bl	8002ad4 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8002a64:	f000 f88a 	bl	8002b7c <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8002a68:	f000 f92e 	bl	8002cc8 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8002a6c:	2010      	movs	r0, #16
 8002a6e:	f000 f909 	bl	8002c84 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f9b3 	bl	8002de0 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8002a7a:	797b      	ldrb	r3, [r7, #5]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f9df 	bl	8002e40 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f000 f9bf 	bl	8002e06 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f000 f932 	bl	8002cf2 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f000 f952 	bl	8002d38 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f000 f95f 	bl	8002d58 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8002a9a:	20fa      	movs	r0, #250	@ 0xfa
 8002a9c:	f000 f978 	bl	8002d90 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8002aa0:	f7ff ff6a 	bl	8002978 <ce_high>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f877 	bl	8002ba8 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8002aba:	f000 f8f1 	bl	8002ca0 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ac2:	4803      	ldr	r0, [pc, #12]	@ (8002ad0 <nrf24l01p_rx_receive+0x24>)
 8002ac4:	f001 f9dc 	bl	8003e80 <HAL_GPIO_TogglePin>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	48000800 	.word	0x48000800

08002ad4 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8002ad8:	f7ff ff36 	bl	8002948 <cs_high>
    ce_low();
 8002adc:	f7ff ff58 	bl	8002990 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7ff ff86 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8002ae8:	213f      	movs	r1, #63	@ 0x3f
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff ff82 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8002af0:	2103      	movs	r1, #3
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7ff ff7e 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8002af8:	2103      	movs	r1, #3
 8002afa:	2003      	movs	r0, #3
 8002afc:	f7ff ff7a 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8002b00:	2103      	movs	r1, #3
 8002b02:	2004      	movs	r0, #4
 8002b04:	f7ff ff76 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8002b08:	2102      	movs	r1, #2
 8002b0a:	2005      	movs	r0, #5
 8002b0c:	f7ff ff72 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8002b10:	2107      	movs	r1, #7
 8002b12:	2006      	movs	r0, #6
 8002b14:	f7ff ff6e 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8002b18:	217e      	movs	r1, #126	@ 0x7e
 8002b1a:	2007      	movs	r0, #7
 8002b1c:	f7ff ff6a 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002b20:	2100      	movs	r1, #0
 8002b22:	2011      	movs	r0, #17
 8002b24:	f7ff ff66 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2011      	movs	r0, #17
 8002b2c:	f7ff ff62 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8002b30:	2100      	movs	r1, #0
 8002b32:	2012      	movs	r0, #18
 8002b34:	f7ff ff5e 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2013      	movs	r0, #19
 8002b3c:	f7ff ff5a 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8002b40:	2100      	movs	r1, #0
 8002b42:	2014      	movs	r0, #20
 8002b44:	f7ff ff56 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2015      	movs	r0, #21
 8002b4c:	f7ff ff52 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8002b50:	2100      	movs	r1, #0
 8002b52:	2016      	movs	r0, #22
 8002b54:	f7ff ff4e 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8002b58:	2111      	movs	r1, #17
 8002b5a:	2017      	movs	r0, #23
 8002b5c:	f7ff ff4a 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8002b60:	2100      	movs	r1, #0
 8002b62:	201c      	movs	r0, #28
 8002b64:	f7ff ff46 	bl	80029f4 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	201d      	movs	r0, #29
 8002b6c:	f7ff ff42 	bl	80029f4 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8002b70:	f000 f83e 	bl	8002bf0 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8002b74:	f000 f854 	bl	8002c20 <nrf24l01p_flush_tx_fifo>
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff ff10 	bl	80029a8 <read_register>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4619      	mov	r1, r3
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7ff ff2b 	bl	80029f4 <write_register>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8002bb0:	2361      	movs	r3, #97	@ 0x61
 8002bb2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8002bb4:	f7ff fed4 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002bb8:	f107 020e 	add.w	r2, r7, #14
 8002bbc:	f107 010f 	add.w	r1, r7, #15
 8002bc0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4808      	ldr	r0, [pc, #32]	@ (8002bec <nrf24l01p_read_rx_fifo+0x44>)
 8002bca:	f003 fda4 	bl	8006716 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8002bce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <nrf24l01p_read_rx_fifo+0x44>)
 8002bd8:	f003 fc65 	bl	80064a6 <HAL_SPI_Receive>
    cs_high();
 8002bdc:	f7ff feb4 	bl	8002948 <cs_high>

    return status;
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000288 	.word	0x20000288

08002bf0 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8002bf6:	23e2      	movs	r3, #226	@ 0xe2
 8002bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002bfa:	f7ff feb1 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	1df9      	adds	r1, r7, #7
 8002c02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	4804      	ldr	r0, [pc, #16]	@ (8002c1c <nrf24l01p_flush_rx_fifo+0x2c>)
 8002c0c:	f003 fd83 	bl	8006716 <HAL_SPI_TransmitReceive>
    cs_high();
 8002c10:	f7ff fe9a 	bl	8002948 <cs_high>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000288 	.word	0x20000288

08002c20 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8002c26:	23e1      	movs	r3, #225	@ 0xe1
 8002c28:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002c2a:	f7ff fe99 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002c2e:	1dba      	adds	r2, r7, #6
 8002c30:	1df9      	adds	r1, r7, #7
 8002c32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4804      	ldr	r0, [pc, #16]	@ (8002c4c <nrf24l01p_flush_tx_fifo+0x2c>)
 8002c3c:	f003 fd6b 	bl	8006716 <HAL_SPI_TransmitReceive>
    cs_high();
 8002c40:	f7ff fe82 	bl	8002948 <cs_high>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000288 	.word	0x20000288

08002c50 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8002c56:	23ff      	movs	r3, #255	@ 0xff
 8002c58:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002c5a:	f7ff fe81 	bl	8002960 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002c5e:	1dba      	adds	r2, r7, #6
 8002c60:	1df9      	adds	r1, r7, #7
 8002c62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2301      	movs	r3, #1
 8002c6a:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <nrf24l01p_get_status+0x30>)
 8002c6c:	f003 fd53 	bl	8006716 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8002c70:	f7ff fe6a 	bl	8002948 <cs_high>

    return status;
 8002c74:	79bb      	ldrb	r3, [r7, #6]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000288 	.word	0x20000288

08002c84 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4619      	mov	r1, r3
 8002c92:	2011      	movs	r0, #17
 8002c94:	f7ff feae 	bl	80029f4 <write_register>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8002ca6:	f7ff ffd3 	bl	8002c50 <nrf24l01p_get_status>
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cb4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	2007      	movs	r0, #7
 8002cbc:	f7ff fe9a 	bl	80029f4 <write_register>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7ff fe6a 	bl	80029a8 <read_register>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff fe85 	bl	80029f4 <write_register>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff fe53 	bl	80029a8 <read_register>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d002      	beq.n	8002d12 <nrf24l01p_set_crc_length+0x20>
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d005      	beq.n	8002d1c <nrf24l01p_set_crc_length+0x2a>
 8002d10:	e009      	b.n	8002d26 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	73fb      	strb	r3, [r7, #15]
            break;
 8002d1a:	e004      	b.n	8002d26 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	73fb      	strb	r3, [r7, #15]
            break;
 8002d24:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7ff fe62 	bl	80029f4 <write_register>
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	3b02      	subs	r3, #2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	f7ff fe52 	bl	80029f4 <write_register>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002d62:	2004      	movs	r0, #4
 8002d64:	f7ff fe20 	bl	80029a8 <read_register>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	f063 030f 	orn	r3, r3, #15
 8002d72:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	2004      	movs	r0, #4
 8002d82:	f7ff fe37 	bl	80029f4 <write_register>
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002d9a:	2004      	movs	r0, #4
 8002d9c:	f7ff fe04 	bl	80029a8 <read_register>
 8002da0:	4603      	mov	r3, r0
 8002da2:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	f043 030f 	orr.w	r3, r3, #15
 8002daa:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4a0b      	ldr	r2, [pc, #44]	@ (8002ddc <nrf24l01p_auto_retransmit_delay+0x4c>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	2004      	movs	r0, #4
 8002dce:	f7ff fe11 	bl	80029f4 <write_register>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	10624dd3 	.word	0x10624dd3

08002de0 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8002df0:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	2005      	movs	r0, #5
 8002dfa:	f7ff fdfb 	bl	80029f4 <write_register>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8002e10:	2006      	movs	r0, #6
 8002e12:	f7ff fdc9 	bl	80029a8 <read_register>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f023 0306 	bic.w	r3, r3, #6
 8002e1c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	b25a      	sxtb	r2, r3
 8002e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	4619      	mov	r1, r3
 8002e32:	2006      	movs	r0, #6
 8002e34:	f7ff fdde 	bl	80029f4 <write_register>
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8002e4a:	2006      	movs	r0, #6
 8002e4c:	f7ff fdac 	bl	80029a8 <read_register>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002e56:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d00a      	beq.n	8002e74 <nrf24l01p_set_rf_air_data_rate+0x34>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	dc0e      	bgt.n	8002e80 <nrf24l01p_set_rf_air_data_rate+0x40>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d10a      	bne.n	8002e80 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	73fb      	strb	r3, [r7, #15]
            break;
 8002e72:	e005      	b.n	8002e80 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	73fb      	strb	r3, [r7, #15]
            break;
 8002e7c:	e000      	b.n	8002e80 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8002e7e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	4619      	mov	r1, r3
 8002e84:	2006      	movs	r0, #6
 8002e86:	f7ff fdb5 	bl	80029f4 <write_register>
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_MspInit+0x44>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b0ac      	sub	sp, #176	@ 0xb0
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2288      	movs	r2, #136	@ 0x88
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 fc72 	bl	800b7e6 <memset>
  if(hi2c->Instance==I2C2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <HAL_I2C_MspInit+0xb0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d13b      	bne.n	8002f84 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f10:	2300      	movs	r3, #0
 8002f12:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fbef 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f24:	f7ff f860 	bl	8001fe8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f48:	2312      	movs	r3, #18
 8002f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f64:	4619      	mov	r1, r3
 8002f66:	480b      	ldr	r0, [pc, #44]	@ (8002f94 <HAL_I2C_MspInit+0xb8>)
 8002f68:	f000 fdc8 	bl	8003afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f6c:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_I2C_MspInit+0xb4>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002f84:	bf00      	nop
 8002f86:	37b0      	adds	r7, #176	@ 0xb0
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40005800 	.word	0x40005800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	48000400 	.word	0x48000400

08002f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	@ 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <HAL_SPI_MspInit+0xc4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d14c      	bne.n	8003054 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fba:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fde:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <HAL_SPI_MspInit+0xc8>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003002:	230c      	movs	r3, #12
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003012:	2305      	movs	r3, #5
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	4811      	ldr	r0, [pc, #68]	@ (8003064 <HAL_SPI_MspInit+0xcc>)
 800301e:	f000 fd6d 	bl	8003afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003034:	2305      	movs	r3, #5
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4619      	mov	r1, r3
 800303e:	480a      	ldr	r0, [pc, #40]	@ (8003068 <HAL_SPI_MspInit+0xd0>)
 8003040:	f000 fd5c 	bl	8003afc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	2024      	movs	r0, #36	@ 0x24
 800304a:	f000 fce0 	bl	8003a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800304e:	2024      	movs	r0, #36	@ 0x24
 8003050:	f000 fcf9 	bl	8003a46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003054:	bf00      	nop
 8003056:	3728      	adds	r7, #40	@ 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40003800 	.word	0x40003800
 8003060:	40021000 	.word	0x40021000
 8003064:	48000800 	.word	0x48000800
 8003068:	48000400 	.word	0x48000400

0800306c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08e      	sub	sp, #56	@ 0x38
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a50      	ldr	r2, [pc, #320]	@ (80031cc <HAL_TIM_Base_MspInit+0x160>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308e:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003092:	4a4f      	ldr	r2, [pc, #316]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003098:	6613      	str	r3, [r2, #96]	@ 0x60
 800309a:	4b4d      	ldr	r3, [pc, #308]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80030a6:	e08c      	b.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b0:	d114      	bne.n	80030dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030b2:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	4a46      	ldr	r2, [pc, #280]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030be:	4b44      	ldr	r3, [pc, #272]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	201c      	movs	r0, #28
 80030d0:	f000 fc9d 	bl	8003a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030d4:	201c      	movs	r0, #28
 80030d6:	f000 fcb6 	bl	8003a46 <HAL_NVIC_EnableIRQ>
}
 80030da:	e072      	b.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3c      	ldr	r2, [pc, #240]	@ (80031d4 <HAL_TIM_Base_MspInit+0x168>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d114      	bne.n	8003110 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e6:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	4a39      	ldr	r2, [pc, #228]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2100      	movs	r1, #0
 8003102:	201d      	movs	r0, #29
 8003104:	f000 fc83 	bl	8003a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003108:	201d      	movs	r0, #29
 800310a:	f000 fc9c 	bl	8003a46 <HAL_NVIC_EnableIRQ>
}
 800310e:	e058      	b.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <HAL_TIM_Base_MspInit+0x16c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d130      	bne.n	800317c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800311a:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	4a2c      	ldr	r2, [pc, #176]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6593      	str	r3, [r2, #88]	@ 0x58
 8003126:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	4a26      	ldr	r2, [pc, #152]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800314a:	2340      	movs	r3, #64	@ 0x40
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800315a:	2302      	movs	r3, #2
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003162:	4619      	mov	r1, r3
 8003164:	481d      	ldr	r0, [pc, #116]	@ (80031dc <HAL_TIM_Base_MspInit+0x170>)
 8003166:	f000 fcc9 	bl	8003afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201e      	movs	r0, #30
 8003170:	f000 fc4d 	bl	8003a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003174:	201e      	movs	r0, #30
 8003176:	f000 fc66 	bl	8003a46 <HAL_NVIC_EnableIRQ>
}
 800317a:	e022      	b.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a17      	ldr	r2, [pc, #92]	@ (80031e0 <HAL_TIM_Base_MspInit+0x174>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10c      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	e010      	b.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	@ (80031e4 <HAL_TIM_Base_MspInit+0x178>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10b      	bne.n	80031c2 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80031b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_TIM_Base_MspInit+0x164>)
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
}
 80031c2:	bf00      	nop
 80031c4:	3738      	adds	r7, #56	@ 0x38
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	48000400 	.word	0x48000400
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	40013400 	.word	0x40013400

080031e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_TIM_MspPostInit+0xac>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d11e      	bne.n	8003248 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320e:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003216:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003222:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003242:	f000 fc5b 	bl	8003afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003246:	e020      	b.n	800328a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a13      	ldr	r2, [pc, #76]	@ (800329c <HAL_TIM_MspPostInit+0xb4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d11b      	bne.n	800328a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	4a10      	ldr	r2, [pc, #64]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800326a:	2340      	movs	r3, #64	@ 0x40
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800327a:	2303      	movs	r3, #3
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4806      	ldr	r0, [pc, #24]	@ (80032a0 <HAL_TIM_MspPostInit+0xb8>)
 8003286:	f000 fc39 	bl	8003afc <HAL_GPIO_Init>
}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	@ 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40013400 	.word	0x40013400
 80032a0:	48000800 	.word	0x48000800

080032a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b0ac      	sub	sp, #176	@ 0xb0
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2288      	movs	r2, #136	@ 0x88
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 fa8e 	bl	800b7e6 <memset>
  if(huart->Instance==USART2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	@ (8003354 <HAL_UART_MspInit+0xb0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d13b      	bne.n	800334c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032d8:	2300      	movs	r3, #0
 80032da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 fa0b 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032ec:	f7fe fe7c 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 800330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330c:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_UART_MspInit+0xb4>)
 8003316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003320:	230c      	movs	r3, #12
 8003322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003338:	2307      	movs	r3, #7
 800333a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003342:	4619      	mov	r1, r3
 8003344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003348:	f000 fbd8 	bl	8003afc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800334c:	bf00      	nop
 800334e:	37b0      	adds	r7, #176	@ 0xb0
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40004400 	.word	0x40004400
 8003358:	40021000 	.word	0x40021000

0800335c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <NMI_Handler+0x4>

08003364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <MemManage_Handler+0x4>

08003374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <BusFault_Handler+0x4>

0800337c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <UsageFault_Handler+0x4>

08003384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b2:	f000 fa0d 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}

080033ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_IRQ_Pin);
 80033be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80033c2:	f000 fd77 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80033c6:	2120      	movs	r1, #32
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033cc:	f000 fd58 	bl	8003e80 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033d8:	480c      	ldr	r0, [pc, #48]	@ (800340c <TIM2_IRQHandler+0x38>)
 80033da:	f004 fc79 	bl	8007cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  IMU_ReadAccelGyro_Converted_All((float)IMU_PERIOD_MS/(float)1000);
 80033de:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <TIM2_IRQHandler+0x3c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003414 <TIM2_IRQHandler+0x40>
 80033ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033f2:	ee16 0a90 	vmov	r0, s13
 80033f6:	f7fd f8b7 	bl	8000568 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	ec43 2b10 	vmov	d0, r2, r3
 8003402:	f7fe f839 	bl	8001478 <IMU_ReadAccelGyro_Converted_All>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000338 	.word	0x20000338
 8003410:	20000000 	.word	0x20000000
 8003414:	447a0000 	.word	0x447a0000

08003418 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800341c:	4803      	ldr	r0, [pc, #12]	@ (800342c <TIM3_IRQHandler+0x14>)
 800341e:	f004 fc57 	bl	8007cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  control_step();
 8003422:	f7ff f811 	bl	8002448 <control_step>
  /* USER CODE END TIM3_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000384 	.word	0x20000384

08003430 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (rising == 0){
 8003434:	4b2a      	ldr	r3, [pc, #168]	@ (80034e0 <TIM4_IRQHandler+0xb0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <TIM4_IRQHandler+0x20>
			rising_time = htim5.Instance->CNT;
 800343c:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <TIM4_IRQHandler+0xb4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	461a      	mov	r2, r3
 8003444:	4b28      	ldr	r3, [pc, #160]	@ (80034e8 <TIM4_IRQHandler+0xb8>)
 8003446:	601a      	str	r2, [r3, #0]
			rising = 1;
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <TIM4_IRQHandler+0xb0>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e03b      	b.n	80034c8 <TIM4_IRQHandler+0x98>
		  }
	else{
		falling_time =  htim5.Instance->CNT;
 8003450:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <TIM4_IRQHandler+0xb4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	461a      	mov	r2, r3
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <TIM4_IRQHandler+0xbc>)
 800345a:	601a      	str	r2, [r3, #0]
		rising = 0;
 800345c:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <TIM4_IRQHandler+0xb0>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
		pulse_duration = falling_time - rising_time;
 8003462:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <TIM4_IRQHandler+0xbc>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <TIM4_IRQHandler+0xb8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <TIM4_IRQHandler+0xc0>)
 800346e:	6013      	str	r3, [r2, #0]


		if (pulse_duration >= 30000){
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <TIM4_IRQHandler+0xc0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f247 522f 	movw	r2, #29999	@ 0x752f
 8003478:	4293      	cmp	r3, r2
 800347a:	dd07      	ble.n	800348c <TIM4_IRQHandler+0x5c>
			rising_time = falling_time;
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <TIM4_IRQHandler+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	@ (80034e8 <TIM4_IRQHandler+0xb8>)
 8003482:	6013      	str	r3, [r2, #0]
			rising = 1;
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <TIM4_IRQHandler+0xb0>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e01d      	b.n	80034c8 <TIM4_IRQHandler+0x98>
		}
		else{
			ultrasound_measure_cm = (float)pulse_duration/58.31;
 800348c:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <TIM4_IRQHandler+0xc0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003498:	ee17 0a90 	vmov	r0, s15
 800349c:	f7fd f864 	bl	8000568 <__aeabi_f2d>
 80034a0:	a30d      	add	r3, pc, #52	@ (adr r3, 80034d8 <TIM4_IRQHandler+0xa8>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd f9e1 	bl	800086c <__aeabi_ddiv>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd fba9 	bl	8000c08 <__aeabi_d2f>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4a0e      	ldr	r2, [pc, #56]	@ (80034f4 <TIM4_IRQHandler+0xc4>)
 80034ba:	6013      	str	r3, [r2, #0]
			rising = 0;
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <TIM4_IRQHandler+0xb0>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
			ultrasound_measure_flag = 1;
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <TIM4_IRQHandler+0xc8>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
		}
	 }


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034c8:	480c      	ldr	r0, [pc, #48]	@ (80034fc <TIM4_IRQHandler+0xcc>)
 80034ca:	f004 fc01 	bl	8007cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	147ae148 	.word	0x147ae148
 80034dc:	404d27ae 	.word	0x404d27ae
 80034e0:	200006c8 	.word	0x200006c8
 80034e4:	2000041c 	.word	0x2000041c
 80034e8:	200006cc 	.word	0x200006cc
 80034ec:	200006d0 	.word	0x200006d0
 80034f0:	200006d4 	.word	0x200006d4
 80034f4:	2000062c 	.word	0x2000062c
 80034f8:	200006c4 	.word	0x200006c4
 80034fc:	200003d0 	.word	0x200003d0

08003500 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003504:	4802      	ldr	r0, [pc, #8]	@ (8003510 <SPI2_IRQHandler+0x10>)
 8003506:	f003 fb25 	bl	8006b54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000288 	.word	0x20000288

08003514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return 1;
 8003518:	2301      	movs	r3, #1
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_kill>:

int _kill(int pid, int sig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800352e:	f008 f9bf 	bl	800b8b0 <__errno>
 8003532:	4603      	mov	r3, r0
 8003534:	2216      	movs	r2, #22
 8003536:	601a      	str	r2, [r3, #0]
  return -1;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_exit>:

void _exit (int status)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffe7 	bl	8003524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003556:	bf00      	nop
 8003558:	e7fd      	b.n	8003556 <_exit+0x12>

0800355a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e00a      	b.n	8003582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800356c:	f3af 8000 	nop.w
 8003570:	4601      	mov	r1, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	60ba      	str	r2, [r7, #8]
 8003578:	b2ca      	uxtb	r2, r1
 800357a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	dbf0      	blt.n	800356c <_read+0x12>
  }

  return len;
 800358a:	687b      	ldr	r3, [r7, #4]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e009      	b.n	80035ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60ba      	str	r2, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3301      	adds	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	dbf1      	blt.n	80035a6 <_write+0x12>
  }
  return len;
 80035c2:	687b      	ldr	r3, [r7, #4]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_close>:

int _close(int file)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f4:	605a      	str	r2, [r3, #4]
  return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_isatty>:

int _isatty(int file)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800360c:	2301      	movs	r3, #1
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <_sbrk+0x5c>)
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <_sbrk+0x60>)
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003650:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <_sbrk+0x64>)
 8003652:	4a12      	ldr	r2, [pc, #72]	@ (800369c <_sbrk+0x68>)
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <_sbrk+0x64>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d207      	bcs.n	8003674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003664:	f008 f924 	bl	800b8b0 <__errno>
 8003668:	4603      	mov	r3, r0
 800366a:	220c      	movs	r2, #12
 800366c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e009      	b.n	8003688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <_sbrk+0x64>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	4a05      	ldr	r2, [pc, #20]	@ (8003698 <_sbrk+0x64>)
 8003684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003686:	68fb      	ldr	r3, [r7, #12]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20018000 	.word	0x20018000
 8003694:	00000400 	.word	0x00000400
 8003698:	200006d8 	.word	0x200006d8
 800369c:	20000830 	.word	0x20000830

080036a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <SystemInit+0x20>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	4a05      	ldr	r2, [pc, #20]	@ (80036c0 <SystemInit+0x20>)
 80036ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036c8:	f7ff ffea 	bl	80036a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036cc:	480c      	ldr	r0, [pc, #48]	@ (8003700 <LoopForever+0x6>)
  ldr r1, =_edata
 80036ce:	490d      	ldr	r1, [pc, #52]	@ (8003704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003708 <LoopForever+0xe>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d4:	e002      	b.n	80036dc <LoopCopyDataInit>

080036d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036da:	3304      	adds	r3, #4

080036dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e0:	d3f9      	bcc.n	80036d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e2:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <LoopForever+0x12>)
  ldr r4, =_ebss
 80036e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003710 <LoopForever+0x16>)
  movs r3, #0
 80036e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e8:	e001      	b.n	80036ee <LoopFillZerobss>

080036ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036ec:	3204      	adds	r2, #4

080036ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f0:	d3fb      	bcc.n	80036ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036f2:	f008 f8e3 	bl	800b8bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036f6:	f7fd fff9 	bl	80016ec <main>

080036fa <LoopForever>:

LoopForever:
    b LoopForever
 80036fa:	e7fe      	b.n	80036fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003704:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003708:	0800e950 	.word	0x0800e950
  ldr r2, =_sbss
 800370c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003710:	2000082c 	.word	0x2000082c

08003714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC1_2_IRQHandler>
	...

08003718 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003722:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <HAL_Init+0x3c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <HAL_Init+0x3c>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800372e:	2003      	movs	r0, #3
 8003730:	f000 f962 	bl	80039f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003734:	2000      	movs	r0, #0
 8003736:	f000 f80f 	bl	8003758 <HAL_InitTick>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	e001      	b.n	800374a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003746:	f7ff fba5 	bl	8002e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800374a:	79fb      	ldrb	r3, [r7, #7]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40022000 	.word	0x40022000

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003764:	4b17      	ldr	r3, [pc, #92]	@ (80037c4 <HAL_InitTick+0x6c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <HAL_InitTick+0x70>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <HAL_InitTick+0x6c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377a:	fbb3 f3f1 	udiv	r3, r3, r1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f96d 	bl	8003a62 <HAL_SYSTICK_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d809      	bhi.n	80037a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003794:	2200      	movs	r2, #0
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	f000 f937 	bl	8003a0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_InitTick+0x74>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e007      	b.n	80037b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e004      	b.n	80037b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e001      	b.n	80037b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	2000000c 	.word	0x2000000c
 80037c8:	20000004 	.word	0x20000004
 80037cc:	20000008 	.word	0x20000008

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	200006dc 	.word	0x200006dc

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200006dc 	.word	0x200006dc

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388a:	4a04      	ldr	r2, [pc, #16]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	60d3      	str	r3, [r2, #12]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4907      	ldr	r1, [pc, #28]	@ (80038f4 <__NVIC_EnableIRQ+0x38>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	@ (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	@ (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
         );
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	@ 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039c4:	d301      	bcc.n	80039ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00f      	b.n	80039ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ca:	4a0a      	ldr	r2, [pc, #40]	@ (80039f4 <SysTick_Config+0x40>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039d2:	210f      	movs	r1, #15
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f7ff ff8e 	bl	80038f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <SysTick_Config+0x40>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <SysTick_Config+0x40>)
 80039e4:	2207      	movs	r2, #7
 80039e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	e000e010 	.word	0xe000e010

080039f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff29 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a20:	f7ff ff3e 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 8003a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	6978      	ldr	r0, [r7, #20]
 8003a2c:	f7ff ff8e 	bl	800394c <NVIC_EncodePriority>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff5d 	bl	80038f8 <__NVIC_SetPriority>
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff31 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ffa2 	bl	80039b4 <SysTick_Config>
 8003a70:	4603      	mov	r3, r0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d005      	beq.n	8003a9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e029      	b.n	8003af2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 020e 	bic.w	r2, r2, #14
 8003aac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f003 021c 	and.w	r2, r3, #28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
    }
  }
  return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0a:	e17f      	b.n	8003e0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8171 	beq.w	8003e06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d005      	beq.n	8003b3c <HAL_GPIO_Init+0x40>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d130      	bne.n	8003b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b72:	2201      	movs	r2, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0201 	and.w	r2, r3, #1
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d118      	bne.n	8003bdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	08db      	lsrs	r3, r3, #3
 8003bc6:	f003 0201 	and.w	r2, r3, #1
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d017      	beq.n	8003c18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d123      	bne.n	8003c6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	08da      	lsrs	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3208      	adds	r2, #8
 8003c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	08da      	lsrs	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3208      	adds	r2, #8
 8003c66:	6939      	ldr	r1, [r7, #16]
 8003c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0203 	and.w	r2, r3, #3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ac 	beq.w	8003e06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cae:	4b5f      	ldr	r3, [pc, #380]	@ (8003e2c <HAL_GPIO_Init+0x330>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e2c <HAL_GPIO_Init+0x330>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cba:	4b5c      	ldr	r3, [pc, #368]	@ (8003e2c <HAL_GPIO_Init+0x330>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e30 <HAL_GPIO_Init+0x334>)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cf0:	d025      	beq.n	8003d3e <HAL_GPIO_Init+0x242>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e34 <HAL_GPIO_Init+0x338>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <HAL_GPIO_Init+0x23e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e38 <HAL_GPIO_Init+0x33c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x23a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4d      	ldr	r2, [pc, #308]	@ (8003e3c <HAL_GPIO_Init+0x340>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x236>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e40 <HAL_GPIO_Init+0x344>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x232>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	@ (8003e44 <HAL_GPIO_Init+0x348>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x22e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e48 <HAL_GPIO_Init+0x34c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x22a>
 8003d22:	2306      	movs	r3, #6
 8003d24:	e00c      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e00a      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	e008      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e004      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e002      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_GPIO_Init+0x244>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	f002 0203 	and.w	r2, r2, #3
 8003d46:	0092      	lsls	r2, r2, #2
 8003d48:	4093      	lsls	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d50:	4937      	ldr	r1, [pc, #220]	@ (8003e30 <HAL_GPIO_Init+0x334>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d82:	4a32      	ldr	r2, [pc, #200]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d88:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dac:	4a27      	ldr	r2, [pc, #156]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003db2:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e00:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <HAL_GPIO_Init+0x350>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f47f ae78 	bne.w	8003b0c <HAL_GPIO_Init+0x10>
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40010000 	.word	0x40010000
 8003e34:	48000400 	.word	0x48000400
 8003e38:	48000800 	.word	0x48000800
 8003e3c:	48000c00 	.word	0x48000c00
 8003e40:	48001000 	.word	0x48001000
 8003e44:	48001400 	.word	0x48001400
 8003e48:	48001800 	.word	0x48001800
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e6c:	e002      	b.n	8003e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4013      	ands	r3, r2
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	43d9      	mvns	r1, r3
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	400b      	ands	r3, r1
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eca:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fbec 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e08d      	b.n	8004012 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe ffe6 	bl	8002edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	@ 0x24
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e006      	b.n	8003f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d108      	bne.n	8003f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	e007      	b.n	8003f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	460b      	mov	r3, r1
 8004030:	813b      	strh	r3, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	f040 80fd 	bne.w	800423e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_I2C_Mem_Read+0x34>
 800404a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004056:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0f1      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_I2C_Mem_Read+0x4e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0ea      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004072:	f7ff fbc1 	bl	80037f8 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2319      	movs	r3, #25
 800407e:	2201      	movs	r2, #1
 8004080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fa47 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0d5      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	@ 0x22
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2240      	movs	r2, #64	@ 0x40
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040bc:	88f8      	ldrh	r0, [r7, #6]
 80040be:	893a      	ldrh	r2, [r7, #8]
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4603      	mov	r3, r0
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f9ab 	bl	8004428 <I2C_RequestMemoryRead>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0ad      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2bff      	cmp	r3, #255	@ 0xff
 80040ec:	d90e      	bls.n	800410c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	4b52      	ldr	r3, [pc, #328]	@ (8004248 <HAL_I2C_Mem_Read+0x22c>)
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fbcb 	bl	80048a0 <I2C_TransferConfig>
 800410a:	e00f      	b.n	800412c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	b2da      	uxtb	r2, r3
 800411c:	8979      	ldrh	r1, [r7, #10]
 800411e:	4b4a      	ldr	r3, [pc, #296]	@ (8004248 <HAL_I2C_Mem_Read+0x22c>)
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fbba 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	2200      	movs	r2, #0
 8004134:	2104      	movs	r1, #4
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f9ee 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07c      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d034      	beq.n	80041ec <HAL_I2C_Mem_Read+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d130      	bne.n	80041ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	@ 0x80
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9bf 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e04d      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2bff      	cmp	r3, #255	@ 0xff
 80041ac:	d90e      	bls.n	80041cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8979      	ldrh	r1, [r7, #10]
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb6b 	bl	80048a0 <I2C_TransferConfig>
 80041ca:	e00f      	b.n	80041ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb5a 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d19a      	bne.n	800412c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fa2c 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e01a      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <HAL_I2C_Mem_Read+0x230>)
 800421e:	400b      	ands	r3, r1
 8004220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	80002400 	.word	0x80002400
 800424c:	fe00e800 	.word	0xfe00e800

08004250 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	460b      	mov	r3, r1
 800425e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	f040 80d6 	bne.w	800441e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004280:	d101      	bne.n	8004286 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	e0cc      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_I2C_IsDeviceReady+0x44>
 8004290:	2302      	movs	r3, #2
 8004292:	e0c5      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_I2C_IsDeviceReady+0x72>
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042c0:	e006      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x80>
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80042d6:	f7ff fa8f 	bl	80037f8 <HAL_GetTick>
 80042da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004308:	e034      	b.n	8004374 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d01a      	beq.n	8004348 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7ff fa71 	bl	80037f8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <HAL_I2C_IsDeviceReady+0xd8>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e06b      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004374:	7ffb      	ldrb	r3, [r7, #31]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_I2C_IsDeviceReady+0x130>
 800437a:	7fbb      	ldrb	r3, [r7, #30]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0c4      	beq.n	800430a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b10      	cmp	r3, #16
 800438c:	d01a      	beq.n	80043c4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	2120      	movs	r1, #32
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f8bd 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e03b      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2220      	movs	r2, #32
 80043ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e02d      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2120      	movs	r1, #32
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f8a2 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e020      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2220      	movs	r2, #32
 80043ec:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3301      	adds	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	f63f af56 	bhi.w	80042aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	8979      	ldrh	r1, [r7, #10]
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <I2C_RequestMemoryRead+0xa4>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa26 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8b6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02c      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
 8004478:	e015      	b.n	80044a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b29b      	uxth	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f89c 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e012      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	@ 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f831 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	80002000 	.word	0x80002000

080044d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d103      	bne.n	80044ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d007      	beq.n	800450c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	619a      	str	r2, [r3, #24]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e03b      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d6 	bl	80046e0 <I2C_IsErrorOccurred>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d02d      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7ff f957 	bl	80037f8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d122      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d113      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00f      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0b4      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d6:	e033      	b.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f87f 	bl	80046e0 <I2C_IsErrorOccurred>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e031      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d025      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7ff f900 	bl	80037f8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11a      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d013      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d1c4      	bne.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	e02f      	b.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f838 	bl	80046e0 <I2C_IsErrorOccurred>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e02d      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7ff f8bd 	bl	80037f8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d013      	beq.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d1c8      	bne.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d068      	beq.n	80047de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004714:	e049      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d045      	beq.n	80047aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7ff f86b 	bl	80037f8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_IsErrorOccurred+0x54>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13a      	bne.n	80047aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d121      	bne.n	800479c <I2C_IsErrorOccurred+0xbc>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475e:	d01d      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d01a      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004776:	f7ff f83f 	bl	80037f8 <HAL_GetTick>
 800477a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e00e      	b.n	800479c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800477e:	f7ff f83b 	bl	80037f8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b19      	cmp	r3, #25
 800478a:	d907      	bls.n	800479c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800479a:	e006      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d1e9      	bne.n	800477e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d003      	beq.n	80047c0 <I2C_IsErrorOccurred+0xe0>
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0aa      	beq.n	8004716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fe3b 	bl	80044d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <I2C_IsErrorOccurred+0x1bc>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800488e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	4613      	mov	r3, r2
 80048b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b8:	7a7b      	ldrb	r3, [r7, #9]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	0d5b      	lsrs	r3, r3, #21
 80048da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048de:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <I2C_TransferConfig+0x60>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	43db      	mvns	r3, r3
 80048e4:	ea02 0103 	and.w	r1, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	03ff63ff 	.word	0x03ff63ff

08004904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d138      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004924:	2302      	movs	r3, #2
 8004926:	e032      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	@ 0x24
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d139      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e033      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	@ 0x24
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40007000 	.word	0x40007000

08004a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5e:	d130      	bne.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a60:	4b23      	ldr	r3, [pc, #140]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6c:	d038      	beq.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a76:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2232      	movs	r2, #50	@ 0x32
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	0c9b      	lsrs	r3, r3, #18
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a94:	e002      	b.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a9c:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa8:	d102      	bne.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f2      	bne.n	8004a96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004abc:	d110      	bne.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e00f      	b.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ace:	d007      	beq.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ad8:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ade:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40007000 	.word	0x40007000
 8004af4:	20000004 	.word	0x20000004
 8004af8:	431bde83 	.word	0x431bde83

08004afc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e3ca      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b97      	ldr	r3, [pc, #604]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b18:	4b94      	ldr	r3, [pc, #592]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80e4 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_RCC_OscConfig+0x4a>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	f040 808b 	bne.w	8004c54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 8087 	bne.w	8004c54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b46:	4b89      	ldr	r3, [pc, #548]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_RCC_OscConfig+0x62>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e3a2      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	4b82      	ldr	r3, [pc, #520]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_RCC_OscConfig+0x7c>
 8004b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_OscConfig+0x88>
 8004b78:	4b7c      	ldr	r3, [pc, #496]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d223      	bcs.n	8004bd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd55 	bl	800563c <RCC_SetFlashLatencyFromMSIRange>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e383      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b9c:	4b73      	ldr	r3, [pc, #460]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a72      	ldr	r2, [pc, #456]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004ba2:	f043 0308 	orr.w	r3, r3, #8
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b70      	ldr	r3, [pc, #448]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	496d      	ldr	r1, [pc, #436]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bba:	4b6c      	ldr	r3, [pc, #432]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	4968      	ldr	r1, [pc, #416]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
 8004bce:	e025      	b.n	8004c1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bd6:	f043 0308 	orr.w	r3, r3, #8
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b63      	ldr	r3, [pc, #396]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4960      	ldr	r1, [pc, #384]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bee:	4b5f      	ldr	r3, [pc, #380]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	495b      	ldr	r1, [pc, #364]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fd15 	bl	800563c <RCC_SetFlashLatencyFromMSIRange>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e343      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c1c:	f000 fc4a 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b52      	ldr	r3, [pc, #328]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	4950      	ldr	r1, [pc, #320]	@ (8004d70 <HAL_RCC_OscConfig+0x274>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	4a4e      	ldr	r2, [pc, #312]	@ (8004d74 <HAL_RCC_OscConfig+0x278>)
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fd89 	bl	8003758 <HAL_InitTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d052      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	e327      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d032      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c5c:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c68:	f7fe fdc6 	bl	80037f8 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c70:	f7fe fdc2 	bl	80037f8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e310      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c82:	4b3a      	ldr	r3, [pc, #232]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a36      	ldr	r2, [pc, #216]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c94:	f043 0308 	orr.w	r3, r3, #8
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b34      	ldr	r3, [pc, #208]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4931      	ldr	r1, [pc, #196]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cac:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	492c      	ldr	r1, [pc, #176]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	e01a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cce:	f7fe fd93 	bl	80037f8 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd6:	f7fe fd8f 	bl	80037f8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e2dd      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ce8:	4b20      	ldr	r3, [pc, #128]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x1da>
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d074      	beq.n	8004dee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x21a>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d10e      	bne.n	8004d2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d10b      	bne.n	8004d2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d064      	beq.n	8004dec <HAL_RCC_OscConfig+0x2f0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d160      	bne.n	8004dec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e2ba      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d36:	d106      	bne.n	8004d46 <HAL_RCC_OscConfig+0x24a>
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e026      	b.n	8004d94 <HAL_RCC_OscConfig+0x298>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d4e:	d115      	bne.n	8004d7c <HAL_RCC_OscConfig+0x280>
 8004d50:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a02      	ldr	r2, [pc, #8]	@ (8004d6c <HAL_RCC_OscConfig+0x270>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e014      	b.n	8004d94 <HAL_RCC_OscConfig+0x298>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	0800e4cc 	.word	0x0800e4cc
 8004d74:	20000004 	.word	0x20000004
 8004d78:	20000008 	.word	0x20000008
 8004d7c:	4ba0      	ldr	r3, [pc, #640]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a9f      	ldr	r2, [pc, #636]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4b9d      	ldr	r3, [pc, #628]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a9c      	ldr	r2, [pc, #624]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fd2c 	bl	80037f8 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fe fd28 	bl	80037f8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e276      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	4b92      	ldr	r3, [pc, #584]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x2a8>
 8004dc2:	e014      	b.n	8004dee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fe fd18 	bl	80037f8 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fd14 	bl	80037f8 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e262      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dde:	4b88      	ldr	r3, [pc, #544]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x2d0>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d060      	beq.n	8004ebc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_OscConfig+0x310>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d119      	bne.n	8004e3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d116      	bne.n	8004e3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_OscConfig+0x328>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e23f      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b76      	ldr	r3, [pc, #472]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	4973      	ldr	r1, [pc, #460]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e38:	e040      	b.n	8004ebc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d023      	beq.n	8004e8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e42:	4b6f      	ldr	r3, [pc, #444]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6e      	ldr	r2, [pc, #440]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fe fcd3 	bl	80037f8 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e56:	f7fe fccf 	bl	80037f8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e21d      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e68:	4b65      	ldr	r3, [pc, #404]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e74:	4b62      	ldr	r3, [pc, #392]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	061b      	lsls	r3, r3, #24
 8004e82:	495f      	ldr	r1, [pc, #380]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
 8004e88:	e018      	b.n	8004ebc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fe fcaf 	bl	80037f8 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9e:	f7fe fcab 	bl	80037f8 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e1f9      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eb0:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d03c      	beq.n	8004f42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01c      	beq.n	8004f0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fe fc8a 	bl	80037f8 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fe fc86 	bl	80037f8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1d4      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004efa:	4b41      	ldr	r3, [pc, #260]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x3ec>
 8004f08:	e01b      	b.n	8004f42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f10:	4a3b      	ldr	r2, [pc, #236]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fe fc6d 	bl	80037f8 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f22:	f7fe fc69 	bl	80037f8 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1b7      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f34:	4b32      	ldr	r3, [pc, #200]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ef      	bne.n	8004f22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80a6 	beq.w	800509c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f50:	2300      	movs	r3, #0
 8004f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f54:	4b2a      	ldr	r3, [pc, #168]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	4a26      	ldr	r2, [pc, #152]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6c:	4b24      	ldr	r3, [pc, #144]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <HAL_RCC_OscConfig+0x508>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d118      	bne.n	8004fba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f88:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <HAL_RCC_OscConfig+0x508>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <HAL_RCC_OscConfig+0x508>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f94:	f7fe fc30 	bl	80037f8 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9c:	f7fe fc2c 	bl	80037f8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e17a      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <HAL_RCC_OscConfig+0x508>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d108      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4d8>
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fd2:	e029      	b.n	8005028 <HAL_RCC_OscConfig+0x52c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d115      	bne.n	8005008 <HAL_RCC_OscConfig+0x50c>
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe2:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	f043 0304 	orr.w	r3, r3, #4
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fec:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	4a03      	ldr	r2, [pc, #12]	@ (8005000 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ffc:	e014      	b.n	8005028 <HAL_RCC_OscConfig+0x52c>
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
 8005008:	4b9c      	ldr	r3, [pc, #624]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	4a9b      	ldr	r2, [pc, #620]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005018:	4b98      	ldr	r3, [pc, #608]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	4a97      	ldr	r2, [pc, #604]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d016      	beq.n	800505e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fe fbe2 	bl	80037f8 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005036:	e00a      	b.n	800504e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005038:	f7fe fbde 	bl	80037f8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e12a      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504e:	4b8b      	ldr	r3, [pc, #556]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0ed      	beq.n	8005038 <HAL_RCC_OscConfig+0x53c>
 800505c:	e015      	b.n	800508a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fe fbcb 	bl	80037f8 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe fbc7 	bl	80037f8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e113      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800507c:	4b7f      	ldr	r3, [pc, #508]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1ed      	bne.n	8005066 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005090:	4b7a      	ldr	r3, [pc, #488]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005094:	4a79      	ldr	r2, [pc, #484]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80fe 	beq.w	80052a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	f040 80d0 	bne.w	8005250 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050b0:	4b72      	ldr	r3, [pc, #456]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d130      	bne.n	8005126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	3b01      	subs	r3, #1
 80050d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d127      	bne.n	8005126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d11f      	bne.n	8005126 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050f0:	2a07      	cmp	r2, #7
 80050f2:	bf14      	ite	ne
 80050f4:	2201      	movne	r2, #1
 80050f6:	2200      	moveq	r2, #0
 80050f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	3b01      	subs	r3, #1
 800510c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d109      	bne.n	8005126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	3b01      	subs	r3, #1
 8005120:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d06e      	beq.n	8005204 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d069      	beq.n	8005200 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800512c:	4b53      	ldr	r3, [pc, #332]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005138:	4b50      	ldr	r3, [pc, #320]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0ad      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005148:	4b4c      	ldr	r3, [pc, #304]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4b      	ldr	r2, [pc, #300]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800514e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005152:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005154:	f7fe fb50 	bl	80037f8 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fe fb4c 	bl	80037f8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e09a      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516e:	4b43      	ldr	r3, [pc, #268]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800517a:	4b40      	ldr	r3, [pc, #256]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <HAL_RCC_OscConfig+0x784>)
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800518a:	3a01      	subs	r2, #1
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005194:	0212      	lsls	r2, r2, #8
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800519c:	0852      	lsrs	r2, r2, #1
 800519e:	3a01      	subs	r2, #1
 80051a0:	0552      	lsls	r2, r2, #21
 80051a2:	4311      	orrs	r1, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80051a8:	0852      	lsrs	r2, r2, #1
 80051aa:	3a01      	subs	r2, #1
 80051ac:	0652      	lsls	r2, r2, #25
 80051ae:	4311      	orrs	r1, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051b4:	0912      	lsrs	r2, r2, #4
 80051b6:	0452      	lsls	r2, r2, #17
 80051b8:	430a      	orrs	r2, r1
 80051ba:	4930      	ldr	r1, [pc, #192]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051c0:	4b2e      	ldr	r3, [pc, #184]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051d8:	f7fe fb0e 	bl	80037f8 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe fb0a 	bl	80037f8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e058      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f2:	4b22      	ldr	r3, [pc, #136]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051fe:	e050      	b.n	80052a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04f      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d148      	bne.n	80052a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a16      	ldr	r2, [pc, #88]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005226:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005228:	f7fe fae6 	bl	80037f8 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fe fae2 	bl	80037f8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e030      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x734>
 800524e:	e028      	b.n	80052a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d023      	beq.n	800529e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <HAL_RCC_OscConfig+0x780>)
 800525c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fe fac9 	bl	80037f8 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005268:	e00c      	b.n	8005284 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526a:	f7fe fac5 	bl	80037f8 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d905      	bls.n	8005284 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e013      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
 800527c:	40021000 	.word	0x40021000
 8005280:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <HAL_RCC_OscConfig+0x7b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ec      	bne.n	800526a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005290:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x7b0>)
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	4905      	ldr	r1, [pc, #20]	@ (80052ac <HAL_RCC_OscConfig+0x7b0>)
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_OscConfig+0x7b4>)
 8005298:	4013      	ands	r3, r2
 800529a:	60cb      	str	r3, [r1, #12]
 800529c:	e001      	b.n	80052a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	feeefffc 	.word	0xfeeefffc

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0e7      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b75      	ldr	r3, [pc, #468]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d910      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b72      	ldr	r3, [pc, #456]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 0207 	bic.w	r2, r3, #7
 80052de:	4970      	ldr	r1, [pc, #448]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b6e      	ldr	r3, [pc, #440]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0cf      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	4b66      	ldr	r3, [pc, #408]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005310:	429a      	cmp	r2, r3
 8005312:	d908      	bls.n	8005326 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b63      	ldr	r3, [pc, #396]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4960      	ldr	r1, [pc, #384]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04c      	beq.n	80053cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533a:	4b5a      	ldr	r3, [pc, #360]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d121      	bne.n	800538a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0a6      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005352:	4b54      	ldr	r3, [pc, #336]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d115      	bne.n	800538a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e09a      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800536a:	4b4e      	ldr	r3, [pc, #312]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e08e      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537a:	4b4a      	ldr	r3, [pc, #296]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e086      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538a:	4b46      	ldr	r3, [pc, #280]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f023 0203 	bic.w	r2, r3, #3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4943      	ldr	r1, [pc, #268]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fe fa2c 	bl	80037f8 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a2:	e00a      	b.n	80053ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a4:	f7fe fa28 	bl	80037f8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e06e      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	4b3a      	ldr	r3, [pc, #232]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 020c 	and.w	r2, r3, #12
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1eb      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d208      	bcs.n	80053fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	492b      	ldr	r1, [pc, #172]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fa:	4b29      	ldr	r3, [pc, #164]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d210      	bcs.n	800542a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 0207 	bic.w	r2, r3, #7
 8005410:	4923      	ldr	r1, [pc, #140]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005418:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <HAL_RCC_ClockConfig+0x1ec>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d001      	beq.n	800542a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e036      	b.n	8005498 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005436:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4918      	ldr	r1, [pc, #96]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005454:	4b13      	ldr	r3, [pc, #76]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4910      	ldr	r1, [pc, #64]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005468:	f000 f824 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	490b      	ldr	r1, [pc, #44]	@ (80054a8 <HAL_RCC_ClockConfig+0x1f4>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
 8005484:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <HAL_RCC_ClockConfig+0x1f8>)
 8005486:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005488:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <HAL_RCC_ClockConfig+0x1fc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe f963 	bl	8003758 <HAL_InitTick>
 8005492:	4603      	mov	r3, r0
 8005494:	72fb      	strb	r3, [r7, #11]

  return status;
 8005496:	7afb      	ldrb	r3, [r7, #11]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40022000 	.word	0x40022000
 80054a4:	40021000 	.word	0x40021000
 80054a8:	0800e4cc 	.word	0x0800e4cc
 80054ac:	20000004 	.word	0x20000004
 80054b0:	20000008 	.word	0x20000008

080054b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c2:	4b3e      	ldr	r3, [pc, #248]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054cc:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x34>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d121      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d11e      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054e8:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d107      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054f4:	4b31      	ldr	r3, [pc, #196]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e005      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005504:	4b2d      	ldr	r3, [pc, #180]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005510:	4a2b      	ldr	r2, [pc, #172]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005518:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10d      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005524:	e00a      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b04      	cmp	r3, #4
 800552a:	d102      	bne.n	8005532 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800552c:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e004      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d101      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005538:	4b23      	ldr	r3, [pc, #140]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800553a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d134      	bne.n	80055ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005542:	4b1e      	ldr	r3, [pc, #120]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0xa6>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d003      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0xac>
 8005558:	e005      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800555a:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800555c:	617b      	str	r3, [r7, #20]
      break;
 800555e:	e005      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005560:	4b19      	ldr	r3, [pc, #100]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005562:	617b      	str	r3, [r7, #20]
      break;
 8005564:	e002      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	617b      	str	r3, [r7, #20]
      break;
 800556a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	3301      	adds	r3, #1
 8005578:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800557a:	4b10      	ldr	r3, [pc, #64]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	0e5b      	lsrs	r3, r3, #25
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	3301      	adds	r3, #1
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055ac:	69bb      	ldr	r3, [r7, #24]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	@ 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
 80055c0:	0800e4e4 	.word	0x0800e4e4
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000004 	.word	0x20000004

080055e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055e8:	f7ff fff0 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	4904      	ldr	r1, [pc, #16]	@ (800560c <HAL_RCC_GetPCLK1Freq+0x28>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	0800e4dc 	.word	0x0800e4dc

08005610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005614:	f7ff ffda 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0adb      	lsrs	r3, r3, #11
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4904      	ldr	r1, [pc, #16]	@ (8005638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40021000 	.word	0x40021000
 8005638:	0800e4dc 	.word	0x0800e4dc

0800563c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005648:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005654:	f7ff f9ee 	bl	8004a34 <HAL_PWREx_GetVoltageRange>
 8005658:	6178      	str	r0, [r7, #20]
 800565a:	e014      	b.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800565c:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	4a24      	ldr	r2, [pc, #144]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
 8005668:	4b22      	ldr	r3, [pc, #136]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005674:	f7ff f9de 	bl	8004a34 <HAL_PWREx_GetVoltageRange>
 8005678:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4b1e      	ldr	r3, [pc, #120]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	4a1d      	ldr	r2, [pc, #116]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005684:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568c:	d10b      	bne.n	80056a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b80      	cmp	r3, #128	@ 0x80
 8005692:	d919      	bls.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2ba0      	cmp	r3, #160	@ 0xa0
 8005698:	d902      	bls.n	80056a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800569a:	2302      	movs	r3, #2
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e013      	b.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056a0:	2301      	movs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e010      	b.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b80      	cmp	r3, #128	@ 0x80
 80056aa:	d902      	bls.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056ac:	2303      	movs	r3, #3
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	e00a      	b.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b80      	cmp	r3, #128	@ 0x80
 80056b6:	d102      	bne.n	80056be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056b8:	2302      	movs	r3, #2
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e004      	b.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b70      	cmp	r3, #112	@ 0x70
 80056c2:	d101      	bne.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056c4:	2301      	movs	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 0207 	bic.w	r2, r3, #7
 80056d0:	4909      	ldr	r1, [pc, #36]	@ (80056f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056d8:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d001      	beq.n	80056ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40022000 	.word	0x40022000

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005704:	2300      	movs	r3, #0
 8005706:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005708:	2300      	movs	r3, #0
 800570a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	2b00      	cmp	r3, #0
 8005716:	d041      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800571c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005720:	d02a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005722:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005726:	d824      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800572c:	d008      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800572e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005732:	d81e      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800573c:	d010      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800573e:	e018      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005740:	4b86      	ldr	r3, [pc, #536]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a85      	ldr	r2, [pc, #532]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800574c:	e015      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	2100      	movs	r1, #0
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fabb 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800575e:	e00c      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3320      	adds	r3, #32
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fba6 	bl	8005eb8 <RCCEx_PLLSAI2_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005770:	e003      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	74fb      	strb	r3, [r7, #19]
      break;
 8005776:	e000      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005780:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578e:	4973      	ldr	r1, [pc, #460]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005796:	e001      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d041      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057b0:	d02a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057b6:	d824      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c2:	d81e      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80057c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057cc:	d010      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057ce:	e018      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057d0:	4b62      	ldr	r3, [pc, #392]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a61      	ldr	r2, [pc, #388]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057dc:	e015      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa73 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ee:	e00c      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3320      	adds	r3, #32
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb5e 	bl	8005eb8 <RCCEx_PLLSAI2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	74fb      	strb	r3, [r7, #19]
      break;
 8005806:	e000      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005810:	4b52      	ldr	r3, [pc, #328]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800581e:	494f      	ldr	r1, [pc, #316]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005826:	e001      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a0 	beq.w	800597a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800583e:	4b47      	ldr	r3, [pc, #284]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005854:	4b41      	ldr	r3, [pc, #260]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	4a40      	ldr	r2, [pc, #256]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005860:	4b3e      	ldr	r3, [pc, #248]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800586c:	2301      	movs	r3, #1
 800586e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005870:	4b3b      	ldr	r3, [pc, #236]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3a      	ldr	r2, [pc, #232]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800587a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800587c:	f7fd ffbc 	bl	80037f8 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005882:	e009      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fd ffb8 	bl	80037f8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d902      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	74fb      	strb	r3, [r7, #19]
        break;
 8005896:	e005      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005898:	4b31      	ldr	r3, [pc, #196]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ef      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058a4:	7cfb      	ldrb	r3, [r7, #19]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d15c      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058aa:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01f      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d019      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058c8:	4b24      	ldr	r3, [pc, #144]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058d4:	4b21      	ldr	r3, [pc, #132]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	4a20      	ldr	r2, [pc, #128]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ea:	4a1c      	ldr	r2, [pc, #112]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058f4:	4a19      	ldr	r2, [pc, #100]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fd ff77 	bl	80037f8 <HAL_GetTick>
 800590a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590c:	e00b      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fd ff73 	bl	80037f8 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591c:	4293      	cmp	r3, r2
 800591e:	d902      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	74fb      	strb	r3, [r7, #19]
            break;
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005926:	4b0d      	ldr	r3, [pc, #52]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ec      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10c      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800593a:	4b08      	ldr	r3, [pc, #32]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594a:	4904      	ldr	r1, [pc, #16]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005952:	e009      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	74bb      	strb	r3, [r7, #18]
 8005958:	e006      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005968:	7c7b      	ldrb	r3, [r7, #17]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800596e:	4b9e      	ldr	r3, [pc, #632]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	4a9d      	ldr	r2, [pc, #628]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005978:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005986:	4b98      	ldr	r3, [pc, #608]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f023 0203 	bic.w	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	4994      	ldr	r1, [pc, #592]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059a8:	4b8f      	ldr	r3, [pc, #572]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 020c 	bic.w	r2, r3, #12
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	498c      	ldr	r1, [pc, #560]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ca:	4b87      	ldr	r3, [pc, #540]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	4983      	ldr	r1, [pc, #524]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059ec:	4b7e      	ldr	r3, [pc, #504]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	497b      	ldr	r1, [pc, #492]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a0e:	4b76      	ldr	r3, [pc, #472]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1c:	4972      	ldr	r1, [pc, #456]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a30:	4b6d      	ldr	r3, [pc, #436]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	496a      	ldr	r1, [pc, #424]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a52:	4b65      	ldr	r3, [pc, #404]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	4961      	ldr	r1, [pc, #388]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a74:	4b5c      	ldr	r3, [pc, #368]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a82:	4959      	ldr	r1, [pc, #356]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a96:	4b54      	ldr	r3, [pc, #336]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa4:	4950      	ldr	r1, [pc, #320]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	4948      	ldr	r1, [pc, #288]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ada:	4b43      	ldr	r3, [pc, #268]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae8:	493f      	ldr	r1, [pc, #252]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d028      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005afc:	4b3a      	ldr	r3, [pc, #232]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b0a:	4937      	ldr	r1, [pc, #220]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b1c:	4b32      	ldr	r3, [pc, #200]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a31      	ldr	r2, [pc, #196]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b26:	60d3      	str	r3, [r2, #12]
 8005b28:	e011      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b32:	d10c      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f8c8 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d028      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b5a:	4b23      	ldr	r3, [pc, #140]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	491f      	ldr	r1, [pc, #124]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b78:	d106      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b84:	60d3      	str	r3, [r2, #12]
 8005b86:	e011      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b90:	d10c      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	2101      	movs	r1, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f899 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ba8:	7cfb      	ldrb	r3, [r7, #19]
 8005baa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02b      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc6:	4908      	ldr	r1, [pc, #32]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bd6:	d109      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd8:	4b03      	ldr	r3, [pc, #12]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a02      	ldr	r2, [pc, #8]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be2:	60d3      	str	r3, [r2, #12]
 8005be4:	e014      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f867 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d02f      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2a:	4928      	ldr	r1, [pc, #160]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	2102      	movs	r1, #2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f844 	bl	8005cd0 <RCCEx_PLLSAI1_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d014      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	74bb      	strb	r3, [r7, #18]
 8005c56:	e011      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3320      	adds	r3, #32
 8005c66:	2102      	movs	r1, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f925 	bl	8005eb8 <RCCEx_PLLSAI2_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c88:	4b10      	ldr	r3, [pc, #64]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c96:	490d      	ldr	r1, [pc, #52]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cba:	4904      	ldr	r1, [pc, #16]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40021000 	.word	0x40021000

08005cd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cde:	4b75      	ldr	r3, [pc, #468]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d018      	beq.n	8005d1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cea:	4b72      	ldr	r3, [pc, #456]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0203 	and.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d10d      	bne.n	8005d16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
       ||
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d02:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
       ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d047      	beq.n	8005da6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	e044      	b.n	8005da6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d018      	beq.n	8005d56 <RCCEx_PLLSAI1_Config+0x86>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d825      	bhi.n	8005d74 <RCCEx_PLLSAI1_Config+0xa4>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d002      	beq.n	8005d32 <RCCEx_PLLSAI1_Config+0x62>
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d009      	beq.n	8005d44 <RCCEx_PLLSAI1_Config+0x74>
 8005d30:	e020      	b.n	8005d74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d32:	4b60      	ldr	r3, [pc, #384]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11d      	bne.n	8005d7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d42:	e01a      	b.n	8005d7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d44:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d116      	bne.n	8005d7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d54:	e013      	b.n	8005d7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d56:	4b57      	ldr	r3, [pc, #348]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10f      	bne.n	8005d82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d62:	4b54      	ldr	r3, [pc, #336]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d109      	bne.n	8005d82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d72:	e006      	b.n	8005d82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e004      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d82:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	4944      	ldr	r1, [pc, #272]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d17d      	bne.n	8005ea8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dac:	4b41      	ldr	r3, [pc, #260]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a40      	ldr	r2, [pc, #256]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db8:	f7fd fd1e 	bl	80037f8 <HAL_GetTick>
 8005dbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dbe:	e009      	b.n	8005dd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dc0:	f7fd fd1a 	bl	80037f8 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d902      	bls.n	8005dd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005dd2:	e005      	b.n	8005de0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dd4:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ef      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d160      	bne.n	8005ea8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d111      	bne.n	8005e10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dec:	4b31      	ldr	r3, [pc, #196]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6892      	ldr	r2, [r2, #8]
 8005dfc:	0211      	lsls	r1, r2, #8
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	0912      	lsrs	r2, r2, #4
 8005e04:	0452      	lsls	r2, r2, #17
 8005e06:	430a      	orrs	r2, r1
 8005e08:	492a      	ldr	r1, [pc, #168]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	610b      	str	r3, [r1, #16]
 8005e0e:	e027      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d112      	bne.n	8005e3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e16:	4b27      	ldr	r3, [pc, #156]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6892      	ldr	r2, [r2, #8]
 8005e26:	0211      	lsls	r1, r2, #8
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6912      	ldr	r2, [r2, #16]
 8005e2c:	0852      	lsrs	r2, r2, #1
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	0552      	lsls	r2, r2, #21
 8005e32:	430a      	orrs	r2, r1
 8005e34:	491f      	ldr	r1, [pc, #124]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	610b      	str	r3, [r1, #16]
 8005e3a:	e011      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6892      	ldr	r2, [r2, #8]
 8005e4c:	0211      	lsls	r1, r2, #8
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6952      	ldr	r2, [r2, #20]
 8005e52:	0852      	lsrs	r2, r2, #1
 8005e54:	3a01      	subs	r2, #1
 8005e56:	0652      	lsls	r2, r2, #25
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	4916      	ldr	r1, [pc, #88]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e60:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a13      	ldr	r2, [pc, #76]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6c:	f7fd fcc4 	bl	80037f8 <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e72:	e009      	b.n	8005e88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e74:	f7fd fcc0 	bl	80037f8 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d902      	bls.n	8005e88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
          break;
 8005e86:	e005      	b.n	8005e94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ef      	beq.n	8005e74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	4904      	ldr	r1, [pc, #16]	@ (8005eb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000

08005eb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ed2:	4b67      	ldr	r3, [pc, #412]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0203 	and.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d10d      	bne.n	8005efe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005eea:	4b61      	ldr	r3, [pc, #388]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d047      	beq.n	8005f8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	e044      	b.n	8005f8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d018      	beq.n	8005f3e <RCCEx_PLLSAI2_Config+0x86>
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d825      	bhi.n	8005f5c <RCCEx_PLLSAI2_Config+0xa4>
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d002      	beq.n	8005f1a <RCCEx_PLLSAI2_Config+0x62>
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d009      	beq.n	8005f2c <RCCEx_PLLSAI2_Config+0x74>
 8005f18:	e020      	b.n	8005f5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f1a:	4b55      	ldr	r3, [pc, #340]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d11d      	bne.n	8005f62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f2a:	e01a      	b.n	8005f62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f2c:	4b50      	ldr	r3, [pc, #320]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d116      	bne.n	8005f66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f3c:	e013      	b.n	8005f66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10f      	bne.n	8005f6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f4a:	4b49      	ldr	r3, [pc, #292]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f5a:	e006      	b.n	8005f6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f60:	e004      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f72:	4b3f      	ldr	r3, [pc, #252]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	430b      	orrs	r3, r1
 8005f88:	4939      	ldr	r1, [pc, #228]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d167      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f94:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a35      	ldr	r2, [pc, #212]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa0:	f7fd fc2a 	bl	80037f8 <HAL_GetTick>
 8005fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fa6:	e009      	b.n	8005fbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fa8:	f7fd fc26 	bl	80037f8 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d902      	bls.n	8005fbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fba:	e005      	b.n	8005fc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ef      	bne.n	8005fa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d14a      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d111      	bne.n	8005ff8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fd4:	4b26      	ldr	r3, [pc, #152]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6892      	ldr	r2, [r2, #8]
 8005fe4:	0211      	lsls	r1, r2, #8
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68d2      	ldr	r2, [r2, #12]
 8005fea:	0912      	lsrs	r2, r2, #4
 8005fec:	0452      	lsls	r2, r2, #17
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	491f      	ldr	r1, [pc, #124]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	614b      	str	r3, [r1, #20]
 8005ff6:	e011      	b.n	800601c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006000:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6892      	ldr	r2, [r2, #8]
 8006008:	0211      	lsls	r1, r2, #8
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6912      	ldr	r2, [r2, #16]
 800600e:	0852      	lsrs	r2, r2, #1
 8006010:	3a01      	subs	r2, #1
 8006012:	0652      	lsls	r2, r2, #25
 8006014:	430a      	orrs	r2, r1
 8006016:	4916      	ldr	r1, [pc, #88]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006018:	4313      	orrs	r3, r2
 800601a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800601c:	4b14      	ldr	r3, [pc, #80]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a13      	ldr	r2, [pc, #76]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006026:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fd fbe6 	bl	80037f8 <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800602e:	e009      	b.n	8006044 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006030:	f7fd fbe2 	bl	80037f8 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d902      	bls.n	8006044 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	73fb      	strb	r3, [r7, #15]
          break;
 8006042:	e005      	b.n	8006050 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006044:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ef      	beq.n	8006030 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006056:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	4904      	ldr	r1, [pc, #16]	@ (8006070 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006060:	4313      	orrs	r3, r2
 8006062:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e095      	b.n	80061b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006096:	d009      	beq.n	80060ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	61da      	str	r2, [r3, #28]
 800609e:	e005      	b.n	80060ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fc ff66 	bl	8002f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060ec:	d902      	bls.n	80060f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e002      	b.n	80060fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006102:	d007      	beq.n	8006114 <HAL_SPI_Init+0xa0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800610c:	d002      	beq.n	8006114 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006156:	ea42 0103 	orr.w	r1, r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	f003 0204 	and.w	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006190:	ea42 0103 	orr.w	r1, r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ca:	f7fd fb15 	bl	80037f8 <HAL_GetTick>
 80061ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d001      	beq.n	80061e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	e15c      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_Transmit+0x36>
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e154      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_SPI_Transmit+0x48>
 80061fe:	2302      	movs	r3, #2
 8006200:	e14d      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2203      	movs	r2, #3
 800620e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	88fa      	ldrh	r2, [r7, #6]
 8006222:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006254:	d10f      	bne.n	8006276 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d007      	beq.n	8006294 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800629c:	d952      	bls.n	8006344 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_SPI_Transmit+0xf2>
 80062a6:	8b7b      	ldrh	r3, [r7, #26]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d145      	bne.n	8006338 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062d0:	e032      	b.n	8006338 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d112      	bne.n	8006306 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006304:	e018      	b.n	8006338 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006306:	f7fd fa77 	bl	80037f8 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d803      	bhi.n	800631e <HAL_SPI_Transmit+0x164>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d102      	bne.n	8006324 <HAL_SPI_Transmit+0x16a>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e0b2      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1c7      	bne.n	80062d2 <HAL_SPI_Transmit+0x118>
 8006342:	e083      	b.n	800644c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x198>
 800634c:	8b7b      	ldrh	r3, [r7, #26]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d177      	bne.n	8006442 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	d912      	bls.n	8006382 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	881a      	ldrh	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	1c9a      	adds	r2, r3, #2
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b02      	subs	r3, #2
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006380:	e05f      	b.n	8006442 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063a8:	e04b      	b.n	8006442 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d12b      	bne.n	8006410 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d912      	bls.n	80063e8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b02      	subs	r3, #2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063e6:	e02c      	b.n	8006442 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800640e:	e018      	b.n	8006442 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006410:	f7fd f9f2 	bl	80037f8 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d803      	bhi.n	8006428 <HAL_SPI_Transmit+0x26e>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d102      	bne.n	800642e <HAL_SPI_Transmit+0x274>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e02d      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1ae      	bne.n	80063aa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fe09 	bl	8007068 <SPI_EndRxTxTransaction>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800649c:	2300      	movs	r3, #0
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af02      	add	r7, sp, #8
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
 80064c4:	e123      	b.n	800670e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ce:	d112      	bne.n	80064f6 <HAL_SPI_Receive+0x50>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10e      	bne.n	80064f6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2204      	movs	r2, #4
 80064dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f912 	bl	8006716 <HAL_SPI_TransmitReceive>
 80064f2:	4603      	mov	r3, r0
 80064f4:	e10b      	b.n	800670e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f6:	f7fd f97f 	bl	80037f8 <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_SPI_Receive+0x62>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e100      	b.n	800670e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_SPI_Receive+0x74>
 8006516:	2302      	movs	r3, #2
 8006518:	e0f9      	b.n	800670e <HAL_SPI_Receive+0x268>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2204      	movs	r2, #4
 8006526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800656c:	d908      	bls.n	8006580 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	e007      	b.n	8006590 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006598:	d10f      	bne.n	80065ba <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c4:	2b40      	cmp	r3, #64	@ 0x40
 80065c6:	d007      	beq.n	80065d8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065e0:	d875      	bhi.n	80066ce <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065e2:	e037      	b.n	8006654 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d117      	bne.n	8006622 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f103 020c 	add.w	r2, r3, #12
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006620:	e018      	b.n	8006654 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006622:	f7fd f8e9 	bl	80037f8 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d803      	bhi.n	800663a <HAL_SPI_Receive+0x194>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d102      	bne.n	8006640 <HAL_SPI_Receive+0x19a>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e05c      	b.n	800670e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1c1      	bne.n	80065e4 <HAL_SPI_Receive+0x13e>
 8006660:	e03b      	b.n	80066da <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b01      	cmp	r3, #1
 800666e:	d115      	bne.n	800669c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	b292      	uxth	r2, r2
 800667c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800669a:	e018      	b.n	80066ce <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669c:	f7fd f8ac 	bl	80037f8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d803      	bhi.n	80066b4 <HAL_SPI_Receive+0x20e>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <HAL_SPI_Receive+0x214>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01f      	b.n	800670e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1c3      	bne.n	8006662 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fc6a 	bl	8006fb8 <SPI_EndRxTransaction>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800670c:	2300      	movs	r3, #0
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b08a      	sub	sp, #40	@ 0x28
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006724:	2301      	movs	r3, #1
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006728:	f7fd f866 	bl	80037f8 <HAL_GetTick>
 800672c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006734:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800673c:	887b      	ldrh	r3, [r7, #2]
 800673e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006740:	887b      	ldrh	r3, [r7, #2]
 8006742:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006744:	7ffb      	ldrb	r3, [r7, #31]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d00c      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x4e>
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006750:	d106      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x4a>
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d001      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	e1f3      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x60>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x60>
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e1e8      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x72>
 8006784:	2302      	movs	r3, #2
 8006786:	e1e1      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b04      	cmp	r3, #4
 800679a:	d003      	beq.n	80067a4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2205      	movs	r2, #5
 80067a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	887a      	ldrh	r2, [r7, #2]
 80067ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067e6:	d802      	bhi.n	80067ee <HAL_SPI_TransmitReceive+0xd8>
 80067e8:	8abb      	ldrh	r3, [r7, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d908      	bls.n	8006800 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e007      	b.n	8006810 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800680e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681a:	2b40      	cmp	r3, #64	@ 0x40
 800681c:	d007      	beq.n	800682e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800682c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006836:	f240 8083 	bls.w	8006940 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_SPI_TransmitReceive+0x132>
 8006842:	8afb      	ldrh	r3, [r7, #22]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d16f      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686c:	e05c      	b.n	8006928 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b02      	cmp	r3, #2
 800687a:	d11b      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x19e>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x19e>
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	2b01      	cmp	r3, #1
 800688a:	d113      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	881a      	ldrh	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d11c      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x1e6>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d8:	b292      	uxth	r2, r2
 80068da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f8:	2301      	movs	r3, #1
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068fc:	f7fc ff7c 	bl	80037f8 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006908:	429a      	cmp	r2, r3
 800690a:	d80d      	bhi.n	8006928 <HAL_SPI_TransmitReceive+0x212>
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d009      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e111      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d19d      	bne.n	800686e <HAL_SPI_TransmitReceive+0x158>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d197      	bne.n	800686e <HAL_SPI_TransmitReceive+0x158>
 800693e:	e0e5      	b.n	8006b0c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x23a>
 8006948:	8afb      	ldrh	r3, [r7, #22]
 800694a:	2b01      	cmp	r3, #1
 800694c:	f040 80d1 	bne.w	8006af2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d912      	bls.n	8006980 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b02      	subs	r3, #2
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800697e:	e0b8      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a6:	e0a4      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d134      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x30a>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02f      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x30a>
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d12c      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d912      	bls.n	80069f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d4:	881a      	ldrh	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	1c9a      	adds	r2, r3, #2
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b02      	subs	r3, #2
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069f4:	e012      	b.n	8006a1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d148      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x3aa>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d042      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d923      	bls.n	8006a8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	b292      	uxth	r2, r2
 8006a52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	1c9a      	adds	r2, r3, #2
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b02      	subs	r3, #2
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d81f      	bhi.n	8006abc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a8a:	605a      	str	r2, [r3, #4]
 8006a8c:	e016      	b.n	8006abc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f103 020c 	add.w	r2, r3, #12
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006abc:	2301      	movs	r3, #1
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ac0:	f7fc fe9a 	bl	80037f8 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d803      	bhi.n	8006ad8 <HAL_SPI_TransmitReceive+0x3c2>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d102      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x3c8>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e02c      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f af55 	bne.w	80069a8 <HAL_SPI_TransmitReceive+0x292>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af4e 	bne.w	80069a8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 faa9 	bl	8007068 <SPI_EndRxTxTransaction>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e00e      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	@ 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10e      	bne.n	8006b94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
    return;
 8006b92:	e0ce      	b.n	8006d32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <HAL_SPI_IRQHandler+0x5e>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
    return;
 8006bb0:	e0bf      	b.n	8006d32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <HAL_SPI_IRQHandler+0x7e>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80b0 	beq.w	8006d32 <HAL_SPI_IRQHandler+0x1de>
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80aa 	beq.w	8006d32 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d023      	beq.n	8006c30 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d011      	beq.n	8006c18 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf8:	f043 0204 	orr.w	r2, r3, #4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	e00b      	b.n	8006c30 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
        return;
 8006c2e:	e080      	b.n	8006d32 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c72:	f043 0208 	orr.w	r2, r3, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d04f      	beq.n	8006d30 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <HAL_SPI_IRQHandler+0x168>
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d034      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0203 	bic.w	r2, r2, #3
 8006cca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d011      	beq.n	8006cf8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd8:	4a17      	ldr	r2, [pc, #92]	@ (8006d38 <HAL_SPI_IRQHandler+0x1e4>)
 8006cda:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fc feca 	bl	8003a7a <HAL_DMA_Abort_IT>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d016      	beq.n	8006d2e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d04:	4a0c      	ldr	r2, [pc, #48]	@ (8006d38 <HAL_SPI_IRQHandler+0x1e4>)
 8006d06:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fc feb4 	bl	8003a7a <HAL_DMA_Abort_IT>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006d24:	e003      	b.n	8006d2e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f808 	bl	8006d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d2c:	e000      	b.n	8006d30 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006d2e:	bf00      	nop
    return;
 8006d30:	bf00      	nop
  }
}
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	08006d51 	.word	0x08006d51

08006d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ffe5 	bl	8006d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d8c:	f7fc fd34 	bl	80037f8 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4413      	add	r3, r2
 8006d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d9c:	f7fc fd2c 	bl	80037f8 <HAL_GetTick>
 8006da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006da2:	4b39      	ldr	r3, [pc, #228]	@ (8006e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	015b      	lsls	r3, r3, #5
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db2:	e054      	b.n	8006e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d050      	beq.n	8006e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dbc:	f7fc fd1c 	bl	80037f8 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d902      	bls.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d13d      	bne.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dea:	d111      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df4:	d004      	beq.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfe:	d107      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e18:	d10f      	bne.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e017      	b.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d19b      	bne.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000004 	.word	0x20000004

08006e8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	@ 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e9e:	f7fc fcab 	bl	80037f8 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	4413      	add	r3, r2
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006eae:	f7fc fca3 	bl	80037f8 <HAL_GetTick>
 8006eb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8006fb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	00da      	lsls	r2, r3, #3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	0d1b      	lsrs	r3, r3, #20
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ece:	fb02 f303 	mul.w	r3, r2, r3
 8006ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ed4:	e060      	b.n	8006f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006edc:	d107      	bne.n	8006eee <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d050      	beq.n	8006f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef6:	f7fc fc7f 	bl	80037f8 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d902      	bls.n	8006f0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d13d      	bne.n	8006f88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f24:	d111      	bne.n	8006f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f2e:	d004      	beq.n	8006f3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f38:	d107      	bne.n	8006f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f52:	d10f      	bne.n	8006f74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e010      	b.n	8006faa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d196      	bne.n	8006ed6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3728      	adds	r7, #40	@ 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000004 	.word	0x20000004

08006fb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fcc:	d111      	bne.n	8006ff2 <SPI_EndRxTransaction+0x3a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd6:	d004      	beq.n	8006fe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe0:	d107      	bne.n	8006ff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2180      	movs	r1, #128	@ 0x80
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff febd 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e023      	b.n	8007060 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007020:	d11d      	bne.n	800705e <SPI_EndRxTransaction+0xa6>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702a:	d004      	beq.n	8007036 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007034:	d113      	bne.n	800705e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2200      	movs	r2, #0
 800703e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f7ff ff22 	bl	8006e8c <SPI_WaitFifoStateUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007052:	f043 0220 	orr.w	r2, r3, #32
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e000      	b.n	8007060 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff03 	bl	8006e8c <SPI_WaitFifoStateUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d007      	beq.n	800709c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e027      	b.n	80070ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2180      	movs	r1, #128	@ 0x80
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff fe68 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e014      	b.n	80070ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fedc 	bl	8006e8c <SPI_WaitFifoStateUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e000      	b.n	80070ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e049      	b.n	800719a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fb ffa6 	bl	800306c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f001 f980 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e047      	b.n	800724c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a23      	ldr	r2, [pc, #140]	@ (8007258 <HAL_TIM_Base_Start+0xb4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01d      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d6:	d018      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1f      	ldr	r2, [pc, #124]	@ (800725c <HAL_TIM_Base_Start+0xb8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007260 <HAL_TIM_Base_Start+0xbc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007264 <HAL_TIM_Base_Start+0xc0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007268 <HAL_TIM_Base_Start+0xc4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_TIM_Base_Start+0x66>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a19      	ldr	r2, [pc, #100]	@ (800726c <HAL_TIM_Base_Start+0xc8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d115      	bne.n	8007236 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <HAL_TIM_Base_Start+0xcc>)
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b06      	cmp	r3, #6
 800721a:	d015      	beq.n	8007248 <HAL_TIM_Base_Start+0xa4>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007222:	d011      	beq.n	8007248 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007234:	e008      	b.n	8007248 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e000      	b.n	800724a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40000400 	.word	0x40000400
 8007260:	40000800 	.word	0x40000800
 8007264:	40000c00 	.word	0x40000c00
 8007268:	40013400 	.word	0x40013400
 800726c:	40014000 	.word	0x40014000
 8007270:	00010007 	.word	0x00010007

08007274 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10f      	bne.n	80072ac <HAL_TIM_Base_Stop+0x38>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	f240 4344 	movw	r3, #1092	@ 0x444
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <HAL_TIM_Base_Stop+0x38>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e04f      	b.n	800737c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a23      	ldr	r2, [pc, #140]	@ (8007388 <HAL_TIM_Base_Start_IT+0xc4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01d      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d018      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1f      	ldr	r2, [pc, #124]	@ (800738c <HAL_TIM_Base_Start_IT+0xc8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1e      	ldr	r2, [pc, #120]	@ (8007390 <HAL_TIM_Base_Start_IT+0xcc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1c      	ldr	r2, [pc, #112]	@ (8007394 <HAL_TIM_Base_Start_IT+0xd0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1b      	ldr	r2, [pc, #108]	@ (8007398 <HAL_TIM_Base_Start_IT+0xd4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIM_Base_Start_IT+0x76>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a19      	ldr	r2, [pc, #100]	@ (800739c <HAL_TIM_Base_Start_IT+0xd8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d115      	bne.n	8007366 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	4b17      	ldr	r3, [pc, #92]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b06      	cmp	r3, #6
 800734a:	d015      	beq.n	8007378 <HAL_TIM_Base_Start_IT+0xb4>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007352:	d011      	beq.n	8007378 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e008      	b.n	8007378 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e000      	b.n	800737a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	40012c00 	.word	0x40012c00
 800738c:	40000400 	.word	0x40000400
 8007390:	40000800 	.word	0x40000800
 8007394:	40000c00 	.word	0x40000c00
 8007398:	40013400 	.word	0x40013400
 800739c:	40014000 	.word	0x40014000
 80073a0:	00010007 	.word	0x00010007

080073a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10f      	bne.n	80073ec <HAL_TIM_Base_Stop_IT+0x48>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a1a      	ldr	r2, [r3, #32]
 80073d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d107      	bne.n	80073ec <HAL_TIM_Base_Stop_IT+0x48>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0201 	bic.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e049      	b.n	80074a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f841 	bl	80074b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 fff9 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_TIM_PWM_Start+0x24>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	e03c      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d109      	bne.n	8007502 <HAL_TIM_PWM_Start+0x3e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e02f      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b08      	cmp	r3, #8
 8007506:	d109      	bne.n	800751c <HAL_TIM_PWM_Start+0x58>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e022      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b0c      	cmp	r3, #12
 8007520:	d109      	bne.n	8007536 <HAL_TIM_PWM_Start+0x72>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e015      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d109      	bne.n	8007550 <HAL_TIM_PWM_Start+0x8c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	e008      	b.n	8007562 <HAL_TIM_PWM_Start+0x9e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e09c      	b.n	80076a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <HAL_TIM_PWM_Start+0xb6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007578:	e023      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d104      	bne.n	800758a <HAL_TIM_PWM_Start+0xc6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007588:	e01b      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d104      	bne.n	800759a <HAL_TIM_PWM_Start+0xd6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007598:	e013      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b0c      	cmp	r3, #12
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Start+0xe6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075a8:	e00b      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0xf6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075b8:	e003      	b.n	80075c2 <HAL_TIM_PWM_Start+0xfe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fc6e 	bl	8008eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <HAL_TIM_PWM_Start+0x1e8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <HAL_TIM_PWM_Start+0x1ec>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a32      	ldr	r2, [pc, #200]	@ (80076b4 <HAL_TIM_PWM_Start+0x1f0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a31      	ldr	r2, [pc, #196]	@ (80076b8 <HAL_TIM_PWM_Start+0x1f4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIM_PWM_Start+0x13e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2f      	ldr	r2, [pc, #188]	@ (80076bc <HAL_TIM_PWM_Start+0x1f8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_Start+0x142>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <HAL_TIM_PWM_Start+0x144>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a22      	ldr	r2, [pc, #136]	@ (80076ac <HAL_TIM_PWM_Start+0x1e8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d018      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a22      	ldr	r2, [pc, #136]	@ (80076c0 <HAL_TIM_PWM_Start+0x1fc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a21      	ldr	r2, [pc, #132]	@ (80076c4 <HAL_TIM_PWM_Start+0x200>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1f      	ldr	r2, [pc, #124]	@ (80076c8 <HAL_TIM_PWM_Start+0x204>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <HAL_TIM_PWM_Start+0x1ec>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_PWM_Start+0x19e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <HAL_TIM_PWM_Start+0x1f0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d115      	bne.n	800768e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	4b18      	ldr	r3, [pc, #96]	@ (80076cc <HAL_TIM_PWM_Start+0x208>)
 800766a:	4013      	ands	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d015      	beq.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800767a:	d011      	beq.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	e008      	b.n	80076a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e000      	b.n	80076a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	00010007 	.word	0x00010007

080076d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fbe2 	bl	8008eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3e      	ldr	r2, [pc, #248]	@ (80077e8 <HAL_TIM_PWM_Stop+0x118>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a3d      	ldr	r2, [pc, #244]	@ (80077ec <HAL_TIM_PWM_Stop+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00e      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3b      	ldr	r2, [pc, #236]	@ (80077f0 <HAL_TIM_PWM_Stop+0x120>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3a      	ldr	r2, [pc, #232]	@ (80077f4 <HAL_TIM_PWM_Stop+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_TIM_PWM_Stop+0x4a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a38      	ldr	r2, [pc, #224]	@ (80077f8 <HAL_TIM_PWM_Stop+0x128>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d101      	bne.n	800771e <HAL_TIM_PWM_Stop+0x4e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_TIM_PWM_Stop+0x50>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x84>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	f240 4344 	movw	r3, #1092	@ 0x444
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_TIM_PWM_Stop+0x84>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007752:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <HAL_TIM_PWM_Stop+0xb4>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f240 4344 	movw	r3, #1092	@ 0x444
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d107      	bne.n	8007784 <HAL_TIM_PWM_Stop+0xb4>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <HAL_TIM_PWM_Stop+0xc4>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007792:	e023      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b04      	cmp	r3, #4
 8007798:	d104      	bne.n	80077a4 <HAL_TIM_PWM_Stop+0xd4>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a2:	e01b      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d104      	bne.n	80077b4 <HAL_TIM_PWM_Stop+0xe4>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b2:	e013      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b0c      	cmp	r3, #12
 80077b8:	d104      	bne.n	80077c4 <HAL_TIM_PWM_Stop+0xf4>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077c2:	e00b      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b10      	cmp	r3, #16
 80077c8:	d104      	bne.n	80077d4 <HAL_TIM_PWM_Stop+0x104>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d2:	e003      	b.n	80077dc <HAL_TIM_PWM_Stop+0x10c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40013400 	.word	0x40013400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40014400 	.word	0x40014400
 80077f8:	40014800 	.word	0x40014800

080077fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e049      	b.n	80078a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f841 	bl	80078aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f000 fdfc 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_TIM_IC_Start_IT+0x1e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	e023      	b.n	8007926 <HAL_TIM_IC_Start_IT+0x66>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_IC_Start_IT+0x2e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	e01b      	b.n	8007926 <HAL_TIM_IC_Start_IT+0x66>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_IC_Start_IT+0x3e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	e013      	b.n	8007926 <HAL_TIM_IC_Start_IT+0x66>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d104      	bne.n	800790e <HAL_TIM_IC_Start_IT+0x4e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e00b      	b.n	8007926 <HAL_TIM_IC_Start_IT+0x66>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b10      	cmp	r3, #16
 8007912:	d104      	bne.n	800791e <HAL_TIM_IC_Start_IT+0x5e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791a:	b2db      	uxtb	r3, r3
 800791c:	e003      	b.n	8007926 <HAL_TIM_IC_Start_IT+0x66>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007924:	b2db      	uxtb	r3, r3
 8007926:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <HAL_TIM_IC_Start_IT+0x78>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007934:	b2db      	uxtb	r3, r3
 8007936:	e013      	b.n	8007960 <HAL_TIM_IC_Start_IT+0xa0>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d104      	bne.n	8007948 <HAL_TIM_IC_Start_IT+0x88>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007944:	b2db      	uxtb	r3, r3
 8007946:	e00b      	b.n	8007960 <HAL_TIM_IC_Start_IT+0xa0>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d104      	bne.n	8007958 <HAL_TIM_IC_Start_IT+0x98>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e003      	b.n	8007960 <HAL_TIM_IC_Start_IT+0xa0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800795e:	b2db      	uxtb	r3, r3
 8007960:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d102      	bne.n	800796e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007968:	7b7b      	ldrb	r3, [r7, #13]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e0dd      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <HAL_TIM_IC_Start_IT+0xc2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007980:	e023      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x10a>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b04      	cmp	r3, #4
 8007986:	d104      	bne.n	8007992 <HAL_TIM_IC_Start_IT+0xd2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007990:	e01b      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x10a>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b08      	cmp	r3, #8
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_IC_Start_IT+0xe2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a0:	e013      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x10a>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b0c      	cmp	r3, #12
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_IC_Start_IT+0xf2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b0:	e00b      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x10a>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_IC_Start_IT+0x102>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c0:	e003      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x10a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_TIM_IC_Start_IT+0x11a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d8:	e013      	b.n	8007a02 <HAL_TIM_IC_Start_IT+0x142>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d104      	bne.n	80079ea <HAL_TIM_IC_Start_IT+0x12a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079e8:	e00b      	b.n	8007a02 <HAL_TIM_IC_Start_IT+0x142>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_IC_Start_IT+0x13a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079f8:	e003      	b.n	8007a02 <HAL_TIM_IC_Start_IT+0x142>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d841      	bhi.n	8007a8c <HAL_TIM_IC_Start_IT+0x1cc>
 8007a08:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <HAL_TIM_IC_Start_IT+0x150>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a45 	.word	0x08007a45
 8007a14:	08007a8d 	.word	0x08007a8d
 8007a18:	08007a8d 	.word	0x08007a8d
 8007a1c:	08007a8d 	.word	0x08007a8d
 8007a20:	08007a57 	.word	0x08007a57
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a8d 	.word	0x08007a8d
 8007a2c:	08007a8d 	.word	0x08007a8d
 8007a30:	08007a69 	.word	0x08007a69
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	08007a8d 	.word	0x08007a8d
 8007a40:	08007a7b 	.word	0x08007a7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0202 	orr.w	r2, r2, #2
 8007a52:	60da      	str	r2, [r3, #12]
      break;
 8007a54:	e01d      	b.n	8007a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0204 	orr.w	r2, r2, #4
 8007a64:	60da      	str	r2, [r3, #12]
      break;
 8007a66:	e014      	b.n	8007a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0208 	orr.w	r2, r2, #8
 8007a76:	60da      	str	r2, [r3, #12]
      break;
 8007a78:	e00b      	b.n	8007a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0210 	orr.w	r2, r2, #16
 8007a88:	60da      	str	r2, [r3, #12]
      break;
 8007a8a:	e002      	b.n	8007a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a90:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d149      	bne.n	8007b2c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fa03 	bl	8008eac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a23      	ldr	r2, [pc, #140]	@ (8007b38 <HAL_TIM_IC_Start_IT+0x278>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d01d      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d018      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1f      	ldr	r2, [pc, #124]	@ (8007b3c <HAL_TIM_IC_Start_IT+0x27c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <HAL_TIM_IC_Start_IT+0x280>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00e      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b44 <HAL_TIM_IC_Start_IT+0x284>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d009      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b48 <HAL_TIM_IC_Start_IT+0x288>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d004      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x22c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a19      	ldr	r2, [pc, #100]	@ (8007b4c <HAL_TIM_IC_Start_IT+0x28c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d115      	bne.n	8007b18 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	4b17      	ldr	r3, [pc, #92]	@ (8007b50 <HAL_TIM_IC_Start_IT+0x290>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d015      	beq.n	8007b2a <HAL_TIM_IC_Start_IT+0x26a>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b04:	d011      	beq.n	8007b2a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b16:	e008      	b.n	8007b2a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e000      	b.n	8007b2c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40013400 	.word	0x40013400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	00010007 	.word	0x00010007

08007b54 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b0c      	cmp	r3, #12
 8007b66:	d841      	bhi.n	8007bec <HAL_TIM_IC_Stop_IT+0x98>
 8007b68:	a201      	add	r2, pc, #4	@ (adr r2, 8007b70 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007bed 	.word	0x08007bed
 8007b78:	08007bed 	.word	0x08007bed
 8007b7c:	08007bed 	.word	0x08007bed
 8007b80:	08007bb7 	.word	0x08007bb7
 8007b84:	08007bed 	.word	0x08007bed
 8007b88:	08007bed 	.word	0x08007bed
 8007b8c:	08007bed 	.word	0x08007bed
 8007b90:	08007bc9 	.word	0x08007bc9
 8007b94:	08007bed 	.word	0x08007bed
 8007b98:	08007bed 	.word	0x08007bed
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bdb 	.word	0x08007bdb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0202 	bic.w	r2, r2, #2
 8007bb2:	60da      	str	r2, [r3, #12]
      break;
 8007bb4:	e01d      	b.n	8007bf2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0204 	bic.w	r2, r2, #4
 8007bc4:	60da      	str	r2, [r3, #12]
      break;
 8007bc6:	e014      	b.n	8007bf2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0208 	bic.w	r2, r2, #8
 8007bd6:	60da      	str	r2, [r3, #12]
      break;
 8007bd8:	e00b      	b.n	8007bf2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0210 	bic.w	r2, r2, #16
 8007be8:	60da      	str	r2, [r3, #12]
      break;
 8007bea:	e002      	b.n	8007bf2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d166      	bne.n	8007cc6 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 f953 	bl	8008eac <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10f      	bne.n	8007c36 <HAL_TIM_IC_Stop_IT+0xe2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6a1a      	ldr	r2, [r3, #32]
 8007c1c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <HAL_TIM_IC_Stop_IT+0xe2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <HAL_TIM_IC_Stop_IT+0xf2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c44:	e023      	b.n	8007c8e <HAL_TIM_IC_Stop_IT+0x13a>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d104      	bne.n	8007c56 <HAL_TIM_IC_Stop_IT+0x102>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c54:	e01b      	b.n	8007c8e <HAL_TIM_IC_Stop_IT+0x13a>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d104      	bne.n	8007c66 <HAL_TIM_IC_Stop_IT+0x112>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c64:	e013      	b.n	8007c8e <HAL_TIM_IC_Stop_IT+0x13a>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b0c      	cmp	r3, #12
 8007c6a:	d104      	bne.n	8007c76 <HAL_TIM_IC_Stop_IT+0x122>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c74:	e00b      	b.n	8007c8e <HAL_TIM_IC_Stop_IT+0x13a>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d104      	bne.n	8007c86 <HAL_TIM_IC_Stop_IT+0x132>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c84:	e003      	b.n	8007c8e <HAL_TIM_IC_Stop_IT+0x13a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_TIM_IC_Stop_IT+0x14a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c9c:	e013      	b.n	8007cc6 <HAL_TIM_IC_Stop_IT+0x172>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d104      	bne.n	8007cae <HAL_TIM_IC_Stop_IT+0x15a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cac:	e00b      	b.n	8007cc6 <HAL_TIM_IC_Stop_IT+0x172>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d104      	bne.n	8007cbe <HAL_TIM_IC_Stop_IT+0x16a>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cbc:	e003      	b.n	8007cc6 <HAL_TIM_IC_Stop_IT+0x172>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d020      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01b      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0202 	mvn.w	r2, #2
 8007d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb6d 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb5f 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb70 	bl	800840e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0204 	mvn.w	r2, #4
 8007d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fb47 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb39 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fb4a 	bl	800840e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d020      	beq.n	8007dcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0208 	mvn.w	r2, #8
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2204      	movs	r2, #4
 8007da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fb21 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb13 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fb24 	bl	800840e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01b      	beq.n	8007e18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0210 	mvn.w	r2, #16
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2208      	movs	r2, #8
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fafb 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 faed 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fafe 	bl	800840e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00c      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0201 	mvn.w	r2, #1
 8007e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 facb 	bl	80083d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 f957 	bl	8009118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 f94f 	bl	800912c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fab8 	bl	8008422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00c      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d007      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f06f 0220 	mvn.w	r2, #32
 8007ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f917 	bl	8009104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_TIM_IC_ConfigChannel+0x1e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e088      	b.n	800800e <HAL_TIM_IC_ConfigChannel+0x130>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d11b      	bne.n	8007f42 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007f1a:	f000 fe09 	bl	8008b30 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699a      	ldr	r2, [r3, #24]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 020c 	bic.w	r2, r2, #12
 8007f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6999      	ldr	r1, [r3, #24]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	619a      	str	r2, [r3, #24]
 8007f40:	e060      	b.n	8008004 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d11c      	bne.n	8007f82 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007f58:	f000 fe87 	bl	8008c6a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007f6a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6999      	ldr	r1, [r3, #24]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	021a      	lsls	r2, r3, #8
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	619a      	str	r2, [r3, #24]
 8007f80:	e040      	b.n	8008004 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d11b      	bne.n	8007fc0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007f98:	f000 fed4 	bl	8008d44 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 020c 	bic.w	r2, r2, #12
 8007faa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69d9      	ldr	r1, [r3, #28]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	61da      	str	r2, [r3, #28]
 8007fbe:	e021      	b.n	8008004 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d11c      	bne.n	8008000 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007fd6:	f000 fef1 	bl	8008dbc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007fe8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69d9      	ldr	r1, [r3, #28]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	021a      	lsls	r2, r3, #8
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	61da      	str	r2, [r3, #28]
 8007ffe:	e001      	b.n	8008004 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008032:	2302      	movs	r3, #2
 8008034:	e0ff      	b.n	8008236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b14      	cmp	r3, #20
 8008042:	f200 80f0 	bhi.w	8008226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008046:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	080080a1 	.word	0x080080a1
 8008050:	08008227 	.word	0x08008227
 8008054:	08008227 	.word	0x08008227
 8008058:	08008227 	.word	0x08008227
 800805c:	080080e1 	.word	0x080080e1
 8008060:	08008227 	.word	0x08008227
 8008064:	08008227 	.word	0x08008227
 8008068:	08008227 	.word	0x08008227
 800806c:	08008123 	.word	0x08008123
 8008070:	08008227 	.word	0x08008227
 8008074:	08008227 	.word	0x08008227
 8008078:	08008227 	.word	0x08008227
 800807c:	08008163 	.word	0x08008163
 8008080:	08008227 	.word	0x08008227
 8008084:	08008227 	.word	0x08008227
 8008088:	08008227 	.word	0x08008227
 800808c:	080081a5 	.word	0x080081a5
 8008090:	08008227 	.word	0x08008227
 8008094:	08008227 	.word	0x08008227
 8008098:	08008227 	.word	0x08008227
 800809c:	080081e5 	.word	0x080081e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fa6c 	bl	8008584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0208 	orr.w	r2, r2, #8
 80080ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0204 	bic.w	r2, r2, #4
 80080ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6999      	ldr	r1, [r3, #24]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	619a      	str	r2, [r3, #24]
      break;
 80080de:	e0a5      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fadc 	bl	80086a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800810a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6999      	ldr	r1, [r3, #24]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	021a      	lsls	r2, r3, #8
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	619a      	str	r2, [r3, #24]
      break;
 8008120:	e084      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fb45 	bl	80087b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0208 	orr.w	r2, r2, #8
 800813c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0204 	bic.w	r2, r2, #4
 800814c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69d9      	ldr	r1, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	61da      	str	r2, [r3, #28]
      break;
 8008160:	e064      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fbad 	bl	80088c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800817c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800818c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69d9      	ldr	r1, [r3, #28]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	021a      	lsls	r2, r3, #8
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	61da      	str	r2, [r3, #28]
      break;
 80081a2:	e043      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fbf6 	bl	800899c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0204 	bic.w	r2, r2, #4
 80081ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081e2:	e023      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fc3a 	bl	8008a64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800820e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	021a      	lsls	r2, r3, #8
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008224:	e002      	b.n	800822c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	75fb      	strb	r3, [r7, #23]
      break;
 800822a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop

08008240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_TIM_ConfigClockSource+0x1c>
 8008258:	2302      	movs	r3, #2
 800825a:	e0b6      	b.n	80083ca <HAL_TIM_ConfigClockSource+0x18a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800827a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800827e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008298:	d03e      	beq.n	8008318 <HAL_TIM_ConfigClockSource+0xd8>
 800829a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829e:	f200 8087 	bhi.w	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a6:	f000 8086 	beq.w	80083b6 <HAL_TIM_ConfigClockSource+0x176>
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ae:	d87f      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082b0:	2b70      	cmp	r3, #112	@ 0x70
 80082b2:	d01a      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0xaa>
 80082b4:	2b70      	cmp	r3, #112	@ 0x70
 80082b6:	d87b      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082b8:	2b60      	cmp	r3, #96	@ 0x60
 80082ba:	d050      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x11e>
 80082bc:	2b60      	cmp	r3, #96	@ 0x60
 80082be:	d877      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082c0:	2b50      	cmp	r3, #80	@ 0x50
 80082c2:	d03c      	beq.n	800833e <HAL_TIM_ConfigClockSource+0xfe>
 80082c4:	2b50      	cmp	r3, #80	@ 0x50
 80082c6:	d873      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082c8:	2b40      	cmp	r3, #64	@ 0x40
 80082ca:	d058      	beq.n	800837e <HAL_TIM_ConfigClockSource+0x13e>
 80082cc:	2b40      	cmp	r3, #64	@ 0x40
 80082ce:	d86f      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082d0:	2b30      	cmp	r3, #48	@ 0x30
 80082d2:	d064      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15e>
 80082d4:	2b30      	cmp	r3, #48	@ 0x30
 80082d6:	d86b      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d060      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15e>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d867      	bhi.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d05c      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15e>
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d05a      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x15e>
 80082e8:	e062      	b.n	80083b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082fa:	f000 fdb7 	bl	8008e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800830c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	609a      	str	r2, [r3, #8]
      break;
 8008316:	e04f      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008328:	f000 fda0 	bl	8008e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800833a:	609a      	str	r2, [r3, #8]
      break;
 800833c:	e03c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800834a:	461a      	mov	r2, r3
 800834c:	f000 fc5e 	bl	8008c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2150      	movs	r1, #80	@ 0x50
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fd6d 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 800835c:	e02c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800836a:	461a      	mov	r2, r3
 800836c:	f000 fcba 	bl	8008ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2160      	movs	r1, #96	@ 0x60
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fd5d 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 800837c:	e01c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800838a:	461a      	mov	r2, r3
 800838c:	f000 fc3e 	bl	8008c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2140      	movs	r1, #64	@ 0x40
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fd4d 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 800839c:	e00c      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f000 fd44 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 80083ae:	e003      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	e000      	b.n	80083b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80083b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a46      	ldr	r2, [pc, #280]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a43      	ldr	r2, [pc, #268]	@ (8008568 <TIM_Base_SetConfig+0x130>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a42      	ldr	r2, [pc, #264]	@ (800856c <TIM_Base_SetConfig+0x134>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a41      	ldr	r2, [pc, #260]	@ (8008570 <TIM_Base_SetConfig+0x138>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a40      	ldr	r2, [pc, #256]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d108      	bne.n	800848a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a35      	ldr	r2, [pc, #212]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d01f      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008498:	d01b      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a32      	ldr	r2, [pc, #200]	@ (8008568 <TIM_Base_SetConfig+0x130>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d017      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a31      	ldr	r2, [pc, #196]	@ (800856c <TIM_Base_SetConfig+0x134>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <TIM_Base_SetConfig+0x138>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00f      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00b      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008578 <TIM_Base_SetConfig+0x140>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2d      	ldr	r2, [pc, #180]	@ (800857c <TIM_Base_SetConfig+0x144>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_Base_SetConfig+0x9a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008580 <TIM_Base_SetConfig+0x148>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a16      	ldr	r2, [pc, #88]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00f      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00b      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a17      	ldr	r2, [pc, #92]	@ (8008578 <TIM_Base_SetConfig+0x140>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d007      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a16      	ldr	r2, [pc, #88]	@ (800857c <TIM_Base_SetConfig+0x144>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <TIM_Base_SetConfig+0x148>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d103      	bne.n	8008538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b01      	cmp	r3, #1
 8008548:	d105      	bne.n	8008556 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f023 0201 	bic.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]
  }
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40012c00 	.word	0x40012c00
 8008568:	40000400 	.word	0x40000400
 800856c:	40000800 	.word	0x40000800
 8008570:	40000c00 	.word	0x40000c00
 8008574:	40013400 	.word	0x40013400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800

08008584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	f023 0201 	bic.w	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 0302 	bic.w	r3, r3, #2
 80085d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a2c      	ldr	r2, [pc, #176]	@ (8008690 <TIM_OC1_SetConfig+0x10c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008694 <TIM_OC1_SetConfig+0x110>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00b      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <TIM_OC1_SetConfig+0x114>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a29      	ldr	r2, [pc, #164]	@ (800869c <TIM_OC1_SetConfig+0x118>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <TIM_OC1_SetConfig+0x11c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d10c      	bne.n	800861e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0308 	bic.w	r3, r3, #8
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f023 0304 	bic.w	r3, r3, #4
 800861c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1b      	ldr	r2, [pc, #108]	@ (8008690 <TIM_OC1_SetConfig+0x10c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00f      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1a      	ldr	r2, [pc, #104]	@ (8008694 <TIM_OC1_SetConfig+0x110>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00b      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a19      	ldr	r2, [pc, #100]	@ (8008698 <TIM_OC1_SetConfig+0x114>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d007      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a18      	ldr	r2, [pc, #96]	@ (800869c <TIM_OC1_SetConfig+0x118>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d003      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <TIM_OC1_SetConfig+0x11c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d111      	bne.n	800866a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800864c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	40012c00 	.word	0x40012c00
 8008694:	40013400 	.word	0x40013400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	f023 0210 	bic.w	r2, r3, #16
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a28      	ldr	r2, [pc, #160]	@ (80087a4 <TIM_OC2_SetConfig+0x100>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC2_SetConfig+0x6c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <TIM_OC2_SetConfig+0x104>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10d      	bne.n	800872c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a1d      	ldr	r2, [pc, #116]	@ (80087a4 <TIM_OC2_SetConfig+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00f      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <TIM_OC2_SetConfig+0x104>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00b      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a1b      	ldr	r2, [pc, #108]	@ (80087ac <TIM_OC2_SetConfig+0x108>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d007      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1a      	ldr	r2, [pc, #104]	@ (80087b0 <TIM_OC2_SetConfig+0x10c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a19      	ldr	r2, [pc, #100]	@ (80087b4 <TIM_OC2_SetConfig+0x110>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d113      	bne.n	800877c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800875a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40013400 	.word	0x40013400
 80087ac:	40014000 	.word	0x40014000
 80087b0:	40014400 	.word	0x40014400
 80087b4:	40014800 	.word	0x40014800

080087b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a27      	ldr	r2, [pc, #156]	@ (80088b4 <TIM_OC3_SetConfig+0xfc>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC3_SetConfig+0x6a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a26      	ldr	r2, [pc, #152]	@ (80088b8 <TIM_OC3_SetConfig+0x100>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d10d      	bne.n	800883e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800883c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a1c      	ldr	r2, [pc, #112]	@ (80088b4 <TIM_OC3_SetConfig+0xfc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00f      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a1b      	ldr	r2, [pc, #108]	@ (80088b8 <TIM_OC3_SetConfig+0x100>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00b      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a1a      	ldr	r2, [pc, #104]	@ (80088bc <TIM_OC3_SetConfig+0x104>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d007      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a19      	ldr	r2, [pc, #100]	@ (80088c0 <TIM_OC3_SetConfig+0x108>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d003      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a18      	ldr	r2, [pc, #96]	@ (80088c4 <TIM_OC3_SetConfig+0x10c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d113      	bne.n	800888e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800886c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	621a      	str	r2, [r3, #32]
}
 80088a8:	bf00      	nop
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40013400 	.word	0x40013400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4313      	orrs	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	031b      	lsls	r3, r3, #12
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a18      	ldr	r2, [pc, #96]	@ (8008988 <TIM_OC4_SetConfig+0xc0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00f      	beq.n	800894c <TIM_OC4_SetConfig+0x84>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a17      	ldr	r2, [pc, #92]	@ (800898c <TIM_OC4_SetConfig+0xc4>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00b      	beq.n	800894c <TIM_OC4_SetConfig+0x84>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a16      	ldr	r2, [pc, #88]	@ (8008990 <TIM_OC4_SetConfig+0xc8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d007      	beq.n	800894c <TIM_OC4_SetConfig+0x84>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a15      	ldr	r2, [pc, #84]	@ (8008994 <TIM_OC4_SetConfig+0xcc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_OC4_SetConfig+0x84>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a14      	ldr	r2, [pc, #80]	@ (8008998 <TIM_OC4_SetConfig+0xd0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d109      	bne.n	8008960 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	019b      	lsls	r3, r3, #6
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	621a      	str	r2, [r3, #32]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40012c00 	.word	0x40012c00
 800898c:	40013400 	.word	0x40013400
 8008990:	40014000 	.word	0x40014000
 8008994:	40014400 	.word	0x40014400
 8008998:	40014800 	.word	0x40014800

0800899c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a17      	ldr	r2, [pc, #92]	@ (8008a50 <TIM_OC5_SetConfig+0xb4>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00f      	beq.n	8008a16 <TIM_OC5_SetConfig+0x7a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a16      	ldr	r2, [pc, #88]	@ (8008a54 <TIM_OC5_SetConfig+0xb8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00b      	beq.n	8008a16 <TIM_OC5_SetConfig+0x7a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a15      	ldr	r2, [pc, #84]	@ (8008a58 <TIM_OC5_SetConfig+0xbc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <TIM_OC5_SetConfig+0x7a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a14      	ldr	r2, [pc, #80]	@ (8008a5c <TIM_OC5_SetConfig+0xc0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_OC5_SetConfig+0x7a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a13      	ldr	r2, [pc, #76]	@ (8008a60 <TIM_OC5_SetConfig+0xc4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d109      	bne.n	8008a2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	621a      	str	r2, [r3, #32]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40013400 	.word	0x40013400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	051b      	lsls	r3, r3, #20
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a18      	ldr	r2, [pc, #96]	@ (8008b1c <TIM_OC6_SetConfig+0xb8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC6_SetConfig+0x7c>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a17      	ldr	r2, [pc, #92]	@ (8008b20 <TIM_OC6_SetConfig+0xbc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC6_SetConfig+0x7c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a16      	ldr	r2, [pc, #88]	@ (8008b24 <TIM_OC6_SetConfig+0xc0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC6_SetConfig+0x7c>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a15      	ldr	r2, [pc, #84]	@ (8008b28 <TIM_OC6_SetConfig+0xc4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC6_SetConfig+0x7c>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a14      	ldr	r2, [pc, #80]	@ (8008b2c <TIM_OC6_SetConfig+0xc8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d109      	bne.n	8008af4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	029b      	lsls	r3, r3, #10
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	621a      	str	r2, [r3, #32]
}
 8008b0e:	bf00      	nop
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	40012c00 	.word	0x40012c00
 8008b20:	40013400 	.word	0x40013400
 8008b24:	40014000 	.word	0x40014000
 8008b28:	40014400 	.word	0x40014400
 8008b2c:	40014800 	.word	0x40014800

08008b30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	f023 0201 	bic.w	r2, r3, #1
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4a26      	ldr	r2, [pc, #152]	@ (8008bf4 <TIM_TI1_SetConfig+0xc4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d017      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b64:	d013      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a23      	ldr	r2, [pc, #140]	@ (8008bf8 <TIM_TI1_SetConfig+0xc8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00f      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4a22      	ldr	r2, [pc, #136]	@ (8008bfc <TIM_TI1_SetConfig+0xcc>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00b      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a21      	ldr	r2, [pc, #132]	@ (8008c00 <TIM_TI1_SetConfig+0xd0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d007      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a20      	ldr	r2, [pc, #128]	@ (8008c04 <TIM_TI1_SetConfig+0xd4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d003      	beq.n	8008b8e <TIM_TI1_SetConfig+0x5e>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a1f      	ldr	r2, [pc, #124]	@ (8008c08 <TIM_TI1_SetConfig+0xd8>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <TIM_TI1_SetConfig+0x62>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <TIM_TI1_SetConfig+0x64>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e003      	b.n	8008bb2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f023 030a 	bic.w	r3, r3, #10
 8008bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f003 030a 	and.w	r3, r3, #10
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40012c00 	.word	0x40012c00
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40013400 	.word	0x40013400
 8008c08:	40014000 	.word	0x40014000

08008c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f023 0201 	bic.w	r2, r3, #1
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 030a 	bic.w	r3, r3, #10
 8008c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	f023 0210 	bic.w	r2, r3, #16
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	031b      	lsls	r3, r3, #12
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	621a      	str	r2, [r3, #32]
}
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	031b      	lsls	r3, r3, #12
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	621a      	str	r2, [r3, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008d94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	621a      	str	r2, [r3, #32]
}
 8008db0:	bf00      	nop
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008de8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	031b      	lsls	r3, r3, #12
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	031b      	lsls	r3, r3, #12
 8008e14:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	621a      	str	r2, [r3, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f043 0307 	orr.w	r3, r3, #7
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	609a      	str	r2, [r3, #8]
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	021a      	lsls	r2, r3, #8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 031f 	and.w	r3, r3, #31
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e068      	b.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2e      	ldr	r2, [pc, #184]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d004      	beq.n	8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d108      	bne.n	8008f56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01d      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f82:	d018      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d013      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1a      	ldr	r2, [pc, #104]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00e      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a18      	ldr	r2, [pc, #96]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d009      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a13      	ldr	r2, [pc, #76]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d004      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a14      	ldr	r2, [pc, #80]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40013400 	.word	0x40013400
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00
 8009004:	40014000 	.word	0x40014000

08009008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009020:	2302      	movs	r3, #2
 8009022:	e065      	b.n	80090f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a16      	ldr	r2, [pc, #88]	@ (80090fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a14      	ldr	r2, [pc, #80]	@ (8009100 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d115      	bne.n	80090de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	051b      	lsls	r3, r3, #20
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	40012c00 	.word	0x40012c00
 8009100:	40013400 	.word	0x40013400

08009104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e040      	b.n	80091d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fa f89e 	bl	80032a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2224      	movs	r2, #36	@ 0x24
 800916c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb6a 	bl	8009860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8af 	bl	80092f0 <UART_SetConfig>
 8009192:	4603      	mov	r3, r0
 8009194:	2b01      	cmp	r3, #1
 8009196:	d101      	bne.n	800919c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e01b      	b.n	80091d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fbe9 	bl	80099a4 <UART_CheckIdleState>
 80091d2:	4603      	mov	r3, r0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	@ 0x28
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d177      	bne.n	80092e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <HAL_UART_Transmit+0x24>
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e070      	b.n	80092e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2221      	movs	r2, #33	@ 0x21
 8009210:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009212:	f7fa faf1 	bl	80037f8 <HAL_GetTick>
 8009216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	88fa      	ldrh	r2, [r7, #6]
 8009224:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009230:	d108      	bne.n	8009244 <HAL_UART_Transmit+0x68>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d104      	bne.n	8009244 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	61bb      	str	r3, [r7, #24]
 8009242:	e003      	b.n	800924c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009248:	2300      	movs	r3, #0
 800924a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800924c:	e02f      	b.n	80092ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2200      	movs	r2, #0
 8009256:	2180      	movs	r1, #128	@ 0x80
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 fc4b 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2220      	movs	r2, #32
 8009268:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e03b      	b.n	80092e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10b      	bne.n	800928c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	881a      	ldrh	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009280:	b292      	uxth	r2, r2
 8009282:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	3302      	adds	r3, #2
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e007      	b.n	800929c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	781a      	ldrb	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	3301      	adds	r3, #1
 800929a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1c9      	bne.n	800924e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2200      	movs	r2, #0
 80092c2:	2140      	movs	r1, #64	@ 0x40
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fc15 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2220      	movs	r2, #32
 80092d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e005      	b.n	80092e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2220      	movs	r2, #32
 80092de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e000      	b.n	80092e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80092e4:	2302      	movs	r3, #2
  }
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092f4:	b08a      	sub	sp, #40	@ 0x28
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	431a      	orrs	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	431a      	orrs	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	4313      	orrs	r3, r2
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4ba4      	ldr	r3, [pc, #656]	@ (80095b0 <UART_SetConfig+0x2c0>)
 8009320:	4013      	ands	r3, r2
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009328:	430b      	orrs	r3, r1
 800932a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a99      	ldr	r2, [pc, #612]	@ (80095b4 <UART_SetConfig+0x2c4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009358:	4313      	orrs	r3, r2
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a90      	ldr	r2, [pc, #576]	@ (80095b8 <UART_SetConfig+0x2c8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d126      	bne.n	80093c8 <UART_SetConfig+0xd8>
 800937a:	4b90      	ldr	r3, [pc, #576]	@ (80095bc <UART_SetConfig+0x2cc>)
 800937c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	2b03      	cmp	r3, #3
 8009386:	d81b      	bhi.n	80093c0 <UART_SetConfig+0xd0>
 8009388:	a201      	add	r2, pc, #4	@ (adr r2, 8009390 <UART_SetConfig+0xa0>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093b1 	.word	0x080093b1
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093b9 	.word	0x080093b9
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093a6:	e116      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80093a8:	2302      	movs	r3, #2
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ae:	e112      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80093b0:	2304      	movs	r3, #4
 80093b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093b6:	e10e      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80093b8:	2308      	movs	r3, #8
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093be:	e10a      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80093c0:	2310      	movs	r3, #16
 80093c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c6:	e106      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a7c      	ldr	r2, [pc, #496]	@ (80095c0 <UART_SetConfig+0x2d0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d138      	bne.n	8009444 <UART_SetConfig+0x154>
 80093d2:	4b7a      	ldr	r3, [pc, #488]	@ (80095bc <UART_SetConfig+0x2cc>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d8:	f003 030c 	and.w	r3, r3, #12
 80093dc:	2b0c      	cmp	r3, #12
 80093de:	d82d      	bhi.n	800943c <UART_SetConfig+0x14c>
 80093e0:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <UART_SetConfig+0xf8>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	0800941d 	.word	0x0800941d
 80093ec:	0800943d 	.word	0x0800943d
 80093f0:	0800943d 	.word	0x0800943d
 80093f4:	0800943d 	.word	0x0800943d
 80093f8:	0800942d 	.word	0x0800942d
 80093fc:	0800943d 	.word	0x0800943d
 8009400:	0800943d 	.word	0x0800943d
 8009404:	0800943d 	.word	0x0800943d
 8009408:	08009425 	.word	0x08009425
 800940c:	0800943d 	.word	0x0800943d
 8009410:	0800943d 	.word	0x0800943d
 8009414:	0800943d 	.word	0x0800943d
 8009418:	08009435 	.word	0x08009435
 800941c:	2300      	movs	r3, #0
 800941e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009422:	e0d8      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009424:	2302      	movs	r3, #2
 8009426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800942a:	e0d4      	b.n	80095d6 <UART_SetConfig+0x2e6>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009432:	e0d0      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800943a:	e0cc      	b.n	80095d6 <UART_SetConfig+0x2e6>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009442:	e0c8      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a5e      	ldr	r2, [pc, #376]	@ (80095c4 <UART_SetConfig+0x2d4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d125      	bne.n	800949a <UART_SetConfig+0x1aa>
 800944e:	4b5b      	ldr	r3, [pc, #364]	@ (80095bc <UART_SetConfig+0x2cc>)
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009454:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009458:	2b30      	cmp	r3, #48	@ 0x30
 800945a:	d016      	beq.n	800948a <UART_SetConfig+0x19a>
 800945c:	2b30      	cmp	r3, #48	@ 0x30
 800945e:	d818      	bhi.n	8009492 <UART_SetConfig+0x1a2>
 8009460:	2b20      	cmp	r3, #32
 8009462:	d00a      	beq.n	800947a <UART_SetConfig+0x18a>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d814      	bhi.n	8009492 <UART_SetConfig+0x1a2>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <UART_SetConfig+0x182>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d008      	beq.n	8009482 <UART_SetConfig+0x192>
 8009470:	e00f      	b.n	8009492 <UART_SetConfig+0x1a2>
 8009472:	2300      	movs	r3, #0
 8009474:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009478:	e0ad      	b.n	80095d6 <UART_SetConfig+0x2e6>
 800947a:	2302      	movs	r3, #2
 800947c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009480:	e0a9      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009482:	2304      	movs	r3, #4
 8009484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009488:	e0a5      	b.n	80095d6 <UART_SetConfig+0x2e6>
 800948a:	2308      	movs	r3, #8
 800948c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009490:	e0a1      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009492:	2310      	movs	r3, #16
 8009494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009498:	e09d      	b.n	80095d6 <UART_SetConfig+0x2e6>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a4a      	ldr	r2, [pc, #296]	@ (80095c8 <UART_SetConfig+0x2d8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d125      	bne.n	80094f0 <UART_SetConfig+0x200>
 80094a4:	4b45      	ldr	r3, [pc, #276]	@ (80095bc <UART_SetConfig+0x2cc>)
 80094a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80094ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80094b0:	d016      	beq.n	80094e0 <UART_SetConfig+0x1f0>
 80094b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80094b4:	d818      	bhi.n	80094e8 <UART_SetConfig+0x1f8>
 80094b6:	2b80      	cmp	r3, #128	@ 0x80
 80094b8:	d00a      	beq.n	80094d0 <UART_SetConfig+0x1e0>
 80094ba:	2b80      	cmp	r3, #128	@ 0x80
 80094bc:	d814      	bhi.n	80094e8 <UART_SetConfig+0x1f8>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <UART_SetConfig+0x1d8>
 80094c2:	2b40      	cmp	r3, #64	@ 0x40
 80094c4:	d008      	beq.n	80094d8 <UART_SetConfig+0x1e8>
 80094c6:	e00f      	b.n	80094e8 <UART_SetConfig+0x1f8>
 80094c8:	2300      	movs	r3, #0
 80094ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ce:	e082      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80094d0:	2302      	movs	r3, #2
 80094d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094d6:	e07e      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094de:	e07a      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094e6:	e076      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ee:	e072      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a35      	ldr	r2, [pc, #212]	@ (80095cc <UART_SetConfig+0x2dc>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d12a      	bne.n	8009550 <UART_SetConfig+0x260>
 80094fa:	4b30      	ldr	r3, [pc, #192]	@ (80095bc <UART_SetConfig+0x2cc>)
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009508:	d01a      	beq.n	8009540 <UART_SetConfig+0x250>
 800950a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800950e:	d81b      	bhi.n	8009548 <UART_SetConfig+0x258>
 8009510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009514:	d00c      	beq.n	8009530 <UART_SetConfig+0x240>
 8009516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800951a:	d815      	bhi.n	8009548 <UART_SetConfig+0x258>
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <UART_SetConfig+0x238>
 8009520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009524:	d008      	beq.n	8009538 <UART_SetConfig+0x248>
 8009526:	e00f      	b.n	8009548 <UART_SetConfig+0x258>
 8009528:	2300      	movs	r3, #0
 800952a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800952e:	e052      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009530:	2302      	movs	r3, #2
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009536:	e04e      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800953e:	e04a      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009546:	e046      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800954e:	e042      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a17      	ldr	r2, [pc, #92]	@ (80095b4 <UART_SetConfig+0x2c4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d13a      	bne.n	80095d0 <UART_SetConfig+0x2e0>
 800955a:	4b18      	ldr	r3, [pc, #96]	@ (80095bc <UART_SetConfig+0x2cc>)
 800955c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009568:	d01a      	beq.n	80095a0 <UART_SetConfig+0x2b0>
 800956a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800956e:	d81b      	bhi.n	80095a8 <UART_SetConfig+0x2b8>
 8009570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009574:	d00c      	beq.n	8009590 <UART_SetConfig+0x2a0>
 8009576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800957a:	d815      	bhi.n	80095a8 <UART_SetConfig+0x2b8>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <UART_SetConfig+0x298>
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009584:	d008      	beq.n	8009598 <UART_SetConfig+0x2a8>
 8009586:	e00f      	b.n	80095a8 <UART_SetConfig+0x2b8>
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800958e:	e022      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009590:	2302      	movs	r3, #2
 8009592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009596:	e01e      	b.n	80095d6 <UART_SetConfig+0x2e6>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800959e:	e01a      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095a6:	e016      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095ae:	e012      	b.n	80095d6 <UART_SetConfig+0x2e6>
 80095b0:	efff69f3 	.word	0xefff69f3
 80095b4:	40008000 	.word	0x40008000
 80095b8:	40013800 	.word	0x40013800
 80095bc:	40021000 	.word	0x40021000
 80095c0:	40004400 	.word	0x40004400
 80095c4:	40004800 	.word	0x40004800
 80095c8:	40004c00 	.word	0x40004c00
 80095cc:	40005000 	.word	0x40005000
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a9f      	ldr	r2, [pc, #636]	@ (8009858 <UART_SetConfig+0x568>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d17a      	bne.n	80096d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d824      	bhi.n	8009632 <UART_SetConfig+0x342>
 80095e8:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <UART_SetConfig+0x300>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009615 	.word	0x08009615
 80095f4:	08009633 	.word	0x08009633
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009633 	.word	0x08009633
 8009600:	08009623 	.word	0x08009623
 8009604:	08009633 	.word	0x08009633
 8009608:	08009633 	.word	0x08009633
 800960c:	08009633 	.word	0x08009633
 8009610:	0800962b 	.word	0x0800962b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009614:	f7fb ffe6 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8009618:	61f8      	str	r0, [r7, #28]
        break;
 800961a:	e010      	b.n	800963e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800961c:	4b8f      	ldr	r3, [pc, #572]	@ (800985c <UART_SetConfig+0x56c>)
 800961e:	61fb      	str	r3, [r7, #28]
        break;
 8009620:	e00d      	b.n	800963e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009622:	f7fb ff47 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 8009626:	61f8      	str	r0, [r7, #28]
        break;
 8009628:	e009      	b.n	800963e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962e:	61fb      	str	r3, [r7, #28]
        break;
 8009630:	e005      	b.n	800963e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800963c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80fb 	beq.w	800983c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	4413      	add	r3, r2
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	429a      	cmp	r2, r3
 8009654:	d305      	bcc.n	8009662 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	429a      	cmp	r2, r3
 8009660:	d903      	bls.n	800966a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009668:	e0e8      	b.n	800983c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2200      	movs	r2, #0
 800966e:	461c      	mov	r4, r3
 8009670:	4615      	mov	r5, r2
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	022b      	lsls	r3, r5, #8
 800967c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009680:	0222      	lsls	r2, r4, #8
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	6849      	ldr	r1, [r1, #4]
 8009686:	0849      	lsrs	r1, r1, #1
 8009688:	2000      	movs	r0, #0
 800968a:	4688      	mov	r8, r1
 800968c:	4681      	mov	r9, r0
 800968e:	eb12 0a08 	adds.w	sl, r2, r8
 8009692:	eb43 0b09 	adc.w	fp, r3, r9
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a4:	4650      	mov	r0, sl
 80096a6:	4659      	mov	r1, fp
 80096a8:	f7f7 fafe 	bl	8000ca8 <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4613      	mov	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ba:	d308      	bcc.n	80096ce <UART_SetConfig+0x3de>
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096c2:	d204      	bcs.n	80096ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	60da      	str	r2, [r3, #12]
 80096cc:	e0b6      	b.n	800983c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80096d4:	e0b2      	b.n	800983c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096de:	d15e      	bne.n	800979e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80096e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d828      	bhi.n	800973a <UART_SetConfig+0x44a>
 80096e8:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <UART_SetConfig+0x400>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009715 	.word	0x08009715
 80096f4:	0800971d 	.word	0x0800971d
 80096f8:	08009725 	.word	0x08009725
 80096fc:	0800973b 	.word	0x0800973b
 8009700:	0800972b 	.word	0x0800972b
 8009704:	0800973b 	.word	0x0800973b
 8009708:	0800973b 	.word	0x0800973b
 800970c:	0800973b 	.word	0x0800973b
 8009710:	08009733 	.word	0x08009733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009714:	f7fb ff66 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8009718:	61f8      	str	r0, [r7, #28]
        break;
 800971a:	e014      	b.n	8009746 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800971c:	f7fb ff78 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8009720:	61f8      	str	r0, [r7, #28]
        break;
 8009722:	e010      	b.n	8009746 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009724:	4b4d      	ldr	r3, [pc, #308]	@ (800985c <UART_SetConfig+0x56c>)
 8009726:	61fb      	str	r3, [r7, #28]
        break;
 8009728:	e00d      	b.n	8009746 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800972a:	f7fb fec3 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 800972e:	61f8      	str	r0, [r7, #28]
        break;
 8009730:	e009      	b.n	8009746 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009736:	61fb      	str	r3, [r7, #28]
        break;
 8009738:	e005      	b.n	8009746 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d077      	beq.n	800983c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	005a      	lsls	r2, r3, #1
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	441a      	add	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b0f      	cmp	r3, #15
 8009766:	d916      	bls.n	8009796 <UART_SetConfig+0x4a6>
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800976e:	d212      	bcs.n	8009796 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	b29b      	uxth	r3, r3
 8009774:	f023 030f 	bic.w	r3, r3, #15
 8009778:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	085b      	lsrs	r3, r3, #1
 800977e:	b29b      	uxth	r3, r3
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	b29a      	uxth	r2, r3
 8009786:	8afb      	ldrh	r3, [r7, #22]
 8009788:	4313      	orrs	r3, r2
 800978a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	8afa      	ldrh	r2, [r7, #22]
 8009792:	60da      	str	r2, [r3, #12]
 8009794:	e052      	b.n	800983c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800979c:	e04e      	b.n	800983c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800979e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d827      	bhi.n	80097f6 <UART_SetConfig+0x506>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <UART_SetConfig+0x4bc>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	080097d9 	.word	0x080097d9
 80097b4:	080097e1 	.word	0x080097e1
 80097b8:	080097f7 	.word	0x080097f7
 80097bc:	080097e7 	.word	0x080097e7
 80097c0:	080097f7 	.word	0x080097f7
 80097c4:	080097f7 	.word	0x080097f7
 80097c8:	080097f7 	.word	0x080097f7
 80097cc:	080097ef 	.word	0x080097ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d0:	f7fb ff08 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 80097d4:	61f8      	str	r0, [r7, #28]
        break;
 80097d6:	e014      	b.n	8009802 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097d8:	f7fb ff1a 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 80097dc:	61f8      	str	r0, [r7, #28]
        break;
 80097de:	e010      	b.n	8009802 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097e0:	4b1e      	ldr	r3, [pc, #120]	@ (800985c <UART_SetConfig+0x56c>)
 80097e2:	61fb      	str	r3, [r7, #28]
        break;
 80097e4:	e00d      	b.n	8009802 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097e6:	f7fb fe65 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 80097ea:	61f8      	str	r0, [r7, #28]
        break;
 80097ec:	e009      	b.n	8009802 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097f2:	61fb      	str	r3, [r7, #28]
        break;
 80097f4:	e005      	b.n	8009802 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009800:	bf00      	nop
    }

    if (pclk != 0U)
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d019      	beq.n	800983c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	085a      	lsrs	r2, r3, #1
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	441a      	add	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	fbb2 f3f3 	udiv	r3, r2, r3
 800981a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d909      	bls.n	8009836 <UART_SetConfig+0x546>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009828:	d205      	bcs.n	8009836 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60da      	str	r2, [r3, #12]
 8009834:	e002      	b.n	800983c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009848:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	@ 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009856:	bf00      	nop
 8009858:	40008000 	.word	0x40008000
 800985c:	00f42400 	.word	0x00f42400

08009860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	f003 0308 	and.w	r3, r3, #8
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00a      	beq.n	800988a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	430a      	orrs	r2, r1
 80098aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f4:	f003 0310 	and.w	r3, r3, #16
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01a      	beq.n	8009976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800995e:	d10a      	bne.n	8009976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
  }
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b098      	sub	sp, #96	@ 0x60
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099b4:	f7f9 ff20 	bl	80037f8 <HAL_GetTick>
 80099b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d12e      	bne.n	8009a26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d0:	2200      	movs	r2, #0
 80099d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f88c 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d021      	beq.n	8009a26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e6      	bne.n	80099e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2220      	movs	r2, #32
 8009a18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e062      	b.n	8009aec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d149      	bne.n	8009ac8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f856 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d03c      	beq.n	8009ac8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	e853 3f00 	ldrex	r3, [r3]
 8009a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e6      	bne.n	8009a4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3308      	adds	r3, #8
 8009a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0301 	bic.w	r3, r3, #1
 8009a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aa0:	61fa      	str	r2, [r7, #28]
 8009aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	69b9      	ldr	r1, [r7, #24]
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	617b      	str	r3, [r7, #20]
   return(result);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e5      	bne.n	8009a80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e011      	b.n	8009aec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3758      	adds	r7, #88	@ 0x58
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	4613      	mov	r3, r2
 8009b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b04:	e04f      	b.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d04b      	beq.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0e:	f7f9 fe73 	bl	80037f8 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e04e      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d037      	beq.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b80      	cmp	r3, #128	@ 0x80
 8009b3a:	d034      	beq.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b40      	cmp	r3, #64	@ 0x40
 8009b40:	d031      	beq.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 0308 	and.w	r3, r3, #8
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d110      	bne.n	8009b72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2208      	movs	r2, #8
 8009b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f838 	bl	8009bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2208      	movs	r2, #8
 8009b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e029      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b80:	d111      	bne.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f81e 	bl	8009bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e00f      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	bf0c      	ite	eq
 8009bb6:	2301      	moveq	r3, #1
 8009bb8:	2300      	movne	r3, #0
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d0a0      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b095      	sub	sp, #84	@ 0x54
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3308      	adds	r3, #8
 8009c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e5      	bne.n	8009c08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d118      	bne.n	8009c76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f023 0310 	bic.w	r3, r3, #16
 8009c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	6979      	ldr	r1, [r7, #20]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e6      	bne.n	8009c44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c8a:	bf00      	nop
 8009c8c:	3754      	adds	r7, #84	@ 0x54
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <atof>:
 8009c96:	2100      	movs	r1, #0
 8009c98:	f000 be08 	b.w	800a8ac <strtod>

08009c9c <sulp>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	ec45 4b10 	vmov	d0, r4, r5
 8009ca6:	4616      	mov	r6, r2
 8009ca8:	f003 fc62 	bl	800d570 <__ulp>
 8009cac:	ec51 0b10 	vmov	r0, r1, d0
 8009cb0:	b17e      	cbz	r6, 8009cd2 <sulp+0x36>
 8009cb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dd09      	ble.n	8009cd2 <sulp+0x36>
 8009cbe:	051b      	lsls	r3, r3, #20
 8009cc0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009cc4:	2400      	movs	r4, #0
 8009cc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009cca:	4622      	mov	r2, r4
 8009ccc:	462b      	mov	r3, r5
 8009cce:	f7f6 fca3 	bl	8000618 <__aeabi_dmul>
 8009cd2:	ec41 0b10 	vmov	d0, r0, r1
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}

08009cd8 <_strtod_l>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	b09f      	sub	sp, #124	@ 0x7c
 8009cde:	460c      	mov	r4, r1
 8009ce0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ce6:	9005      	str	r0, [sp, #20]
 8009ce8:	f04f 0a00 	mov.w	sl, #0
 8009cec:	f04f 0b00 	mov.w	fp, #0
 8009cf0:	460a      	mov	r2, r1
 8009cf2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cf4:	7811      	ldrb	r1, [r2, #0]
 8009cf6:	292b      	cmp	r1, #43	@ 0x2b
 8009cf8:	d04a      	beq.n	8009d90 <_strtod_l+0xb8>
 8009cfa:	d838      	bhi.n	8009d6e <_strtod_l+0x96>
 8009cfc:	290d      	cmp	r1, #13
 8009cfe:	d832      	bhi.n	8009d66 <_strtod_l+0x8e>
 8009d00:	2908      	cmp	r1, #8
 8009d02:	d832      	bhi.n	8009d6a <_strtod_l+0x92>
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d03b      	beq.n	8009d80 <_strtod_l+0xa8>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d0e:	782a      	ldrb	r2, [r5, #0]
 8009d10:	2a30      	cmp	r2, #48	@ 0x30
 8009d12:	f040 80b3 	bne.w	8009e7c <_strtod_l+0x1a4>
 8009d16:	786a      	ldrb	r2, [r5, #1]
 8009d18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d1c:	2a58      	cmp	r2, #88	@ 0x58
 8009d1e:	d16e      	bne.n	8009dfe <_strtod_l+0x126>
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4a8e      	ldr	r2, [pc, #568]	@ (8009f64 <_strtod_l+0x28c>)
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d30:	a919      	add	r1, sp, #100	@ 0x64
 8009d32:	f002 fd0f 	bl	800c754 <__gethex>
 8009d36:	f010 060f 	ands.w	r6, r0, #15
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	d005      	beq.n	8009d4a <_strtod_l+0x72>
 8009d3e:	2e06      	cmp	r6, #6
 8009d40:	d128      	bne.n	8009d94 <_strtod_l+0xbc>
 8009d42:	3501      	adds	r5, #1
 8009d44:	2300      	movs	r3, #0
 8009d46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 858e 	bne.w	800a86e <_strtod_l+0xb96>
 8009d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d54:	b1cb      	cbz	r3, 8009d8a <_strtod_l+0xb2>
 8009d56:	4652      	mov	r2, sl
 8009d58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d5c:	ec43 2b10 	vmov	d0, r2, r3
 8009d60:	b01f      	add	sp, #124	@ 0x7c
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	2920      	cmp	r1, #32
 8009d68:	d1ce      	bne.n	8009d08 <_strtod_l+0x30>
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	e7c1      	b.n	8009cf2 <_strtod_l+0x1a>
 8009d6e:	292d      	cmp	r1, #45	@ 0x2d
 8009d70:	d1ca      	bne.n	8009d08 <_strtod_l+0x30>
 8009d72:	2101      	movs	r1, #1
 8009d74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009d76:	1c51      	adds	r1, r2, #1
 8009d78:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d7a:	7852      	ldrb	r2, [r2, #1]
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	d1c5      	bne.n	8009d0c <_strtod_l+0x34>
 8009d80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d82:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 8570 	bne.w	800a86a <_strtod_l+0xb92>
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	465b      	mov	r3, fp
 8009d8e:	e7e5      	b.n	8009d5c <_strtod_l+0x84>
 8009d90:	2100      	movs	r1, #0
 8009d92:	e7ef      	b.n	8009d74 <_strtod_l+0x9c>
 8009d94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d96:	b13a      	cbz	r2, 8009da8 <_strtod_l+0xd0>
 8009d98:	2135      	movs	r1, #53	@ 0x35
 8009d9a:	a81c      	add	r0, sp, #112	@ 0x70
 8009d9c:	f003 fce2 	bl	800d764 <__copybits>
 8009da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009da2:	9805      	ldr	r0, [sp, #20]
 8009da4:	f003 f8b0 	bl	800cf08 <_Bfree>
 8009da8:	3e01      	subs	r6, #1
 8009daa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009dac:	2e04      	cmp	r6, #4
 8009dae:	d806      	bhi.n	8009dbe <_strtod_l+0xe6>
 8009db0:	e8df f006 	tbb	[pc, r6]
 8009db4:	201d0314 	.word	0x201d0314
 8009db8:	14          	.byte	0x14
 8009db9:	00          	.byte	0x00
 8009dba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009dbe:	05e1      	lsls	r1, r4, #23
 8009dc0:	bf48      	it	mi
 8009dc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009dc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dca:	0d1b      	lsrs	r3, r3, #20
 8009dcc:	051b      	lsls	r3, r3, #20
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1bb      	bne.n	8009d4a <_strtod_l+0x72>
 8009dd2:	f001 fd6d 	bl	800b8b0 <__errno>
 8009dd6:	2322      	movs	r3, #34	@ 0x22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	e7b6      	b.n	8009d4a <_strtod_l+0x72>
 8009ddc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009de0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009de4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009de8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009dec:	e7e7      	b.n	8009dbe <_strtod_l+0xe6>
 8009dee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009f6c <_strtod_l+0x294>
 8009df2:	e7e4      	b.n	8009dbe <_strtod_l+0xe6>
 8009df4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009df8:	f04f 3aff 	mov.w	sl, #4294967295
 8009dfc:	e7df      	b.n	8009dbe <_strtod_l+0xe6>
 8009dfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b30      	cmp	r3, #48	@ 0x30
 8009e08:	d0f9      	beq.n	8009dfe <_strtod_l+0x126>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d09d      	beq.n	8009d4a <_strtod_l+0x72>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e16:	2300      	movs	r3, #0
 8009e18:	9308      	str	r3, [sp, #32]
 8009e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e1c:	461f      	mov	r7, r3
 8009e1e:	220a      	movs	r2, #10
 8009e20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e22:	7805      	ldrb	r5, [r0, #0]
 8009e24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e28:	b2d9      	uxtb	r1, r3
 8009e2a:	2909      	cmp	r1, #9
 8009e2c:	d928      	bls.n	8009e80 <_strtod_l+0x1a8>
 8009e2e:	494e      	ldr	r1, [pc, #312]	@ (8009f68 <_strtod_l+0x290>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	f001 fce0 	bl	800b7f6 <strncmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d032      	beq.n	8009ea0 <_strtod_l+0x1c8>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	462a      	mov	r2, r5
 8009e3e:	4681      	mov	r9, r0
 8009e40:	463d      	mov	r5, r7
 8009e42:	4603      	mov	r3, r0
 8009e44:	2a65      	cmp	r2, #101	@ 0x65
 8009e46:	d001      	beq.n	8009e4c <_strtod_l+0x174>
 8009e48:	2a45      	cmp	r2, #69	@ 0x45
 8009e4a:	d114      	bne.n	8009e76 <_strtod_l+0x19e>
 8009e4c:	b91d      	cbnz	r5, 8009e56 <_strtod_l+0x17e>
 8009e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e50:	4302      	orrs	r2, r0
 8009e52:	d095      	beq.n	8009d80 <_strtod_l+0xa8>
 8009e54:	2500      	movs	r5, #0
 8009e56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e58:	1c62      	adds	r2, r4, #1
 8009e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e5c:	7862      	ldrb	r2, [r4, #1]
 8009e5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e60:	d077      	beq.n	8009f52 <_strtod_l+0x27a>
 8009e62:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e64:	d07b      	beq.n	8009f5e <_strtod_l+0x286>
 8009e66:	f04f 0c00 	mov.w	ip, #0
 8009e6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e6e:	2909      	cmp	r1, #9
 8009e70:	f240 8082 	bls.w	8009f78 <_strtod_l+0x2a0>
 8009e74:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	e0a2      	b.n	8009fc2 <_strtod_l+0x2ea>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	e7c7      	b.n	8009e10 <_strtod_l+0x138>
 8009e80:	2f08      	cmp	r7, #8
 8009e82:	bfd5      	itete	le
 8009e84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009e86:	9908      	ldrgt	r1, [sp, #32]
 8009e88:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009e90:	f100 0001 	add.w	r0, r0, #1
 8009e94:	bfd4      	ite	le
 8009e96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009e98:	9308      	strgt	r3, [sp, #32]
 8009e9a:	3701      	adds	r7, #1
 8009e9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e9e:	e7bf      	b.n	8009e20 <_strtod_l+0x148>
 8009ea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ea6:	785a      	ldrb	r2, [r3, #1]
 8009ea8:	b37f      	cbz	r7, 8009f0a <_strtod_l+0x232>
 8009eaa:	4681      	mov	r9, r0
 8009eac:	463d      	mov	r5, r7
 8009eae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d912      	bls.n	8009edc <_strtod_l+0x204>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7c4      	b.n	8009e44 <_strtod_l+0x16c>
 8009eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ec0:	785a      	ldrb	r2, [r3, #1]
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	2a30      	cmp	r2, #48	@ 0x30
 8009ec6:	d0f8      	beq.n	8009eba <_strtod_l+0x1e2>
 8009ec8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	f200 84d3 	bhi.w	800a878 <_strtod_l+0xba0>
 8009ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ed4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ed6:	4681      	mov	r9, r0
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4605      	mov	r5, r0
 8009edc:	3a30      	subs	r2, #48	@ 0x30
 8009ede:	f100 0301 	add.w	r3, r0, #1
 8009ee2:	d02a      	beq.n	8009f3a <_strtod_l+0x262>
 8009ee4:	4499      	add	r9, r3
 8009ee6:	eb00 0c05 	add.w	ip, r0, r5
 8009eea:	462b      	mov	r3, r5
 8009eec:	210a      	movs	r1, #10
 8009eee:	4563      	cmp	r3, ip
 8009ef0:	d10d      	bne.n	8009f0e <_strtod_l+0x236>
 8009ef2:	1c69      	adds	r1, r5, #1
 8009ef4:	4401      	add	r1, r0
 8009ef6:	4428      	add	r0, r5
 8009ef8:	2808      	cmp	r0, #8
 8009efa:	dc16      	bgt.n	8009f2a <_strtod_l+0x252>
 8009efc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009efe:	230a      	movs	r3, #10
 8009f00:	fb03 2300 	mla	r3, r3, r0, r2
 8009f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f06:	2300      	movs	r3, #0
 8009f08:	e018      	b.n	8009f3c <_strtod_l+0x264>
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	e7da      	b.n	8009ec4 <_strtod_l+0x1ec>
 8009f0e:	2b08      	cmp	r3, #8
 8009f10:	f103 0301 	add.w	r3, r3, #1
 8009f14:	dc03      	bgt.n	8009f1e <_strtod_l+0x246>
 8009f16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f18:	434e      	muls	r6, r1
 8009f1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009f1c:	e7e7      	b.n	8009eee <_strtod_l+0x216>
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	bfde      	ittt	le
 8009f22:	9e08      	ldrle	r6, [sp, #32]
 8009f24:	434e      	mulle	r6, r1
 8009f26:	9608      	strle	r6, [sp, #32]
 8009f28:	e7e1      	b.n	8009eee <_strtod_l+0x216>
 8009f2a:	280f      	cmp	r0, #15
 8009f2c:	dceb      	bgt.n	8009f06 <_strtod_l+0x22e>
 8009f2e:	9808      	ldr	r0, [sp, #32]
 8009f30:	230a      	movs	r3, #10
 8009f32:	fb03 2300 	mla	r3, r3, r0, r2
 8009f36:	9308      	str	r3, [sp, #32]
 8009f38:	e7e5      	b.n	8009f06 <_strtod_l+0x22e>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f3e:	1c50      	adds	r0, r2, #1
 8009f40:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f42:	7852      	ldrb	r2, [r2, #1]
 8009f44:	4618      	mov	r0, r3
 8009f46:	460d      	mov	r5, r1
 8009f48:	e7b1      	b.n	8009eae <_strtod_l+0x1d6>
 8009f4a:	f04f 0900 	mov.w	r9, #0
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e77d      	b.n	8009e4e <_strtod_l+0x176>
 8009f52:	f04f 0c00 	mov.w	ip, #0
 8009f56:	1ca2      	adds	r2, r4, #2
 8009f58:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f5a:	78a2      	ldrb	r2, [r4, #2]
 8009f5c:	e785      	b.n	8009e6a <_strtod_l+0x192>
 8009f5e:	f04f 0c01 	mov.w	ip, #1
 8009f62:	e7f8      	b.n	8009f56 <_strtod_l+0x27e>
 8009f64:	0800e52c 	.word	0x0800e52c
 8009f68:	0800e514 	.word	0x0800e514
 8009f6c:	7ff00000 	.word	0x7ff00000
 8009f70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f72:	1c51      	adds	r1, r2, #1
 8009f74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f76:	7852      	ldrb	r2, [r2, #1]
 8009f78:	2a30      	cmp	r2, #48	@ 0x30
 8009f7a:	d0f9      	beq.n	8009f70 <_strtod_l+0x298>
 8009f7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f80:	2908      	cmp	r1, #8
 8009f82:	f63f af78 	bhi.w	8009e76 <_strtod_l+0x19e>
 8009f86:	3a30      	subs	r2, #48	@ 0x30
 8009f88:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f8e:	f04f 080a 	mov.w	r8, #10
 8009f92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f94:	1c56      	adds	r6, r2, #1
 8009f96:	9619      	str	r6, [sp, #100]	@ 0x64
 8009f98:	7852      	ldrb	r2, [r2, #1]
 8009f9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009f9e:	f1be 0f09 	cmp.w	lr, #9
 8009fa2:	d939      	bls.n	800a018 <_strtod_l+0x340>
 8009fa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fa6:	1a76      	subs	r6, r6, r1
 8009fa8:	2e08      	cmp	r6, #8
 8009faa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009fae:	dc03      	bgt.n	8009fb8 <_strtod_l+0x2e0>
 8009fb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009fb2:	4588      	cmp	r8, r1
 8009fb4:	bfa8      	it	ge
 8009fb6:	4688      	movge	r8, r1
 8009fb8:	f1bc 0f00 	cmp.w	ip, #0
 8009fbc:	d001      	beq.n	8009fc2 <_strtod_l+0x2ea>
 8009fbe:	f1c8 0800 	rsb	r8, r8, #0
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	d14e      	bne.n	800a064 <_strtod_l+0x38c>
 8009fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fc8:	4308      	orrs	r0, r1
 8009fca:	f47f aebe 	bne.w	8009d4a <_strtod_l+0x72>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f47f aed6 	bne.w	8009d80 <_strtod_l+0xa8>
 8009fd4:	2a69      	cmp	r2, #105	@ 0x69
 8009fd6:	d028      	beq.n	800a02a <_strtod_l+0x352>
 8009fd8:	dc25      	bgt.n	800a026 <_strtod_l+0x34e>
 8009fda:	2a49      	cmp	r2, #73	@ 0x49
 8009fdc:	d025      	beq.n	800a02a <_strtod_l+0x352>
 8009fde:	2a4e      	cmp	r2, #78	@ 0x4e
 8009fe0:	f47f aece 	bne.w	8009d80 <_strtod_l+0xa8>
 8009fe4:	499b      	ldr	r1, [pc, #620]	@ (800a254 <_strtod_l+0x57c>)
 8009fe6:	a819      	add	r0, sp, #100	@ 0x64
 8009fe8:	f002 fdd6 	bl	800cb98 <__match>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	f43f aec7 	beq.w	8009d80 <_strtod_l+0xa8>
 8009ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b28      	cmp	r3, #40	@ 0x28
 8009ff8:	d12e      	bne.n	800a058 <_strtod_l+0x380>
 8009ffa:	4997      	ldr	r1, [pc, #604]	@ (800a258 <_strtod_l+0x580>)
 8009ffc:	aa1c      	add	r2, sp, #112	@ 0x70
 8009ffe:	a819      	add	r0, sp, #100	@ 0x64
 800a000:	f002 fdde 	bl	800cbc0 <__hexnan>
 800a004:	2805      	cmp	r0, #5
 800a006:	d127      	bne.n	800a058 <_strtod_l+0x380>
 800a008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a00a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a00e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a012:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a016:	e698      	b.n	8009d4a <_strtod_l+0x72>
 800a018:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a01a:	fb08 2101 	mla	r1, r8, r1, r2
 800a01e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a022:	920e      	str	r2, [sp, #56]	@ 0x38
 800a024:	e7b5      	b.n	8009f92 <_strtod_l+0x2ba>
 800a026:	2a6e      	cmp	r2, #110	@ 0x6e
 800a028:	e7da      	b.n	8009fe0 <_strtod_l+0x308>
 800a02a:	498c      	ldr	r1, [pc, #560]	@ (800a25c <_strtod_l+0x584>)
 800a02c:	a819      	add	r0, sp, #100	@ 0x64
 800a02e:	f002 fdb3 	bl	800cb98 <__match>
 800a032:	2800      	cmp	r0, #0
 800a034:	f43f aea4 	beq.w	8009d80 <_strtod_l+0xa8>
 800a038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a03a:	4989      	ldr	r1, [pc, #548]	@ (800a260 <_strtod_l+0x588>)
 800a03c:	3b01      	subs	r3, #1
 800a03e:	a819      	add	r0, sp, #100	@ 0x64
 800a040:	9319      	str	r3, [sp, #100]	@ 0x64
 800a042:	f002 fda9 	bl	800cb98 <__match>
 800a046:	b910      	cbnz	r0, 800a04e <_strtod_l+0x376>
 800a048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a04a:	3301      	adds	r3, #1
 800a04c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a04e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a270 <_strtod_l+0x598>
 800a052:	f04f 0a00 	mov.w	sl, #0
 800a056:	e678      	b.n	8009d4a <_strtod_l+0x72>
 800a058:	4882      	ldr	r0, [pc, #520]	@ (800a264 <_strtod_l+0x58c>)
 800a05a:	f001 fc6d 	bl	800b938 <nan>
 800a05e:	ec5b ab10 	vmov	sl, fp, d0
 800a062:	e672      	b.n	8009d4a <_strtod_l+0x72>
 800a064:	eba8 0309 	sub.w	r3, r8, r9
 800a068:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a06a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a06c:	2f00      	cmp	r7, #0
 800a06e:	bf08      	it	eq
 800a070:	462f      	moveq	r7, r5
 800a072:	2d10      	cmp	r5, #16
 800a074:	462c      	mov	r4, r5
 800a076:	bfa8      	it	ge
 800a078:	2410      	movge	r4, #16
 800a07a:	f7f6 fa53 	bl	8000524 <__aeabi_ui2d>
 800a07e:	2d09      	cmp	r5, #9
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	dc13      	bgt.n	800a0ae <_strtod_l+0x3d6>
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f43f ae5e 	beq.w	8009d4a <_strtod_l+0x72>
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	dd78      	ble.n	800a184 <_strtod_l+0x4ac>
 800a092:	2b16      	cmp	r3, #22
 800a094:	dc5f      	bgt.n	800a156 <_strtod_l+0x47e>
 800a096:	4974      	ldr	r1, [pc, #464]	@ (800a268 <_strtod_l+0x590>)
 800a098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a0:	4652      	mov	r2, sl
 800a0a2:	465b      	mov	r3, fp
 800a0a4:	f7f6 fab8 	bl	8000618 <__aeabi_dmul>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	e64d      	b.n	8009d4a <_strtod_l+0x72>
 800a0ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a268 <_strtod_l+0x590>)
 800a0b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a0b8:	f7f6 faae 	bl	8000618 <__aeabi_dmul>
 800a0bc:	4682      	mov	sl, r0
 800a0be:	9808      	ldr	r0, [sp, #32]
 800a0c0:	468b      	mov	fp, r1
 800a0c2:	f7f6 fa2f 	bl	8000524 <__aeabi_ui2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	f7f6 f8ed 	bl	80002ac <__adddf3>
 800a0d2:	2d0f      	cmp	r5, #15
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	468b      	mov	fp, r1
 800a0d8:	ddd5      	ble.n	800a086 <_strtod_l+0x3ae>
 800a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0dc:	1b2c      	subs	r4, r5, r4
 800a0de:	441c      	add	r4, r3
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	f340 8096 	ble.w	800a212 <_strtod_l+0x53a>
 800a0e6:	f014 030f 	ands.w	r3, r4, #15
 800a0ea:	d00a      	beq.n	800a102 <_strtod_l+0x42a>
 800a0ec:	495e      	ldr	r1, [pc, #376]	@ (800a268 <_strtod_l+0x590>)
 800a0ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fa:	f7f6 fa8d 	bl	8000618 <__aeabi_dmul>
 800a0fe:	4682      	mov	sl, r0
 800a100:	468b      	mov	fp, r1
 800a102:	f034 040f 	bics.w	r4, r4, #15
 800a106:	d073      	beq.n	800a1f0 <_strtod_l+0x518>
 800a108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a10c:	dd48      	ble.n	800a1a0 <_strtod_l+0x4c8>
 800a10e:	2400      	movs	r4, #0
 800a110:	46a0      	mov	r8, r4
 800a112:	940a      	str	r4, [sp, #40]	@ 0x28
 800a114:	46a1      	mov	r9, r4
 800a116:	9a05      	ldr	r2, [sp, #20]
 800a118:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a270 <_strtod_l+0x598>
 800a11c:	2322      	movs	r3, #34	@ 0x22
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	f04f 0a00 	mov.w	sl, #0
 800a124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	f43f ae0f 	beq.w	8009d4a <_strtod_l+0x72>
 800a12c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f002 feea 	bl	800cf08 <_Bfree>
 800a134:	9805      	ldr	r0, [sp, #20]
 800a136:	4649      	mov	r1, r9
 800a138:	f002 fee6 	bl	800cf08 <_Bfree>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	4641      	mov	r1, r8
 800a140:	f002 fee2 	bl	800cf08 <_Bfree>
 800a144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a146:	9805      	ldr	r0, [sp, #20]
 800a148:	f002 fede 	bl	800cf08 <_Bfree>
 800a14c:	9805      	ldr	r0, [sp, #20]
 800a14e:	4621      	mov	r1, r4
 800a150:	f002 feda 	bl	800cf08 <_Bfree>
 800a154:	e5f9      	b.n	8009d4a <_strtod_l+0x72>
 800a156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a15c:	4293      	cmp	r3, r2
 800a15e:	dbbc      	blt.n	800a0da <_strtod_l+0x402>
 800a160:	4c41      	ldr	r4, [pc, #260]	@ (800a268 <_strtod_l+0x590>)
 800a162:	f1c5 050f 	rsb	r5, r5, #15
 800a166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a16a:	4652      	mov	r2, sl
 800a16c:	465b      	mov	r3, fp
 800a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a172:	f7f6 fa51 	bl	8000618 <__aeabi_dmul>
 800a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a178:	1b5d      	subs	r5, r3, r5
 800a17a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a17e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a182:	e78f      	b.n	800a0a4 <_strtod_l+0x3cc>
 800a184:	3316      	adds	r3, #22
 800a186:	dba8      	blt.n	800a0da <_strtod_l+0x402>
 800a188:	4b37      	ldr	r3, [pc, #220]	@ (800a268 <_strtod_l+0x590>)
 800a18a:	eba9 0808 	sub.w	r8, r9, r8
 800a18e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a192:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a196:	4650      	mov	r0, sl
 800a198:	4659      	mov	r1, fp
 800a19a:	f7f6 fb67 	bl	800086c <__aeabi_ddiv>
 800a19e:	e783      	b.n	800a0a8 <_strtod_l+0x3d0>
 800a1a0:	4b32      	ldr	r3, [pc, #200]	@ (800a26c <_strtod_l+0x594>)
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	1124      	asrs	r4, r4, #4
 800a1a8:	4650      	mov	r0, sl
 800a1aa:	4659      	mov	r1, fp
 800a1ac:	461e      	mov	r6, r3
 800a1ae:	2c01      	cmp	r4, #1
 800a1b0:	dc21      	bgt.n	800a1f6 <_strtod_l+0x51e>
 800a1b2:	b10b      	cbz	r3, 800a1b8 <_strtod_l+0x4e0>
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	468b      	mov	fp, r1
 800a1b8:	492c      	ldr	r1, [pc, #176]	@ (800a26c <_strtod_l+0x594>)
 800a1ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a1be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a1c2:	4652      	mov	r2, sl
 800a1c4:	465b      	mov	r3, fp
 800a1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ca:	f7f6 fa25 	bl	8000618 <__aeabi_dmul>
 800a1ce:	4b28      	ldr	r3, [pc, #160]	@ (800a270 <_strtod_l+0x598>)
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	400b      	ands	r3, r1
 800a1d4:	4927      	ldr	r1, [pc, #156]	@ (800a274 <_strtod_l+0x59c>)
 800a1d6:	428b      	cmp	r3, r1
 800a1d8:	4682      	mov	sl, r0
 800a1da:	d898      	bhi.n	800a10e <_strtod_l+0x436>
 800a1dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf86      	itte	hi
 800a1e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a278 <_strtod_l+0x5a0>
 800a1e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9308      	str	r3, [sp, #32]
 800a1f4:	e07a      	b.n	800a2ec <_strtod_l+0x614>
 800a1f6:	07e2      	lsls	r2, r4, #31
 800a1f8:	d505      	bpl.n	800a206 <_strtod_l+0x52e>
 800a1fa:	9b08      	ldr	r3, [sp, #32]
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 fa0a 	bl	8000618 <__aeabi_dmul>
 800a204:	2301      	movs	r3, #1
 800a206:	9a08      	ldr	r2, [sp, #32]
 800a208:	3208      	adds	r2, #8
 800a20a:	3601      	adds	r6, #1
 800a20c:	1064      	asrs	r4, r4, #1
 800a20e:	9208      	str	r2, [sp, #32]
 800a210:	e7cd      	b.n	800a1ae <_strtod_l+0x4d6>
 800a212:	d0ed      	beq.n	800a1f0 <_strtod_l+0x518>
 800a214:	4264      	negs	r4, r4
 800a216:	f014 020f 	ands.w	r2, r4, #15
 800a21a:	d00a      	beq.n	800a232 <_strtod_l+0x55a>
 800a21c:	4b12      	ldr	r3, [pc, #72]	@ (800a268 <_strtod_l+0x590>)
 800a21e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a222:	4650      	mov	r0, sl
 800a224:	4659      	mov	r1, fp
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 fb1f 	bl	800086c <__aeabi_ddiv>
 800a22e:	4682      	mov	sl, r0
 800a230:	468b      	mov	fp, r1
 800a232:	1124      	asrs	r4, r4, #4
 800a234:	d0dc      	beq.n	800a1f0 <_strtod_l+0x518>
 800a236:	2c1f      	cmp	r4, #31
 800a238:	dd20      	ble.n	800a27c <_strtod_l+0x5a4>
 800a23a:	2400      	movs	r4, #0
 800a23c:	46a0      	mov	r8, r4
 800a23e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a240:	46a1      	mov	r9, r4
 800a242:	9a05      	ldr	r2, [sp, #20]
 800a244:	2322      	movs	r3, #34	@ 0x22
 800a246:	f04f 0a00 	mov.w	sl, #0
 800a24a:	f04f 0b00 	mov.w	fp, #0
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	e768      	b.n	800a124 <_strtod_l+0x44c>
 800a252:	bf00      	nop
 800a254:	0800e575 	.word	0x0800e575
 800a258:	0800e518 	.word	0x0800e518
 800a25c:	0800e56d 	.word	0x0800e56d
 800a260:	0800e5ac 	.word	0x0800e5ac
 800a264:	0800e93d 	.word	0x0800e93d
 800a268:	0800e728 	.word	0x0800e728
 800a26c:	0800e700 	.word	0x0800e700
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	7ca00000 	.word	0x7ca00000
 800a278:	7fefffff 	.word	0x7fefffff
 800a27c:	f014 0310 	ands.w	r3, r4, #16
 800a280:	bf18      	it	ne
 800a282:	236a      	movne	r3, #106	@ 0x6a
 800a284:	4ea9      	ldr	r6, [pc, #676]	@ (800a52c <_strtod_l+0x854>)
 800a286:	9308      	str	r3, [sp, #32]
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	2300      	movs	r3, #0
 800a28e:	07e2      	lsls	r2, r4, #31
 800a290:	d504      	bpl.n	800a29c <_strtod_l+0x5c4>
 800a292:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a296:	f7f6 f9bf 	bl	8000618 <__aeabi_dmul>
 800a29a:	2301      	movs	r3, #1
 800a29c:	1064      	asrs	r4, r4, #1
 800a29e:	f106 0608 	add.w	r6, r6, #8
 800a2a2:	d1f4      	bne.n	800a28e <_strtod_l+0x5b6>
 800a2a4:	b10b      	cbz	r3, 800a2aa <_strtod_l+0x5d2>
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	468b      	mov	fp, r1
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	b1b3      	cbz	r3, 800a2dc <_strtod_l+0x604>
 800a2ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	dd0f      	ble.n	800a2dc <_strtod_l+0x604>
 800a2bc:	2b1f      	cmp	r3, #31
 800a2be:	dd55      	ble.n	800a36c <_strtod_l+0x694>
 800a2c0:	2b34      	cmp	r3, #52	@ 0x34
 800a2c2:	bfde      	ittt	le
 800a2c4:	f04f 33ff 	movle.w	r3, #4294967295
 800a2c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a2cc:	4093      	lslle	r3, r2
 800a2ce:	f04f 0a00 	mov.w	sl, #0
 800a2d2:	bfcc      	ite	gt
 800a2d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a2d8:	ea03 0b01 	andle.w	fp, r3, r1
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	f7f6 fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d1a6      	bne.n	800a23a <_strtod_l+0x562>
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2f2:	9805      	ldr	r0, [sp, #20]
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	463a      	mov	r2, r7
 800a2f8:	f002 fe6e 	bl	800cfd8 <__s2b>
 800a2fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f af05 	beq.w	800a10e <_strtod_l+0x436>
 800a304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a306:	2a00      	cmp	r2, #0
 800a308:	eba9 0308 	sub.w	r3, r9, r8
 800a30c:	bfa8      	it	ge
 800a30e:	2300      	movge	r3, #0
 800a310:	9312      	str	r3, [sp, #72]	@ 0x48
 800a312:	2400      	movs	r4, #0
 800a314:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a318:	9316      	str	r3, [sp, #88]	@ 0x58
 800a31a:	46a0      	mov	r8, r4
 800a31c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a31e:	9805      	ldr	r0, [sp, #20]
 800a320:	6859      	ldr	r1, [r3, #4]
 800a322:	f002 fdb1 	bl	800ce88 <_Balloc>
 800a326:	4681      	mov	r9, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f aef4 	beq.w	800a116 <_strtod_l+0x43e>
 800a32e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a330:	691a      	ldr	r2, [r3, #16]
 800a332:	3202      	adds	r2, #2
 800a334:	f103 010c 	add.w	r1, r3, #12
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	300c      	adds	r0, #12
 800a33c:	f001 faed 	bl	800b91a <memcpy>
 800a340:	ec4b ab10 	vmov	d0, sl, fp
 800a344:	9805      	ldr	r0, [sp, #20]
 800a346:	aa1c      	add	r2, sp, #112	@ 0x70
 800a348:	a91b      	add	r1, sp, #108	@ 0x6c
 800a34a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a34e:	f003 f97f 	bl	800d650 <__d2b>
 800a352:	901a      	str	r0, [sp, #104]	@ 0x68
 800a354:	2800      	cmp	r0, #0
 800a356:	f43f aede 	beq.w	800a116 <_strtod_l+0x43e>
 800a35a:	9805      	ldr	r0, [sp, #20]
 800a35c:	2101      	movs	r1, #1
 800a35e:	f002 fed1 	bl	800d104 <__i2b>
 800a362:	4680      	mov	r8, r0
 800a364:	b948      	cbnz	r0, 800a37a <_strtod_l+0x6a2>
 800a366:	f04f 0800 	mov.w	r8, #0
 800a36a:	e6d4      	b.n	800a116 <_strtod_l+0x43e>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	ea03 0a0a 	and.w	sl, r3, sl
 800a378:	e7b0      	b.n	800a2dc <_strtod_l+0x604>
 800a37a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a37c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a37e:	2d00      	cmp	r5, #0
 800a380:	bfab      	itete	ge
 800a382:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a384:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a386:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a388:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a38a:	bfac      	ite	ge
 800a38c:	18ef      	addge	r7, r5, r3
 800a38e:	1b5e      	sublt	r6, r3, r5
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	1aed      	subs	r5, r5, r3
 800a394:	4415      	add	r5, r2
 800a396:	4b66      	ldr	r3, [pc, #408]	@ (800a530 <_strtod_l+0x858>)
 800a398:	3d01      	subs	r5, #1
 800a39a:	429d      	cmp	r5, r3
 800a39c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a3a0:	da50      	bge.n	800a444 <_strtod_l+0x76c>
 800a3a2:	1b5b      	subs	r3, r3, r5
 800a3a4:	2b1f      	cmp	r3, #31
 800a3a6:	eba2 0203 	sub.w	r2, r2, r3
 800a3aa:	f04f 0101 	mov.w	r1, #1
 800a3ae:	dc3d      	bgt.n	800a42c <_strtod_l+0x754>
 800a3b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3ba:	18bd      	adds	r5, r7, r2
 800a3bc:	9b08      	ldr	r3, [sp, #32]
 800a3be:	42af      	cmp	r7, r5
 800a3c0:	4416      	add	r6, r2
 800a3c2:	441e      	add	r6, r3
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	bfa8      	it	ge
 800a3c8:	462b      	movge	r3, r5
 800a3ca:	42b3      	cmp	r3, r6
 800a3cc:	bfa8      	it	ge
 800a3ce:	4633      	movge	r3, r6
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bfc2      	ittt	gt
 800a3d4:	1aed      	subgt	r5, r5, r3
 800a3d6:	1af6      	subgt	r6, r6, r3
 800a3d8:	1aff      	subgt	r7, r7, r3
 800a3da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dd16      	ble.n	800a40e <_strtod_l+0x736>
 800a3e0:	4641      	mov	r1, r8
 800a3e2:	9805      	ldr	r0, [sp, #20]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	f002 ff4d 	bl	800d284 <__pow5mult>
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d0ba      	beq.n	800a366 <_strtod_l+0x68e>
 800a3f0:	4601      	mov	r1, r0
 800a3f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3f4:	9805      	ldr	r0, [sp, #20]
 800a3f6:	f002 fe9b 	bl	800d130 <__multiply>
 800a3fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f43f ae8a 	beq.w	800a116 <_strtod_l+0x43e>
 800a402:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a404:	9805      	ldr	r0, [sp, #20]
 800a406:	f002 fd7f 	bl	800cf08 <_Bfree>
 800a40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a40e:	2d00      	cmp	r5, #0
 800a410:	dc1d      	bgt.n	800a44e <_strtod_l+0x776>
 800a412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	dd23      	ble.n	800a460 <_strtod_l+0x788>
 800a418:	4649      	mov	r1, r9
 800a41a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	f002 ff31 	bl	800d284 <__pow5mult>
 800a422:	4681      	mov	r9, r0
 800a424:	b9e0      	cbnz	r0, 800a460 <_strtod_l+0x788>
 800a426:	f04f 0900 	mov.w	r9, #0
 800a42a:	e674      	b.n	800a116 <_strtod_l+0x43e>
 800a42c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a430:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a434:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a438:	35e2      	adds	r5, #226	@ 0xe2
 800a43a:	fa01 f305 	lsl.w	r3, r1, r5
 800a43e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a440:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a442:	e7ba      	b.n	800a3ba <_strtod_l+0x6e2>
 800a444:	2300      	movs	r3, #0
 800a446:	9310      	str	r3, [sp, #64]	@ 0x40
 800a448:	2301      	movs	r3, #1
 800a44a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a44c:	e7b5      	b.n	800a3ba <_strtod_l+0x6e2>
 800a44e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a450:	9805      	ldr	r0, [sp, #20]
 800a452:	462a      	mov	r2, r5
 800a454:	f002 ff70 	bl	800d338 <__lshift>
 800a458:	901a      	str	r0, [sp, #104]	@ 0x68
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1d9      	bne.n	800a412 <_strtod_l+0x73a>
 800a45e:	e65a      	b.n	800a116 <_strtod_l+0x43e>
 800a460:	2e00      	cmp	r6, #0
 800a462:	dd07      	ble.n	800a474 <_strtod_l+0x79c>
 800a464:	4649      	mov	r1, r9
 800a466:	9805      	ldr	r0, [sp, #20]
 800a468:	4632      	mov	r2, r6
 800a46a:	f002 ff65 	bl	800d338 <__lshift>
 800a46e:	4681      	mov	r9, r0
 800a470:	2800      	cmp	r0, #0
 800a472:	d0d8      	beq.n	800a426 <_strtod_l+0x74e>
 800a474:	2f00      	cmp	r7, #0
 800a476:	dd08      	ble.n	800a48a <_strtod_l+0x7b2>
 800a478:	4641      	mov	r1, r8
 800a47a:	9805      	ldr	r0, [sp, #20]
 800a47c:	463a      	mov	r2, r7
 800a47e:	f002 ff5b 	bl	800d338 <__lshift>
 800a482:	4680      	mov	r8, r0
 800a484:	2800      	cmp	r0, #0
 800a486:	f43f ae46 	beq.w	800a116 <_strtod_l+0x43e>
 800a48a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a48c:	9805      	ldr	r0, [sp, #20]
 800a48e:	464a      	mov	r2, r9
 800a490:	f002 ffda 	bl	800d448 <__mdiff>
 800a494:	4604      	mov	r4, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	f43f ae3d 	beq.w	800a116 <_strtod_l+0x43e>
 800a49c:	68c3      	ldr	r3, [r0, #12]
 800a49e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60c3      	str	r3, [r0, #12]
 800a4a4:	4641      	mov	r1, r8
 800a4a6:	f002 ffb3 	bl	800d410 <__mcmp>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	da46      	bge.n	800a53c <_strtod_l+0x864>
 800a4ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4b0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4b4:	d16c      	bne.n	800a590 <_strtod_l+0x8b8>
 800a4b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d168      	bne.n	800a590 <_strtod_l+0x8b8>
 800a4be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4c2:	0d1b      	lsrs	r3, r3, #20
 800a4c4:	051b      	lsls	r3, r3, #20
 800a4c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4ca:	d961      	bls.n	800a590 <_strtod_l+0x8b8>
 800a4cc:	6963      	ldr	r3, [r4, #20]
 800a4ce:	b913      	cbnz	r3, 800a4d6 <_strtod_l+0x7fe>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	dd5c      	ble.n	800a590 <_strtod_l+0x8b8>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	2201      	movs	r2, #1
 800a4da:	9805      	ldr	r0, [sp, #20]
 800a4dc:	f002 ff2c 	bl	800d338 <__lshift>
 800a4e0:	4641      	mov	r1, r8
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	f002 ff94 	bl	800d410 <__mcmp>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	dd51      	ble.n	800a590 <_strtod_l+0x8b8>
 800a4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4f0:	9a08      	ldr	r2, [sp, #32]
 800a4f2:	0d1b      	lsrs	r3, r3, #20
 800a4f4:	051b      	lsls	r3, r3, #20
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	d06b      	beq.n	800a5d2 <_strtod_l+0x8fa>
 800a4fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4fe:	d868      	bhi.n	800a5d2 <_strtod_l+0x8fa>
 800a500:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a504:	f67f ae9d 	bls.w	800a242 <_strtod_l+0x56a>
 800a508:	4b0a      	ldr	r3, [pc, #40]	@ (800a534 <_strtod_l+0x85c>)
 800a50a:	4650      	mov	r0, sl
 800a50c:	4659      	mov	r1, fp
 800a50e:	2200      	movs	r2, #0
 800a510:	f7f6 f882 	bl	8000618 <__aeabi_dmul>
 800a514:	4b08      	ldr	r3, [pc, #32]	@ (800a538 <_strtod_l+0x860>)
 800a516:	400b      	ands	r3, r1
 800a518:	4682      	mov	sl, r0
 800a51a:	468b      	mov	fp, r1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f47f ae05 	bne.w	800a12c <_strtod_l+0x454>
 800a522:	9a05      	ldr	r2, [sp, #20]
 800a524:	2322      	movs	r3, #34	@ 0x22
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	e600      	b.n	800a12c <_strtod_l+0x454>
 800a52a:	bf00      	nop
 800a52c:	0800e540 	.word	0x0800e540
 800a530:	fffffc02 	.word	0xfffffc02
 800a534:	39500000 	.word	0x39500000
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a540:	d165      	bne.n	800a60e <_strtod_l+0x936>
 800a542:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a548:	b35a      	cbz	r2, 800a5a2 <_strtod_l+0x8ca>
 800a54a:	4a9f      	ldr	r2, [pc, #636]	@ (800a7c8 <_strtod_l+0xaf0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d12b      	bne.n	800a5a8 <_strtod_l+0x8d0>
 800a550:	9b08      	ldr	r3, [sp, #32]
 800a552:	4651      	mov	r1, sl
 800a554:	b303      	cbz	r3, 800a598 <_strtod_l+0x8c0>
 800a556:	4b9d      	ldr	r3, [pc, #628]	@ (800a7cc <_strtod_l+0xaf4>)
 800a558:	465a      	mov	r2, fp
 800a55a:	4013      	ands	r3, r2
 800a55c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a560:	f04f 32ff 	mov.w	r2, #4294967295
 800a564:	d81b      	bhi.n	800a59e <_strtod_l+0x8c6>
 800a566:	0d1b      	lsrs	r3, r3, #20
 800a568:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a56c:	fa02 f303 	lsl.w	r3, r2, r3
 800a570:	4299      	cmp	r1, r3
 800a572:	d119      	bne.n	800a5a8 <_strtod_l+0x8d0>
 800a574:	4b96      	ldr	r3, [pc, #600]	@ (800a7d0 <_strtod_l+0xaf8>)
 800a576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a578:	429a      	cmp	r2, r3
 800a57a:	d102      	bne.n	800a582 <_strtod_l+0x8aa>
 800a57c:	3101      	adds	r1, #1
 800a57e:	f43f adca 	beq.w	800a116 <_strtod_l+0x43e>
 800a582:	4b92      	ldr	r3, [pc, #584]	@ (800a7cc <_strtod_l+0xaf4>)
 800a584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a586:	401a      	ands	r2, r3
 800a588:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a58c:	f04f 0a00 	mov.w	sl, #0
 800a590:	9b08      	ldr	r3, [sp, #32]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1b8      	bne.n	800a508 <_strtod_l+0x830>
 800a596:	e5c9      	b.n	800a12c <_strtod_l+0x454>
 800a598:	f04f 33ff 	mov.w	r3, #4294967295
 800a59c:	e7e8      	b.n	800a570 <_strtod_l+0x898>
 800a59e:	4613      	mov	r3, r2
 800a5a0:	e7e6      	b.n	800a570 <_strtod_l+0x898>
 800a5a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a5a6:	d0a1      	beq.n	800a4ec <_strtod_l+0x814>
 800a5a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5aa:	b1db      	cbz	r3, 800a5e4 <_strtod_l+0x90c>
 800a5ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ae:	4213      	tst	r3, r2
 800a5b0:	d0ee      	beq.n	800a590 <_strtod_l+0x8b8>
 800a5b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b4:	9a08      	ldr	r2, [sp, #32]
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	4659      	mov	r1, fp
 800a5ba:	b1bb      	cbz	r3, 800a5ec <_strtod_l+0x914>
 800a5bc:	f7ff fb6e 	bl	8009c9c <sulp>
 800a5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5c4:	ec53 2b10 	vmov	r2, r3, d0
 800a5c8:	f7f5 fe70 	bl	80002ac <__adddf3>
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	468b      	mov	fp, r1
 800a5d0:	e7de      	b.n	800a590 <_strtod_l+0x8b8>
 800a5d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a5d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5de:	f04f 3aff 	mov.w	sl, #4294967295
 800a5e2:	e7d5      	b.n	800a590 <_strtod_l+0x8b8>
 800a5e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5e6:	ea13 0f0a 	tst.w	r3, sl
 800a5ea:	e7e1      	b.n	800a5b0 <_strtod_l+0x8d8>
 800a5ec:	f7ff fb56 	bl	8009c9c <sulp>
 800a5f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5f4:	ec53 2b10 	vmov	r2, r3, d0
 800a5f8:	f7f5 fe56 	bl	80002a8 <__aeabi_dsub>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2300      	movs	r3, #0
 800a600:	4682      	mov	sl, r0
 800a602:	468b      	mov	fp, r1
 800a604:	f7f6 fa70 	bl	8000ae8 <__aeabi_dcmpeq>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0c1      	beq.n	800a590 <_strtod_l+0x8b8>
 800a60c:	e619      	b.n	800a242 <_strtod_l+0x56a>
 800a60e:	4641      	mov	r1, r8
 800a610:	4620      	mov	r0, r4
 800a612:	f003 f875 	bl	800d700 <__ratio>
 800a616:	ec57 6b10 	vmov	r6, r7, d0
 800a61a:	2200      	movs	r2, #0
 800a61c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f6 fa74 	bl	8000b10 <__aeabi_dcmple>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d06f      	beq.n	800a70c <_strtod_l+0xa34>
 800a62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d17a      	bne.n	800a728 <_strtod_l+0xa50>
 800a632:	f1ba 0f00 	cmp.w	sl, #0
 800a636:	d158      	bne.n	800a6ea <_strtod_l+0xa12>
 800a638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a63a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d15a      	bne.n	800a6f8 <_strtod_l+0xa20>
 800a642:	4b64      	ldr	r3, [pc, #400]	@ (800a7d4 <_strtod_l+0xafc>)
 800a644:	2200      	movs	r2, #0
 800a646:	4630      	mov	r0, r6
 800a648:	4639      	mov	r1, r7
 800a64a:	f7f6 fa57 	bl	8000afc <__aeabi_dcmplt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d159      	bne.n	800a706 <_strtod_l+0xa2e>
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	4b60      	ldr	r3, [pc, #384]	@ (800a7d8 <_strtod_l+0xb00>)
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 ffdd 	bl	8000618 <__aeabi_dmul>
 800a65e:	4606      	mov	r6, r0
 800a660:	460f      	mov	r7, r1
 800a662:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a666:	9606      	str	r6, [sp, #24]
 800a668:	9307      	str	r3, [sp, #28]
 800a66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a66e:	4d57      	ldr	r5, [pc, #348]	@ (800a7cc <_strtod_l+0xaf4>)
 800a670:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a676:	401d      	ands	r5, r3
 800a678:	4b58      	ldr	r3, [pc, #352]	@ (800a7dc <_strtod_l+0xb04>)
 800a67a:	429d      	cmp	r5, r3
 800a67c:	f040 80b2 	bne.w	800a7e4 <_strtod_l+0xb0c>
 800a680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a682:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a686:	ec4b ab10 	vmov	d0, sl, fp
 800a68a:	f002 ff71 	bl	800d570 <__ulp>
 800a68e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a692:	ec51 0b10 	vmov	r0, r1, d0
 800a696:	f7f5 ffbf 	bl	8000618 <__aeabi_dmul>
 800a69a:	4652      	mov	r2, sl
 800a69c:	465b      	mov	r3, fp
 800a69e:	f7f5 fe05 	bl	80002ac <__adddf3>
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4949      	ldr	r1, [pc, #292]	@ (800a7cc <_strtod_l+0xaf4>)
 800a6a6:	4a4e      	ldr	r2, [pc, #312]	@ (800a7e0 <_strtod_l+0xb08>)
 800a6a8:	4019      	ands	r1, r3
 800a6aa:	4291      	cmp	r1, r2
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	d942      	bls.n	800a736 <_strtod_l+0xa5e>
 800a6b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6b2:	4b47      	ldr	r3, [pc, #284]	@ (800a7d0 <_strtod_l+0xaf8>)
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d103      	bne.n	800a6c0 <_strtod_l+0x9e8>
 800a6b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	f43f ad2b 	beq.w	800a116 <_strtod_l+0x43e>
 800a6c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a7d0 <_strtod_l+0xaf8>
 800a6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a6c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6ca:	9805      	ldr	r0, [sp, #20]
 800a6cc:	f002 fc1c 	bl	800cf08 <_Bfree>
 800a6d0:	9805      	ldr	r0, [sp, #20]
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f002 fc18 	bl	800cf08 <_Bfree>
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	4641      	mov	r1, r8
 800a6dc:	f002 fc14 	bl	800cf08 <_Bfree>
 800a6e0:	9805      	ldr	r0, [sp, #20]
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	f002 fc10 	bl	800cf08 <_Bfree>
 800a6e8:	e618      	b.n	800a31c <_strtod_l+0x644>
 800a6ea:	f1ba 0f01 	cmp.w	sl, #1
 800a6ee:	d103      	bne.n	800a6f8 <_strtod_l+0xa20>
 800a6f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f43f ada5 	beq.w	800a242 <_strtod_l+0x56a>
 800a6f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a7a8 <_strtod_l+0xad0>
 800a6fc:	4f35      	ldr	r7, [pc, #212]	@ (800a7d4 <_strtod_l+0xafc>)
 800a6fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a702:	2600      	movs	r6, #0
 800a704:	e7b1      	b.n	800a66a <_strtod_l+0x992>
 800a706:	4f34      	ldr	r7, [pc, #208]	@ (800a7d8 <_strtod_l+0xb00>)
 800a708:	2600      	movs	r6, #0
 800a70a:	e7aa      	b.n	800a662 <_strtod_l+0x98a>
 800a70c:	4b32      	ldr	r3, [pc, #200]	@ (800a7d8 <_strtod_l+0xb00>)
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	2200      	movs	r2, #0
 800a714:	f7f5 ff80 	bl	8000618 <__aeabi_dmul>
 800a718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d09f      	beq.n	800a662 <_strtod_l+0x98a>
 800a722:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a726:	e7a0      	b.n	800a66a <_strtod_l+0x992>
 800a728:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a7b0 <_strtod_l+0xad8>
 800a72c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a730:	ec57 6b17 	vmov	r6, r7, d7
 800a734:	e799      	b.n	800a66a <_strtod_l+0x992>
 800a736:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a73a:	9b08      	ldr	r3, [sp, #32]
 800a73c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1c1      	bne.n	800a6c8 <_strtod_l+0x9f0>
 800a744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a748:	0d1b      	lsrs	r3, r3, #20
 800a74a:	051b      	lsls	r3, r3, #20
 800a74c:	429d      	cmp	r5, r3
 800a74e:	d1bb      	bne.n	800a6c8 <_strtod_l+0x9f0>
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f6 fac0 	bl	8000cd8 <__aeabi_d2lz>
 800a758:	f7f5 ff30 	bl	80005bc <__aeabi_l2d>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4630      	mov	r0, r6
 800a762:	4639      	mov	r1, r7
 800a764:	f7f5 fda0 	bl	80002a8 <__aeabi_dsub>
 800a768:	460b      	mov	r3, r1
 800a76a:	4602      	mov	r2, r0
 800a76c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a770:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a776:	ea46 060a 	orr.w	r6, r6, sl
 800a77a:	431e      	orrs	r6, r3
 800a77c:	d06f      	beq.n	800a85e <_strtod_l+0xb86>
 800a77e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7b8 <_strtod_l+0xae0>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f6 f9ba 	bl	8000afc <__aeabi_dcmplt>
 800a788:	2800      	cmp	r0, #0
 800a78a:	f47f accf 	bne.w	800a12c <_strtod_l+0x454>
 800a78e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7c0 <_strtod_l+0xae8>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a798:	f7f6 f9ce 	bl	8000b38 <__aeabi_dcmpgt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d093      	beq.n	800a6c8 <_strtod_l+0x9f0>
 800a7a0:	e4c4      	b.n	800a12c <_strtod_l+0x454>
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	00000000 	.word	0x00000000
 800a7ac:	bff00000 	.word	0xbff00000
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	3ff00000 	.word	0x3ff00000
 800a7b8:	94a03595 	.word	0x94a03595
 800a7bc:	3fdfffff 	.word	0x3fdfffff
 800a7c0:	35afe535 	.word	0x35afe535
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	000fffff 	.word	0x000fffff
 800a7cc:	7ff00000 	.word	0x7ff00000
 800a7d0:	7fefffff 	.word	0x7fefffff
 800a7d4:	3ff00000 	.word	0x3ff00000
 800a7d8:	3fe00000 	.word	0x3fe00000
 800a7dc:	7fe00000 	.word	0x7fe00000
 800a7e0:	7c9fffff 	.word	0x7c9fffff
 800a7e4:	9b08      	ldr	r3, [sp, #32]
 800a7e6:	b323      	cbz	r3, 800a832 <_strtod_l+0xb5a>
 800a7e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a7ec:	d821      	bhi.n	800a832 <_strtod_l+0xb5a>
 800a7ee:	a328      	add	r3, pc, #160	@ (adr r3, 800a890 <_strtod_l+0xbb8>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	f7f6 f98a 	bl	8000b10 <__aeabi_dcmple>
 800a7fc:	b1a0      	cbz	r0, 800a828 <_strtod_l+0xb50>
 800a7fe:	4639      	mov	r1, r7
 800a800:	4630      	mov	r0, r6
 800a802:	f7f6 f9e1 	bl	8000bc8 <__aeabi_d2uiz>
 800a806:	2801      	cmp	r0, #1
 800a808:	bf38      	it	cc
 800a80a:	2001      	movcc	r0, #1
 800a80c:	f7f5 fe8a 	bl	8000524 <__aeabi_ui2d>
 800a810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a812:	4606      	mov	r6, r0
 800a814:	460f      	mov	r7, r1
 800a816:	b9fb      	cbnz	r3, 800a858 <_strtod_l+0xb80>
 800a818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a81c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a81e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a820:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a828:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a82a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a82e:	1b5b      	subs	r3, r3, r5
 800a830:	9311      	str	r3, [sp, #68]	@ 0x44
 800a832:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a836:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a83a:	f002 fe99 	bl	800d570 <__ulp>
 800a83e:	4650      	mov	r0, sl
 800a840:	ec53 2b10 	vmov	r2, r3, d0
 800a844:	4659      	mov	r1, fp
 800a846:	f7f5 fee7 	bl	8000618 <__aeabi_dmul>
 800a84a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a84e:	f7f5 fd2d 	bl	80002ac <__adddf3>
 800a852:	4682      	mov	sl, r0
 800a854:	468b      	mov	fp, r1
 800a856:	e770      	b.n	800a73a <_strtod_l+0xa62>
 800a858:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a85c:	e7e0      	b.n	800a820 <_strtod_l+0xb48>
 800a85e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a898 <_strtod_l+0xbc0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f6 f94a 	bl	8000afc <__aeabi_dcmplt>
 800a868:	e798      	b.n	800a79c <_strtod_l+0xac4>
 800a86a:	2300      	movs	r3, #0
 800a86c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a86e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	f7ff ba6d 	b.w	8009d52 <_strtod_l+0x7a>
 800a878:	2a65      	cmp	r2, #101	@ 0x65
 800a87a:	f43f ab66 	beq.w	8009f4a <_strtod_l+0x272>
 800a87e:	2a45      	cmp	r2, #69	@ 0x45
 800a880:	f43f ab63 	beq.w	8009f4a <_strtod_l+0x272>
 800a884:	2301      	movs	r3, #1
 800a886:	f7ff bb9e 	b.w	8009fc6 <_strtod_l+0x2ee>
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w
 800a890:	ffc00000 	.word	0xffc00000
 800a894:	41dfffff 	.word	0x41dfffff
 800a898:	94a03595 	.word	0x94a03595
 800a89c:	3fcfffff 	.word	0x3fcfffff

0800a8a0 <_strtod_r>:
 800a8a0:	4b01      	ldr	r3, [pc, #4]	@ (800a8a8 <_strtod_r+0x8>)
 800a8a2:	f7ff ba19 	b.w	8009cd8 <_strtod_l>
 800a8a6:	bf00      	nop
 800a8a8:	2000001c 	.word	0x2000001c

0800a8ac <strtod>:
 800a8ac:	460a      	mov	r2, r1
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4802      	ldr	r0, [pc, #8]	@ (800a8bc <strtod+0x10>)
 800a8b2:	4b03      	ldr	r3, [pc, #12]	@ (800a8c0 <strtod+0x14>)
 800a8b4:	6800      	ldr	r0, [r0, #0]
 800a8b6:	f7ff ba0f 	b.w	8009cd8 <_strtod_l>
 800a8ba:	bf00      	nop
 800a8bc:	20000188 	.word	0x20000188
 800a8c0:	2000001c 	.word	0x2000001c

0800a8c4 <__cvt>:
 800a8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	ec57 6b10 	vmov	r6, r7, d0
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	bfbb      	ittet	lt
 800a8d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a8da:	461f      	movlt	r7, r3
 800a8dc:	2300      	movge	r3, #0
 800a8de:	232d      	movlt	r3, #45	@ 0x2d
 800a8e0:	700b      	strb	r3, [r1, #0]
 800a8e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a8e8:	4691      	mov	r9, r2
 800a8ea:	f023 0820 	bic.w	r8, r3, #32
 800a8ee:	bfbc      	itt	lt
 800a8f0:	4632      	movlt	r2, r6
 800a8f2:	4616      	movlt	r6, r2
 800a8f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8f8:	d005      	beq.n	800a906 <__cvt+0x42>
 800a8fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a8fe:	d100      	bne.n	800a902 <__cvt+0x3e>
 800a900:	3401      	adds	r4, #1
 800a902:	2102      	movs	r1, #2
 800a904:	e000      	b.n	800a908 <__cvt+0x44>
 800a906:	2103      	movs	r1, #3
 800a908:	ab03      	add	r3, sp, #12
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	ab02      	add	r3, sp, #8
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	ec47 6b10 	vmov	d0, r6, r7
 800a914:	4653      	mov	r3, sl
 800a916:	4622      	mov	r2, r4
 800a918:	f001 f8a6 	bl	800ba68 <_dtoa_r>
 800a91c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a920:	4605      	mov	r5, r0
 800a922:	d119      	bne.n	800a958 <__cvt+0x94>
 800a924:	f019 0f01 	tst.w	r9, #1
 800a928:	d00e      	beq.n	800a948 <__cvt+0x84>
 800a92a:	eb00 0904 	add.w	r9, r0, r4
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4630      	mov	r0, r6
 800a934:	4639      	mov	r1, r7
 800a936:	f7f6 f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a93a:	b108      	cbz	r0, 800a940 <__cvt+0x7c>
 800a93c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a940:	2230      	movs	r2, #48	@ 0x30
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	454b      	cmp	r3, r9
 800a946:	d31e      	bcc.n	800a986 <__cvt+0xc2>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a94c:	1b5b      	subs	r3, r3, r5
 800a94e:	4628      	mov	r0, r5
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	b004      	add	sp, #16
 800a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a95c:	eb00 0904 	add.w	r9, r0, r4
 800a960:	d1e5      	bne.n	800a92e <__cvt+0x6a>
 800a962:	7803      	ldrb	r3, [r0, #0]
 800a964:	2b30      	cmp	r3, #48	@ 0x30
 800a966:	d10a      	bne.n	800a97e <__cvt+0xba>
 800a968:	2200      	movs	r2, #0
 800a96a:	2300      	movs	r3, #0
 800a96c:	4630      	mov	r0, r6
 800a96e:	4639      	mov	r1, r7
 800a970:	f7f6 f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 800a974:	b918      	cbnz	r0, 800a97e <__cvt+0xba>
 800a976:	f1c4 0401 	rsb	r4, r4, #1
 800a97a:	f8ca 4000 	str.w	r4, [sl]
 800a97e:	f8da 3000 	ldr.w	r3, [sl]
 800a982:	4499      	add	r9, r3
 800a984:	e7d3      	b.n	800a92e <__cvt+0x6a>
 800a986:	1c59      	adds	r1, r3, #1
 800a988:	9103      	str	r1, [sp, #12]
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	e7d9      	b.n	800a942 <__cvt+0x7e>

0800a98e <__exponent>:
 800a98e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a990:	2900      	cmp	r1, #0
 800a992:	bfba      	itte	lt
 800a994:	4249      	neglt	r1, r1
 800a996:	232d      	movlt	r3, #45	@ 0x2d
 800a998:	232b      	movge	r3, #43	@ 0x2b
 800a99a:	2909      	cmp	r1, #9
 800a99c:	7002      	strb	r2, [r0, #0]
 800a99e:	7043      	strb	r3, [r0, #1]
 800a9a0:	dd29      	ble.n	800a9f6 <__exponent+0x68>
 800a9a2:	f10d 0307 	add.w	r3, sp, #7
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	270a      	movs	r7, #10
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9b0:	fb07 1416 	mls	r4, r7, r6, r1
 800a9b4:	3430      	adds	r4, #48	@ 0x30
 800a9b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	2c63      	cmp	r4, #99	@ 0x63
 800a9be:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	dcf1      	bgt.n	800a9aa <__exponent+0x1c>
 800a9c6:	3130      	adds	r1, #48	@ 0x30
 800a9c8:	1e94      	subs	r4, r2, #2
 800a9ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9ce:	1c41      	adds	r1, r0, #1
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	d30a      	bcc.n	800a9ec <__exponent+0x5e>
 800a9d6:	f10d 0309 	add.w	r3, sp, #9
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	42ac      	cmp	r4, r5
 800a9de:	bf88      	it	hi
 800a9e0:	2300      	movhi	r3, #0
 800a9e2:	3302      	adds	r3, #2
 800a9e4:	4403      	add	r3, r0
 800a9e6:	1a18      	subs	r0, r3, r0
 800a9e8:	b003      	add	sp, #12
 800a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a9f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a9f4:	e7ed      	b.n	800a9d2 <__exponent+0x44>
 800a9f6:	2330      	movs	r3, #48	@ 0x30
 800a9f8:	3130      	adds	r1, #48	@ 0x30
 800a9fa:	7083      	strb	r3, [r0, #2]
 800a9fc:	70c1      	strb	r1, [r0, #3]
 800a9fe:	1d03      	adds	r3, r0, #4
 800aa00:	e7f1      	b.n	800a9e6 <__exponent+0x58>
	...

0800aa04 <_printf_float>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	b08d      	sub	sp, #52	@ 0x34
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa10:	4616      	mov	r6, r2
 800aa12:	461f      	mov	r7, r3
 800aa14:	4605      	mov	r5, r0
 800aa16:	f000 ff01 	bl	800b81c <_localeconv_r>
 800aa1a:	6803      	ldr	r3, [r0, #0]
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f5 fc36 	bl	8000290 <strlen>
 800aa24:	2300      	movs	r3, #0
 800aa26:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa28:	f8d8 3000 	ldr.w	r3, [r8]
 800aa2c:	9005      	str	r0, [sp, #20]
 800aa2e:	3307      	adds	r3, #7
 800aa30:	f023 0307 	bic.w	r3, r3, #7
 800aa34:	f103 0208 	add.w	r2, r3, #8
 800aa38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa3c:	f8d4 b000 	ldr.w	fp, [r4]
 800aa40:	f8c8 2000 	str.w	r2, [r8]
 800aa44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa4c:	9307      	str	r3, [sp, #28]
 800aa4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa5a:	4b9c      	ldr	r3, [pc, #624]	@ (800accc <_printf_float+0x2c8>)
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	f7f6 f874 	bl	8000b4c <__aeabi_dcmpun>
 800aa64:	bb70      	cbnz	r0, 800aac4 <_printf_float+0xc0>
 800aa66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6a:	4b98      	ldr	r3, [pc, #608]	@ (800accc <_printf_float+0x2c8>)
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	f7f6 f84e 	bl	8000b10 <__aeabi_dcmple>
 800aa74:	bb30      	cbnz	r0, 800aac4 <_printf_float+0xc0>
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f6 f83d 	bl	8000afc <__aeabi_dcmplt>
 800aa82:	b110      	cbz	r0, 800aa8a <_printf_float+0x86>
 800aa84:	232d      	movs	r3, #45	@ 0x2d
 800aa86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa8a:	4a91      	ldr	r2, [pc, #580]	@ (800acd0 <_printf_float+0x2cc>)
 800aa8c:	4b91      	ldr	r3, [pc, #580]	@ (800acd4 <_printf_float+0x2d0>)
 800aa8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa92:	bf94      	ite	ls
 800aa94:	4690      	movls	r8, r2
 800aa96:	4698      	movhi	r8, r3
 800aa98:	2303      	movs	r3, #3
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	f02b 0304 	bic.w	r3, fp, #4
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	f04f 0900 	mov.w	r9, #0
 800aaa6:	9700      	str	r7, [sp, #0]
 800aaa8:	4633      	mov	r3, r6
 800aaaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aaac:	4621      	mov	r1, r4
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 f9d2 	bl	800ae58 <_printf_common>
 800aab4:	3001      	adds	r0, #1
 800aab6:	f040 808d 	bne.w	800abd4 <_printf_float+0x1d0>
 800aaba:	f04f 30ff 	mov.w	r0, #4294967295
 800aabe:	b00d      	add	sp, #52	@ 0x34
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	4649      	mov	r1, r9
 800aacc:	f7f6 f83e 	bl	8000b4c <__aeabi_dcmpun>
 800aad0:	b140      	cbz	r0, 800aae4 <_printf_float+0xe0>
 800aad2:	464b      	mov	r3, r9
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfbc      	itt	lt
 800aad8:	232d      	movlt	r3, #45	@ 0x2d
 800aada:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aade:	4a7e      	ldr	r2, [pc, #504]	@ (800acd8 <_printf_float+0x2d4>)
 800aae0:	4b7e      	ldr	r3, [pc, #504]	@ (800acdc <_printf_float+0x2d8>)
 800aae2:	e7d4      	b.n	800aa8e <_printf_float+0x8a>
 800aae4:	6863      	ldr	r3, [r4, #4]
 800aae6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aaea:	9206      	str	r2, [sp, #24]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	d13b      	bne.n	800ab68 <_printf_float+0x164>
 800aaf0:	2306      	movs	r3, #6
 800aaf2:	6063      	str	r3, [r4, #4]
 800aaf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aaf8:	2300      	movs	r3, #0
 800aafa:	6022      	str	r2, [r4, #0]
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab00:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab04:	ab09      	add	r3, sp, #36	@ 0x24
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	6861      	ldr	r1, [r4, #4]
 800ab0a:	ec49 8b10 	vmov	d0, r8, r9
 800ab0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7ff fed6 	bl	800a8c4 <__cvt>
 800ab18:	9b06      	ldr	r3, [sp, #24]
 800ab1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab1c:	2b47      	cmp	r3, #71	@ 0x47
 800ab1e:	4680      	mov	r8, r0
 800ab20:	d129      	bne.n	800ab76 <_printf_float+0x172>
 800ab22:	1cc8      	adds	r0, r1, #3
 800ab24:	db02      	blt.n	800ab2c <_printf_float+0x128>
 800ab26:	6863      	ldr	r3, [r4, #4]
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	dd41      	ble.n	800abb0 <_printf_float+0x1ac>
 800ab2c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab30:	fa5f fa8a 	uxtb.w	sl, sl
 800ab34:	3901      	subs	r1, #1
 800ab36:	4652      	mov	r2, sl
 800ab38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab3c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab3e:	f7ff ff26 	bl	800a98e <__exponent>
 800ab42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab44:	1813      	adds	r3, r2, r0
 800ab46:	2a01      	cmp	r2, #1
 800ab48:	4681      	mov	r9, r0
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	dc02      	bgt.n	800ab54 <_printf_float+0x150>
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	07d2      	lsls	r2, r2, #31
 800ab52:	d501      	bpl.n	800ab58 <_printf_float+0x154>
 800ab54:	3301      	adds	r3, #1
 800ab56:	6123      	str	r3, [r4, #16]
 800ab58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0a2      	beq.n	800aaa6 <_printf_float+0xa2>
 800ab60:	232d      	movs	r3, #45	@ 0x2d
 800ab62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab66:	e79e      	b.n	800aaa6 <_printf_float+0xa2>
 800ab68:	9a06      	ldr	r2, [sp, #24]
 800ab6a:	2a47      	cmp	r2, #71	@ 0x47
 800ab6c:	d1c2      	bne.n	800aaf4 <_printf_float+0xf0>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1c0      	bne.n	800aaf4 <_printf_float+0xf0>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e7bd      	b.n	800aaf2 <_printf_float+0xee>
 800ab76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab7a:	d9db      	bls.n	800ab34 <_printf_float+0x130>
 800ab7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab80:	d118      	bne.n	800abb4 <_printf_float+0x1b0>
 800ab82:	2900      	cmp	r1, #0
 800ab84:	6863      	ldr	r3, [r4, #4]
 800ab86:	dd0b      	ble.n	800aba0 <_printf_float+0x19c>
 800ab88:	6121      	str	r1, [r4, #16]
 800ab8a:	b913      	cbnz	r3, 800ab92 <_printf_float+0x18e>
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	07d0      	lsls	r0, r2, #31
 800ab90:	d502      	bpl.n	800ab98 <_printf_float+0x194>
 800ab92:	3301      	adds	r3, #1
 800ab94:	440b      	add	r3, r1
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab9a:	f04f 0900 	mov.w	r9, #0
 800ab9e:	e7db      	b.n	800ab58 <_printf_float+0x154>
 800aba0:	b913      	cbnz	r3, 800aba8 <_printf_float+0x1a4>
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	07d2      	lsls	r2, r2, #31
 800aba6:	d501      	bpl.n	800abac <_printf_float+0x1a8>
 800aba8:	3302      	adds	r3, #2
 800abaa:	e7f4      	b.n	800ab96 <_printf_float+0x192>
 800abac:	2301      	movs	r3, #1
 800abae:	e7f2      	b.n	800ab96 <_printf_float+0x192>
 800abb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	4299      	cmp	r1, r3
 800abb8:	db05      	blt.n	800abc6 <_printf_float+0x1c2>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	6121      	str	r1, [r4, #16]
 800abbe:	07d8      	lsls	r0, r3, #31
 800abc0:	d5ea      	bpl.n	800ab98 <_printf_float+0x194>
 800abc2:	1c4b      	adds	r3, r1, #1
 800abc4:	e7e7      	b.n	800ab96 <_printf_float+0x192>
 800abc6:	2900      	cmp	r1, #0
 800abc8:	bfd4      	ite	le
 800abca:	f1c1 0202 	rsble	r2, r1, #2
 800abce:	2201      	movgt	r2, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	e7e0      	b.n	800ab96 <_printf_float+0x192>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	055a      	lsls	r2, r3, #21
 800abd8:	d407      	bmi.n	800abea <_printf_float+0x1e6>
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	4642      	mov	r2, r8
 800abde:	4631      	mov	r1, r6
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b8      	blx	r7
 800abe4:	3001      	adds	r0, #1
 800abe6:	d12b      	bne.n	800ac40 <_printf_float+0x23c>
 800abe8:	e767      	b.n	800aaba <_printf_float+0xb6>
 800abea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abee:	f240 80dd 	bls.w	800adac <_printf_float+0x3a8>
 800abf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abf6:	2200      	movs	r2, #0
 800abf8:	2300      	movs	r3, #0
 800abfa:	f7f5 ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d033      	beq.n	800ac6a <_printf_float+0x266>
 800ac02:	4a37      	ldr	r2, [pc, #220]	@ (800ace0 <_printf_float+0x2dc>)
 800ac04:	2301      	movs	r3, #1
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b8      	blx	r7
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	f43f af54 	beq.w	800aaba <_printf_float+0xb6>
 800ac12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac16:	4543      	cmp	r3, r8
 800ac18:	db02      	blt.n	800ac20 <_printf_float+0x21c>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	07d8      	lsls	r0, r3, #31
 800ac1e:	d50f      	bpl.n	800ac40 <_printf_float+0x23c>
 800ac20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac24:	4631      	mov	r1, r6
 800ac26:	4628      	mov	r0, r5
 800ac28:	47b8      	blx	r7
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	f43f af45 	beq.w	800aaba <_printf_float+0xb6>
 800ac30:	f04f 0900 	mov.w	r9, #0
 800ac34:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac38:	f104 0a1a 	add.w	sl, r4, #26
 800ac3c:	45c8      	cmp	r8, r9
 800ac3e:	dc09      	bgt.n	800ac54 <_printf_float+0x250>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	079b      	lsls	r3, r3, #30
 800ac44:	f100 8103 	bmi.w	800ae4e <_printf_float+0x44a>
 800ac48:	68e0      	ldr	r0, [r4, #12]
 800ac4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac4c:	4298      	cmp	r0, r3
 800ac4e:	bfb8      	it	lt
 800ac50:	4618      	movlt	r0, r3
 800ac52:	e734      	b.n	800aabe <_printf_float+0xba>
 800ac54:	2301      	movs	r3, #1
 800ac56:	4652      	mov	r2, sl
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f af2b 	beq.w	800aaba <_printf_float+0xb6>
 800ac64:	f109 0901 	add.w	r9, r9, #1
 800ac68:	e7e8      	b.n	800ac3c <_printf_float+0x238>
 800ac6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dc39      	bgt.n	800ace4 <_printf_float+0x2e0>
 800ac70:	4a1b      	ldr	r2, [pc, #108]	@ (800ace0 <_printf_float+0x2dc>)
 800ac72:	2301      	movs	r3, #1
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f af1d 	beq.w	800aaba <_printf_float+0xb6>
 800ac80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac84:	ea59 0303 	orrs.w	r3, r9, r3
 800ac88:	d102      	bne.n	800ac90 <_printf_float+0x28c>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07d9      	lsls	r1, r3, #31
 800ac8e:	d5d7      	bpl.n	800ac40 <_printf_float+0x23c>
 800ac90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	f43f af0d 	beq.w	800aaba <_printf_float+0xb6>
 800aca0:	f04f 0a00 	mov.w	sl, #0
 800aca4:	f104 0b1a 	add.w	fp, r4, #26
 800aca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acaa:	425b      	negs	r3, r3
 800acac:	4553      	cmp	r3, sl
 800acae:	dc01      	bgt.n	800acb4 <_printf_float+0x2b0>
 800acb0:	464b      	mov	r3, r9
 800acb2:	e793      	b.n	800abdc <_printf_float+0x1d8>
 800acb4:	2301      	movs	r3, #1
 800acb6:	465a      	mov	r2, fp
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	f43f aefb 	beq.w	800aaba <_printf_float+0xb6>
 800acc4:	f10a 0a01 	add.w	sl, sl, #1
 800acc8:	e7ee      	b.n	800aca8 <_printf_float+0x2a4>
 800acca:	bf00      	nop
 800accc:	7fefffff 	.word	0x7fefffff
 800acd0:	0800e568 	.word	0x0800e568
 800acd4:	0800e56c 	.word	0x0800e56c
 800acd8:	0800e570 	.word	0x0800e570
 800acdc:	0800e574 	.word	0x0800e574
 800ace0:	0800e578 	.word	0x0800e578
 800ace4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ace6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800acea:	4553      	cmp	r3, sl
 800acec:	bfa8      	it	ge
 800acee:	4653      	movge	r3, sl
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	4699      	mov	r9, r3
 800acf4:	dc36      	bgt.n	800ad64 <_printf_float+0x360>
 800acf6:	f04f 0b00 	mov.w	fp, #0
 800acfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acfe:	f104 021a 	add.w	r2, r4, #26
 800ad02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad04:	9306      	str	r3, [sp, #24]
 800ad06:	eba3 0309 	sub.w	r3, r3, r9
 800ad0a:	455b      	cmp	r3, fp
 800ad0c:	dc31      	bgt.n	800ad72 <_printf_float+0x36e>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad10:	459a      	cmp	sl, r3
 800ad12:	dc3a      	bgt.n	800ad8a <_printf_float+0x386>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07da      	lsls	r2, r3, #31
 800ad18:	d437      	bmi.n	800ad8a <_printf_float+0x386>
 800ad1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad1c:	ebaa 0903 	sub.w	r9, sl, r3
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	ebaa 0303 	sub.w	r3, sl, r3
 800ad26:	4599      	cmp	r9, r3
 800ad28:	bfa8      	it	ge
 800ad2a:	4699      	movge	r9, r3
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	dc33      	bgt.n	800ad9a <_printf_float+0x396>
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad3a:	f104 0b1a 	add.w	fp, r4, #26
 800ad3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad40:	ebaa 0303 	sub.w	r3, sl, r3
 800ad44:	eba3 0309 	sub.w	r3, r3, r9
 800ad48:	4543      	cmp	r3, r8
 800ad4a:	f77f af79 	ble.w	800ac40 <_printf_float+0x23c>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	465a      	mov	r2, fp
 800ad52:	4631      	mov	r1, r6
 800ad54:	4628      	mov	r0, r5
 800ad56:	47b8      	blx	r7
 800ad58:	3001      	adds	r0, #1
 800ad5a:	f43f aeae 	beq.w	800aaba <_printf_float+0xb6>
 800ad5e:	f108 0801 	add.w	r8, r8, #1
 800ad62:	e7ec      	b.n	800ad3e <_printf_float+0x33a>
 800ad64:	4642      	mov	r2, r8
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d1c2      	bne.n	800acf6 <_printf_float+0x2f2>
 800ad70:	e6a3      	b.n	800aaba <_printf_float+0xb6>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	9206      	str	r2, [sp, #24]
 800ad7a:	47b8      	blx	r7
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	f43f ae9c 	beq.w	800aaba <_printf_float+0xb6>
 800ad82:	9a06      	ldr	r2, [sp, #24]
 800ad84:	f10b 0b01 	add.w	fp, fp, #1
 800ad88:	e7bb      	b.n	800ad02 <_printf_float+0x2fe>
 800ad8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b8      	blx	r7
 800ad94:	3001      	adds	r0, #1
 800ad96:	d1c0      	bne.n	800ad1a <_printf_float+0x316>
 800ad98:	e68f      	b.n	800aaba <_printf_float+0xb6>
 800ad9a:	9a06      	ldr	r2, [sp, #24]
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4442      	add	r2, r8
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	d1c3      	bne.n	800ad32 <_printf_float+0x32e>
 800adaa:	e686      	b.n	800aaba <_printf_float+0xb6>
 800adac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adb0:	f1ba 0f01 	cmp.w	sl, #1
 800adb4:	dc01      	bgt.n	800adba <_printf_float+0x3b6>
 800adb6:	07db      	lsls	r3, r3, #31
 800adb8:	d536      	bpl.n	800ae28 <_printf_float+0x424>
 800adba:	2301      	movs	r3, #1
 800adbc:	4642      	mov	r2, r8
 800adbe:	4631      	mov	r1, r6
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b8      	blx	r7
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f ae78 	beq.w	800aaba <_printf_float+0xb6>
 800adca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	f43f ae70 	beq.w	800aaba <_printf_float+0xb6>
 800adda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adde:	2200      	movs	r2, #0
 800ade0:	2300      	movs	r3, #0
 800ade2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ade6:	f7f5 fe7f 	bl	8000ae8 <__aeabi_dcmpeq>
 800adea:	b9c0      	cbnz	r0, 800ae1e <_printf_float+0x41a>
 800adec:	4653      	mov	r3, sl
 800adee:	f108 0201 	add.w	r2, r8, #1
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	d10c      	bne.n	800ae16 <_printf_float+0x412>
 800adfc:	e65d      	b.n	800aaba <_printf_float+0xb6>
 800adfe:	2301      	movs	r3, #1
 800ae00:	465a      	mov	r2, fp
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f ae56 	beq.w	800aaba <_printf_float+0xb6>
 800ae0e:	f108 0801 	add.w	r8, r8, #1
 800ae12:	45d0      	cmp	r8, sl
 800ae14:	dbf3      	blt.n	800adfe <_printf_float+0x3fa>
 800ae16:	464b      	mov	r3, r9
 800ae18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae1c:	e6df      	b.n	800abde <_printf_float+0x1da>
 800ae1e:	f04f 0800 	mov.w	r8, #0
 800ae22:	f104 0b1a 	add.w	fp, r4, #26
 800ae26:	e7f4      	b.n	800ae12 <_printf_float+0x40e>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	e7e1      	b.n	800adf2 <_printf_float+0x3ee>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	464a      	mov	r2, r9
 800ae32:	4631      	mov	r1, r6
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b8      	blx	r7
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f43f ae3e 	beq.w	800aaba <_printf_float+0xb6>
 800ae3e:	f108 0801 	add.w	r8, r8, #1
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae46:	1a5b      	subs	r3, r3, r1
 800ae48:	4543      	cmp	r3, r8
 800ae4a:	dcf0      	bgt.n	800ae2e <_printf_float+0x42a>
 800ae4c:	e6fc      	b.n	800ac48 <_printf_float+0x244>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	f104 0919 	add.w	r9, r4, #25
 800ae56:	e7f4      	b.n	800ae42 <_printf_float+0x43e>

0800ae58 <_printf_common>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	4698      	mov	r8, r3
 800ae60:	688a      	ldr	r2, [r1, #8]
 800ae62:	690b      	ldr	r3, [r1, #16]
 800ae64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	bfb8      	it	lt
 800ae6c:	4613      	movlt	r3, r2
 800ae6e:	6033      	str	r3, [r6, #0]
 800ae70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae74:	4607      	mov	r7, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	b10a      	cbz	r2, 800ae7e <_printf_common+0x26>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	6033      	str	r3, [r6, #0]
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	0699      	lsls	r1, r3, #26
 800ae82:	bf42      	ittt	mi
 800ae84:	6833      	ldrmi	r3, [r6, #0]
 800ae86:	3302      	addmi	r3, #2
 800ae88:	6033      	strmi	r3, [r6, #0]
 800ae8a:	6825      	ldr	r5, [r4, #0]
 800ae8c:	f015 0506 	ands.w	r5, r5, #6
 800ae90:	d106      	bne.n	800aea0 <_printf_common+0x48>
 800ae92:	f104 0a19 	add.w	sl, r4, #25
 800ae96:	68e3      	ldr	r3, [r4, #12]
 800ae98:	6832      	ldr	r2, [r6, #0]
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	42ab      	cmp	r3, r5
 800ae9e:	dc26      	bgt.n	800aeee <_printf_common+0x96>
 800aea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aea4:	6822      	ldr	r2, [r4, #0]
 800aea6:	3b00      	subs	r3, #0
 800aea8:	bf18      	it	ne
 800aeaa:	2301      	movne	r3, #1
 800aeac:	0692      	lsls	r2, r2, #26
 800aeae:	d42b      	bmi.n	800af08 <_printf_common+0xb0>
 800aeb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aeb4:	4641      	mov	r1, r8
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	47c8      	blx	r9
 800aeba:	3001      	adds	r0, #1
 800aebc:	d01e      	beq.n	800aefc <_printf_common+0xa4>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	6922      	ldr	r2, [r4, #16]
 800aec2:	f003 0306 	and.w	r3, r3, #6
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	bf02      	ittt	eq
 800aeca:	68e5      	ldreq	r5, [r4, #12]
 800aecc:	6833      	ldreq	r3, [r6, #0]
 800aece:	1aed      	subeq	r5, r5, r3
 800aed0:	68a3      	ldr	r3, [r4, #8]
 800aed2:	bf0c      	ite	eq
 800aed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aed8:	2500      	movne	r5, #0
 800aeda:	4293      	cmp	r3, r2
 800aedc:	bfc4      	itt	gt
 800aede:	1a9b      	subgt	r3, r3, r2
 800aee0:	18ed      	addgt	r5, r5, r3
 800aee2:	2600      	movs	r6, #0
 800aee4:	341a      	adds	r4, #26
 800aee6:	42b5      	cmp	r5, r6
 800aee8:	d11a      	bne.n	800af20 <_printf_common+0xc8>
 800aeea:	2000      	movs	r0, #0
 800aeec:	e008      	b.n	800af00 <_printf_common+0xa8>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4652      	mov	r2, sl
 800aef2:	4641      	mov	r1, r8
 800aef4:	4638      	mov	r0, r7
 800aef6:	47c8      	blx	r9
 800aef8:	3001      	adds	r0, #1
 800aefa:	d103      	bne.n	800af04 <_printf_common+0xac>
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	3501      	adds	r5, #1
 800af06:	e7c6      	b.n	800ae96 <_printf_common+0x3e>
 800af08:	18e1      	adds	r1, r4, r3
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	2030      	movs	r0, #48	@ 0x30
 800af0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af12:	4422      	add	r2, r4
 800af14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af1c:	3302      	adds	r3, #2
 800af1e:	e7c7      	b.n	800aeb0 <_printf_common+0x58>
 800af20:	2301      	movs	r3, #1
 800af22:	4622      	mov	r2, r4
 800af24:	4641      	mov	r1, r8
 800af26:	4638      	mov	r0, r7
 800af28:	47c8      	blx	r9
 800af2a:	3001      	adds	r0, #1
 800af2c:	d0e6      	beq.n	800aefc <_printf_common+0xa4>
 800af2e:	3601      	adds	r6, #1
 800af30:	e7d9      	b.n	800aee6 <_printf_common+0x8e>
	...

0800af34 <_printf_i>:
 800af34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	7e0f      	ldrb	r7, [r1, #24]
 800af3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af3c:	2f78      	cmp	r7, #120	@ 0x78
 800af3e:	4691      	mov	r9, r2
 800af40:	4680      	mov	r8, r0
 800af42:	460c      	mov	r4, r1
 800af44:	469a      	mov	sl, r3
 800af46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af4a:	d807      	bhi.n	800af5c <_printf_i+0x28>
 800af4c:	2f62      	cmp	r7, #98	@ 0x62
 800af4e:	d80a      	bhi.n	800af66 <_printf_i+0x32>
 800af50:	2f00      	cmp	r7, #0
 800af52:	f000 80d2 	beq.w	800b0fa <_printf_i+0x1c6>
 800af56:	2f58      	cmp	r7, #88	@ 0x58
 800af58:	f000 80b9 	beq.w	800b0ce <_printf_i+0x19a>
 800af5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af64:	e03a      	b.n	800afdc <_printf_i+0xa8>
 800af66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af6a:	2b15      	cmp	r3, #21
 800af6c:	d8f6      	bhi.n	800af5c <_printf_i+0x28>
 800af6e:	a101      	add	r1, pc, #4	@ (adr r1, 800af74 <_printf_i+0x40>)
 800af70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af74:	0800afcd 	.word	0x0800afcd
 800af78:	0800afe1 	.word	0x0800afe1
 800af7c:	0800af5d 	.word	0x0800af5d
 800af80:	0800af5d 	.word	0x0800af5d
 800af84:	0800af5d 	.word	0x0800af5d
 800af88:	0800af5d 	.word	0x0800af5d
 800af8c:	0800afe1 	.word	0x0800afe1
 800af90:	0800af5d 	.word	0x0800af5d
 800af94:	0800af5d 	.word	0x0800af5d
 800af98:	0800af5d 	.word	0x0800af5d
 800af9c:	0800af5d 	.word	0x0800af5d
 800afa0:	0800b0e1 	.word	0x0800b0e1
 800afa4:	0800b00b 	.word	0x0800b00b
 800afa8:	0800b09b 	.word	0x0800b09b
 800afac:	0800af5d 	.word	0x0800af5d
 800afb0:	0800af5d 	.word	0x0800af5d
 800afb4:	0800b103 	.word	0x0800b103
 800afb8:	0800af5d 	.word	0x0800af5d
 800afbc:	0800b00b 	.word	0x0800b00b
 800afc0:	0800af5d 	.word	0x0800af5d
 800afc4:	0800af5d 	.word	0x0800af5d
 800afc8:	0800b0a3 	.word	0x0800b0a3
 800afcc:	6833      	ldr	r3, [r6, #0]
 800afce:	1d1a      	adds	r2, r3, #4
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6032      	str	r2, [r6, #0]
 800afd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afdc:	2301      	movs	r3, #1
 800afde:	e09d      	b.n	800b11c <_printf_i+0x1e8>
 800afe0:	6833      	ldr	r3, [r6, #0]
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	1d19      	adds	r1, r3, #4
 800afe6:	6031      	str	r1, [r6, #0]
 800afe8:	0606      	lsls	r6, r0, #24
 800afea:	d501      	bpl.n	800aff0 <_printf_i+0xbc>
 800afec:	681d      	ldr	r5, [r3, #0]
 800afee:	e003      	b.n	800aff8 <_printf_i+0xc4>
 800aff0:	0645      	lsls	r5, r0, #25
 800aff2:	d5fb      	bpl.n	800afec <_printf_i+0xb8>
 800aff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aff8:	2d00      	cmp	r5, #0
 800affa:	da03      	bge.n	800b004 <_printf_i+0xd0>
 800affc:	232d      	movs	r3, #45	@ 0x2d
 800affe:	426d      	negs	r5, r5
 800b000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b004:	4859      	ldr	r0, [pc, #356]	@ (800b16c <_printf_i+0x238>)
 800b006:	230a      	movs	r3, #10
 800b008:	e011      	b.n	800b02e <_printf_i+0xfa>
 800b00a:	6821      	ldr	r1, [r4, #0]
 800b00c:	6833      	ldr	r3, [r6, #0]
 800b00e:	0608      	lsls	r0, r1, #24
 800b010:	f853 5b04 	ldr.w	r5, [r3], #4
 800b014:	d402      	bmi.n	800b01c <_printf_i+0xe8>
 800b016:	0649      	lsls	r1, r1, #25
 800b018:	bf48      	it	mi
 800b01a:	b2ad      	uxthmi	r5, r5
 800b01c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b01e:	4853      	ldr	r0, [pc, #332]	@ (800b16c <_printf_i+0x238>)
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	bf14      	ite	ne
 800b024:	230a      	movne	r3, #10
 800b026:	2308      	moveq	r3, #8
 800b028:	2100      	movs	r1, #0
 800b02a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b02e:	6866      	ldr	r6, [r4, #4]
 800b030:	60a6      	str	r6, [r4, #8]
 800b032:	2e00      	cmp	r6, #0
 800b034:	bfa2      	ittt	ge
 800b036:	6821      	ldrge	r1, [r4, #0]
 800b038:	f021 0104 	bicge.w	r1, r1, #4
 800b03c:	6021      	strge	r1, [r4, #0]
 800b03e:	b90d      	cbnz	r5, 800b044 <_printf_i+0x110>
 800b040:	2e00      	cmp	r6, #0
 800b042:	d04b      	beq.n	800b0dc <_printf_i+0x1a8>
 800b044:	4616      	mov	r6, r2
 800b046:	fbb5 f1f3 	udiv	r1, r5, r3
 800b04a:	fb03 5711 	mls	r7, r3, r1, r5
 800b04e:	5dc7      	ldrb	r7, [r0, r7]
 800b050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b054:	462f      	mov	r7, r5
 800b056:	42bb      	cmp	r3, r7
 800b058:	460d      	mov	r5, r1
 800b05a:	d9f4      	bls.n	800b046 <_printf_i+0x112>
 800b05c:	2b08      	cmp	r3, #8
 800b05e:	d10b      	bne.n	800b078 <_printf_i+0x144>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	07df      	lsls	r7, r3, #31
 800b064:	d508      	bpl.n	800b078 <_printf_i+0x144>
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	6861      	ldr	r1, [r4, #4]
 800b06a:	4299      	cmp	r1, r3
 800b06c:	bfde      	ittt	le
 800b06e:	2330      	movle	r3, #48	@ 0x30
 800b070:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b074:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b078:	1b92      	subs	r2, r2, r6
 800b07a:	6122      	str	r2, [r4, #16]
 800b07c:	f8cd a000 	str.w	sl, [sp]
 800b080:	464b      	mov	r3, r9
 800b082:	aa03      	add	r2, sp, #12
 800b084:	4621      	mov	r1, r4
 800b086:	4640      	mov	r0, r8
 800b088:	f7ff fee6 	bl	800ae58 <_printf_common>
 800b08c:	3001      	adds	r0, #1
 800b08e:	d14a      	bne.n	800b126 <_printf_i+0x1f2>
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	b004      	add	sp, #16
 800b096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	f043 0320 	orr.w	r3, r3, #32
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	4833      	ldr	r0, [pc, #204]	@ (800b170 <_printf_i+0x23c>)
 800b0a4:	2778      	movs	r7, #120	@ 0x78
 800b0a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	6831      	ldr	r1, [r6, #0]
 800b0ae:	061f      	lsls	r7, r3, #24
 800b0b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0b4:	d402      	bmi.n	800b0bc <_printf_i+0x188>
 800b0b6:	065f      	lsls	r7, r3, #25
 800b0b8:	bf48      	it	mi
 800b0ba:	b2ad      	uxthmi	r5, r5
 800b0bc:	6031      	str	r1, [r6, #0]
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	bf44      	itt	mi
 800b0c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c6:	6023      	strmi	r3, [r4, #0]
 800b0c8:	b11d      	cbz	r5, 800b0d2 <_printf_i+0x19e>
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	e7ac      	b.n	800b028 <_printf_i+0xf4>
 800b0ce:	4827      	ldr	r0, [pc, #156]	@ (800b16c <_printf_i+0x238>)
 800b0d0:	e7e9      	b.n	800b0a6 <_printf_i+0x172>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	f023 0320 	bic.w	r3, r3, #32
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	e7f6      	b.n	800b0ca <_printf_i+0x196>
 800b0dc:	4616      	mov	r6, r2
 800b0de:	e7bd      	b.n	800b05c <_printf_i+0x128>
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	6825      	ldr	r5, [r4, #0]
 800b0e4:	6961      	ldr	r1, [r4, #20]
 800b0e6:	1d18      	adds	r0, r3, #4
 800b0e8:	6030      	str	r0, [r6, #0]
 800b0ea:	062e      	lsls	r6, r5, #24
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	d501      	bpl.n	800b0f4 <_printf_i+0x1c0>
 800b0f0:	6019      	str	r1, [r3, #0]
 800b0f2:	e002      	b.n	800b0fa <_printf_i+0x1c6>
 800b0f4:	0668      	lsls	r0, r5, #25
 800b0f6:	d5fb      	bpl.n	800b0f0 <_printf_i+0x1bc>
 800b0f8:	8019      	strh	r1, [r3, #0]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	4616      	mov	r6, r2
 800b100:	e7bc      	b.n	800b07c <_printf_i+0x148>
 800b102:	6833      	ldr	r3, [r6, #0]
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	681e      	ldr	r6, [r3, #0]
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4630      	mov	r0, r6
 800b110:	f7f5 f86e 	bl	80001f0 <memchr>
 800b114:	b108      	cbz	r0, 800b11a <_printf_i+0x1e6>
 800b116:	1b80      	subs	r0, r0, r6
 800b118:	6060      	str	r0, [r4, #4]
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	2300      	movs	r3, #0
 800b120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b124:	e7aa      	b.n	800b07c <_printf_i+0x148>
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	4632      	mov	r2, r6
 800b12a:	4649      	mov	r1, r9
 800b12c:	4640      	mov	r0, r8
 800b12e:	47d0      	blx	sl
 800b130:	3001      	adds	r0, #1
 800b132:	d0ad      	beq.n	800b090 <_printf_i+0x15c>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	079b      	lsls	r3, r3, #30
 800b138:	d413      	bmi.n	800b162 <_printf_i+0x22e>
 800b13a:	68e0      	ldr	r0, [r4, #12]
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	4298      	cmp	r0, r3
 800b140:	bfb8      	it	lt
 800b142:	4618      	movlt	r0, r3
 800b144:	e7a6      	b.n	800b094 <_printf_i+0x160>
 800b146:	2301      	movs	r3, #1
 800b148:	4632      	mov	r2, r6
 800b14a:	4649      	mov	r1, r9
 800b14c:	4640      	mov	r0, r8
 800b14e:	47d0      	blx	sl
 800b150:	3001      	adds	r0, #1
 800b152:	d09d      	beq.n	800b090 <_printf_i+0x15c>
 800b154:	3501      	adds	r5, #1
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	9903      	ldr	r1, [sp, #12]
 800b15a:	1a5b      	subs	r3, r3, r1
 800b15c:	42ab      	cmp	r3, r5
 800b15e:	dcf2      	bgt.n	800b146 <_printf_i+0x212>
 800b160:	e7eb      	b.n	800b13a <_printf_i+0x206>
 800b162:	2500      	movs	r5, #0
 800b164:	f104 0619 	add.w	r6, r4, #25
 800b168:	e7f5      	b.n	800b156 <_printf_i+0x222>
 800b16a:	bf00      	nop
 800b16c:	0800e57a 	.word	0x0800e57a
 800b170:	0800e58b 	.word	0x0800e58b

0800b174 <_scanf_float>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	b087      	sub	sp, #28
 800b17a:	4617      	mov	r7, r2
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	688b      	ldr	r3, [r1, #8]
 800b180:	1e5a      	subs	r2, r3, #1
 800b182:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b186:	bf81      	itttt	hi
 800b188:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b18c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b190:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b194:	608b      	strhi	r3, [r1, #8]
 800b196:	680b      	ldr	r3, [r1, #0]
 800b198:	460a      	mov	r2, r1
 800b19a:	f04f 0500 	mov.w	r5, #0
 800b19e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b1a2:	f842 3b1c 	str.w	r3, [r2], #28
 800b1a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	bf98      	it	ls
 800b1b0:	f04f 0b00 	movls.w	fp, #0
 800b1b4:	9201      	str	r2, [sp, #4]
 800b1b6:	4616      	mov	r6, r2
 800b1b8:	46aa      	mov	sl, r5
 800b1ba:	46a9      	mov	r9, r5
 800b1bc:	9502      	str	r5, [sp, #8]
 800b1be:	68a2      	ldr	r2, [r4, #8]
 800b1c0:	b152      	cbz	r2, 800b1d8 <_scanf_float+0x64>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b4e      	cmp	r3, #78	@ 0x4e
 800b1c8:	d864      	bhi.n	800b294 <_scanf_float+0x120>
 800b1ca:	2b40      	cmp	r3, #64	@ 0x40
 800b1cc:	d83c      	bhi.n	800b248 <_scanf_float+0xd4>
 800b1ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b1d2:	b2c8      	uxtb	r0, r1
 800b1d4:	280e      	cmp	r0, #14
 800b1d6:	d93a      	bls.n	800b24e <_scanf_float+0xda>
 800b1d8:	f1b9 0f00 	cmp.w	r9, #0
 800b1dc:	d003      	beq.n	800b1e6 <_scanf_float+0x72>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1ea:	f1ba 0f01 	cmp.w	sl, #1
 800b1ee:	f200 8117 	bhi.w	800b420 <_scanf_float+0x2ac>
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	429e      	cmp	r6, r3
 800b1f6:	f200 8108 	bhi.w	800b40a <_scanf_float+0x296>
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	b007      	add	sp, #28
 800b1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b202:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b206:	2a0d      	cmp	r2, #13
 800b208:	d8e6      	bhi.n	800b1d8 <_scanf_float+0x64>
 800b20a:	a101      	add	r1, pc, #4	@ (adr r1, 800b210 <_scanf_float+0x9c>)
 800b20c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b210:	0800b357 	.word	0x0800b357
 800b214:	0800b1d9 	.word	0x0800b1d9
 800b218:	0800b1d9 	.word	0x0800b1d9
 800b21c:	0800b1d9 	.word	0x0800b1d9
 800b220:	0800b3b7 	.word	0x0800b3b7
 800b224:	0800b38f 	.word	0x0800b38f
 800b228:	0800b1d9 	.word	0x0800b1d9
 800b22c:	0800b1d9 	.word	0x0800b1d9
 800b230:	0800b365 	.word	0x0800b365
 800b234:	0800b1d9 	.word	0x0800b1d9
 800b238:	0800b1d9 	.word	0x0800b1d9
 800b23c:	0800b1d9 	.word	0x0800b1d9
 800b240:	0800b1d9 	.word	0x0800b1d9
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b24c:	e7db      	b.n	800b206 <_scanf_float+0x92>
 800b24e:	290e      	cmp	r1, #14
 800b250:	d8c2      	bhi.n	800b1d8 <_scanf_float+0x64>
 800b252:	a001      	add	r0, pc, #4	@ (adr r0, 800b258 <_scanf_float+0xe4>)
 800b254:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b258:	0800b30d 	.word	0x0800b30d
 800b25c:	0800b1d9 	.word	0x0800b1d9
 800b260:	0800b30d 	.word	0x0800b30d
 800b264:	0800b3a3 	.word	0x0800b3a3
 800b268:	0800b1d9 	.word	0x0800b1d9
 800b26c:	0800b2b5 	.word	0x0800b2b5
 800b270:	0800b2f3 	.word	0x0800b2f3
 800b274:	0800b2f3 	.word	0x0800b2f3
 800b278:	0800b2f3 	.word	0x0800b2f3
 800b27c:	0800b2f3 	.word	0x0800b2f3
 800b280:	0800b2f3 	.word	0x0800b2f3
 800b284:	0800b2f3 	.word	0x0800b2f3
 800b288:	0800b2f3 	.word	0x0800b2f3
 800b28c:	0800b2f3 	.word	0x0800b2f3
 800b290:	0800b2f3 	.word	0x0800b2f3
 800b294:	2b6e      	cmp	r3, #110	@ 0x6e
 800b296:	d809      	bhi.n	800b2ac <_scanf_float+0x138>
 800b298:	2b60      	cmp	r3, #96	@ 0x60
 800b29a:	d8b2      	bhi.n	800b202 <_scanf_float+0x8e>
 800b29c:	2b54      	cmp	r3, #84	@ 0x54
 800b29e:	d07b      	beq.n	800b398 <_scanf_float+0x224>
 800b2a0:	2b59      	cmp	r3, #89	@ 0x59
 800b2a2:	d199      	bne.n	800b1d8 <_scanf_float+0x64>
 800b2a4:	2d07      	cmp	r5, #7
 800b2a6:	d197      	bne.n	800b1d8 <_scanf_float+0x64>
 800b2a8:	2508      	movs	r5, #8
 800b2aa:	e02c      	b.n	800b306 <_scanf_float+0x192>
 800b2ac:	2b74      	cmp	r3, #116	@ 0x74
 800b2ae:	d073      	beq.n	800b398 <_scanf_float+0x224>
 800b2b0:	2b79      	cmp	r3, #121	@ 0x79
 800b2b2:	e7f6      	b.n	800b2a2 <_scanf_float+0x12e>
 800b2b4:	6821      	ldr	r1, [r4, #0]
 800b2b6:	05c8      	lsls	r0, r1, #23
 800b2b8:	d51b      	bpl.n	800b2f2 <_scanf_float+0x17e>
 800b2ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b2be:	6021      	str	r1, [r4, #0]
 800b2c0:	f109 0901 	add.w	r9, r9, #1
 800b2c4:	f1bb 0f00 	cmp.w	fp, #0
 800b2c8:	d003      	beq.n	800b2d2 <_scanf_float+0x15e>
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2d0:	60a2      	str	r2, [r4, #8]
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	607b      	str	r3, [r7, #4]
 800b2e6:	f340 8087 	ble.w	800b3f8 <_scanf_float+0x284>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	e765      	b.n	800b1be <_scanf_float+0x4a>
 800b2f2:	eb1a 0105 	adds.w	r1, sl, r5
 800b2f6:	f47f af6f 	bne.w	800b1d8 <_scanf_float+0x64>
 800b2fa:	6822      	ldr	r2, [r4, #0]
 800b2fc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b300:	6022      	str	r2, [r4, #0]
 800b302:	460d      	mov	r5, r1
 800b304:	468a      	mov	sl, r1
 800b306:	f806 3b01 	strb.w	r3, [r6], #1
 800b30a:	e7e2      	b.n	800b2d2 <_scanf_float+0x15e>
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	0610      	lsls	r0, r2, #24
 800b310:	f57f af62 	bpl.w	800b1d8 <_scanf_float+0x64>
 800b314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b318:	6022      	str	r2, [r4, #0]
 800b31a:	e7f4      	b.n	800b306 <_scanf_float+0x192>
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d10e      	bne.n	800b340 <_scanf_float+0x1cc>
 800b322:	f1b9 0f00 	cmp.w	r9, #0
 800b326:	d10e      	bne.n	800b346 <_scanf_float+0x1d2>
 800b328:	6822      	ldr	r2, [r4, #0]
 800b32a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b32e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b332:	d108      	bne.n	800b346 <_scanf_float+0x1d2>
 800b334:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	f04f 0a01 	mov.w	sl, #1
 800b33e:	e7e2      	b.n	800b306 <_scanf_float+0x192>
 800b340:	f1ba 0f02 	cmp.w	sl, #2
 800b344:	d055      	beq.n	800b3f2 <_scanf_float+0x27e>
 800b346:	2d01      	cmp	r5, #1
 800b348:	d002      	beq.n	800b350 <_scanf_float+0x1dc>
 800b34a:	2d04      	cmp	r5, #4
 800b34c:	f47f af44 	bne.w	800b1d8 <_scanf_float+0x64>
 800b350:	3501      	adds	r5, #1
 800b352:	b2ed      	uxtb	r5, r5
 800b354:	e7d7      	b.n	800b306 <_scanf_float+0x192>
 800b356:	f1ba 0f01 	cmp.w	sl, #1
 800b35a:	f47f af3d 	bne.w	800b1d8 <_scanf_float+0x64>
 800b35e:	f04f 0a02 	mov.w	sl, #2
 800b362:	e7d0      	b.n	800b306 <_scanf_float+0x192>
 800b364:	b97d      	cbnz	r5, 800b386 <_scanf_float+0x212>
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	f47f af38 	bne.w	800b1de <_scanf_float+0x6a>
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b374:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b378:	f040 8108 	bne.w	800b58c <_scanf_float+0x418>
 800b37c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	2501      	movs	r5, #1
 800b384:	e7bf      	b.n	800b306 <_scanf_float+0x192>
 800b386:	2d03      	cmp	r5, #3
 800b388:	d0e2      	beq.n	800b350 <_scanf_float+0x1dc>
 800b38a:	2d05      	cmp	r5, #5
 800b38c:	e7de      	b.n	800b34c <_scanf_float+0x1d8>
 800b38e:	2d02      	cmp	r5, #2
 800b390:	f47f af22 	bne.w	800b1d8 <_scanf_float+0x64>
 800b394:	2503      	movs	r5, #3
 800b396:	e7b6      	b.n	800b306 <_scanf_float+0x192>
 800b398:	2d06      	cmp	r5, #6
 800b39a:	f47f af1d 	bne.w	800b1d8 <_scanf_float+0x64>
 800b39e:	2507      	movs	r5, #7
 800b3a0:	e7b1      	b.n	800b306 <_scanf_float+0x192>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	0591      	lsls	r1, r2, #22
 800b3a6:	f57f af17 	bpl.w	800b1d8 <_scanf_float+0x64>
 800b3aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b3ae:	6022      	str	r2, [r4, #0]
 800b3b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3b4:	e7a7      	b.n	800b306 <_scanf_float+0x192>
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b3bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b3c0:	d006      	beq.n	800b3d0 <_scanf_float+0x25c>
 800b3c2:	0550      	lsls	r0, r2, #21
 800b3c4:	f57f af08 	bpl.w	800b1d8 <_scanf_float+0x64>
 800b3c8:	f1b9 0f00 	cmp.w	r9, #0
 800b3cc:	f000 80de 	beq.w	800b58c <_scanf_float+0x418>
 800b3d0:	0591      	lsls	r1, r2, #22
 800b3d2:	bf58      	it	pl
 800b3d4:	9902      	ldrpl	r1, [sp, #8]
 800b3d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b3da:	bf58      	it	pl
 800b3dc:	eba9 0101 	subpl.w	r1, r9, r1
 800b3e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b3e4:	bf58      	it	pl
 800b3e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b3ea:	6022      	str	r2, [r4, #0]
 800b3ec:	f04f 0900 	mov.w	r9, #0
 800b3f0:	e789      	b.n	800b306 <_scanf_float+0x192>
 800b3f2:	f04f 0a03 	mov.w	sl, #3
 800b3f6:	e786      	b.n	800b306 <_scanf_float+0x192>
 800b3f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4640      	mov	r0, r8
 800b400:	4798      	blx	r3
 800b402:	2800      	cmp	r0, #0
 800b404:	f43f aedb 	beq.w	800b1be <_scanf_float+0x4a>
 800b408:	e6e6      	b.n	800b1d8 <_scanf_float+0x64>
 800b40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b40e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b412:	463a      	mov	r2, r7
 800b414:	4640      	mov	r0, r8
 800b416:	4798      	blx	r3
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	e6e8      	b.n	800b1f2 <_scanf_float+0x7e>
 800b420:	1e6b      	subs	r3, r5, #1
 800b422:	2b06      	cmp	r3, #6
 800b424:	d824      	bhi.n	800b470 <_scanf_float+0x2fc>
 800b426:	2d02      	cmp	r5, #2
 800b428:	d836      	bhi.n	800b498 <_scanf_float+0x324>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	429e      	cmp	r6, r3
 800b42e:	f67f aee4 	bls.w	800b1fa <_scanf_float+0x86>
 800b432:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b436:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b43a:	463a      	mov	r2, r7
 800b43c:	4640      	mov	r0, r8
 800b43e:	4798      	blx	r3
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	3b01      	subs	r3, #1
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	e7f0      	b.n	800b42a <_scanf_float+0x2b6>
 800b448:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b44c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b450:	463a      	mov	r2, r7
 800b452:	4640      	mov	r0, r8
 800b454:	4798      	blx	r3
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	3b01      	subs	r3, #1
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b460:	fa5f fa8a 	uxtb.w	sl, sl
 800b464:	f1ba 0f02 	cmp.w	sl, #2
 800b468:	d1ee      	bne.n	800b448 <_scanf_float+0x2d4>
 800b46a:	3d03      	subs	r5, #3
 800b46c:	b2ed      	uxtb	r5, r5
 800b46e:	1b76      	subs	r6, r6, r5
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	05da      	lsls	r2, r3, #23
 800b474:	d530      	bpl.n	800b4d8 <_scanf_float+0x364>
 800b476:	055b      	lsls	r3, r3, #21
 800b478:	d511      	bpl.n	800b49e <_scanf_float+0x32a>
 800b47a:	9b01      	ldr	r3, [sp, #4]
 800b47c:	429e      	cmp	r6, r3
 800b47e:	f67f aebc 	bls.w	800b1fa <_scanf_float+0x86>
 800b482:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b48a:	463a      	mov	r2, r7
 800b48c:	4640      	mov	r0, r8
 800b48e:	4798      	blx	r3
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	3b01      	subs	r3, #1
 800b494:	6123      	str	r3, [r4, #16]
 800b496:	e7f0      	b.n	800b47a <_scanf_float+0x306>
 800b498:	46aa      	mov	sl, r5
 800b49a:	46b3      	mov	fp, r6
 800b49c:	e7de      	b.n	800b45c <_scanf_float+0x2e8>
 800b49e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	2965      	cmp	r1, #101	@ 0x65
 800b4a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4aa:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	d00c      	beq.n	800b4cc <_scanf_float+0x358>
 800b4b2:	2945      	cmp	r1, #69	@ 0x45
 800b4b4:	d00a      	beq.n	800b4cc <_scanf_float+0x358>
 800b4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4640      	mov	r0, r8
 800b4be:	4798      	blx	r3
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	1eb5      	subs	r5, r6, #2
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4d0:	463a      	mov	r2, r7
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4798      	blx	r3
 800b4d6:	462e      	mov	r6, r5
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	f012 0210 	ands.w	r2, r2, #16
 800b4de:	d001      	beq.n	800b4e4 <_scanf_float+0x370>
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e68b      	b.n	800b1fc <_scanf_float+0x88>
 800b4e4:	7032      	strb	r2, [r6, #0]
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b4ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4f0:	d11c      	bne.n	800b52c <_scanf_float+0x3b8>
 800b4f2:	9b02      	ldr	r3, [sp, #8]
 800b4f4:	454b      	cmp	r3, r9
 800b4f6:	eba3 0209 	sub.w	r2, r3, r9
 800b4fa:	d123      	bne.n	800b544 <_scanf_float+0x3d0>
 800b4fc:	9901      	ldr	r1, [sp, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	4640      	mov	r0, r8
 800b502:	f7ff f9cd 	bl	800a8a0 <_strtod_r>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	6821      	ldr	r1, [r4, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f011 0f02 	tst.w	r1, #2
 800b510:	ec57 6b10 	vmov	r6, r7, d0
 800b514:	f103 0204 	add.w	r2, r3, #4
 800b518:	d01f      	beq.n	800b55a <_scanf_float+0x3e6>
 800b51a:	9903      	ldr	r1, [sp, #12]
 800b51c:	600a      	str	r2, [r1, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	e9c3 6700 	strd	r6, r7, [r3]
 800b524:	68e3      	ldr	r3, [r4, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60e3      	str	r3, [r4, #12]
 800b52a:	e7d9      	b.n	800b4e0 <_scanf_float+0x36c>
 800b52c:	9b04      	ldr	r3, [sp, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0e4      	beq.n	800b4fc <_scanf_float+0x388>
 800b532:	9905      	ldr	r1, [sp, #20]
 800b534:	230a      	movs	r3, #10
 800b536:	3101      	adds	r1, #1
 800b538:	4640      	mov	r0, r8
 800b53a:	f002 f9d1 	bl	800d8e0 <_strtol_r>
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	9e05      	ldr	r6, [sp, #20]
 800b542:	1ac2      	subs	r2, r0, r3
 800b544:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b548:	429e      	cmp	r6, r3
 800b54a:	bf28      	it	cs
 800b54c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b550:	4910      	ldr	r1, [pc, #64]	@ (800b594 <_scanf_float+0x420>)
 800b552:	4630      	mov	r0, r6
 800b554:	f000 f8e4 	bl	800b720 <siprintf>
 800b558:	e7d0      	b.n	800b4fc <_scanf_float+0x388>
 800b55a:	f011 0f04 	tst.w	r1, #4
 800b55e:	9903      	ldr	r1, [sp, #12]
 800b560:	600a      	str	r2, [r1, #0]
 800b562:	d1dc      	bne.n	800b51e <_scanf_float+0x3aa>
 800b564:	681d      	ldr	r5, [r3, #0]
 800b566:	4632      	mov	r2, r6
 800b568:	463b      	mov	r3, r7
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 faed 	bl	8000b4c <__aeabi_dcmpun>
 800b572:	b128      	cbz	r0, 800b580 <_scanf_float+0x40c>
 800b574:	4808      	ldr	r0, [pc, #32]	@ (800b598 <_scanf_float+0x424>)
 800b576:	f000 f9e7 	bl	800b948 <nanf>
 800b57a:	ed85 0a00 	vstr	s0, [r5]
 800b57e:	e7d1      	b.n	800b524 <_scanf_float+0x3b0>
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 fb40 	bl	8000c08 <__aeabi_d2f>
 800b588:	6028      	str	r0, [r5, #0]
 800b58a:	e7cb      	b.n	800b524 <_scanf_float+0x3b0>
 800b58c:	f04f 0900 	mov.w	r9, #0
 800b590:	e629      	b.n	800b1e6 <_scanf_float+0x72>
 800b592:	bf00      	nop
 800b594:	0800e59c 	.word	0x0800e59c
 800b598:	0800e93d 	.word	0x0800e93d

0800b59c <std>:
 800b59c:	2300      	movs	r3, #0
 800b59e:	b510      	push	{r4, lr}
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5aa:	6083      	str	r3, [r0, #8]
 800b5ac:	8181      	strh	r1, [r0, #12]
 800b5ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5b0:	81c2      	strh	r2, [r0, #14]
 800b5b2:	6183      	str	r3, [r0, #24]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	2208      	movs	r2, #8
 800b5b8:	305c      	adds	r0, #92	@ 0x5c
 800b5ba:	f000 f914 	bl	800b7e6 <memset>
 800b5be:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f4 <std+0x58>)
 800b5c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f8 <std+0x5c>)
 800b5c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5fc <std+0x60>)
 800b5c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b600 <std+0x64>)
 800b5cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <std+0x68>)
 800b5d0:	6224      	str	r4, [r4, #32]
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	d006      	beq.n	800b5e4 <std+0x48>
 800b5d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5da:	4294      	cmp	r4, r2
 800b5dc:	d002      	beq.n	800b5e4 <std+0x48>
 800b5de:	33d0      	adds	r3, #208	@ 0xd0
 800b5e0:	429c      	cmp	r4, r3
 800b5e2:	d105      	bne.n	800b5f0 <std+0x54>
 800b5e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5ec:	f000 b98a 	b.w	800b904 <__retarget_lock_init_recursive>
 800b5f0:	bd10      	pop	{r4, pc}
 800b5f2:	bf00      	nop
 800b5f4:	0800b761 	.word	0x0800b761
 800b5f8:	0800b783 	.word	0x0800b783
 800b5fc:	0800b7bb 	.word	0x0800b7bb
 800b600:	0800b7df 	.word	0x0800b7df
 800b604:	200006e0 	.word	0x200006e0

0800b608 <stdio_exit_handler>:
 800b608:	4a02      	ldr	r2, [pc, #8]	@ (800b614 <stdio_exit_handler+0xc>)
 800b60a:	4903      	ldr	r1, [pc, #12]	@ (800b618 <stdio_exit_handler+0x10>)
 800b60c:	4803      	ldr	r0, [pc, #12]	@ (800b61c <stdio_exit_handler+0x14>)
 800b60e:	f000 b869 	b.w	800b6e4 <_fwalk_sglue>
 800b612:	bf00      	nop
 800b614:	20000010 	.word	0x20000010
 800b618:	0800dcb5 	.word	0x0800dcb5
 800b61c:	2000018c 	.word	0x2000018c

0800b620 <cleanup_stdio>:
 800b620:	6841      	ldr	r1, [r0, #4]
 800b622:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <cleanup_stdio+0x34>)
 800b624:	4299      	cmp	r1, r3
 800b626:	b510      	push	{r4, lr}
 800b628:	4604      	mov	r4, r0
 800b62a:	d001      	beq.n	800b630 <cleanup_stdio+0x10>
 800b62c:	f002 fb42 	bl	800dcb4 <_fflush_r>
 800b630:	68a1      	ldr	r1, [r4, #8]
 800b632:	4b09      	ldr	r3, [pc, #36]	@ (800b658 <cleanup_stdio+0x38>)
 800b634:	4299      	cmp	r1, r3
 800b636:	d002      	beq.n	800b63e <cleanup_stdio+0x1e>
 800b638:	4620      	mov	r0, r4
 800b63a:	f002 fb3b 	bl	800dcb4 <_fflush_r>
 800b63e:	68e1      	ldr	r1, [r4, #12]
 800b640:	4b06      	ldr	r3, [pc, #24]	@ (800b65c <cleanup_stdio+0x3c>)
 800b642:	4299      	cmp	r1, r3
 800b644:	d004      	beq.n	800b650 <cleanup_stdio+0x30>
 800b646:	4620      	mov	r0, r4
 800b648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b64c:	f002 bb32 	b.w	800dcb4 <_fflush_r>
 800b650:	bd10      	pop	{r4, pc}
 800b652:	bf00      	nop
 800b654:	200006e0 	.word	0x200006e0
 800b658:	20000748 	.word	0x20000748
 800b65c:	200007b0 	.word	0x200007b0

0800b660 <global_stdio_init.part.0>:
 800b660:	b510      	push	{r4, lr}
 800b662:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <global_stdio_init.part.0+0x30>)
 800b664:	4c0b      	ldr	r4, [pc, #44]	@ (800b694 <global_stdio_init.part.0+0x34>)
 800b666:	4a0c      	ldr	r2, [pc, #48]	@ (800b698 <global_stdio_init.part.0+0x38>)
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	4620      	mov	r0, r4
 800b66c:	2200      	movs	r2, #0
 800b66e:	2104      	movs	r1, #4
 800b670:	f7ff ff94 	bl	800b59c <std>
 800b674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b678:	2201      	movs	r2, #1
 800b67a:	2109      	movs	r1, #9
 800b67c:	f7ff ff8e 	bl	800b59c <std>
 800b680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b684:	2202      	movs	r2, #2
 800b686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68a:	2112      	movs	r1, #18
 800b68c:	f7ff bf86 	b.w	800b59c <std>
 800b690:	20000818 	.word	0x20000818
 800b694:	200006e0 	.word	0x200006e0
 800b698:	0800b609 	.word	0x0800b609

0800b69c <__sfp_lock_acquire>:
 800b69c:	4801      	ldr	r0, [pc, #4]	@ (800b6a4 <__sfp_lock_acquire+0x8>)
 800b69e:	f000 b932 	b.w	800b906 <__retarget_lock_acquire_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	20000821 	.word	0x20000821

0800b6a8 <__sfp_lock_release>:
 800b6a8:	4801      	ldr	r0, [pc, #4]	@ (800b6b0 <__sfp_lock_release+0x8>)
 800b6aa:	f000 b92d 	b.w	800b908 <__retarget_lock_release_recursive>
 800b6ae:	bf00      	nop
 800b6b0:	20000821 	.word	0x20000821

0800b6b4 <__sinit>:
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	f7ff fff0 	bl	800b69c <__sfp_lock_acquire>
 800b6bc:	6a23      	ldr	r3, [r4, #32]
 800b6be:	b11b      	cbz	r3, 800b6c8 <__sinit+0x14>
 800b6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c4:	f7ff bff0 	b.w	800b6a8 <__sfp_lock_release>
 800b6c8:	4b04      	ldr	r3, [pc, #16]	@ (800b6dc <__sinit+0x28>)
 800b6ca:	6223      	str	r3, [r4, #32]
 800b6cc:	4b04      	ldr	r3, [pc, #16]	@ (800b6e0 <__sinit+0x2c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1f5      	bne.n	800b6c0 <__sinit+0xc>
 800b6d4:	f7ff ffc4 	bl	800b660 <global_stdio_init.part.0>
 800b6d8:	e7f2      	b.n	800b6c0 <__sinit+0xc>
 800b6da:	bf00      	nop
 800b6dc:	0800b621 	.word	0x0800b621
 800b6e0:	20000818 	.word	0x20000818

0800b6e4 <_fwalk_sglue>:
 800b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	4688      	mov	r8, r1
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	2600      	movs	r6, #0
 800b6f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6f4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6f8:	d505      	bpl.n	800b706 <_fwalk_sglue+0x22>
 800b6fa:	6824      	ldr	r4, [r4, #0]
 800b6fc:	2c00      	cmp	r4, #0
 800b6fe:	d1f7      	bne.n	800b6f0 <_fwalk_sglue+0xc>
 800b700:	4630      	mov	r0, r6
 800b702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d907      	bls.n	800b71c <_fwalk_sglue+0x38>
 800b70c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b710:	3301      	adds	r3, #1
 800b712:	d003      	beq.n	800b71c <_fwalk_sglue+0x38>
 800b714:	4629      	mov	r1, r5
 800b716:	4638      	mov	r0, r7
 800b718:	47c0      	blx	r8
 800b71a:	4306      	orrs	r6, r0
 800b71c:	3568      	adds	r5, #104	@ 0x68
 800b71e:	e7e9      	b.n	800b6f4 <_fwalk_sglue+0x10>

0800b720 <siprintf>:
 800b720:	b40e      	push	{r1, r2, r3}
 800b722:	b500      	push	{lr}
 800b724:	b09c      	sub	sp, #112	@ 0x70
 800b726:	ab1d      	add	r3, sp, #116	@ 0x74
 800b728:	9002      	str	r0, [sp, #8]
 800b72a:	9006      	str	r0, [sp, #24]
 800b72c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b730:	4809      	ldr	r0, [pc, #36]	@ (800b758 <siprintf+0x38>)
 800b732:	9107      	str	r1, [sp, #28]
 800b734:	9104      	str	r1, [sp, #16]
 800b736:	4909      	ldr	r1, [pc, #36]	@ (800b75c <siprintf+0x3c>)
 800b738:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73c:	9105      	str	r1, [sp, #20]
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	a902      	add	r1, sp, #8
 800b744:	f002 f936 	bl	800d9b4 <_svfiprintf_r>
 800b748:	9b02      	ldr	r3, [sp, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	b01c      	add	sp, #112	@ 0x70
 800b750:	f85d eb04 	ldr.w	lr, [sp], #4
 800b754:	b003      	add	sp, #12
 800b756:	4770      	bx	lr
 800b758:	20000188 	.word	0x20000188
 800b75c:	ffff0208 	.word	0xffff0208

0800b760 <__sread>:
 800b760:	b510      	push	{r4, lr}
 800b762:	460c      	mov	r4, r1
 800b764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b768:	f000 f87e 	bl	800b868 <_read_r>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	bfab      	itete	ge
 800b770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b772:	89a3      	ldrhlt	r3, [r4, #12]
 800b774:	181b      	addge	r3, r3, r0
 800b776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b77a:	bfac      	ite	ge
 800b77c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b77e:	81a3      	strhlt	r3, [r4, #12]
 800b780:	bd10      	pop	{r4, pc}

0800b782 <__swrite>:
 800b782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b786:	461f      	mov	r7, r3
 800b788:	898b      	ldrh	r3, [r1, #12]
 800b78a:	05db      	lsls	r3, r3, #23
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	4616      	mov	r6, r2
 800b792:	d505      	bpl.n	800b7a0 <__swrite+0x1e>
 800b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b798:	2302      	movs	r3, #2
 800b79a:	2200      	movs	r2, #0
 800b79c:	f000 f852 	bl	800b844 <_lseek_r>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b6:	f000 b869 	b.w	800b88c <_write_r>

0800b7ba <__sseek>:
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 f83f 	bl	800b844 <_lseek_r>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	bf15      	itete	ne
 800b7cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7d6:	81a3      	strheq	r3, [r4, #12]
 800b7d8:	bf18      	it	ne
 800b7da:	81a3      	strhne	r3, [r4, #12]
 800b7dc:	bd10      	pop	{r4, pc}

0800b7de <__sclose>:
 800b7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e2:	f000 b81f 	b.w	800b824 <_close_r>

0800b7e6 <memset>:
 800b7e6:	4402      	add	r2, r0
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d100      	bne.n	800b7f0 <memset+0xa>
 800b7ee:	4770      	bx	lr
 800b7f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b7f4:	e7f9      	b.n	800b7ea <memset+0x4>

0800b7f6 <strncmp>:
 800b7f6:	b510      	push	{r4, lr}
 800b7f8:	b16a      	cbz	r2, 800b816 <strncmp+0x20>
 800b7fa:	3901      	subs	r1, #1
 800b7fc:	1884      	adds	r4, r0, r2
 800b7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b802:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b806:	429a      	cmp	r2, r3
 800b808:	d103      	bne.n	800b812 <strncmp+0x1c>
 800b80a:	42a0      	cmp	r0, r4
 800b80c:	d001      	beq.n	800b812 <strncmp+0x1c>
 800b80e:	2a00      	cmp	r2, #0
 800b810:	d1f5      	bne.n	800b7fe <strncmp+0x8>
 800b812:	1ad0      	subs	r0, r2, r3
 800b814:	bd10      	pop	{r4, pc}
 800b816:	4610      	mov	r0, r2
 800b818:	e7fc      	b.n	800b814 <strncmp+0x1e>
	...

0800b81c <_localeconv_r>:
 800b81c:	4800      	ldr	r0, [pc, #0]	@ (800b820 <_localeconv_r+0x4>)
 800b81e:	4770      	bx	lr
 800b820:	2000010c 	.word	0x2000010c

0800b824 <_close_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d06      	ldr	r5, [pc, #24]	@ (800b840 <_close_r+0x1c>)
 800b828:	2300      	movs	r3, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	602b      	str	r3, [r5, #0]
 800b830:	f7f7 fecc 	bl	80035cc <_close>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_close_r+0x1a>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_close_r+0x1a>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	2000081c 	.word	0x2000081c

0800b844 <_lseek_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	@ (800b864 <_lseek_r+0x20>)
 800b848:	4604      	mov	r4, r0
 800b84a:	4608      	mov	r0, r1
 800b84c:	4611      	mov	r1, r2
 800b84e:	2200      	movs	r2, #0
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f7f7 fee1 	bl	800361a <_lseek>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_lseek_r+0x1e>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_lseek_r+0x1e>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	2000081c 	.word	0x2000081c

0800b868 <_read_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	@ (800b888 <_read_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f7 fe6f 	bl	800355a <_read>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_read_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_read_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	2000081c 	.word	0x2000081c

0800b88c <_write_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	@ (800b8ac <_write_r+0x20>)
 800b890:	4604      	mov	r4, r0
 800b892:	4608      	mov	r0, r1
 800b894:	4611      	mov	r1, r2
 800b896:	2200      	movs	r2, #0
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f7f7 fe7a 	bl	8003594 <_write>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_write_r+0x1e>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_write_r+0x1e>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	2000081c 	.word	0x2000081c

0800b8b0 <__errno>:
 800b8b0:	4b01      	ldr	r3, [pc, #4]	@ (800b8b8 <__errno+0x8>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	20000188 	.word	0x20000188

0800b8bc <__libc_init_array>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	4d0d      	ldr	r5, [pc, #52]	@ (800b8f4 <__libc_init_array+0x38>)
 800b8c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b8f8 <__libc_init_array+0x3c>)
 800b8c2:	1b64      	subs	r4, r4, r5
 800b8c4:	10a4      	asrs	r4, r4, #2
 800b8c6:	2600      	movs	r6, #0
 800b8c8:	42a6      	cmp	r6, r4
 800b8ca:	d109      	bne.n	800b8e0 <__libc_init_array+0x24>
 800b8cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b8fc <__libc_init_array+0x40>)
 800b8ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b900 <__libc_init_array+0x44>)
 800b8d0:	f002 fdde 	bl	800e490 <_init>
 800b8d4:	1b64      	subs	r4, r4, r5
 800b8d6:	10a4      	asrs	r4, r4, #2
 800b8d8:	2600      	movs	r6, #0
 800b8da:	42a6      	cmp	r6, r4
 800b8dc:	d105      	bne.n	800b8ea <__libc_init_array+0x2e>
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e4:	4798      	blx	r3
 800b8e6:	3601      	adds	r6, #1
 800b8e8:	e7ee      	b.n	800b8c8 <__libc_init_array+0xc>
 800b8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ee:	4798      	blx	r3
 800b8f0:	3601      	adds	r6, #1
 800b8f2:	e7f2      	b.n	800b8da <__libc_init_array+0x1e>
 800b8f4:	0800e948 	.word	0x0800e948
 800b8f8:	0800e948 	.word	0x0800e948
 800b8fc:	0800e948 	.word	0x0800e948
 800b900:	0800e94c 	.word	0x0800e94c

0800b904 <__retarget_lock_init_recursive>:
 800b904:	4770      	bx	lr

0800b906 <__retarget_lock_acquire_recursive>:
 800b906:	4770      	bx	lr

0800b908 <__retarget_lock_release_recursive>:
 800b908:	4770      	bx	lr

0800b90a <strcpy>:
 800b90a:	4603      	mov	r3, r0
 800b90c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b910:	f803 2b01 	strb.w	r2, [r3], #1
 800b914:	2a00      	cmp	r2, #0
 800b916:	d1f9      	bne.n	800b90c <strcpy+0x2>
 800b918:	4770      	bx	lr

0800b91a <memcpy>:
 800b91a:	440a      	add	r2, r1
 800b91c:	4291      	cmp	r1, r2
 800b91e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b922:	d100      	bne.n	800b926 <memcpy+0xc>
 800b924:	4770      	bx	lr
 800b926:	b510      	push	{r4, lr}
 800b928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b930:	4291      	cmp	r1, r2
 800b932:	d1f9      	bne.n	800b928 <memcpy+0xe>
 800b934:	bd10      	pop	{r4, pc}
	...

0800b938 <nan>:
 800b938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b940 <nan+0x8>
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	00000000 	.word	0x00000000
 800b944:	7ff80000 	.word	0x7ff80000

0800b948 <nanf>:
 800b948:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b950 <nanf+0x8>
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	7fc00000 	.word	0x7fc00000

0800b954 <quorem>:
 800b954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	6903      	ldr	r3, [r0, #16]
 800b95a:	690c      	ldr	r4, [r1, #16]
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	4607      	mov	r7, r0
 800b960:	db7e      	blt.n	800ba60 <quorem+0x10c>
 800b962:	3c01      	subs	r4, #1
 800b964:	f101 0814 	add.w	r8, r1, #20
 800b968:	00a3      	lsls	r3, r4, #2
 800b96a:	f100 0514 	add.w	r5, r0, #20
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b97a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b97e:	3301      	adds	r3, #1
 800b980:	429a      	cmp	r2, r3
 800b982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b986:	fbb2 f6f3 	udiv	r6, r2, r3
 800b98a:	d32e      	bcc.n	800b9ea <quorem+0x96>
 800b98c:	f04f 0a00 	mov.w	sl, #0
 800b990:	46c4      	mov	ip, r8
 800b992:	46ae      	mov	lr, r5
 800b994:	46d3      	mov	fp, sl
 800b996:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b99a:	b298      	uxth	r0, r3
 800b99c:	fb06 a000 	mla	r0, r6, r0, sl
 800b9a0:	0c02      	lsrs	r2, r0, #16
 800b9a2:	0c1b      	lsrs	r3, r3, #16
 800b9a4:	fb06 2303 	mla	r3, r6, r3, r2
 800b9a8:	f8de 2000 	ldr.w	r2, [lr]
 800b9ac:	b280      	uxth	r0, r0
 800b9ae:	b292      	uxth	r2, r2
 800b9b0:	1a12      	subs	r2, r2, r0
 800b9b2:	445a      	add	r2, fp
 800b9b4:	f8de 0000 	ldr.w	r0, [lr]
 800b9b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9cc:	45e1      	cmp	r9, ip
 800b9ce:	f84e 2b04 	str.w	r2, [lr], #4
 800b9d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9d6:	d2de      	bcs.n	800b996 <quorem+0x42>
 800b9d8:	9b00      	ldr	r3, [sp, #0]
 800b9da:	58eb      	ldr	r3, [r5, r3]
 800b9dc:	b92b      	cbnz	r3, 800b9ea <quorem+0x96>
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	d32f      	bcc.n	800ba48 <quorem+0xf4>
 800b9e8:	613c      	str	r4, [r7, #16]
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f001 fd10 	bl	800d410 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	db25      	blt.n	800ba40 <quorem+0xec>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9fc:	f8d1 c000 	ldr.w	ip, [r1]
 800ba00:	fa1f fe82 	uxth.w	lr, r2
 800ba04:	fa1f f38c 	uxth.w	r3, ip
 800ba08:	eba3 030e 	sub.w	r3, r3, lr
 800ba0c:	4403      	add	r3, r0
 800ba0e:	0c12      	lsrs	r2, r2, #16
 800ba10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba1e:	45c1      	cmp	r9, r8
 800ba20:	f841 3b04 	str.w	r3, [r1], #4
 800ba24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba28:	d2e6      	bcs.n	800b9f8 <quorem+0xa4>
 800ba2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba32:	b922      	cbnz	r2, 800ba3e <quorem+0xea>
 800ba34:	3b04      	subs	r3, #4
 800ba36:	429d      	cmp	r5, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	d30b      	bcc.n	800ba54 <quorem+0x100>
 800ba3c:	613c      	str	r4, [r7, #16]
 800ba3e:	3601      	adds	r6, #1
 800ba40:	4630      	mov	r0, r6
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	3b04      	subs	r3, #4
 800ba4c:	2a00      	cmp	r2, #0
 800ba4e:	d1cb      	bne.n	800b9e8 <quorem+0x94>
 800ba50:	3c01      	subs	r4, #1
 800ba52:	e7c6      	b.n	800b9e2 <quorem+0x8e>
 800ba54:	6812      	ldr	r2, [r2, #0]
 800ba56:	3b04      	subs	r3, #4
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	d1ef      	bne.n	800ba3c <quorem+0xe8>
 800ba5c:	3c01      	subs	r4, #1
 800ba5e:	e7ea      	b.n	800ba36 <quorem+0xe2>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7ee      	b.n	800ba42 <quorem+0xee>
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	69c7      	ldr	r7, [r0, #28]
 800ba6e:	b099      	sub	sp, #100	@ 0x64
 800ba70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba74:	ec55 4b10 	vmov	r4, r5, d0
 800ba78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ba7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba7c:	4683      	mov	fp, r0
 800ba7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba82:	b97f      	cbnz	r7, 800baa4 <_dtoa_r+0x3c>
 800ba84:	2010      	movs	r0, #16
 800ba86:	f001 f937 	bl	800ccf8 <malloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ba90:	b920      	cbnz	r0, 800ba9c <_dtoa_r+0x34>
 800ba92:	4ba7      	ldr	r3, [pc, #668]	@ (800bd30 <_dtoa_r+0x2c8>)
 800ba94:	21ef      	movs	r1, #239	@ 0xef
 800ba96:	48a7      	ldr	r0, [pc, #668]	@ (800bd34 <_dtoa_r+0x2cc>)
 800ba98:	f002 f95e 	bl	800dd58 <__assert_func>
 800ba9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800baa0:	6007      	str	r7, [r0, #0]
 800baa2:	60c7      	str	r7, [r0, #12]
 800baa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baa8:	6819      	ldr	r1, [r3, #0]
 800baaa:	b159      	cbz	r1, 800bac4 <_dtoa_r+0x5c>
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	604a      	str	r2, [r1, #4]
 800bab0:	2301      	movs	r3, #1
 800bab2:	4093      	lsls	r3, r2
 800bab4:	608b      	str	r3, [r1, #8]
 800bab6:	4658      	mov	r0, fp
 800bab8:	f001 fa26 	bl	800cf08 <_Bfree>
 800babc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	1e2b      	subs	r3, r5, #0
 800bac6:	bfb9      	ittee	lt
 800bac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bacc:	9303      	strlt	r3, [sp, #12]
 800bace:	2300      	movge	r3, #0
 800bad0:	6033      	strge	r3, [r6, #0]
 800bad2:	9f03      	ldr	r7, [sp, #12]
 800bad4:	4b98      	ldr	r3, [pc, #608]	@ (800bd38 <_dtoa_r+0x2d0>)
 800bad6:	bfbc      	itt	lt
 800bad8:	2201      	movlt	r2, #1
 800bada:	6032      	strlt	r2, [r6, #0]
 800badc:	43bb      	bics	r3, r7
 800bade:	d112      	bne.n	800bb06 <_dtoa_r+0x9e>
 800bae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800baec:	4323      	orrs	r3, r4
 800baee:	f000 854d 	beq.w	800c58c <_dtoa_r+0xb24>
 800baf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd4c <_dtoa_r+0x2e4>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 854f 	beq.w	800c59c <_dtoa_r+0xb34>
 800bafe:	f10a 0303 	add.w	r3, sl, #3
 800bb02:	f000 bd49 	b.w	800c598 <_dtoa_r+0xb30>
 800bb06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	ec51 0b17 	vmov	r0, r1, d7
 800bb10:	2300      	movs	r3, #0
 800bb12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb16:	f7f4 ffe7 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	b158      	cbz	r0, 800bb36 <_dtoa_r+0xce>
 800bb1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb20:	2301      	movs	r3, #1
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb26:	b113      	cbz	r3, 800bb2e <_dtoa_r+0xc6>
 800bb28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb2a:	4b84      	ldr	r3, [pc, #528]	@ (800bd3c <_dtoa_r+0x2d4>)
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bd50 <_dtoa_r+0x2e8>
 800bb32:	f000 bd33 	b.w	800c59c <_dtoa_r+0xb34>
 800bb36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb3a:	aa16      	add	r2, sp, #88	@ 0x58
 800bb3c:	a917      	add	r1, sp, #92	@ 0x5c
 800bb3e:	4658      	mov	r0, fp
 800bb40:	f001 fd86 	bl	800d650 <__d2b>
 800bb44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb48:	4681      	mov	r9, r0
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d077      	beq.n	800bc3e <_dtoa_r+0x1d6>
 800bb4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb68:	4619      	mov	r1, r3
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4b74      	ldr	r3, [pc, #464]	@ (800bd40 <_dtoa_r+0x2d8>)
 800bb6e:	f7f4 fb9b 	bl	80002a8 <__aeabi_dsub>
 800bb72:	a369      	add	r3, pc, #420	@ (adr r3, 800bd18 <_dtoa_r+0x2b0>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fd4e 	bl	8000618 <__aeabi_dmul>
 800bb7c:	a368      	add	r3, pc, #416	@ (adr r3, 800bd20 <_dtoa_r+0x2b8>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fb93 	bl	80002ac <__adddf3>
 800bb86:	4604      	mov	r4, r0
 800bb88:	4630      	mov	r0, r6
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	f7f4 fcda 	bl	8000544 <__aeabi_i2d>
 800bb90:	a365      	add	r3, pc, #404	@ (adr r3, 800bd28 <_dtoa_r+0x2c0>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fd3f 	bl	8000618 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 fb83 	bl	80002ac <__adddf3>
 800bba6:	4604      	mov	r4, r0
 800bba8:	460d      	mov	r5, r1
 800bbaa:	f7f4 ffe5 	bl	8000b78 <__aeabi_d2iz>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 ffa0 	bl	8000afc <__aeabi_dcmplt>
 800bbbc:	b140      	cbz	r0, 800bbd0 <_dtoa_r+0x168>
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f7f4 fcc0 	bl	8000544 <__aeabi_i2d>
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f7f4 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbcc:	b900      	cbnz	r0, 800bbd0 <_dtoa_r+0x168>
 800bbce:	3f01      	subs	r7, #1
 800bbd0:	2f16      	cmp	r7, #22
 800bbd2:	d851      	bhi.n	800bc78 <_dtoa_r+0x210>
 800bbd4:	4b5b      	ldr	r3, [pc, #364]	@ (800bd44 <_dtoa_r+0x2dc>)
 800bbd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbe2:	f7f4 ff8b 	bl	8000afc <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d048      	beq.n	800bc7c <_dtoa_r+0x214>
 800bbea:	3f01      	subs	r7, #1
 800bbec:	2300      	movs	r3, #0
 800bbee:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbf2:	1b9b      	subs	r3, r3, r6
 800bbf4:	1e5a      	subs	r2, r3, #1
 800bbf6:	bf44      	itt	mi
 800bbf8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bbfc:	2300      	movmi	r3, #0
 800bbfe:	9208      	str	r2, [sp, #32]
 800bc00:	bf54      	ite	pl
 800bc02:	f04f 0800 	movpl.w	r8, #0
 800bc06:	9308      	strmi	r3, [sp, #32]
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	db39      	blt.n	800bc80 <_dtoa_r+0x218>
 800bc0c:	9b08      	ldr	r3, [sp, #32]
 800bc0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc10:	443b      	add	r3, r7
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	2300      	movs	r3, #0
 800bc16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d864      	bhi.n	800bce8 <_dtoa_r+0x280>
 800bc1e:	2b05      	cmp	r3, #5
 800bc20:	bfc4      	itt	gt
 800bc22:	3b04      	subgt	r3, #4
 800bc24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc28:	f1a3 0302 	sub.w	r3, r3, #2
 800bc2c:	bfcc      	ite	gt
 800bc2e:	2400      	movgt	r4, #0
 800bc30:	2401      	movle	r4, #1
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d863      	bhi.n	800bcfe <_dtoa_r+0x296>
 800bc36:	e8df f003 	tbb	[pc, r3]
 800bc3a:	372a      	.short	0x372a
 800bc3c:	5535      	.short	0x5535
 800bc3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc42:	441e      	add	r6, r3
 800bc44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	bfc1      	itttt	gt
 800bc4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc50:	409f      	lslgt	r7, r3
 800bc52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc5a:	bfd6      	itet	le
 800bc5c:	f1c3 0320 	rsble	r3, r3, #32
 800bc60:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc64:	fa04 f003 	lslle.w	r0, r4, r3
 800bc68:	f7f4 fc5c 	bl	8000524 <__aeabi_ui2d>
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc72:	3e01      	subs	r6, #1
 800bc74:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc76:	e777      	b.n	800bb68 <_dtoa_r+0x100>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7b8      	b.n	800bbee <_dtoa_r+0x186>
 800bc7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc7e:	e7b7      	b.n	800bbf0 <_dtoa_r+0x188>
 800bc80:	427b      	negs	r3, r7
 800bc82:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc84:	2300      	movs	r3, #0
 800bc86:	eba8 0807 	sub.w	r8, r8, r7
 800bc8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc8c:	e7c4      	b.n	800bc18 <_dtoa_r+0x1b0>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc35      	bgt.n	800bd04 <_dtoa_r+0x29c>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	9307      	str	r3, [sp, #28]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bca2:	e00b      	b.n	800bcbc <_dtoa_r+0x254>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e7f3      	b.n	800bc90 <_dtoa_r+0x228>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcae:	18fb      	adds	r3, r7, r3
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	bfb8      	it	lt
 800bcba:	2301      	movlt	r3, #1
 800bcbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	f102 0514 	add.w	r5, r2, #20
 800bcc8:	429d      	cmp	r5, r3
 800bcca:	d91f      	bls.n	800bd0c <_dtoa_r+0x2a4>
 800bccc:	6041      	str	r1, [r0, #4]
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f001 f8da 	bl	800ce88 <_Balloc>
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d13c      	bne.n	800bd54 <_dtoa_r+0x2ec>
 800bcda:	4b1b      	ldr	r3, [pc, #108]	@ (800bd48 <_dtoa_r+0x2e0>)
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f240 11af 	movw	r1, #431	@ 0x1af
 800bce2:	e6d8      	b.n	800ba96 <_dtoa_r+0x2e>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e7e0      	b.n	800bcaa <_dtoa_r+0x242>
 800bce8:	2401      	movs	r4, #1
 800bcea:	2300      	movs	r3, #0
 800bcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	2312      	movs	r3, #18
 800bcfc:	e7d0      	b.n	800bca0 <_dtoa_r+0x238>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd02:	e7f5      	b.n	800bcf0 <_dtoa_r+0x288>
 800bd04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	9307      	str	r3, [sp, #28]
 800bd0a:	e7d7      	b.n	800bcbc <_dtoa_r+0x254>
 800bd0c:	3101      	adds	r1, #1
 800bd0e:	0052      	lsls	r2, r2, #1
 800bd10:	e7d8      	b.n	800bcc4 <_dtoa_r+0x25c>
 800bd12:	bf00      	nop
 800bd14:	f3af 8000 	nop.w
 800bd18:	636f4361 	.word	0x636f4361
 800bd1c:	3fd287a7 	.word	0x3fd287a7
 800bd20:	8b60c8b3 	.word	0x8b60c8b3
 800bd24:	3fc68a28 	.word	0x3fc68a28
 800bd28:	509f79fb 	.word	0x509f79fb
 800bd2c:	3fd34413 	.word	0x3fd34413
 800bd30:	0800e5b6 	.word	0x0800e5b6
 800bd34:	0800e5cd 	.word	0x0800e5cd
 800bd38:	7ff00000 	.word	0x7ff00000
 800bd3c:	0800e579 	.word	0x0800e579
 800bd40:	3ff80000 	.word	0x3ff80000
 800bd44:	0800e728 	.word	0x0800e728
 800bd48:	0800e625 	.word	0x0800e625
 800bd4c:	0800e5b2 	.word	0x0800e5b2
 800bd50:	0800e578 	.word	0x0800e578
 800bd54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd58:	6018      	str	r0, [r3, #0]
 800bd5a:	9b07      	ldr	r3, [sp, #28]
 800bd5c:	2b0e      	cmp	r3, #14
 800bd5e:	f200 80a4 	bhi.w	800beaa <_dtoa_r+0x442>
 800bd62:	2c00      	cmp	r4, #0
 800bd64:	f000 80a1 	beq.w	800beaa <_dtoa_r+0x442>
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	dd33      	ble.n	800bdd4 <_dtoa_r+0x36c>
 800bd6c:	4bad      	ldr	r3, [pc, #692]	@ (800c024 <_dtoa_r+0x5bc>)
 800bd6e:	f007 020f 	and.w	r2, r7, #15
 800bd72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd76:	ed93 7b00 	vldr	d7, [r3]
 800bd7a:	05f8      	lsls	r0, r7, #23
 800bd7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd84:	d516      	bpl.n	800bdb4 <_dtoa_r+0x34c>
 800bd86:	4ba8      	ldr	r3, [pc, #672]	@ (800c028 <_dtoa_r+0x5c0>)
 800bd88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd90:	f7f4 fd6c 	bl	800086c <__aeabi_ddiv>
 800bd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd98:	f004 040f 	and.w	r4, r4, #15
 800bd9c:	2603      	movs	r6, #3
 800bd9e:	4da2      	ldr	r5, [pc, #648]	@ (800c028 <_dtoa_r+0x5c0>)
 800bda0:	b954      	cbnz	r4, 800bdb8 <_dtoa_r+0x350>
 800bda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdaa:	f7f4 fd5f 	bl	800086c <__aeabi_ddiv>
 800bdae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb2:	e028      	b.n	800be06 <_dtoa_r+0x39e>
 800bdb4:	2602      	movs	r6, #2
 800bdb6:	e7f2      	b.n	800bd9e <_dtoa_r+0x336>
 800bdb8:	07e1      	lsls	r1, r4, #31
 800bdba:	d508      	bpl.n	800bdce <_dtoa_r+0x366>
 800bdbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdc4:	f7f4 fc28 	bl	8000618 <__aeabi_dmul>
 800bdc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdcc:	3601      	adds	r6, #1
 800bdce:	1064      	asrs	r4, r4, #1
 800bdd0:	3508      	adds	r5, #8
 800bdd2:	e7e5      	b.n	800bda0 <_dtoa_r+0x338>
 800bdd4:	f000 80d2 	beq.w	800bf7c <_dtoa_r+0x514>
 800bdd8:	427c      	negs	r4, r7
 800bdda:	4b92      	ldr	r3, [pc, #584]	@ (800c024 <_dtoa_r+0x5bc>)
 800bddc:	4d92      	ldr	r5, [pc, #584]	@ (800c028 <_dtoa_r+0x5c0>)
 800bdde:	f004 020f 	and.w	r2, r4, #15
 800bde2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdee:	f7f4 fc13 	bl	8000618 <__aeabi_dmul>
 800bdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf6:	1124      	asrs	r4, r4, #4
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2602      	movs	r6, #2
 800bdfc:	2c00      	cmp	r4, #0
 800bdfe:	f040 80b2 	bne.w	800bf66 <_dtoa_r+0x4fe>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1d3      	bne.n	800bdae <_dtoa_r+0x346>
 800be06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80b7 	beq.w	800bf80 <_dtoa_r+0x518>
 800be12:	4b86      	ldr	r3, [pc, #536]	@ (800c02c <_dtoa_r+0x5c4>)
 800be14:	2200      	movs	r2, #0
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fe6f 	bl	8000afc <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f000 80ae 	beq.w	800bf80 <_dtoa_r+0x518>
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80aa 	beq.w	800bf80 <_dtoa_r+0x518>
 800be2c:	9b00      	ldr	r3, [sp, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd37      	ble.n	800bea2 <_dtoa_r+0x43a>
 800be32:	1e7b      	subs	r3, r7, #1
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	4620      	mov	r0, r4
 800be38:	4b7d      	ldr	r3, [pc, #500]	@ (800c030 <_dtoa_r+0x5c8>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7f4 fbeb 	bl	8000618 <__aeabi_dmul>
 800be42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be46:	9c00      	ldr	r4, [sp, #0]
 800be48:	3601      	adds	r6, #1
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7f4 fb7a 	bl	8000544 <__aeabi_i2d>
 800be50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be54:	f7f4 fbe0 	bl	8000618 <__aeabi_dmul>
 800be58:	4b76      	ldr	r3, [pc, #472]	@ (800c034 <_dtoa_r+0x5cc>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	f7f4 fa26 	bl	80002ac <__adddf3>
 800be60:	4605      	mov	r5, r0
 800be62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be66:	2c00      	cmp	r4, #0
 800be68:	f040 808d 	bne.w	800bf86 <_dtoa_r+0x51e>
 800be6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be70:	4b71      	ldr	r3, [pc, #452]	@ (800c038 <_dtoa_r+0x5d0>)
 800be72:	2200      	movs	r2, #0
 800be74:	f7f4 fa18 	bl	80002a8 <__aeabi_dsub>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be80:	462a      	mov	r2, r5
 800be82:	4633      	mov	r3, r6
 800be84:	f7f4 fe58 	bl	8000b38 <__aeabi_dcmpgt>
 800be88:	2800      	cmp	r0, #0
 800be8a:	f040 828b 	bne.w	800c3a4 <_dtoa_r+0x93c>
 800be8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be92:	462a      	mov	r2, r5
 800be94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be98:	f7f4 fe30 	bl	8000afc <__aeabi_dcmplt>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	f040 8128 	bne.w	800c0f2 <_dtoa_r+0x68a>
 800bea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800beaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800beac:	2b00      	cmp	r3, #0
 800beae:	f2c0 815a 	blt.w	800c166 <_dtoa_r+0x6fe>
 800beb2:	2f0e      	cmp	r7, #14
 800beb4:	f300 8157 	bgt.w	800c166 <_dtoa_r+0x6fe>
 800beb8:	4b5a      	ldr	r3, [pc, #360]	@ (800c024 <_dtoa_r+0x5bc>)
 800beba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bebe:	ed93 7b00 	vldr	d7, [r3]
 800bec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	ed8d 7b00 	vstr	d7, [sp]
 800beca:	da03      	bge.n	800bed4 <_dtoa_r+0x46c>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f340 8101 	ble.w	800c0d6 <_dtoa_r+0x66e>
 800bed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bed8:	4656      	mov	r6, sl
 800beda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fcc3 	bl	800086c <__aeabi_ddiv>
 800bee6:	f7f4 fe47 	bl	8000b78 <__aeabi_d2iz>
 800beea:	4680      	mov	r8, r0
 800beec:	f7f4 fb2a 	bl	8000544 <__aeabi_i2d>
 800bef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef4:	f7f4 fb90 	bl	8000618 <__aeabi_dmul>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf04:	f7f4 f9d0 	bl	80002a8 <__aeabi_dsub>
 800bf08:	f806 4b01 	strb.w	r4, [r6], #1
 800bf0c:	9d07      	ldr	r5, [sp, #28]
 800bf0e:	eba6 040a 	sub.w	r4, r6, sl
 800bf12:	42a5      	cmp	r5, r4
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	f040 8117 	bne.w	800c14a <_dtoa_r+0x6e2>
 800bf1c:	f7f4 f9c6 	bl	80002ac <__adddf3>
 800bf20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	f7f4 fe06 	bl	8000b38 <__aeabi_dcmpgt>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 80f9 	bne.w	800c124 <_dtoa_r+0x6bc>
 800bf32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf36:	4620      	mov	r0, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7f4 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf3e:	b118      	cbz	r0, 800bf48 <_dtoa_r+0x4e0>
 800bf40:	f018 0f01 	tst.w	r8, #1
 800bf44:	f040 80ee 	bne.w	800c124 <_dtoa_r+0x6bc>
 800bf48:	4649      	mov	r1, r9
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 ffdc 	bl	800cf08 <_Bfree>
 800bf50:	2300      	movs	r3, #0
 800bf52:	7033      	strb	r3, [r6, #0]
 800bf54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf56:	3701      	adds	r7, #1
 800bf58:	601f      	str	r7, [r3, #0]
 800bf5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 831d 	beq.w	800c59c <_dtoa_r+0xb34>
 800bf62:	601e      	str	r6, [r3, #0]
 800bf64:	e31a      	b.n	800c59c <_dtoa_r+0xb34>
 800bf66:	07e2      	lsls	r2, r4, #31
 800bf68:	d505      	bpl.n	800bf76 <_dtoa_r+0x50e>
 800bf6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf6e:	f7f4 fb53 	bl	8000618 <__aeabi_dmul>
 800bf72:	3601      	adds	r6, #1
 800bf74:	2301      	movs	r3, #1
 800bf76:	1064      	asrs	r4, r4, #1
 800bf78:	3508      	adds	r5, #8
 800bf7a:	e73f      	b.n	800bdfc <_dtoa_r+0x394>
 800bf7c:	2602      	movs	r6, #2
 800bf7e:	e742      	b.n	800be06 <_dtoa_r+0x39e>
 800bf80:	9c07      	ldr	r4, [sp, #28]
 800bf82:	9704      	str	r7, [sp, #16]
 800bf84:	e761      	b.n	800be4a <_dtoa_r+0x3e2>
 800bf86:	4b27      	ldr	r3, [pc, #156]	@ (800c024 <_dtoa_r+0x5bc>)
 800bf88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf92:	4454      	add	r4, sl
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d053      	beq.n	800c040 <_dtoa_r+0x5d8>
 800bf98:	4928      	ldr	r1, [pc, #160]	@ (800c03c <_dtoa_r+0x5d4>)
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	f7f4 fc66 	bl	800086c <__aeabi_ddiv>
 800bfa0:	4633      	mov	r3, r6
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	f7f4 f980 	bl	80002a8 <__aeabi_dsub>
 800bfa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfac:	4656      	mov	r6, sl
 800bfae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb2:	f7f4 fde1 	bl	8000b78 <__aeabi_d2iz>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	f7f4 fac4 	bl	8000544 <__aeabi_i2d>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfc4:	f7f4 f970 	bl	80002a8 <__aeabi_dsub>
 800bfc8:	3530      	adds	r5, #48	@ 0x30
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfd2:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfda:	f7f4 fd8f 	bl	8000afc <__aeabi_dcmplt>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d171      	bne.n	800c0c6 <_dtoa_r+0x65e>
 800bfe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfe6:	4911      	ldr	r1, [pc, #68]	@ (800c02c <_dtoa_r+0x5c4>)
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f7f4 f95d 	bl	80002a8 <__aeabi_dsub>
 800bfee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bff2:	f7f4 fd83 	bl	8000afc <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f040 8095 	bne.w	800c126 <_dtoa_r+0x6be>
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	f43f af50 	beq.w	800bea2 <_dtoa_r+0x43a>
 800c002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c006:	4b0a      	ldr	r3, [pc, #40]	@ (800c030 <_dtoa_r+0x5c8>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fb05 	bl	8000618 <__aeabi_dmul>
 800c00e:	4b08      	ldr	r3, [pc, #32]	@ (800c030 <_dtoa_r+0x5c8>)
 800c010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c014:	2200      	movs	r2, #0
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	f7f4 fafd 	bl	8000618 <__aeabi_dmul>
 800c01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c022:	e7c4      	b.n	800bfae <_dtoa_r+0x546>
 800c024:	0800e728 	.word	0x0800e728
 800c028:	0800e700 	.word	0x0800e700
 800c02c:	3ff00000 	.word	0x3ff00000
 800c030:	40240000 	.word	0x40240000
 800c034:	401c0000 	.word	0x401c0000
 800c038:	40140000 	.word	0x40140000
 800c03c:	3fe00000 	.word	0x3fe00000
 800c040:	4631      	mov	r1, r6
 800c042:	4628      	mov	r0, r5
 800c044:	f7f4 fae8 	bl	8000618 <__aeabi_dmul>
 800c048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c04c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c04e:	4656      	mov	r6, sl
 800c050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c054:	f7f4 fd90 	bl	8000b78 <__aeabi_d2iz>
 800c058:	4605      	mov	r5, r0
 800c05a:	f7f4 fa73 	bl	8000544 <__aeabi_i2d>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c066:	f7f4 f91f 	bl	80002a8 <__aeabi_dsub>
 800c06a:	3530      	adds	r5, #48	@ 0x30
 800c06c:	f806 5b01 	strb.w	r5, [r6], #1
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	42a6      	cmp	r6, r4
 800c076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c07a:	f04f 0200 	mov.w	r2, #0
 800c07e:	d124      	bne.n	800c0ca <_dtoa_r+0x662>
 800c080:	4bac      	ldr	r3, [pc, #688]	@ (800c334 <_dtoa_r+0x8cc>)
 800c082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c086:	f7f4 f911 	bl	80002ac <__adddf3>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c092:	f7f4 fd51 	bl	8000b38 <__aeabi_dcmpgt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d145      	bne.n	800c126 <_dtoa_r+0x6be>
 800c09a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c09e:	49a5      	ldr	r1, [pc, #660]	@ (800c334 <_dtoa_r+0x8cc>)
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f7f4 f901 	bl	80002a8 <__aeabi_dsub>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ae:	f7f4 fd25 	bl	8000afc <__aeabi_dcmplt>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f aef5 	beq.w	800bea2 <_dtoa_r+0x43a>
 800c0b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0ba:	1e73      	subs	r3, r6, #1
 800c0bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0c2:	2b30      	cmp	r3, #48	@ 0x30
 800c0c4:	d0f8      	beq.n	800c0b8 <_dtoa_r+0x650>
 800c0c6:	9f04      	ldr	r7, [sp, #16]
 800c0c8:	e73e      	b.n	800bf48 <_dtoa_r+0x4e0>
 800c0ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c338 <_dtoa_r+0x8d0>)
 800c0cc:	f7f4 faa4 	bl	8000618 <__aeabi_dmul>
 800c0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d4:	e7bc      	b.n	800c050 <_dtoa_r+0x5e8>
 800c0d6:	d10c      	bne.n	800c0f2 <_dtoa_r+0x68a>
 800c0d8:	4b98      	ldr	r3, [pc, #608]	@ (800c33c <_dtoa_r+0x8d4>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e0:	f7f4 fa9a 	bl	8000618 <__aeabi_dmul>
 800c0e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0e8:	f7f4 fd1c 	bl	8000b24 <__aeabi_dcmpge>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f000 8157 	beq.w	800c3a0 <_dtoa_r+0x938>
 800c0f2:	2400      	movs	r4, #0
 800c0f4:	4625      	mov	r5, r4
 800c0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	9304      	str	r3, [sp, #16]
 800c0fc:	4656      	mov	r6, sl
 800c0fe:	2700      	movs	r7, #0
 800c100:	4621      	mov	r1, r4
 800c102:	4658      	mov	r0, fp
 800c104:	f000 ff00 	bl	800cf08 <_Bfree>
 800c108:	2d00      	cmp	r5, #0
 800c10a:	d0dc      	beq.n	800c0c6 <_dtoa_r+0x65e>
 800c10c:	b12f      	cbz	r7, 800c11a <_dtoa_r+0x6b2>
 800c10e:	42af      	cmp	r7, r5
 800c110:	d003      	beq.n	800c11a <_dtoa_r+0x6b2>
 800c112:	4639      	mov	r1, r7
 800c114:	4658      	mov	r0, fp
 800c116:	f000 fef7 	bl	800cf08 <_Bfree>
 800c11a:	4629      	mov	r1, r5
 800c11c:	4658      	mov	r0, fp
 800c11e:	f000 fef3 	bl	800cf08 <_Bfree>
 800c122:	e7d0      	b.n	800c0c6 <_dtoa_r+0x65e>
 800c124:	9704      	str	r7, [sp, #16]
 800c126:	4633      	mov	r3, r6
 800c128:	461e      	mov	r6, r3
 800c12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c12e:	2a39      	cmp	r2, #57	@ 0x39
 800c130:	d107      	bne.n	800c142 <_dtoa_r+0x6da>
 800c132:	459a      	cmp	sl, r3
 800c134:	d1f8      	bne.n	800c128 <_dtoa_r+0x6c0>
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	3201      	adds	r2, #1
 800c13a:	9204      	str	r2, [sp, #16]
 800c13c:	2230      	movs	r2, #48	@ 0x30
 800c13e:	f88a 2000 	strb.w	r2, [sl]
 800c142:	781a      	ldrb	r2, [r3, #0]
 800c144:	3201      	adds	r2, #1
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	e7bd      	b.n	800c0c6 <_dtoa_r+0x65e>
 800c14a:	4b7b      	ldr	r3, [pc, #492]	@ (800c338 <_dtoa_r+0x8d0>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	f7f4 fa63 	bl	8000618 <__aeabi_dmul>
 800c152:	2200      	movs	r2, #0
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	f7f4 fcc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c15e:	2800      	cmp	r0, #0
 800c160:	f43f aebb 	beq.w	800beda <_dtoa_r+0x472>
 800c164:	e6f0      	b.n	800bf48 <_dtoa_r+0x4e0>
 800c166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c168:	2a00      	cmp	r2, #0
 800c16a:	f000 80db 	beq.w	800c324 <_dtoa_r+0x8bc>
 800c16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c170:	2a01      	cmp	r2, #1
 800c172:	f300 80bf 	bgt.w	800c2f4 <_dtoa_r+0x88c>
 800c176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c178:	2a00      	cmp	r2, #0
 800c17a:	f000 80b7 	beq.w	800c2ec <_dtoa_r+0x884>
 800c17e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c184:	4646      	mov	r6, r8
 800c186:	9a08      	ldr	r2, [sp, #32]
 800c188:	2101      	movs	r1, #1
 800c18a:	441a      	add	r2, r3
 800c18c:	4658      	mov	r0, fp
 800c18e:	4498      	add	r8, r3
 800c190:	9208      	str	r2, [sp, #32]
 800c192:	f000 ffb7 	bl	800d104 <__i2b>
 800c196:	4605      	mov	r5, r0
 800c198:	b15e      	cbz	r6, 800c1b2 <_dtoa_r+0x74a>
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd08      	ble.n	800c1b2 <_dtoa_r+0x74a>
 800c1a0:	42b3      	cmp	r3, r6
 800c1a2:	9a08      	ldr	r2, [sp, #32]
 800c1a4:	bfa8      	it	ge
 800c1a6:	4633      	movge	r3, r6
 800c1a8:	eba8 0803 	sub.w	r8, r8, r3
 800c1ac:	1af6      	subs	r6, r6, r3
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	9308      	str	r3, [sp, #32]
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b4:	b1f3      	cbz	r3, 800c1f4 <_dtoa_r+0x78c>
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 80b7 	beq.w	800c32c <_dtoa_r+0x8c4>
 800c1be:	b18c      	cbz	r4, 800c1e4 <_dtoa_r+0x77c>
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	f001 f85d 	bl	800d284 <__pow5mult>
 800c1ca:	464a      	mov	r2, r9
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f000 ffad 	bl	800d130 <__multiply>
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	9004      	str	r0, [sp, #16]
 800c1da:	4658      	mov	r0, fp
 800c1dc:	f000 fe94 	bl	800cf08 <_Bfree>
 800c1e0:	9b04      	ldr	r3, [sp, #16]
 800c1e2:	4699      	mov	r9, r3
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1e6:	1b1a      	subs	r2, r3, r4
 800c1e8:	d004      	beq.n	800c1f4 <_dtoa_r+0x78c>
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f001 f849 	bl	800d284 <__pow5mult>
 800c1f2:	4681      	mov	r9, r0
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	f000 ff84 	bl	800d104 <__i2b>
 800c1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1fe:	4604      	mov	r4, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 81cf 	beq.w	800c5a4 <_dtoa_r+0xb3c>
 800c206:	461a      	mov	r2, r3
 800c208:	4601      	mov	r1, r0
 800c20a:	4658      	mov	r0, fp
 800c20c:	f001 f83a 	bl	800d284 <__pow5mult>
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	2b01      	cmp	r3, #1
 800c214:	4604      	mov	r4, r0
 800c216:	f300 8095 	bgt.w	800c344 <_dtoa_r+0x8dc>
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f040 8087 	bne.w	800c330 <_dtoa_r+0x8c8>
 800c222:	9b03      	ldr	r3, [sp, #12]
 800c224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 8089 	bne.w	800c340 <_dtoa_r+0x8d8>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c234:	0d1b      	lsrs	r3, r3, #20
 800c236:	051b      	lsls	r3, r3, #20
 800c238:	b12b      	cbz	r3, 800c246 <_dtoa_r+0x7de>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	3301      	adds	r3, #1
 800c23e:	9308      	str	r3, [sp, #32]
 800c240:	f108 0801 	add.w	r8, r8, #1
 800c244:	2301      	movs	r3, #1
 800c246:	930a      	str	r3, [sp, #40]	@ 0x28
 800c248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 81b0 	beq.w	800c5b0 <_dtoa_r+0xb48>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c256:	6918      	ldr	r0, [r3, #16]
 800c258:	f000 ff08 	bl	800d06c <__hi0bits>
 800c25c:	f1c0 0020 	rsb	r0, r0, #32
 800c260:	9b08      	ldr	r3, [sp, #32]
 800c262:	4418      	add	r0, r3
 800c264:	f010 001f 	ands.w	r0, r0, #31
 800c268:	d077      	beq.n	800c35a <_dtoa_r+0x8f2>
 800c26a:	f1c0 0320 	rsb	r3, r0, #32
 800c26e:	2b04      	cmp	r3, #4
 800c270:	dd6b      	ble.n	800c34a <_dtoa_r+0x8e2>
 800c272:	9b08      	ldr	r3, [sp, #32]
 800c274:	f1c0 001c 	rsb	r0, r0, #28
 800c278:	4403      	add	r3, r0
 800c27a:	4480      	add	r8, r0
 800c27c:	4406      	add	r6, r0
 800c27e:	9308      	str	r3, [sp, #32]
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	dd05      	ble.n	800c292 <_dtoa_r+0x82a>
 800c286:	4649      	mov	r1, r9
 800c288:	4642      	mov	r2, r8
 800c28a:	4658      	mov	r0, fp
 800c28c:	f001 f854 	bl	800d338 <__lshift>
 800c290:	4681      	mov	r9, r0
 800c292:	9b08      	ldr	r3, [sp, #32]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dd05      	ble.n	800c2a4 <_dtoa_r+0x83c>
 800c298:	4621      	mov	r1, r4
 800c29a:	461a      	mov	r2, r3
 800c29c:	4658      	mov	r0, fp
 800c29e:	f001 f84b 	bl	800d338 <__lshift>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d059      	beq.n	800c35e <_dtoa_r+0x8f6>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4648      	mov	r0, r9
 800c2ae:	f001 f8af 	bl	800d410 <__mcmp>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	da53      	bge.n	800c35e <_dtoa_r+0x8f6>
 800c2b6:	1e7b      	subs	r3, r7, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	2300      	movs	r3, #0
 800c2be:	220a      	movs	r2, #10
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f000 fe43 	bl	800cf4c <__multadd>
 800c2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 8172 	beq.w	800c5b4 <_dtoa_r+0xb4c>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fe38 	bl	800cf4c <__multadd>
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	dc67      	bgt.n	800c3b4 <_dtoa_r+0x94c>
 800c2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	dc41      	bgt.n	800c36e <_dtoa_r+0x906>
 800c2ea:	e063      	b.n	800c3b4 <_dtoa_r+0x94c>
 800c2ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c2f2:	e746      	b.n	800c182 <_dtoa_r+0x71a>
 800c2f4:	9b07      	ldr	r3, [sp, #28]
 800c2f6:	1e5c      	subs	r4, r3, #1
 800c2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fa:	42a3      	cmp	r3, r4
 800c2fc:	bfbf      	itttt	lt
 800c2fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c304:	1ae3      	sublt	r3, r4, r3
 800c306:	bfb4      	ite	lt
 800c308:	18d2      	addlt	r2, r2, r3
 800c30a:	1b1c      	subge	r4, r3, r4
 800c30c:	9b07      	ldr	r3, [sp, #28]
 800c30e:	bfbc      	itt	lt
 800c310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c312:	2400      	movlt	r4, #0
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb5      	itete	lt
 800c318:	eba8 0603 	sublt.w	r6, r8, r3
 800c31c:	9b07      	ldrge	r3, [sp, #28]
 800c31e:	2300      	movlt	r3, #0
 800c320:	4646      	movge	r6, r8
 800c322:	e730      	b.n	800c186 <_dtoa_r+0x71e>
 800c324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c328:	4646      	mov	r6, r8
 800c32a:	e735      	b.n	800c198 <_dtoa_r+0x730>
 800c32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c32e:	e75c      	b.n	800c1ea <_dtoa_r+0x782>
 800c330:	2300      	movs	r3, #0
 800c332:	e788      	b.n	800c246 <_dtoa_r+0x7de>
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	40240000 	.word	0x40240000
 800c33c:	40140000 	.word	0x40140000
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	e780      	b.n	800c246 <_dtoa_r+0x7de>
 800c344:	2300      	movs	r3, #0
 800c346:	930a      	str	r3, [sp, #40]	@ 0x28
 800c348:	e782      	b.n	800c250 <_dtoa_r+0x7e8>
 800c34a:	d099      	beq.n	800c280 <_dtoa_r+0x818>
 800c34c:	9a08      	ldr	r2, [sp, #32]
 800c34e:	331c      	adds	r3, #28
 800c350:	441a      	add	r2, r3
 800c352:	4498      	add	r8, r3
 800c354:	441e      	add	r6, r3
 800c356:	9208      	str	r2, [sp, #32]
 800c358:	e792      	b.n	800c280 <_dtoa_r+0x818>
 800c35a:	4603      	mov	r3, r0
 800c35c:	e7f6      	b.n	800c34c <_dtoa_r+0x8e4>
 800c35e:	9b07      	ldr	r3, [sp, #28]
 800c360:	9704      	str	r7, [sp, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc20      	bgt.n	800c3a8 <_dtoa_r+0x940>
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	dd1e      	ble.n	800c3ac <_dtoa_r+0x944>
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f47f aec0 	bne.w	800c0f6 <_dtoa_r+0x68e>
 800c376:	4621      	mov	r1, r4
 800c378:	2205      	movs	r2, #5
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 fde6 	bl	800cf4c <__multadd>
 800c380:	4601      	mov	r1, r0
 800c382:	4604      	mov	r4, r0
 800c384:	4648      	mov	r0, r9
 800c386:	f001 f843 	bl	800d410 <__mcmp>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	f77f aeb3 	ble.w	800c0f6 <_dtoa_r+0x68e>
 800c390:	4656      	mov	r6, sl
 800c392:	2331      	movs	r3, #49	@ 0x31
 800c394:	f806 3b01 	strb.w	r3, [r6], #1
 800c398:	9b04      	ldr	r3, [sp, #16]
 800c39a:	3301      	adds	r3, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	e6ae      	b.n	800c0fe <_dtoa_r+0x696>
 800c3a0:	9c07      	ldr	r4, [sp, #28]
 800c3a2:	9704      	str	r7, [sp, #16]
 800c3a4:	4625      	mov	r5, r4
 800c3a6:	e7f3      	b.n	800c390 <_dtoa_r+0x928>
 800c3a8:	9b07      	ldr	r3, [sp, #28]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 8104 	beq.w	800c5bc <_dtoa_r+0xb54>
 800c3b4:	2e00      	cmp	r6, #0
 800c3b6:	dd05      	ble.n	800c3c4 <_dtoa_r+0x95c>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f000 ffbb 	bl	800d338 <__lshift>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d05a      	beq.n	800c480 <_dtoa_r+0xa18>
 800c3ca:	6869      	ldr	r1, [r5, #4]
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f000 fd5b 	bl	800ce88 <_Balloc>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	b928      	cbnz	r0, 800c3e2 <_dtoa_r+0x97a>
 800c3d6:	4b84      	ldr	r3, [pc, #528]	@ (800c5e8 <_dtoa_r+0xb80>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3de:	f7ff bb5a 	b.w	800ba96 <_dtoa_r+0x2e>
 800c3e2:	692a      	ldr	r2, [r5, #16]
 800c3e4:	3202      	adds	r2, #2
 800c3e6:	0092      	lsls	r2, r2, #2
 800c3e8:	f105 010c 	add.w	r1, r5, #12
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	f7ff fa94 	bl	800b91a <memcpy>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4658      	mov	r0, fp
 800c3f8:	f000 ff9e 	bl	800d338 <__lshift>
 800c3fc:	f10a 0301 	add.w	r3, sl, #1
 800c400:	9307      	str	r3, [sp, #28]
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	4453      	add	r3, sl
 800c406:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	462f      	mov	r7, r5
 800c410:	930a      	str	r3, [sp, #40]	@ 0x28
 800c412:	4605      	mov	r5, r0
 800c414:	9b07      	ldr	r3, [sp, #28]
 800c416:	4621      	mov	r1, r4
 800c418:	3b01      	subs	r3, #1
 800c41a:	4648      	mov	r0, r9
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	f7ff fa99 	bl	800b954 <quorem>
 800c422:	4639      	mov	r1, r7
 800c424:	9002      	str	r0, [sp, #8]
 800c426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c42a:	4648      	mov	r0, r9
 800c42c:	f000 fff0 	bl	800d410 <__mcmp>
 800c430:	462a      	mov	r2, r5
 800c432:	9008      	str	r0, [sp, #32]
 800c434:	4621      	mov	r1, r4
 800c436:	4658      	mov	r0, fp
 800c438:	f001 f806 	bl	800d448 <__mdiff>
 800c43c:	68c2      	ldr	r2, [r0, #12]
 800c43e:	4606      	mov	r6, r0
 800c440:	bb02      	cbnz	r2, 800c484 <_dtoa_r+0xa1c>
 800c442:	4601      	mov	r1, r0
 800c444:	4648      	mov	r0, r9
 800c446:	f000 ffe3 	bl	800d410 <__mcmp>
 800c44a:	4602      	mov	r2, r0
 800c44c:	4631      	mov	r1, r6
 800c44e:	4658      	mov	r0, fp
 800c450:	920e      	str	r2, [sp, #56]	@ 0x38
 800c452:	f000 fd59 	bl	800cf08 <_Bfree>
 800c456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c45a:	9e07      	ldr	r6, [sp, #28]
 800c45c:	ea43 0102 	orr.w	r1, r3, r2
 800c460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c462:	4319      	orrs	r1, r3
 800c464:	d110      	bne.n	800c488 <_dtoa_r+0xa20>
 800c466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c46a:	d029      	beq.n	800c4c0 <_dtoa_r+0xa58>
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	dd02      	ble.n	800c478 <_dtoa_r+0xa10>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	f883 8000 	strb.w	r8, [r3]
 800c47e:	e63f      	b.n	800c100 <_dtoa_r+0x698>
 800c480:	4628      	mov	r0, r5
 800c482:	e7bb      	b.n	800c3fc <_dtoa_r+0x994>
 800c484:	2201      	movs	r2, #1
 800c486:	e7e1      	b.n	800c44c <_dtoa_r+0x9e4>
 800c488:	9b08      	ldr	r3, [sp, #32]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	db04      	blt.n	800c498 <_dtoa_r+0xa30>
 800c48e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c490:	430b      	orrs	r3, r1
 800c492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c494:	430b      	orrs	r3, r1
 800c496:	d120      	bne.n	800c4da <_dtoa_r+0xa72>
 800c498:	2a00      	cmp	r2, #0
 800c49a:	dded      	ble.n	800c478 <_dtoa_r+0xa10>
 800c49c:	4649      	mov	r1, r9
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4658      	mov	r0, fp
 800c4a2:	f000 ff49 	bl	800d338 <__lshift>
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4681      	mov	r9, r0
 800c4aa:	f000 ffb1 	bl	800d410 <__mcmp>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	dc03      	bgt.n	800c4ba <_dtoa_r+0xa52>
 800c4b2:	d1e1      	bne.n	800c478 <_dtoa_r+0xa10>
 800c4b4:	f018 0f01 	tst.w	r8, #1
 800c4b8:	d0de      	beq.n	800c478 <_dtoa_r+0xa10>
 800c4ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4be:	d1d8      	bne.n	800c472 <_dtoa_r+0xa0a>
 800c4c0:	9a00      	ldr	r2, [sp, #0]
 800c4c2:	2339      	movs	r3, #57	@ 0x39
 800c4c4:	7013      	strb	r3, [r2, #0]
 800c4c6:	4633      	mov	r3, r6
 800c4c8:	461e      	mov	r6, r3
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4d0:	2a39      	cmp	r2, #57	@ 0x39
 800c4d2:	d052      	beq.n	800c57a <_dtoa_r+0xb12>
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	e612      	b.n	800c100 <_dtoa_r+0x698>
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	dd07      	ble.n	800c4ee <_dtoa_r+0xa86>
 800c4de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4e2:	d0ed      	beq.n	800c4c0 <_dtoa_r+0xa58>
 800c4e4:	9a00      	ldr	r2, [sp, #0]
 800c4e6:	f108 0301 	add.w	r3, r8, #1
 800c4ea:	7013      	strb	r3, [r2, #0]
 800c4ec:	e608      	b.n	800c100 <_dtoa_r+0x698>
 800c4ee:	9b07      	ldr	r3, [sp, #28]
 800c4f0:	9a07      	ldr	r2, [sp, #28]
 800c4f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d028      	beq.n	800c54e <_dtoa_r+0xae6>
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	2300      	movs	r3, #0
 800c500:	220a      	movs	r2, #10
 800c502:	4658      	mov	r0, fp
 800c504:	f000 fd22 	bl	800cf4c <__multadd>
 800c508:	42af      	cmp	r7, r5
 800c50a:	4681      	mov	r9, r0
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	f04f 020a 	mov.w	r2, #10
 800c514:	4639      	mov	r1, r7
 800c516:	4658      	mov	r0, fp
 800c518:	d107      	bne.n	800c52a <_dtoa_r+0xac2>
 800c51a:	f000 fd17 	bl	800cf4c <__multadd>
 800c51e:	4607      	mov	r7, r0
 800c520:	4605      	mov	r5, r0
 800c522:	9b07      	ldr	r3, [sp, #28]
 800c524:	3301      	adds	r3, #1
 800c526:	9307      	str	r3, [sp, #28]
 800c528:	e774      	b.n	800c414 <_dtoa_r+0x9ac>
 800c52a:	f000 fd0f 	bl	800cf4c <__multadd>
 800c52e:	4629      	mov	r1, r5
 800c530:	4607      	mov	r7, r0
 800c532:	2300      	movs	r3, #0
 800c534:	220a      	movs	r2, #10
 800c536:	4658      	mov	r0, fp
 800c538:	f000 fd08 	bl	800cf4c <__multadd>
 800c53c:	4605      	mov	r5, r0
 800c53e:	e7f0      	b.n	800c522 <_dtoa_r+0xaba>
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfcc      	ite	gt
 800c546:	461e      	movgt	r6, r3
 800c548:	2601      	movle	r6, #1
 800c54a:	4456      	add	r6, sl
 800c54c:	2700      	movs	r7, #0
 800c54e:	4649      	mov	r1, r9
 800c550:	2201      	movs	r2, #1
 800c552:	4658      	mov	r0, fp
 800c554:	f000 fef0 	bl	800d338 <__lshift>
 800c558:	4621      	mov	r1, r4
 800c55a:	4681      	mov	r9, r0
 800c55c:	f000 ff58 	bl	800d410 <__mcmp>
 800c560:	2800      	cmp	r0, #0
 800c562:	dcb0      	bgt.n	800c4c6 <_dtoa_r+0xa5e>
 800c564:	d102      	bne.n	800c56c <_dtoa_r+0xb04>
 800c566:	f018 0f01 	tst.w	r8, #1
 800c56a:	d1ac      	bne.n	800c4c6 <_dtoa_r+0xa5e>
 800c56c:	4633      	mov	r3, r6
 800c56e:	461e      	mov	r6, r3
 800c570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c574:	2a30      	cmp	r2, #48	@ 0x30
 800c576:	d0fa      	beq.n	800c56e <_dtoa_r+0xb06>
 800c578:	e5c2      	b.n	800c100 <_dtoa_r+0x698>
 800c57a:	459a      	cmp	sl, r3
 800c57c:	d1a4      	bne.n	800c4c8 <_dtoa_r+0xa60>
 800c57e:	9b04      	ldr	r3, [sp, #16]
 800c580:	3301      	adds	r3, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	2331      	movs	r3, #49	@ 0x31
 800c586:	f88a 3000 	strb.w	r3, [sl]
 800c58a:	e5b9      	b.n	800c100 <_dtoa_r+0x698>
 800c58c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c58e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c5ec <_dtoa_r+0xb84>
 800c592:	b11b      	cbz	r3, 800c59c <_dtoa_r+0xb34>
 800c594:	f10a 0308 	add.w	r3, sl, #8
 800c598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	4650      	mov	r0, sl
 800c59e:	b019      	add	sp, #100	@ 0x64
 800c5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	f77f ae37 	ble.w	800c21a <_dtoa_r+0x7b2>
 800c5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e655      	b.n	800c260 <_dtoa_r+0x7f8>
 800c5b4:	9b00      	ldr	r3, [sp, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f77f aed6 	ble.w	800c368 <_dtoa_r+0x900>
 800c5bc:	4656      	mov	r6, sl
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4648      	mov	r0, r9
 800c5c2:	f7ff f9c7 	bl	800b954 <quorem>
 800c5c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5ca:	f806 8b01 	strb.w	r8, [r6], #1
 800c5ce:	9b00      	ldr	r3, [sp, #0]
 800c5d0:	eba6 020a 	sub.w	r2, r6, sl
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	ddb3      	ble.n	800c540 <_dtoa_r+0xad8>
 800c5d8:	4649      	mov	r1, r9
 800c5da:	2300      	movs	r3, #0
 800c5dc:	220a      	movs	r2, #10
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f000 fcb4 	bl	800cf4c <__multadd>
 800c5e4:	4681      	mov	r9, r0
 800c5e6:	e7ea      	b.n	800c5be <_dtoa_r+0xb56>
 800c5e8:	0800e625 	.word	0x0800e625
 800c5ec:	0800e5a9 	.word	0x0800e5a9

0800c5f0 <_free_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	d041      	beq.n	800c67c <_free_r+0x8c>
 800c5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5fc:	1f0c      	subs	r4, r1, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfb8      	it	lt
 800c602:	18e4      	addlt	r4, r4, r3
 800c604:	f000 fc34 	bl	800ce70 <__malloc_lock>
 800c608:	4a1d      	ldr	r2, [pc, #116]	@ (800c680 <_free_r+0x90>)
 800c60a:	6813      	ldr	r3, [r2, #0]
 800c60c:	b933      	cbnz	r3, 800c61c <_free_r+0x2c>
 800c60e:	6063      	str	r3, [r4, #4]
 800c610:	6014      	str	r4, [r2, #0]
 800c612:	4628      	mov	r0, r5
 800c614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c618:	f000 bc30 	b.w	800ce7c <__malloc_unlock>
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	d908      	bls.n	800c632 <_free_r+0x42>
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	1821      	adds	r1, r4, r0
 800c624:	428b      	cmp	r3, r1
 800c626:	bf01      	itttt	eq
 800c628:	6819      	ldreq	r1, [r3, #0]
 800c62a:	685b      	ldreq	r3, [r3, #4]
 800c62c:	1809      	addeq	r1, r1, r0
 800c62e:	6021      	streq	r1, [r4, #0]
 800c630:	e7ed      	b.n	800c60e <_free_r+0x1e>
 800c632:	461a      	mov	r2, r3
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	b10b      	cbz	r3, 800c63c <_free_r+0x4c>
 800c638:	42a3      	cmp	r3, r4
 800c63a:	d9fa      	bls.n	800c632 <_free_r+0x42>
 800c63c:	6811      	ldr	r1, [r2, #0]
 800c63e:	1850      	adds	r0, r2, r1
 800c640:	42a0      	cmp	r0, r4
 800c642:	d10b      	bne.n	800c65c <_free_r+0x6c>
 800c644:	6820      	ldr	r0, [r4, #0]
 800c646:	4401      	add	r1, r0
 800c648:	1850      	adds	r0, r2, r1
 800c64a:	4283      	cmp	r3, r0
 800c64c:	6011      	str	r1, [r2, #0]
 800c64e:	d1e0      	bne.n	800c612 <_free_r+0x22>
 800c650:	6818      	ldr	r0, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	6053      	str	r3, [r2, #4]
 800c656:	4408      	add	r0, r1
 800c658:	6010      	str	r0, [r2, #0]
 800c65a:	e7da      	b.n	800c612 <_free_r+0x22>
 800c65c:	d902      	bls.n	800c664 <_free_r+0x74>
 800c65e:	230c      	movs	r3, #12
 800c660:	602b      	str	r3, [r5, #0]
 800c662:	e7d6      	b.n	800c612 <_free_r+0x22>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	1821      	adds	r1, r4, r0
 800c668:	428b      	cmp	r3, r1
 800c66a:	bf04      	itt	eq
 800c66c:	6819      	ldreq	r1, [r3, #0]
 800c66e:	685b      	ldreq	r3, [r3, #4]
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	bf04      	itt	eq
 800c674:	1809      	addeq	r1, r1, r0
 800c676:	6021      	streq	r1, [r4, #0]
 800c678:	6054      	str	r4, [r2, #4]
 800c67a:	e7ca      	b.n	800c612 <_free_r+0x22>
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	20000828 	.word	0x20000828

0800c684 <rshift>:
 800c684:	6903      	ldr	r3, [r0, #16]
 800c686:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c68a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c68e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c692:	f100 0414 	add.w	r4, r0, #20
 800c696:	dd45      	ble.n	800c724 <rshift+0xa0>
 800c698:	f011 011f 	ands.w	r1, r1, #31
 800c69c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6a4:	d10c      	bne.n	800c6c0 <rshift+0x3c>
 800c6a6:	f100 0710 	add.w	r7, r0, #16
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	42b1      	cmp	r1, r6
 800c6ae:	d334      	bcc.n	800c71a <rshift+0x96>
 800c6b0:	1a9b      	subs	r3, r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	1eea      	subs	r2, r5, #3
 800c6b6:	4296      	cmp	r6, r2
 800c6b8:	bf38      	it	cc
 800c6ba:	2300      	movcc	r3, #0
 800c6bc:	4423      	add	r3, r4
 800c6be:	e015      	b.n	800c6ec <rshift+0x68>
 800c6c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c6c4:	f1c1 0820 	rsb	r8, r1, #32
 800c6c8:	40cf      	lsrs	r7, r1
 800c6ca:	f105 0e04 	add.w	lr, r5, #4
 800c6ce:	46a1      	mov	r9, r4
 800c6d0:	4576      	cmp	r6, lr
 800c6d2:	46f4      	mov	ip, lr
 800c6d4:	d815      	bhi.n	800c702 <rshift+0x7e>
 800c6d6:	1a9a      	subs	r2, r3, r2
 800c6d8:	0092      	lsls	r2, r2, #2
 800c6da:	3a04      	subs	r2, #4
 800c6dc:	3501      	adds	r5, #1
 800c6de:	42ae      	cmp	r6, r5
 800c6e0:	bf38      	it	cc
 800c6e2:	2200      	movcc	r2, #0
 800c6e4:	18a3      	adds	r3, r4, r2
 800c6e6:	50a7      	str	r7, [r4, r2]
 800c6e8:	b107      	cbz	r7, 800c6ec <rshift+0x68>
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	1b1a      	subs	r2, r3, r4
 800c6ee:	42a3      	cmp	r3, r4
 800c6f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c6f4:	bf08      	it	eq
 800c6f6:	2300      	moveq	r3, #0
 800c6f8:	6102      	str	r2, [r0, #16]
 800c6fa:	bf08      	it	eq
 800c6fc:	6143      	streq	r3, [r0, #20]
 800c6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c702:	f8dc c000 	ldr.w	ip, [ip]
 800c706:	fa0c fc08 	lsl.w	ip, ip, r8
 800c70a:	ea4c 0707 	orr.w	r7, ip, r7
 800c70e:	f849 7b04 	str.w	r7, [r9], #4
 800c712:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c716:	40cf      	lsrs	r7, r1
 800c718:	e7da      	b.n	800c6d0 <rshift+0x4c>
 800c71a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c71e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c722:	e7c3      	b.n	800c6ac <rshift+0x28>
 800c724:	4623      	mov	r3, r4
 800c726:	e7e1      	b.n	800c6ec <rshift+0x68>

0800c728 <__hexdig_fun>:
 800c728:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c72c:	2b09      	cmp	r3, #9
 800c72e:	d802      	bhi.n	800c736 <__hexdig_fun+0xe>
 800c730:	3820      	subs	r0, #32
 800c732:	b2c0      	uxtb	r0, r0
 800c734:	4770      	bx	lr
 800c736:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d801      	bhi.n	800c742 <__hexdig_fun+0x1a>
 800c73e:	3847      	subs	r0, #71	@ 0x47
 800c740:	e7f7      	b.n	800c732 <__hexdig_fun+0xa>
 800c742:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c746:	2b05      	cmp	r3, #5
 800c748:	d801      	bhi.n	800c74e <__hexdig_fun+0x26>
 800c74a:	3827      	subs	r0, #39	@ 0x27
 800c74c:	e7f1      	b.n	800c732 <__hexdig_fun+0xa>
 800c74e:	2000      	movs	r0, #0
 800c750:	4770      	bx	lr
	...

0800c754 <__gethex>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	b085      	sub	sp, #20
 800c75a:	468a      	mov	sl, r1
 800c75c:	9302      	str	r3, [sp, #8]
 800c75e:	680b      	ldr	r3, [r1, #0]
 800c760:	9001      	str	r0, [sp, #4]
 800c762:	4690      	mov	r8, r2
 800c764:	1c9c      	adds	r4, r3, #2
 800c766:	46a1      	mov	r9, r4
 800c768:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c76c:	2830      	cmp	r0, #48	@ 0x30
 800c76e:	d0fa      	beq.n	800c766 <__gethex+0x12>
 800c770:	eba9 0303 	sub.w	r3, r9, r3
 800c774:	f1a3 0b02 	sub.w	fp, r3, #2
 800c778:	f7ff ffd6 	bl	800c728 <__hexdig_fun>
 800c77c:	4605      	mov	r5, r0
 800c77e:	2800      	cmp	r0, #0
 800c780:	d168      	bne.n	800c854 <__gethex+0x100>
 800c782:	49a0      	ldr	r1, [pc, #640]	@ (800ca04 <__gethex+0x2b0>)
 800c784:	2201      	movs	r2, #1
 800c786:	4648      	mov	r0, r9
 800c788:	f7ff f835 	bl	800b7f6 <strncmp>
 800c78c:	4607      	mov	r7, r0
 800c78e:	2800      	cmp	r0, #0
 800c790:	d167      	bne.n	800c862 <__gethex+0x10e>
 800c792:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c796:	4626      	mov	r6, r4
 800c798:	f7ff ffc6 	bl	800c728 <__hexdig_fun>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d062      	beq.n	800c866 <__gethex+0x112>
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	7818      	ldrb	r0, [r3, #0]
 800c7a4:	2830      	cmp	r0, #48	@ 0x30
 800c7a6:	4699      	mov	r9, r3
 800c7a8:	f103 0301 	add.w	r3, r3, #1
 800c7ac:	d0f9      	beq.n	800c7a2 <__gethex+0x4e>
 800c7ae:	f7ff ffbb 	bl	800c728 <__hexdig_fun>
 800c7b2:	fab0 f580 	clz	r5, r0
 800c7b6:	096d      	lsrs	r5, r5, #5
 800c7b8:	f04f 0b01 	mov.w	fp, #1
 800c7bc:	464a      	mov	r2, r9
 800c7be:	4616      	mov	r6, r2
 800c7c0:	3201      	adds	r2, #1
 800c7c2:	7830      	ldrb	r0, [r6, #0]
 800c7c4:	f7ff ffb0 	bl	800c728 <__hexdig_fun>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d1f8      	bne.n	800c7be <__gethex+0x6a>
 800c7cc:	498d      	ldr	r1, [pc, #564]	@ (800ca04 <__gethex+0x2b0>)
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7ff f810 	bl	800b7f6 <strncmp>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d13f      	bne.n	800c85a <__gethex+0x106>
 800c7da:	b944      	cbnz	r4, 800c7ee <__gethex+0x9a>
 800c7dc:	1c74      	adds	r4, r6, #1
 800c7de:	4622      	mov	r2, r4
 800c7e0:	4616      	mov	r6, r2
 800c7e2:	3201      	adds	r2, #1
 800c7e4:	7830      	ldrb	r0, [r6, #0]
 800c7e6:	f7ff ff9f 	bl	800c728 <__hexdig_fun>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d1f8      	bne.n	800c7e0 <__gethex+0x8c>
 800c7ee:	1ba4      	subs	r4, r4, r6
 800c7f0:	00a7      	lsls	r7, r4, #2
 800c7f2:	7833      	ldrb	r3, [r6, #0]
 800c7f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c7f8:	2b50      	cmp	r3, #80	@ 0x50
 800c7fa:	d13e      	bne.n	800c87a <__gethex+0x126>
 800c7fc:	7873      	ldrb	r3, [r6, #1]
 800c7fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800c800:	d033      	beq.n	800c86a <__gethex+0x116>
 800c802:	2b2d      	cmp	r3, #45	@ 0x2d
 800c804:	d034      	beq.n	800c870 <__gethex+0x11c>
 800c806:	1c71      	adds	r1, r6, #1
 800c808:	2400      	movs	r4, #0
 800c80a:	7808      	ldrb	r0, [r1, #0]
 800c80c:	f7ff ff8c 	bl	800c728 <__hexdig_fun>
 800c810:	1e43      	subs	r3, r0, #1
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b18      	cmp	r3, #24
 800c816:	d830      	bhi.n	800c87a <__gethex+0x126>
 800c818:	f1a0 0210 	sub.w	r2, r0, #16
 800c81c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c820:	f7ff ff82 	bl	800c728 <__hexdig_fun>
 800c824:	f100 3cff 	add.w	ip, r0, #4294967295
 800c828:	fa5f fc8c 	uxtb.w	ip, ip
 800c82c:	f1bc 0f18 	cmp.w	ip, #24
 800c830:	f04f 030a 	mov.w	r3, #10
 800c834:	d91e      	bls.n	800c874 <__gethex+0x120>
 800c836:	b104      	cbz	r4, 800c83a <__gethex+0xe6>
 800c838:	4252      	negs	r2, r2
 800c83a:	4417      	add	r7, r2
 800c83c:	f8ca 1000 	str.w	r1, [sl]
 800c840:	b1ed      	cbz	r5, 800c87e <__gethex+0x12a>
 800c842:	f1bb 0f00 	cmp.w	fp, #0
 800c846:	bf0c      	ite	eq
 800c848:	2506      	moveq	r5, #6
 800c84a:	2500      	movne	r5, #0
 800c84c:	4628      	mov	r0, r5
 800c84e:	b005      	add	sp, #20
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	2500      	movs	r5, #0
 800c856:	462c      	mov	r4, r5
 800c858:	e7b0      	b.n	800c7bc <__gethex+0x68>
 800c85a:	2c00      	cmp	r4, #0
 800c85c:	d1c7      	bne.n	800c7ee <__gethex+0x9a>
 800c85e:	4627      	mov	r7, r4
 800c860:	e7c7      	b.n	800c7f2 <__gethex+0x9e>
 800c862:	464e      	mov	r6, r9
 800c864:	462f      	mov	r7, r5
 800c866:	2501      	movs	r5, #1
 800c868:	e7c3      	b.n	800c7f2 <__gethex+0x9e>
 800c86a:	2400      	movs	r4, #0
 800c86c:	1cb1      	adds	r1, r6, #2
 800c86e:	e7cc      	b.n	800c80a <__gethex+0xb6>
 800c870:	2401      	movs	r4, #1
 800c872:	e7fb      	b.n	800c86c <__gethex+0x118>
 800c874:	fb03 0002 	mla	r0, r3, r2, r0
 800c878:	e7ce      	b.n	800c818 <__gethex+0xc4>
 800c87a:	4631      	mov	r1, r6
 800c87c:	e7de      	b.n	800c83c <__gethex+0xe8>
 800c87e:	eba6 0309 	sub.w	r3, r6, r9
 800c882:	3b01      	subs	r3, #1
 800c884:	4629      	mov	r1, r5
 800c886:	2b07      	cmp	r3, #7
 800c888:	dc0a      	bgt.n	800c8a0 <__gethex+0x14c>
 800c88a:	9801      	ldr	r0, [sp, #4]
 800c88c:	f000 fafc 	bl	800ce88 <_Balloc>
 800c890:	4604      	mov	r4, r0
 800c892:	b940      	cbnz	r0, 800c8a6 <__gethex+0x152>
 800c894:	4b5c      	ldr	r3, [pc, #368]	@ (800ca08 <__gethex+0x2b4>)
 800c896:	4602      	mov	r2, r0
 800c898:	21e4      	movs	r1, #228	@ 0xe4
 800c89a:	485c      	ldr	r0, [pc, #368]	@ (800ca0c <__gethex+0x2b8>)
 800c89c:	f001 fa5c 	bl	800dd58 <__assert_func>
 800c8a0:	3101      	adds	r1, #1
 800c8a2:	105b      	asrs	r3, r3, #1
 800c8a4:	e7ef      	b.n	800c886 <__gethex+0x132>
 800c8a6:	f100 0a14 	add.w	sl, r0, #20
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4655      	mov	r5, sl
 800c8ae:	469b      	mov	fp, r3
 800c8b0:	45b1      	cmp	r9, r6
 800c8b2:	d337      	bcc.n	800c924 <__gethex+0x1d0>
 800c8b4:	f845 bb04 	str.w	fp, [r5], #4
 800c8b8:	eba5 050a 	sub.w	r5, r5, sl
 800c8bc:	10ad      	asrs	r5, r5, #2
 800c8be:	6125      	str	r5, [r4, #16]
 800c8c0:	4658      	mov	r0, fp
 800c8c2:	f000 fbd3 	bl	800d06c <__hi0bits>
 800c8c6:	016d      	lsls	r5, r5, #5
 800c8c8:	f8d8 6000 	ldr.w	r6, [r8]
 800c8cc:	1a2d      	subs	r5, r5, r0
 800c8ce:	42b5      	cmp	r5, r6
 800c8d0:	dd54      	ble.n	800c97c <__gethex+0x228>
 800c8d2:	1bad      	subs	r5, r5, r6
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 ff67 	bl	800d7aa <__any_on>
 800c8dc:	4681      	mov	r9, r0
 800c8de:	b178      	cbz	r0, 800c900 <__gethex+0x1ac>
 800c8e0:	1e6b      	subs	r3, r5, #1
 800c8e2:	1159      	asrs	r1, r3, #5
 800c8e4:	f003 021f 	and.w	r2, r3, #31
 800c8e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c8ec:	f04f 0901 	mov.w	r9, #1
 800c8f0:	fa09 f202 	lsl.w	r2, r9, r2
 800c8f4:	420a      	tst	r2, r1
 800c8f6:	d003      	beq.n	800c900 <__gethex+0x1ac>
 800c8f8:	454b      	cmp	r3, r9
 800c8fa:	dc36      	bgt.n	800c96a <__gethex+0x216>
 800c8fc:	f04f 0902 	mov.w	r9, #2
 800c900:	4629      	mov	r1, r5
 800c902:	4620      	mov	r0, r4
 800c904:	f7ff febe 	bl	800c684 <rshift>
 800c908:	442f      	add	r7, r5
 800c90a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c90e:	42bb      	cmp	r3, r7
 800c910:	da42      	bge.n	800c998 <__gethex+0x244>
 800c912:	9801      	ldr	r0, [sp, #4]
 800c914:	4621      	mov	r1, r4
 800c916:	f000 faf7 	bl	800cf08 <_Bfree>
 800c91a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c91c:	2300      	movs	r3, #0
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	25a3      	movs	r5, #163	@ 0xa3
 800c922:	e793      	b.n	800c84c <__gethex+0xf8>
 800c924:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c928:	2a2e      	cmp	r2, #46	@ 0x2e
 800c92a:	d012      	beq.n	800c952 <__gethex+0x1fe>
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	d104      	bne.n	800c93a <__gethex+0x1e6>
 800c930:	f845 bb04 	str.w	fp, [r5], #4
 800c934:	f04f 0b00 	mov.w	fp, #0
 800c938:	465b      	mov	r3, fp
 800c93a:	7830      	ldrb	r0, [r6, #0]
 800c93c:	9303      	str	r3, [sp, #12]
 800c93e:	f7ff fef3 	bl	800c728 <__hexdig_fun>
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	f000 000f 	and.w	r0, r0, #15
 800c948:	4098      	lsls	r0, r3
 800c94a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c94e:	3304      	adds	r3, #4
 800c950:	e7ae      	b.n	800c8b0 <__gethex+0x15c>
 800c952:	45b1      	cmp	r9, r6
 800c954:	d8ea      	bhi.n	800c92c <__gethex+0x1d8>
 800c956:	492b      	ldr	r1, [pc, #172]	@ (800ca04 <__gethex+0x2b0>)
 800c958:	9303      	str	r3, [sp, #12]
 800c95a:	2201      	movs	r2, #1
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7fe ff4a 	bl	800b7f6 <strncmp>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	2800      	cmp	r0, #0
 800c966:	d1e1      	bne.n	800c92c <__gethex+0x1d8>
 800c968:	e7a2      	b.n	800c8b0 <__gethex+0x15c>
 800c96a:	1ea9      	subs	r1, r5, #2
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 ff1c 	bl	800d7aa <__any_on>
 800c972:	2800      	cmp	r0, #0
 800c974:	d0c2      	beq.n	800c8fc <__gethex+0x1a8>
 800c976:	f04f 0903 	mov.w	r9, #3
 800c97a:	e7c1      	b.n	800c900 <__gethex+0x1ac>
 800c97c:	da09      	bge.n	800c992 <__gethex+0x23e>
 800c97e:	1b75      	subs	r5, r6, r5
 800c980:	4621      	mov	r1, r4
 800c982:	9801      	ldr	r0, [sp, #4]
 800c984:	462a      	mov	r2, r5
 800c986:	f000 fcd7 	bl	800d338 <__lshift>
 800c98a:	1b7f      	subs	r7, r7, r5
 800c98c:	4604      	mov	r4, r0
 800c98e:	f100 0a14 	add.w	sl, r0, #20
 800c992:	f04f 0900 	mov.w	r9, #0
 800c996:	e7b8      	b.n	800c90a <__gethex+0x1b6>
 800c998:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c99c:	42bd      	cmp	r5, r7
 800c99e:	dd6f      	ble.n	800ca80 <__gethex+0x32c>
 800c9a0:	1bed      	subs	r5, r5, r7
 800c9a2:	42ae      	cmp	r6, r5
 800c9a4:	dc34      	bgt.n	800ca10 <__gethex+0x2bc>
 800c9a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d022      	beq.n	800c9f4 <__gethex+0x2a0>
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d024      	beq.n	800c9fc <__gethex+0x2a8>
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d115      	bne.n	800c9e2 <__gethex+0x28e>
 800c9b6:	42ae      	cmp	r6, r5
 800c9b8:	d113      	bne.n	800c9e2 <__gethex+0x28e>
 800c9ba:	2e01      	cmp	r6, #1
 800c9bc:	d10b      	bne.n	800c9d6 <__gethex+0x282>
 800c9be:	9a02      	ldr	r2, [sp, #8]
 800c9c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	6123      	str	r3, [r4, #16]
 800c9ca:	f8ca 3000 	str.w	r3, [sl]
 800c9ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d0:	2562      	movs	r5, #98	@ 0x62
 800c9d2:	601c      	str	r4, [r3, #0]
 800c9d4:	e73a      	b.n	800c84c <__gethex+0xf8>
 800c9d6:	1e71      	subs	r1, r6, #1
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fee6 	bl	800d7aa <__any_on>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d1ed      	bne.n	800c9be <__gethex+0x26a>
 800c9e2:	9801      	ldr	r0, [sp, #4]
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	f000 fa8f 	bl	800cf08 <_Bfree>
 800c9ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	2550      	movs	r5, #80	@ 0x50
 800c9f2:	e72b      	b.n	800c84c <__gethex+0xf8>
 800c9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1f3      	bne.n	800c9e2 <__gethex+0x28e>
 800c9fa:	e7e0      	b.n	800c9be <__gethex+0x26a>
 800c9fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1dd      	bne.n	800c9be <__gethex+0x26a>
 800ca02:	e7ee      	b.n	800c9e2 <__gethex+0x28e>
 800ca04:	0800e514 	.word	0x0800e514
 800ca08:	0800e625 	.word	0x0800e625
 800ca0c:	0800e636 	.word	0x0800e636
 800ca10:	1e6f      	subs	r7, r5, #1
 800ca12:	f1b9 0f00 	cmp.w	r9, #0
 800ca16:	d130      	bne.n	800ca7a <__gethex+0x326>
 800ca18:	b127      	cbz	r7, 800ca24 <__gethex+0x2d0>
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f000 fec4 	bl	800d7aa <__any_on>
 800ca22:	4681      	mov	r9, r0
 800ca24:	117a      	asrs	r2, r7, #5
 800ca26:	2301      	movs	r3, #1
 800ca28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ca2c:	f007 071f 	and.w	r7, r7, #31
 800ca30:	40bb      	lsls	r3, r7
 800ca32:	4213      	tst	r3, r2
 800ca34:	4629      	mov	r1, r5
 800ca36:	4620      	mov	r0, r4
 800ca38:	bf18      	it	ne
 800ca3a:	f049 0902 	orrne.w	r9, r9, #2
 800ca3e:	f7ff fe21 	bl	800c684 <rshift>
 800ca42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ca46:	1b76      	subs	r6, r6, r5
 800ca48:	2502      	movs	r5, #2
 800ca4a:	f1b9 0f00 	cmp.w	r9, #0
 800ca4e:	d047      	beq.n	800cae0 <__gethex+0x38c>
 800ca50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d015      	beq.n	800ca84 <__gethex+0x330>
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d017      	beq.n	800ca8c <__gethex+0x338>
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d109      	bne.n	800ca74 <__gethex+0x320>
 800ca60:	f019 0f02 	tst.w	r9, #2
 800ca64:	d006      	beq.n	800ca74 <__gethex+0x320>
 800ca66:	f8da 3000 	ldr.w	r3, [sl]
 800ca6a:	ea49 0903 	orr.w	r9, r9, r3
 800ca6e:	f019 0f01 	tst.w	r9, #1
 800ca72:	d10e      	bne.n	800ca92 <__gethex+0x33e>
 800ca74:	f045 0510 	orr.w	r5, r5, #16
 800ca78:	e032      	b.n	800cae0 <__gethex+0x38c>
 800ca7a:	f04f 0901 	mov.w	r9, #1
 800ca7e:	e7d1      	b.n	800ca24 <__gethex+0x2d0>
 800ca80:	2501      	movs	r5, #1
 800ca82:	e7e2      	b.n	800ca4a <__gethex+0x2f6>
 800ca84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca86:	f1c3 0301 	rsb	r3, r3, #1
 800ca8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0f0      	beq.n	800ca74 <__gethex+0x320>
 800ca92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca96:	f104 0314 	add.w	r3, r4, #20
 800ca9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800caa2:	f04f 0c00 	mov.w	ip, #0
 800caa6:	4618      	mov	r0, r3
 800caa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cab0:	d01b      	beq.n	800caea <__gethex+0x396>
 800cab2:	3201      	adds	r2, #1
 800cab4:	6002      	str	r2, [r0, #0]
 800cab6:	2d02      	cmp	r5, #2
 800cab8:	f104 0314 	add.w	r3, r4, #20
 800cabc:	d13c      	bne.n	800cb38 <__gethex+0x3e4>
 800cabe:	f8d8 2000 	ldr.w	r2, [r8]
 800cac2:	3a01      	subs	r2, #1
 800cac4:	42b2      	cmp	r2, r6
 800cac6:	d109      	bne.n	800cadc <__gethex+0x388>
 800cac8:	1171      	asrs	r1, r6, #5
 800caca:	2201      	movs	r2, #1
 800cacc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cad0:	f006 061f 	and.w	r6, r6, #31
 800cad4:	fa02 f606 	lsl.w	r6, r2, r6
 800cad8:	421e      	tst	r6, r3
 800cada:	d13a      	bne.n	800cb52 <__gethex+0x3fe>
 800cadc:	f045 0520 	orr.w	r5, r5, #32
 800cae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cae2:	601c      	str	r4, [r3, #0]
 800cae4:	9b02      	ldr	r3, [sp, #8]
 800cae6:	601f      	str	r7, [r3, #0]
 800cae8:	e6b0      	b.n	800c84c <__gethex+0xf8>
 800caea:	4299      	cmp	r1, r3
 800caec:	f843 cc04 	str.w	ip, [r3, #-4]
 800caf0:	d8d9      	bhi.n	800caa6 <__gethex+0x352>
 800caf2:	68a3      	ldr	r3, [r4, #8]
 800caf4:	459b      	cmp	fp, r3
 800caf6:	db17      	blt.n	800cb28 <__gethex+0x3d4>
 800caf8:	6861      	ldr	r1, [r4, #4]
 800cafa:	9801      	ldr	r0, [sp, #4]
 800cafc:	3101      	adds	r1, #1
 800cafe:	f000 f9c3 	bl	800ce88 <_Balloc>
 800cb02:	4681      	mov	r9, r0
 800cb04:	b918      	cbnz	r0, 800cb0e <__gethex+0x3ba>
 800cb06:	4b1a      	ldr	r3, [pc, #104]	@ (800cb70 <__gethex+0x41c>)
 800cb08:	4602      	mov	r2, r0
 800cb0a:	2184      	movs	r1, #132	@ 0x84
 800cb0c:	e6c5      	b.n	800c89a <__gethex+0x146>
 800cb0e:	6922      	ldr	r2, [r4, #16]
 800cb10:	3202      	adds	r2, #2
 800cb12:	f104 010c 	add.w	r1, r4, #12
 800cb16:	0092      	lsls	r2, r2, #2
 800cb18:	300c      	adds	r0, #12
 800cb1a:	f7fe fefe 	bl	800b91a <memcpy>
 800cb1e:	4621      	mov	r1, r4
 800cb20:	9801      	ldr	r0, [sp, #4]
 800cb22:	f000 f9f1 	bl	800cf08 <_Bfree>
 800cb26:	464c      	mov	r4, r9
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb30:	6122      	str	r2, [r4, #16]
 800cb32:	2201      	movs	r2, #1
 800cb34:	615a      	str	r2, [r3, #20]
 800cb36:	e7be      	b.n	800cab6 <__gethex+0x362>
 800cb38:	6922      	ldr	r2, [r4, #16]
 800cb3a:	455a      	cmp	r2, fp
 800cb3c:	dd0b      	ble.n	800cb56 <__gethex+0x402>
 800cb3e:	2101      	movs	r1, #1
 800cb40:	4620      	mov	r0, r4
 800cb42:	f7ff fd9f 	bl	800c684 <rshift>
 800cb46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb4a:	3701      	adds	r7, #1
 800cb4c:	42bb      	cmp	r3, r7
 800cb4e:	f6ff aee0 	blt.w	800c912 <__gethex+0x1be>
 800cb52:	2501      	movs	r5, #1
 800cb54:	e7c2      	b.n	800cadc <__gethex+0x388>
 800cb56:	f016 061f 	ands.w	r6, r6, #31
 800cb5a:	d0fa      	beq.n	800cb52 <__gethex+0x3fe>
 800cb5c:	4453      	add	r3, sl
 800cb5e:	f1c6 0620 	rsb	r6, r6, #32
 800cb62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cb66:	f000 fa81 	bl	800d06c <__hi0bits>
 800cb6a:	42b0      	cmp	r0, r6
 800cb6c:	dbe7      	blt.n	800cb3e <__gethex+0x3ea>
 800cb6e:	e7f0      	b.n	800cb52 <__gethex+0x3fe>
 800cb70:	0800e625 	.word	0x0800e625

0800cb74 <L_shift>:
 800cb74:	f1c2 0208 	rsb	r2, r2, #8
 800cb78:	0092      	lsls	r2, r2, #2
 800cb7a:	b570      	push	{r4, r5, r6, lr}
 800cb7c:	f1c2 0620 	rsb	r6, r2, #32
 800cb80:	6843      	ldr	r3, [r0, #4]
 800cb82:	6804      	ldr	r4, [r0, #0]
 800cb84:	fa03 f506 	lsl.w	r5, r3, r6
 800cb88:	432c      	orrs	r4, r5
 800cb8a:	40d3      	lsrs	r3, r2
 800cb8c:	6004      	str	r4, [r0, #0]
 800cb8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb92:	4288      	cmp	r0, r1
 800cb94:	d3f4      	bcc.n	800cb80 <L_shift+0xc>
 800cb96:	bd70      	pop	{r4, r5, r6, pc}

0800cb98 <__match>:
 800cb98:	b530      	push	{r4, r5, lr}
 800cb9a:	6803      	ldr	r3, [r0, #0]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba2:	b914      	cbnz	r4, 800cbaa <__match+0x12>
 800cba4:	6003      	str	r3, [r0, #0]
 800cba6:	2001      	movs	r0, #1
 800cba8:	bd30      	pop	{r4, r5, pc}
 800cbaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cbb2:	2d19      	cmp	r5, #25
 800cbb4:	bf98      	it	ls
 800cbb6:	3220      	addls	r2, #32
 800cbb8:	42a2      	cmp	r2, r4
 800cbba:	d0f0      	beq.n	800cb9e <__match+0x6>
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	e7f3      	b.n	800cba8 <__match+0x10>

0800cbc0 <__hexnan>:
 800cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc4:	680b      	ldr	r3, [r1, #0]
 800cbc6:	6801      	ldr	r1, [r0, #0]
 800cbc8:	115e      	asrs	r6, r3, #5
 800cbca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cbce:	f013 031f 	ands.w	r3, r3, #31
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	bf18      	it	ne
 800cbd6:	3604      	addne	r6, #4
 800cbd8:	2500      	movs	r5, #0
 800cbda:	1f37      	subs	r7, r6, #4
 800cbdc:	4682      	mov	sl, r0
 800cbde:	4690      	mov	r8, r2
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cbe6:	46b9      	mov	r9, r7
 800cbe8:	463c      	mov	r4, r7
 800cbea:	9502      	str	r5, [sp, #8]
 800cbec:	46ab      	mov	fp, r5
 800cbee:	784a      	ldrb	r2, [r1, #1]
 800cbf0:	1c4b      	adds	r3, r1, #1
 800cbf2:	9303      	str	r3, [sp, #12]
 800cbf4:	b342      	cbz	r2, 800cc48 <__hexnan+0x88>
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	9105      	str	r1, [sp, #20]
 800cbfa:	9204      	str	r2, [sp, #16]
 800cbfc:	f7ff fd94 	bl	800c728 <__hexdig_fun>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d151      	bne.n	800cca8 <__hexnan+0xe8>
 800cc04:	9a04      	ldr	r2, [sp, #16]
 800cc06:	9905      	ldr	r1, [sp, #20]
 800cc08:	2a20      	cmp	r2, #32
 800cc0a:	d818      	bhi.n	800cc3e <__hexnan+0x7e>
 800cc0c:	9b02      	ldr	r3, [sp, #8]
 800cc0e:	459b      	cmp	fp, r3
 800cc10:	dd13      	ble.n	800cc3a <__hexnan+0x7a>
 800cc12:	454c      	cmp	r4, r9
 800cc14:	d206      	bcs.n	800cc24 <__hexnan+0x64>
 800cc16:	2d07      	cmp	r5, #7
 800cc18:	dc04      	bgt.n	800cc24 <__hexnan+0x64>
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f7ff ffa8 	bl	800cb74 <L_shift>
 800cc24:	4544      	cmp	r4, r8
 800cc26:	d952      	bls.n	800ccce <__hexnan+0x10e>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f1a4 0904 	sub.w	r9, r4, #4
 800cc2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc32:	f8cd b008 	str.w	fp, [sp, #8]
 800cc36:	464c      	mov	r4, r9
 800cc38:	461d      	mov	r5, r3
 800cc3a:	9903      	ldr	r1, [sp, #12]
 800cc3c:	e7d7      	b.n	800cbee <__hexnan+0x2e>
 800cc3e:	2a29      	cmp	r2, #41	@ 0x29
 800cc40:	d157      	bne.n	800ccf2 <__hexnan+0x132>
 800cc42:	3102      	adds	r1, #2
 800cc44:	f8ca 1000 	str.w	r1, [sl]
 800cc48:	f1bb 0f00 	cmp.w	fp, #0
 800cc4c:	d051      	beq.n	800ccf2 <__hexnan+0x132>
 800cc4e:	454c      	cmp	r4, r9
 800cc50:	d206      	bcs.n	800cc60 <__hexnan+0xa0>
 800cc52:	2d07      	cmp	r5, #7
 800cc54:	dc04      	bgt.n	800cc60 <__hexnan+0xa0>
 800cc56:	462a      	mov	r2, r5
 800cc58:	4649      	mov	r1, r9
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f7ff ff8a 	bl	800cb74 <L_shift>
 800cc60:	4544      	cmp	r4, r8
 800cc62:	d936      	bls.n	800ccd2 <__hexnan+0x112>
 800cc64:	f1a8 0204 	sub.w	r2, r8, #4
 800cc68:	4623      	mov	r3, r4
 800cc6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc72:	429f      	cmp	r7, r3
 800cc74:	d2f9      	bcs.n	800cc6a <__hexnan+0xaa>
 800cc76:	1b3b      	subs	r3, r7, r4
 800cc78:	f023 0303 	bic.w	r3, r3, #3
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	3401      	adds	r4, #1
 800cc80:	3e03      	subs	r6, #3
 800cc82:	42b4      	cmp	r4, r6
 800cc84:	bf88      	it	hi
 800cc86:	2304      	movhi	r3, #4
 800cc88:	4443      	add	r3, r8
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f843 2b04 	str.w	r2, [r3], #4
 800cc90:	429f      	cmp	r7, r3
 800cc92:	d2fb      	bcs.n	800cc8c <__hexnan+0xcc>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	b91b      	cbnz	r3, 800cca0 <__hexnan+0xe0>
 800cc98:	4547      	cmp	r7, r8
 800cc9a:	d128      	bne.n	800ccee <__hexnan+0x12e>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	2005      	movs	r0, #5
 800cca2:	b007      	add	sp, #28
 800cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca8:	3501      	adds	r5, #1
 800ccaa:	2d08      	cmp	r5, #8
 800ccac:	f10b 0b01 	add.w	fp, fp, #1
 800ccb0:	dd06      	ble.n	800ccc0 <__hexnan+0x100>
 800ccb2:	4544      	cmp	r4, r8
 800ccb4:	d9c1      	bls.n	800cc3a <__hexnan+0x7a>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccbc:	2501      	movs	r5, #1
 800ccbe:	3c04      	subs	r4, #4
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	f000 000f 	and.w	r0, r0, #15
 800ccc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ccca:	6020      	str	r0, [r4, #0]
 800cccc:	e7b5      	b.n	800cc3a <__hexnan+0x7a>
 800ccce:	2508      	movs	r5, #8
 800ccd0:	e7b3      	b.n	800cc3a <__hexnan+0x7a>
 800ccd2:	9b01      	ldr	r3, [sp, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0dd      	beq.n	800cc94 <__hexnan+0xd4>
 800ccd8:	f1c3 0320 	rsb	r3, r3, #32
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	40da      	lsrs	r2, r3
 800cce2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cce6:	4013      	ands	r3, r2
 800cce8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ccec:	e7d2      	b.n	800cc94 <__hexnan+0xd4>
 800ccee:	3f04      	subs	r7, #4
 800ccf0:	e7d0      	b.n	800cc94 <__hexnan+0xd4>
 800ccf2:	2004      	movs	r0, #4
 800ccf4:	e7d5      	b.n	800cca2 <__hexnan+0xe2>
	...

0800ccf8 <malloc>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	@ (800cd04 <malloc+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f000 b825 	b.w	800cd4c <_malloc_r>
 800cd02:	bf00      	nop
 800cd04:	20000188 	.word	0x20000188

0800cd08 <sbrk_aligned>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4e0f      	ldr	r6, [pc, #60]	@ (800cd48 <sbrk_aligned+0x40>)
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	4605      	mov	r5, r0
 800cd12:	b911      	cbnz	r1, 800cd1a <sbrk_aligned+0x12>
 800cd14:	f001 f810 	bl	800dd38 <_sbrk_r>
 800cd18:	6030      	str	r0, [r6, #0]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f001 f80b 	bl	800dd38 <_sbrk_r>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d103      	bne.n	800cd2e <sbrk_aligned+0x26>
 800cd26:	f04f 34ff 	mov.w	r4, #4294967295
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	1cc4      	adds	r4, r0, #3
 800cd30:	f024 0403 	bic.w	r4, r4, #3
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d0f8      	beq.n	800cd2a <sbrk_aligned+0x22>
 800cd38:	1a21      	subs	r1, r4, r0
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 fffc 	bl	800dd38 <_sbrk_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1f2      	bne.n	800cd2a <sbrk_aligned+0x22>
 800cd44:	e7ef      	b.n	800cd26 <sbrk_aligned+0x1e>
 800cd46:	bf00      	nop
 800cd48:	20000824 	.word	0x20000824

0800cd4c <_malloc_r>:
 800cd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd50:	1ccd      	adds	r5, r1, #3
 800cd52:	f025 0503 	bic.w	r5, r5, #3
 800cd56:	3508      	adds	r5, #8
 800cd58:	2d0c      	cmp	r5, #12
 800cd5a:	bf38      	it	cc
 800cd5c:	250c      	movcc	r5, #12
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	4606      	mov	r6, r0
 800cd62:	db01      	blt.n	800cd68 <_malloc_r+0x1c>
 800cd64:	42a9      	cmp	r1, r5
 800cd66:	d904      	bls.n	800cd72 <_malloc_r+0x26>
 800cd68:	230c      	movs	r3, #12
 800cd6a:	6033      	str	r3, [r6, #0]
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce48 <_malloc_r+0xfc>
 800cd76:	f000 f87b 	bl	800ce70 <__malloc_lock>
 800cd7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd7e:	461c      	mov	r4, r3
 800cd80:	bb44      	cbnz	r4, 800cdd4 <_malloc_r+0x88>
 800cd82:	4629      	mov	r1, r5
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff ffbf 	bl	800cd08 <sbrk_aligned>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	d158      	bne.n	800ce42 <_malloc_r+0xf6>
 800cd90:	f8d8 4000 	ldr.w	r4, [r8]
 800cd94:	4627      	mov	r7, r4
 800cd96:	2f00      	cmp	r7, #0
 800cd98:	d143      	bne.n	800ce22 <_malloc_r+0xd6>
 800cd9a:	2c00      	cmp	r4, #0
 800cd9c:	d04b      	beq.n	800ce36 <_malloc_r+0xea>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	4639      	mov	r1, r7
 800cda2:	4630      	mov	r0, r6
 800cda4:	eb04 0903 	add.w	r9, r4, r3
 800cda8:	f000 ffc6 	bl	800dd38 <_sbrk_r>
 800cdac:	4581      	cmp	r9, r0
 800cdae:	d142      	bne.n	800ce36 <_malloc_r+0xea>
 800cdb0:	6821      	ldr	r1, [r4, #0]
 800cdb2:	1a6d      	subs	r5, r5, r1
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7ff ffa6 	bl	800cd08 <sbrk_aligned>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d03a      	beq.n	800ce36 <_malloc_r+0xea>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	442b      	add	r3, r5
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	bb62      	cbnz	r2, 800ce28 <_malloc_r+0xdc>
 800cdce:	f8c8 7000 	str.w	r7, [r8]
 800cdd2:	e00f      	b.n	800cdf4 <_malloc_r+0xa8>
 800cdd4:	6822      	ldr	r2, [r4, #0]
 800cdd6:	1b52      	subs	r2, r2, r5
 800cdd8:	d420      	bmi.n	800ce1c <_malloc_r+0xd0>
 800cdda:	2a0b      	cmp	r2, #11
 800cddc:	d917      	bls.n	800ce0e <_malloc_r+0xc2>
 800cdde:	1961      	adds	r1, r4, r5
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	6025      	str	r5, [r4, #0]
 800cde4:	bf18      	it	ne
 800cde6:	6059      	strne	r1, [r3, #4]
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	bf08      	it	eq
 800cdec:	f8c8 1000 	streq.w	r1, [r8]
 800cdf0:	5162      	str	r2, [r4, r5]
 800cdf2:	604b      	str	r3, [r1, #4]
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f000 f841 	bl	800ce7c <__malloc_unlock>
 800cdfa:	f104 000b 	add.w	r0, r4, #11
 800cdfe:	1d23      	adds	r3, r4, #4
 800ce00:	f020 0007 	bic.w	r0, r0, #7
 800ce04:	1ac2      	subs	r2, r0, r3
 800ce06:	bf1c      	itt	ne
 800ce08:	1a1b      	subne	r3, r3, r0
 800ce0a:	50a3      	strne	r3, [r4, r2]
 800ce0c:	e7af      	b.n	800cd6e <_malloc_r+0x22>
 800ce0e:	6862      	ldr	r2, [r4, #4]
 800ce10:	42a3      	cmp	r3, r4
 800ce12:	bf0c      	ite	eq
 800ce14:	f8c8 2000 	streq.w	r2, [r8]
 800ce18:	605a      	strne	r2, [r3, #4]
 800ce1a:	e7eb      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	6864      	ldr	r4, [r4, #4]
 800ce20:	e7ae      	b.n	800cd80 <_malloc_r+0x34>
 800ce22:	463c      	mov	r4, r7
 800ce24:	687f      	ldr	r7, [r7, #4]
 800ce26:	e7b6      	b.n	800cd96 <_malloc_r+0x4a>
 800ce28:	461a      	mov	r2, r3
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	d1fb      	bne.n	800ce28 <_malloc_r+0xdc>
 800ce30:	2300      	movs	r3, #0
 800ce32:	6053      	str	r3, [r2, #4]
 800ce34:	e7de      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce36:	230c      	movs	r3, #12
 800ce38:	6033      	str	r3, [r6, #0]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f000 f81e 	bl	800ce7c <__malloc_unlock>
 800ce40:	e794      	b.n	800cd6c <_malloc_r+0x20>
 800ce42:	6005      	str	r5, [r0, #0]
 800ce44:	e7d6      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce46:	bf00      	nop
 800ce48:	20000828 	.word	0x20000828

0800ce4c <__ascii_mbtowc>:
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	b901      	cbnz	r1, 800ce52 <__ascii_mbtowc+0x6>
 800ce50:	a901      	add	r1, sp, #4
 800ce52:	b142      	cbz	r2, 800ce66 <__ascii_mbtowc+0x1a>
 800ce54:	b14b      	cbz	r3, 800ce6a <__ascii_mbtowc+0x1e>
 800ce56:	7813      	ldrb	r3, [r2, #0]
 800ce58:	600b      	str	r3, [r1, #0]
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	1e10      	subs	r0, r2, #0
 800ce5e:	bf18      	it	ne
 800ce60:	2001      	movne	r0, #1
 800ce62:	b002      	add	sp, #8
 800ce64:	4770      	bx	lr
 800ce66:	4610      	mov	r0, r2
 800ce68:	e7fb      	b.n	800ce62 <__ascii_mbtowc+0x16>
 800ce6a:	f06f 0001 	mvn.w	r0, #1
 800ce6e:	e7f8      	b.n	800ce62 <__ascii_mbtowc+0x16>

0800ce70 <__malloc_lock>:
 800ce70:	4801      	ldr	r0, [pc, #4]	@ (800ce78 <__malloc_lock+0x8>)
 800ce72:	f7fe bd48 	b.w	800b906 <__retarget_lock_acquire_recursive>
 800ce76:	bf00      	nop
 800ce78:	20000820 	.word	0x20000820

0800ce7c <__malloc_unlock>:
 800ce7c:	4801      	ldr	r0, [pc, #4]	@ (800ce84 <__malloc_unlock+0x8>)
 800ce7e:	f7fe bd43 	b.w	800b908 <__retarget_lock_release_recursive>
 800ce82:	bf00      	nop
 800ce84:	20000820 	.word	0x20000820

0800ce88 <_Balloc>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	69c6      	ldr	r6, [r0, #28]
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	460d      	mov	r5, r1
 800ce90:	b976      	cbnz	r6, 800ceb0 <_Balloc+0x28>
 800ce92:	2010      	movs	r0, #16
 800ce94:	f7ff ff30 	bl	800ccf8 <malloc>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	61e0      	str	r0, [r4, #28]
 800ce9c:	b920      	cbnz	r0, 800cea8 <_Balloc+0x20>
 800ce9e:	4b18      	ldr	r3, [pc, #96]	@ (800cf00 <_Balloc+0x78>)
 800cea0:	4818      	ldr	r0, [pc, #96]	@ (800cf04 <_Balloc+0x7c>)
 800cea2:	216b      	movs	r1, #107	@ 0x6b
 800cea4:	f000 ff58 	bl	800dd58 <__assert_func>
 800cea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ceac:	6006      	str	r6, [r0, #0]
 800ceae:	60c6      	str	r6, [r0, #12]
 800ceb0:	69e6      	ldr	r6, [r4, #28]
 800ceb2:	68f3      	ldr	r3, [r6, #12]
 800ceb4:	b183      	cbz	r3, 800ced8 <_Balloc+0x50>
 800ceb6:	69e3      	ldr	r3, [r4, #28]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cebe:	b9b8      	cbnz	r0, 800cef0 <_Balloc+0x68>
 800cec0:	2101      	movs	r1, #1
 800cec2:	fa01 f605 	lsl.w	r6, r1, r5
 800cec6:	1d72      	adds	r2, r6, #5
 800cec8:	0092      	lsls	r2, r2, #2
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 ff62 	bl	800dd94 <_calloc_r>
 800ced0:	b160      	cbz	r0, 800ceec <_Balloc+0x64>
 800ced2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ced6:	e00e      	b.n	800cef6 <_Balloc+0x6e>
 800ced8:	2221      	movs	r2, #33	@ 0x21
 800ceda:	2104      	movs	r1, #4
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 ff59 	bl	800dd94 <_calloc_r>
 800cee2:	69e3      	ldr	r3, [r4, #28]
 800cee4:	60f0      	str	r0, [r6, #12]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1e4      	bne.n	800ceb6 <_Balloc+0x2e>
 800ceec:	2000      	movs	r0, #0
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	6802      	ldr	r2, [r0, #0]
 800cef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cef6:	2300      	movs	r3, #0
 800cef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cefc:	e7f7      	b.n	800ceee <_Balloc+0x66>
 800cefe:	bf00      	nop
 800cf00:	0800e5b6 	.word	0x0800e5b6
 800cf04:	0800e696 	.word	0x0800e696

0800cf08 <_Bfree>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	69c6      	ldr	r6, [r0, #28]
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	b976      	cbnz	r6, 800cf30 <_Bfree+0x28>
 800cf12:	2010      	movs	r0, #16
 800cf14:	f7ff fef0 	bl	800ccf8 <malloc>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	61e8      	str	r0, [r5, #28]
 800cf1c:	b920      	cbnz	r0, 800cf28 <_Bfree+0x20>
 800cf1e:	4b09      	ldr	r3, [pc, #36]	@ (800cf44 <_Bfree+0x3c>)
 800cf20:	4809      	ldr	r0, [pc, #36]	@ (800cf48 <_Bfree+0x40>)
 800cf22:	218f      	movs	r1, #143	@ 0x8f
 800cf24:	f000 ff18 	bl	800dd58 <__assert_func>
 800cf28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf2c:	6006      	str	r6, [r0, #0]
 800cf2e:	60c6      	str	r6, [r0, #12]
 800cf30:	b13c      	cbz	r4, 800cf42 <_Bfree+0x3a>
 800cf32:	69eb      	ldr	r3, [r5, #28]
 800cf34:	6862      	ldr	r2, [r4, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf3c:	6021      	str	r1, [r4, #0]
 800cf3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	0800e5b6 	.word	0x0800e5b6
 800cf48:	0800e696 	.word	0x0800e696

0800cf4c <__multadd>:
 800cf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf50:	690d      	ldr	r5, [r1, #16]
 800cf52:	4607      	mov	r7, r0
 800cf54:	460c      	mov	r4, r1
 800cf56:	461e      	mov	r6, r3
 800cf58:	f101 0c14 	add.w	ip, r1, #20
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf62:	b299      	uxth	r1, r3
 800cf64:	fb02 6101 	mla	r1, r2, r1, r6
 800cf68:	0c1e      	lsrs	r6, r3, #16
 800cf6a:	0c0b      	lsrs	r3, r1, #16
 800cf6c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf70:	b289      	uxth	r1, r1
 800cf72:	3001      	adds	r0, #1
 800cf74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf78:	4285      	cmp	r5, r0
 800cf7a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf82:	dcec      	bgt.n	800cf5e <__multadd+0x12>
 800cf84:	b30e      	cbz	r6, 800cfca <__multadd+0x7e>
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	42ab      	cmp	r3, r5
 800cf8a:	dc19      	bgt.n	800cfc0 <__multadd+0x74>
 800cf8c:	6861      	ldr	r1, [r4, #4]
 800cf8e:	4638      	mov	r0, r7
 800cf90:	3101      	adds	r1, #1
 800cf92:	f7ff ff79 	bl	800ce88 <_Balloc>
 800cf96:	4680      	mov	r8, r0
 800cf98:	b928      	cbnz	r0, 800cfa6 <__multadd+0x5a>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd0 <__multadd+0x84>)
 800cf9e:	480d      	ldr	r0, [pc, #52]	@ (800cfd4 <__multadd+0x88>)
 800cfa0:	21ba      	movs	r1, #186	@ 0xba
 800cfa2:	f000 fed9 	bl	800dd58 <__assert_func>
 800cfa6:	6922      	ldr	r2, [r4, #16]
 800cfa8:	3202      	adds	r2, #2
 800cfaa:	f104 010c 	add.w	r1, r4, #12
 800cfae:	0092      	lsls	r2, r2, #2
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	f7fe fcb2 	bl	800b91a <memcpy>
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff ffa5 	bl	800cf08 <_Bfree>
 800cfbe:	4644      	mov	r4, r8
 800cfc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	615e      	str	r6, [r3, #20]
 800cfc8:	6125      	str	r5, [r4, #16]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	0800e625 	.word	0x0800e625
 800cfd4:	0800e696 	.word	0x0800e696

0800cfd8 <__s2b>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	4615      	mov	r5, r2
 800cfe0:	461f      	mov	r7, r3
 800cfe2:	2209      	movs	r2, #9
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfec:	2100      	movs	r1, #0
 800cfee:	2201      	movs	r2, #1
 800cff0:	429a      	cmp	r2, r3
 800cff2:	db09      	blt.n	800d008 <__s2b+0x30>
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff ff47 	bl	800ce88 <_Balloc>
 800cffa:	b940      	cbnz	r0, 800d00e <__s2b+0x36>
 800cffc:	4602      	mov	r2, r0
 800cffe:	4b19      	ldr	r3, [pc, #100]	@ (800d064 <__s2b+0x8c>)
 800d000:	4819      	ldr	r0, [pc, #100]	@ (800d068 <__s2b+0x90>)
 800d002:	21d3      	movs	r1, #211	@ 0xd3
 800d004:	f000 fea8 	bl	800dd58 <__assert_func>
 800d008:	0052      	lsls	r2, r2, #1
 800d00a:	3101      	adds	r1, #1
 800d00c:	e7f0      	b.n	800cff0 <__s2b+0x18>
 800d00e:	9b08      	ldr	r3, [sp, #32]
 800d010:	6143      	str	r3, [r0, #20]
 800d012:	2d09      	cmp	r5, #9
 800d014:	f04f 0301 	mov.w	r3, #1
 800d018:	6103      	str	r3, [r0, #16]
 800d01a:	dd16      	ble.n	800d04a <__s2b+0x72>
 800d01c:	f104 0909 	add.w	r9, r4, #9
 800d020:	46c8      	mov	r8, r9
 800d022:	442c      	add	r4, r5
 800d024:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d028:	4601      	mov	r1, r0
 800d02a:	3b30      	subs	r3, #48	@ 0x30
 800d02c:	220a      	movs	r2, #10
 800d02e:	4630      	mov	r0, r6
 800d030:	f7ff ff8c 	bl	800cf4c <__multadd>
 800d034:	45a0      	cmp	r8, r4
 800d036:	d1f5      	bne.n	800d024 <__s2b+0x4c>
 800d038:	f1a5 0408 	sub.w	r4, r5, #8
 800d03c:	444c      	add	r4, r9
 800d03e:	1b2d      	subs	r5, r5, r4
 800d040:	1963      	adds	r3, r4, r5
 800d042:	42bb      	cmp	r3, r7
 800d044:	db04      	blt.n	800d050 <__s2b+0x78>
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	340a      	adds	r4, #10
 800d04c:	2509      	movs	r5, #9
 800d04e:	e7f6      	b.n	800d03e <__s2b+0x66>
 800d050:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d054:	4601      	mov	r1, r0
 800d056:	3b30      	subs	r3, #48	@ 0x30
 800d058:	220a      	movs	r2, #10
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7ff ff76 	bl	800cf4c <__multadd>
 800d060:	e7ee      	b.n	800d040 <__s2b+0x68>
 800d062:	bf00      	nop
 800d064:	0800e625 	.word	0x0800e625
 800d068:	0800e696 	.word	0x0800e696

0800d06c <__hi0bits>:
 800d06c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d070:	4603      	mov	r3, r0
 800d072:	bf36      	itet	cc
 800d074:	0403      	lslcc	r3, r0, #16
 800d076:	2000      	movcs	r0, #0
 800d078:	2010      	movcc	r0, #16
 800d07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d07e:	bf3c      	itt	cc
 800d080:	021b      	lslcc	r3, r3, #8
 800d082:	3008      	addcc	r0, #8
 800d084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d088:	bf3c      	itt	cc
 800d08a:	011b      	lslcc	r3, r3, #4
 800d08c:	3004      	addcc	r0, #4
 800d08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d092:	bf3c      	itt	cc
 800d094:	009b      	lslcc	r3, r3, #2
 800d096:	3002      	addcc	r0, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db05      	blt.n	800d0a8 <__hi0bits+0x3c>
 800d09c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0a0:	f100 0001 	add.w	r0, r0, #1
 800d0a4:	bf08      	it	eq
 800d0a6:	2020      	moveq	r0, #32
 800d0a8:	4770      	bx	lr

0800d0aa <__lo0bits>:
 800d0aa:	6803      	ldr	r3, [r0, #0]
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f013 0007 	ands.w	r0, r3, #7
 800d0b2:	d00b      	beq.n	800d0cc <__lo0bits+0x22>
 800d0b4:	07d9      	lsls	r1, r3, #31
 800d0b6:	d421      	bmi.n	800d0fc <__lo0bits+0x52>
 800d0b8:	0798      	lsls	r0, r3, #30
 800d0ba:	bf49      	itett	mi
 800d0bc:	085b      	lsrmi	r3, r3, #1
 800d0be:	089b      	lsrpl	r3, r3, #2
 800d0c0:	2001      	movmi	r0, #1
 800d0c2:	6013      	strmi	r3, [r2, #0]
 800d0c4:	bf5c      	itt	pl
 800d0c6:	6013      	strpl	r3, [r2, #0]
 800d0c8:	2002      	movpl	r0, #2
 800d0ca:	4770      	bx	lr
 800d0cc:	b299      	uxth	r1, r3
 800d0ce:	b909      	cbnz	r1, 800d0d4 <__lo0bits+0x2a>
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	2010      	movs	r0, #16
 800d0d4:	b2d9      	uxtb	r1, r3
 800d0d6:	b909      	cbnz	r1, 800d0dc <__lo0bits+0x32>
 800d0d8:	3008      	adds	r0, #8
 800d0da:	0a1b      	lsrs	r3, r3, #8
 800d0dc:	0719      	lsls	r1, r3, #28
 800d0de:	bf04      	itt	eq
 800d0e0:	091b      	lsreq	r3, r3, #4
 800d0e2:	3004      	addeq	r0, #4
 800d0e4:	0799      	lsls	r1, r3, #30
 800d0e6:	bf04      	itt	eq
 800d0e8:	089b      	lsreq	r3, r3, #2
 800d0ea:	3002      	addeq	r0, #2
 800d0ec:	07d9      	lsls	r1, r3, #31
 800d0ee:	d403      	bmi.n	800d0f8 <__lo0bits+0x4e>
 800d0f0:	085b      	lsrs	r3, r3, #1
 800d0f2:	f100 0001 	add.w	r0, r0, #1
 800d0f6:	d003      	beq.n	800d100 <__lo0bits+0x56>
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	4770      	bx	lr
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	4770      	bx	lr
 800d100:	2020      	movs	r0, #32
 800d102:	4770      	bx	lr

0800d104 <__i2b>:
 800d104:	b510      	push	{r4, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	2101      	movs	r1, #1
 800d10a:	f7ff febd 	bl	800ce88 <_Balloc>
 800d10e:	4602      	mov	r2, r0
 800d110:	b928      	cbnz	r0, 800d11e <__i2b+0x1a>
 800d112:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <__i2b+0x24>)
 800d114:	4805      	ldr	r0, [pc, #20]	@ (800d12c <__i2b+0x28>)
 800d116:	f240 1145 	movw	r1, #325	@ 0x145
 800d11a:	f000 fe1d 	bl	800dd58 <__assert_func>
 800d11e:	2301      	movs	r3, #1
 800d120:	6144      	str	r4, [r0, #20]
 800d122:	6103      	str	r3, [r0, #16]
 800d124:	bd10      	pop	{r4, pc}
 800d126:	bf00      	nop
 800d128:	0800e625 	.word	0x0800e625
 800d12c:	0800e696 	.word	0x0800e696

0800d130 <__multiply>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4614      	mov	r4, r2
 800d136:	690a      	ldr	r2, [r1, #16]
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	bfa8      	it	ge
 800d13e:	4623      	movge	r3, r4
 800d140:	460f      	mov	r7, r1
 800d142:	bfa4      	itt	ge
 800d144:	460c      	movge	r4, r1
 800d146:	461f      	movge	r7, r3
 800d148:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d14c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d150:	68a3      	ldr	r3, [r4, #8]
 800d152:	6861      	ldr	r1, [r4, #4]
 800d154:	eb0a 0609 	add.w	r6, sl, r9
 800d158:	42b3      	cmp	r3, r6
 800d15a:	b085      	sub	sp, #20
 800d15c:	bfb8      	it	lt
 800d15e:	3101      	addlt	r1, #1
 800d160:	f7ff fe92 	bl	800ce88 <_Balloc>
 800d164:	b930      	cbnz	r0, 800d174 <__multiply+0x44>
 800d166:	4602      	mov	r2, r0
 800d168:	4b44      	ldr	r3, [pc, #272]	@ (800d27c <__multiply+0x14c>)
 800d16a:	4845      	ldr	r0, [pc, #276]	@ (800d280 <__multiply+0x150>)
 800d16c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d170:	f000 fdf2 	bl	800dd58 <__assert_func>
 800d174:	f100 0514 	add.w	r5, r0, #20
 800d178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d17c:	462b      	mov	r3, r5
 800d17e:	2200      	movs	r2, #0
 800d180:	4543      	cmp	r3, r8
 800d182:	d321      	bcc.n	800d1c8 <__multiply+0x98>
 800d184:	f107 0114 	add.w	r1, r7, #20
 800d188:	f104 0214 	add.w	r2, r4, #20
 800d18c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d190:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	1b13      	subs	r3, r2, r4
 800d198:	3b15      	subs	r3, #21
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	3304      	adds	r3, #4
 800d1a0:	f104 0715 	add.w	r7, r4, #21
 800d1a4:	42ba      	cmp	r2, r7
 800d1a6:	bf38      	it	cc
 800d1a8:	2304      	movcc	r3, #4
 800d1aa:	9301      	str	r3, [sp, #4]
 800d1ac:	9b02      	ldr	r3, [sp, #8]
 800d1ae:	9103      	str	r1, [sp, #12]
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	d80c      	bhi.n	800d1ce <__multiply+0x9e>
 800d1b4:	2e00      	cmp	r6, #0
 800d1b6:	dd03      	ble.n	800d1c0 <__multiply+0x90>
 800d1b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d05b      	beq.n	800d278 <__multiply+0x148>
 800d1c0:	6106      	str	r6, [r0, #16]
 800d1c2:	b005      	add	sp, #20
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	f843 2b04 	str.w	r2, [r3], #4
 800d1cc:	e7d8      	b.n	800d180 <__multiply+0x50>
 800d1ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1d2:	f1ba 0f00 	cmp.w	sl, #0
 800d1d6:	d024      	beq.n	800d222 <__multiply+0xf2>
 800d1d8:	f104 0e14 	add.w	lr, r4, #20
 800d1dc:	46a9      	mov	r9, r5
 800d1de:	f04f 0c00 	mov.w	ip, #0
 800d1e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d1ea:	fa1f fb87 	uxth.w	fp, r7
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d1f8:	f8d9 7000 	ldr.w	r7, [r9]
 800d1fc:	4463      	add	r3, ip
 800d1fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d202:	fb0a c70b 	mla	r7, sl, fp, ip
 800d206:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d210:	4572      	cmp	r2, lr
 800d212:	f849 3b04 	str.w	r3, [r9], #4
 800d216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d21a:	d8e2      	bhi.n	800d1e2 <__multiply+0xb2>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	f845 c003 	str.w	ip, [r5, r3]
 800d222:	9b03      	ldr	r3, [sp, #12]
 800d224:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d228:	3104      	adds	r1, #4
 800d22a:	f1b9 0f00 	cmp.w	r9, #0
 800d22e:	d021      	beq.n	800d274 <__multiply+0x144>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	f104 0c14 	add.w	ip, r4, #20
 800d236:	46ae      	mov	lr, r5
 800d238:	f04f 0a00 	mov.w	sl, #0
 800d23c:	f8bc b000 	ldrh.w	fp, [ip]
 800d240:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d244:	fb09 770b 	mla	r7, r9, fp, r7
 800d248:	4457      	add	r7, sl
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d250:	f84e 3b04 	str.w	r3, [lr], #4
 800d254:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d25c:	f8be 3000 	ldrh.w	r3, [lr]
 800d260:	fb09 330a 	mla	r3, r9, sl, r3
 800d264:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d268:	4562      	cmp	r2, ip
 800d26a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d26e:	d8e5      	bhi.n	800d23c <__multiply+0x10c>
 800d270:	9f01      	ldr	r7, [sp, #4]
 800d272:	51eb      	str	r3, [r5, r7]
 800d274:	3504      	adds	r5, #4
 800d276:	e799      	b.n	800d1ac <__multiply+0x7c>
 800d278:	3e01      	subs	r6, #1
 800d27a:	e79b      	b.n	800d1b4 <__multiply+0x84>
 800d27c:	0800e625 	.word	0x0800e625
 800d280:	0800e696 	.word	0x0800e696

0800d284 <__pow5mult>:
 800d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d288:	4615      	mov	r5, r2
 800d28a:	f012 0203 	ands.w	r2, r2, #3
 800d28e:	4607      	mov	r7, r0
 800d290:	460e      	mov	r6, r1
 800d292:	d007      	beq.n	800d2a4 <__pow5mult+0x20>
 800d294:	4c25      	ldr	r4, [pc, #148]	@ (800d32c <__pow5mult+0xa8>)
 800d296:	3a01      	subs	r2, #1
 800d298:	2300      	movs	r3, #0
 800d29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d29e:	f7ff fe55 	bl	800cf4c <__multadd>
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	10ad      	asrs	r5, r5, #2
 800d2a6:	d03d      	beq.n	800d324 <__pow5mult+0xa0>
 800d2a8:	69fc      	ldr	r4, [r7, #28]
 800d2aa:	b97c      	cbnz	r4, 800d2cc <__pow5mult+0x48>
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	f7ff fd23 	bl	800ccf8 <malloc>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	61f8      	str	r0, [r7, #28]
 800d2b6:	b928      	cbnz	r0, 800d2c4 <__pow5mult+0x40>
 800d2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d330 <__pow5mult+0xac>)
 800d2ba:	481e      	ldr	r0, [pc, #120]	@ (800d334 <__pow5mult+0xb0>)
 800d2bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2c0:	f000 fd4a 	bl	800dd58 <__assert_func>
 800d2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c8:	6004      	str	r4, [r0, #0]
 800d2ca:	60c4      	str	r4, [r0, #12]
 800d2cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2d4:	b94c      	cbnz	r4, 800d2ea <__pow5mult+0x66>
 800d2d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7ff ff12 	bl	800d104 <__i2b>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	f04f 0900 	mov.w	r9, #0
 800d2ee:	07eb      	lsls	r3, r5, #31
 800d2f0:	d50a      	bpl.n	800d308 <__pow5mult+0x84>
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f7ff ff1a 	bl	800d130 <__multiply>
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	4680      	mov	r8, r0
 800d300:	4638      	mov	r0, r7
 800d302:	f7ff fe01 	bl	800cf08 <_Bfree>
 800d306:	4646      	mov	r6, r8
 800d308:	106d      	asrs	r5, r5, #1
 800d30a:	d00b      	beq.n	800d324 <__pow5mult+0xa0>
 800d30c:	6820      	ldr	r0, [r4, #0]
 800d30e:	b938      	cbnz	r0, 800d320 <__pow5mult+0x9c>
 800d310:	4622      	mov	r2, r4
 800d312:	4621      	mov	r1, r4
 800d314:	4638      	mov	r0, r7
 800d316:	f7ff ff0b 	bl	800d130 <__multiply>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	f8c0 9000 	str.w	r9, [r0]
 800d320:	4604      	mov	r4, r0
 800d322:	e7e4      	b.n	800d2ee <__pow5mult+0x6a>
 800d324:	4630      	mov	r0, r6
 800d326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32a:	bf00      	nop
 800d32c:	0800e6f0 	.word	0x0800e6f0
 800d330:	0800e5b6 	.word	0x0800e5b6
 800d334:	0800e696 	.word	0x0800e696

0800d338 <__lshift>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	460c      	mov	r4, r1
 800d33e:	6849      	ldr	r1, [r1, #4]
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d346:	68a3      	ldr	r3, [r4, #8]
 800d348:	4607      	mov	r7, r0
 800d34a:	4691      	mov	r9, r2
 800d34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d350:	f108 0601 	add.w	r6, r8, #1
 800d354:	42b3      	cmp	r3, r6
 800d356:	db0b      	blt.n	800d370 <__lshift+0x38>
 800d358:	4638      	mov	r0, r7
 800d35a:	f7ff fd95 	bl	800ce88 <_Balloc>
 800d35e:	4605      	mov	r5, r0
 800d360:	b948      	cbnz	r0, 800d376 <__lshift+0x3e>
 800d362:	4602      	mov	r2, r0
 800d364:	4b28      	ldr	r3, [pc, #160]	@ (800d408 <__lshift+0xd0>)
 800d366:	4829      	ldr	r0, [pc, #164]	@ (800d40c <__lshift+0xd4>)
 800d368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d36c:	f000 fcf4 	bl	800dd58 <__assert_func>
 800d370:	3101      	adds	r1, #1
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	e7ee      	b.n	800d354 <__lshift+0x1c>
 800d376:	2300      	movs	r3, #0
 800d378:	f100 0114 	add.w	r1, r0, #20
 800d37c:	f100 0210 	add.w	r2, r0, #16
 800d380:	4618      	mov	r0, r3
 800d382:	4553      	cmp	r3, sl
 800d384:	db33      	blt.n	800d3ee <__lshift+0xb6>
 800d386:	6920      	ldr	r0, [r4, #16]
 800d388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d38c:	f104 0314 	add.w	r3, r4, #20
 800d390:	f019 091f 	ands.w	r9, r9, #31
 800d394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d39c:	d02b      	beq.n	800d3f6 <__lshift+0xbe>
 800d39e:	f1c9 0e20 	rsb	lr, r9, #32
 800d3a2:	468a      	mov	sl, r1
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d3ac:	4310      	orrs	r0, r2
 800d3ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b6:	459c      	cmp	ip, r3
 800d3b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3bc:	d8f3      	bhi.n	800d3a6 <__lshift+0x6e>
 800d3be:	ebac 0304 	sub.w	r3, ip, r4
 800d3c2:	3b15      	subs	r3, #21
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	f104 0015 	add.w	r0, r4, #21
 800d3ce:	4584      	cmp	ip, r0
 800d3d0:	bf38      	it	cc
 800d3d2:	2304      	movcc	r3, #4
 800d3d4:	50ca      	str	r2, [r1, r3]
 800d3d6:	b10a      	cbz	r2, 800d3dc <__lshift+0xa4>
 800d3d8:	f108 0602 	add.w	r6, r8, #2
 800d3dc:	3e01      	subs	r6, #1
 800d3de:	4638      	mov	r0, r7
 800d3e0:	612e      	str	r6, [r5, #16]
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	f7ff fd90 	bl	800cf08 <_Bfree>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	e7c5      	b.n	800d382 <__lshift+0x4a>
 800d3f6:	3904      	subs	r1, #4
 800d3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d400:	459c      	cmp	ip, r3
 800d402:	d8f9      	bhi.n	800d3f8 <__lshift+0xc0>
 800d404:	e7ea      	b.n	800d3dc <__lshift+0xa4>
 800d406:	bf00      	nop
 800d408:	0800e625 	.word	0x0800e625
 800d40c:	0800e696 	.word	0x0800e696

0800d410 <__mcmp>:
 800d410:	690a      	ldr	r2, [r1, #16]
 800d412:	4603      	mov	r3, r0
 800d414:	6900      	ldr	r0, [r0, #16]
 800d416:	1a80      	subs	r0, r0, r2
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	d10e      	bne.n	800d43a <__mcmp+0x2a>
 800d41c:	3314      	adds	r3, #20
 800d41e:	3114      	adds	r1, #20
 800d420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d42c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d430:	4295      	cmp	r5, r2
 800d432:	d003      	beq.n	800d43c <__mcmp+0x2c>
 800d434:	d205      	bcs.n	800d442 <__mcmp+0x32>
 800d436:	f04f 30ff 	mov.w	r0, #4294967295
 800d43a:	bd30      	pop	{r4, r5, pc}
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	d3f3      	bcc.n	800d428 <__mcmp+0x18>
 800d440:	e7fb      	b.n	800d43a <__mcmp+0x2a>
 800d442:	2001      	movs	r0, #1
 800d444:	e7f9      	b.n	800d43a <__mcmp+0x2a>
	...

0800d448 <__mdiff>:
 800d448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	4689      	mov	r9, r1
 800d44e:	4606      	mov	r6, r0
 800d450:	4611      	mov	r1, r2
 800d452:	4648      	mov	r0, r9
 800d454:	4614      	mov	r4, r2
 800d456:	f7ff ffdb 	bl	800d410 <__mcmp>
 800d45a:	1e05      	subs	r5, r0, #0
 800d45c:	d112      	bne.n	800d484 <__mdiff+0x3c>
 800d45e:	4629      	mov	r1, r5
 800d460:	4630      	mov	r0, r6
 800d462:	f7ff fd11 	bl	800ce88 <_Balloc>
 800d466:	4602      	mov	r2, r0
 800d468:	b928      	cbnz	r0, 800d476 <__mdiff+0x2e>
 800d46a:	4b3f      	ldr	r3, [pc, #252]	@ (800d568 <__mdiff+0x120>)
 800d46c:	f240 2137 	movw	r1, #567	@ 0x237
 800d470:	483e      	ldr	r0, [pc, #248]	@ (800d56c <__mdiff+0x124>)
 800d472:	f000 fc71 	bl	800dd58 <__assert_func>
 800d476:	2301      	movs	r3, #1
 800d478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d47c:	4610      	mov	r0, r2
 800d47e:	b003      	add	sp, #12
 800d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d484:	bfbc      	itt	lt
 800d486:	464b      	movlt	r3, r9
 800d488:	46a1      	movlt	r9, r4
 800d48a:	4630      	mov	r0, r6
 800d48c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d490:	bfba      	itte	lt
 800d492:	461c      	movlt	r4, r3
 800d494:	2501      	movlt	r5, #1
 800d496:	2500      	movge	r5, #0
 800d498:	f7ff fcf6 	bl	800ce88 <_Balloc>
 800d49c:	4602      	mov	r2, r0
 800d49e:	b918      	cbnz	r0, 800d4a8 <__mdiff+0x60>
 800d4a0:	4b31      	ldr	r3, [pc, #196]	@ (800d568 <__mdiff+0x120>)
 800d4a2:	f240 2145 	movw	r1, #581	@ 0x245
 800d4a6:	e7e3      	b.n	800d470 <__mdiff+0x28>
 800d4a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4ac:	6926      	ldr	r6, [r4, #16]
 800d4ae:	60c5      	str	r5, [r0, #12]
 800d4b0:	f109 0310 	add.w	r3, r9, #16
 800d4b4:	f109 0514 	add.w	r5, r9, #20
 800d4b8:	f104 0e14 	add.w	lr, r4, #20
 800d4bc:	f100 0b14 	add.w	fp, r0, #20
 800d4c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	46d9      	mov	r9, fp
 800d4cc:	f04f 0c00 	mov.w	ip, #0
 800d4d0:	9b01      	ldr	r3, [sp, #4]
 800d4d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	fa1f f38a 	uxth.w	r3, sl
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	b283      	uxth	r3, r0
 800d4e4:	1acb      	subs	r3, r1, r3
 800d4e6:	0c00      	lsrs	r0, r0, #16
 800d4e8:	4463      	add	r3, ip
 800d4ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4f8:	4576      	cmp	r6, lr
 800d4fa:	f849 3b04 	str.w	r3, [r9], #4
 800d4fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d502:	d8e5      	bhi.n	800d4d0 <__mdiff+0x88>
 800d504:	1b33      	subs	r3, r6, r4
 800d506:	3b15      	subs	r3, #21
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3415      	adds	r4, #21
 800d50e:	3304      	adds	r3, #4
 800d510:	42a6      	cmp	r6, r4
 800d512:	bf38      	it	cc
 800d514:	2304      	movcc	r3, #4
 800d516:	441d      	add	r5, r3
 800d518:	445b      	add	r3, fp
 800d51a:	461e      	mov	r6, r3
 800d51c:	462c      	mov	r4, r5
 800d51e:	4544      	cmp	r4, r8
 800d520:	d30e      	bcc.n	800d540 <__mdiff+0xf8>
 800d522:	f108 0103 	add.w	r1, r8, #3
 800d526:	1b49      	subs	r1, r1, r5
 800d528:	f021 0103 	bic.w	r1, r1, #3
 800d52c:	3d03      	subs	r5, #3
 800d52e:	45a8      	cmp	r8, r5
 800d530:	bf38      	it	cc
 800d532:	2100      	movcc	r1, #0
 800d534:	440b      	add	r3, r1
 800d536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d53a:	b191      	cbz	r1, 800d562 <__mdiff+0x11a>
 800d53c:	6117      	str	r7, [r2, #16]
 800d53e:	e79d      	b.n	800d47c <__mdiff+0x34>
 800d540:	f854 1b04 	ldr.w	r1, [r4], #4
 800d544:	46e6      	mov	lr, ip
 800d546:	0c08      	lsrs	r0, r1, #16
 800d548:	fa1c fc81 	uxtah	ip, ip, r1
 800d54c:	4471      	add	r1, lr
 800d54e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d552:	b289      	uxth	r1, r1
 800d554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d558:	f846 1b04 	str.w	r1, [r6], #4
 800d55c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d560:	e7dd      	b.n	800d51e <__mdiff+0xd6>
 800d562:	3f01      	subs	r7, #1
 800d564:	e7e7      	b.n	800d536 <__mdiff+0xee>
 800d566:	bf00      	nop
 800d568:	0800e625 	.word	0x0800e625
 800d56c:	0800e696 	.word	0x0800e696

0800d570 <__ulp>:
 800d570:	b082      	sub	sp, #8
 800d572:	ed8d 0b00 	vstr	d0, [sp]
 800d576:	9a01      	ldr	r2, [sp, #4]
 800d578:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b8 <__ulp+0x48>)
 800d57a:	4013      	ands	r3, r2
 800d57c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc08      	bgt.n	800d596 <__ulp+0x26>
 800d584:	425b      	negs	r3, r3
 800d586:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d58a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d58e:	da04      	bge.n	800d59a <__ulp+0x2a>
 800d590:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d594:	4113      	asrs	r3, r2
 800d596:	2200      	movs	r2, #0
 800d598:	e008      	b.n	800d5ac <__ulp+0x3c>
 800d59a:	f1a2 0314 	sub.w	r3, r2, #20
 800d59e:	2b1e      	cmp	r3, #30
 800d5a0:	bfda      	itte	le
 800d5a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d5a6:	40da      	lsrle	r2, r3
 800d5a8:	2201      	movgt	r2, #1
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	ec41 0b10 	vmov	d0, r0, r1
 800d5b4:	b002      	add	sp, #8
 800d5b6:	4770      	bx	lr
 800d5b8:	7ff00000 	.word	0x7ff00000

0800d5bc <__b2d>:
 800d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	6906      	ldr	r6, [r0, #16]
 800d5c2:	f100 0814 	add.w	r8, r0, #20
 800d5c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5ca:	1f37      	subs	r7, r6, #4
 800d5cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7ff fd4b 	bl	800d06c <__hi0bits>
 800d5d6:	f1c0 0320 	rsb	r3, r0, #32
 800d5da:	280a      	cmp	r0, #10
 800d5dc:	600b      	str	r3, [r1, #0]
 800d5de:	491b      	ldr	r1, [pc, #108]	@ (800d64c <__b2d+0x90>)
 800d5e0:	dc15      	bgt.n	800d60e <__b2d+0x52>
 800d5e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d5e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d5ea:	45b8      	cmp	r8, r7
 800d5ec:	ea43 0501 	orr.w	r5, r3, r1
 800d5f0:	bf34      	ite	cc
 800d5f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5f6:	2300      	movcs	r3, #0
 800d5f8:	3015      	adds	r0, #21
 800d5fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d5fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d602:	4303      	orrs	r3, r0
 800d604:	461c      	mov	r4, r3
 800d606:	ec45 4b10 	vmov	d0, r4, r5
 800d60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60e:	45b8      	cmp	r8, r7
 800d610:	bf3a      	itte	cc
 800d612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d616:	f1a6 0708 	subcc.w	r7, r6, #8
 800d61a:	2300      	movcs	r3, #0
 800d61c:	380b      	subs	r0, #11
 800d61e:	d012      	beq.n	800d646 <__b2d+0x8a>
 800d620:	f1c0 0120 	rsb	r1, r0, #32
 800d624:	fa23 f401 	lsr.w	r4, r3, r1
 800d628:	4082      	lsls	r2, r0
 800d62a:	4322      	orrs	r2, r4
 800d62c:	4547      	cmp	r7, r8
 800d62e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d632:	bf8c      	ite	hi
 800d634:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d638:	2200      	movls	r2, #0
 800d63a:	4083      	lsls	r3, r0
 800d63c:	40ca      	lsrs	r2, r1
 800d63e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d642:	4313      	orrs	r3, r2
 800d644:	e7de      	b.n	800d604 <__b2d+0x48>
 800d646:	ea42 0501 	orr.w	r5, r2, r1
 800d64a:	e7db      	b.n	800d604 <__b2d+0x48>
 800d64c:	3ff00000 	.word	0x3ff00000

0800d650 <__d2b>:
 800d650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d654:	460f      	mov	r7, r1
 800d656:	2101      	movs	r1, #1
 800d658:	ec59 8b10 	vmov	r8, r9, d0
 800d65c:	4616      	mov	r6, r2
 800d65e:	f7ff fc13 	bl	800ce88 <_Balloc>
 800d662:	4604      	mov	r4, r0
 800d664:	b930      	cbnz	r0, 800d674 <__d2b+0x24>
 800d666:	4602      	mov	r2, r0
 800d668:	4b23      	ldr	r3, [pc, #140]	@ (800d6f8 <__d2b+0xa8>)
 800d66a:	4824      	ldr	r0, [pc, #144]	@ (800d6fc <__d2b+0xac>)
 800d66c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d670:	f000 fb72 	bl	800dd58 <__assert_func>
 800d674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d67c:	b10d      	cbz	r5, 800d682 <__d2b+0x32>
 800d67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d682:	9301      	str	r3, [sp, #4]
 800d684:	f1b8 0300 	subs.w	r3, r8, #0
 800d688:	d023      	beq.n	800d6d2 <__d2b+0x82>
 800d68a:	4668      	mov	r0, sp
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	f7ff fd0c 	bl	800d0aa <__lo0bits>
 800d692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d696:	b1d0      	cbz	r0, 800d6ce <__d2b+0x7e>
 800d698:	f1c0 0320 	rsb	r3, r0, #32
 800d69c:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	40c2      	lsrs	r2, r0
 800d6a4:	6163      	str	r3, [r4, #20]
 800d6a6:	9201      	str	r2, [sp, #4]
 800d6a8:	9b01      	ldr	r3, [sp, #4]
 800d6aa:	61a3      	str	r3, [r4, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bf0c      	ite	eq
 800d6b0:	2201      	moveq	r2, #1
 800d6b2:	2202      	movne	r2, #2
 800d6b4:	6122      	str	r2, [r4, #16]
 800d6b6:	b1a5      	cbz	r5, 800d6e2 <__d2b+0x92>
 800d6b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6bc:	4405      	add	r5, r0
 800d6be:	603d      	str	r5, [r7, #0]
 800d6c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6c4:	6030      	str	r0, [r6, #0]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	b003      	add	sp, #12
 800d6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ce:	6161      	str	r1, [r4, #20]
 800d6d0:	e7ea      	b.n	800d6a8 <__d2b+0x58>
 800d6d2:	a801      	add	r0, sp, #4
 800d6d4:	f7ff fce9 	bl	800d0aa <__lo0bits>
 800d6d8:	9b01      	ldr	r3, [sp, #4]
 800d6da:	6163      	str	r3, [r4, #20]
 800d6dc:	3020      	adds	r0, #32
 800d6de:	2201      	movs	r2, #1
 800d6e0:	e7e8      	b.n	800d6b4 <__d2b+0x64>
 800d6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6ea:	6038      	str	r0, [r7, #0]
 800d6ec:	6918      	ldr	r0, [r3, #16]
 800d6ee:	f7ff fcbd 	bl	800d06c <__hi0bits>
 800d6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6f6:	e7e5      	b.n	800d6c4 <__d2b+0x74>
 800d6f8:	0800e625 	.word	0x0800e625
 800d6fc:	0800e696 	.word	0x0800e696

0800d700 <__ratio>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	b085      	sub	sp, #20
 800d706:	e9cd 1000 	strd	r1, r0, [sp]
 800d70a:	a902      	add	r1, sp, #8
 800d70c:	f7ff ff56 	bl	800d5bc <__b2d>
 800d710:	9800      	ldr	r0, [sp, #0]
 800d712:	a903      	add	r1, sp, #12
 800d714:	ec55 4b10 	vmov	r4, r5, d0
 800d718:	f7ff ff50 	bl	800d5bc <__b2d>
 800d71c:	9b01      	ldr	r3, [sp, #4]
 800d71e:	6919      	ldr	r1, [r3, #16]
 800d720:	9b00      	ldr	r3, [sp, #0]
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	1ac9      	subs	r1, r1, r3
 800d726:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d72a:	1a9b      	subs	r3, r3, r2
 800d72c:	ec5b ab10 	vmov	sl, fp, d0
 800d730:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d734:	2b00      	cmp	r3, #0
 800d736:	bfce      	itee	gt
 800d738:	462a      	movgt	r2, r5
 800d73a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d73e:	465a      	movle	r2, fp
 800d740:	462f      	mov	r7, r5
 800d742:	46d9      	mov	r9, fp
 800d744:	bfcc      	ite	gt
 800d746:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d74a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d74e:	464b      	mov	r3, r9
 800d750:	4652      	mov	r2, sl
 800d752:	4620      	mov	r0, r4
 800d754:	4639      	mov	r1, r7
 800d756:	f7f3 f889 	bl	800086c <__aeabi_ddiv>
 800d75a:	ec41 0b10 	vmov	d0, r0, r1
 800d75e:	b005      	add	sp, #20
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d764 <__copybits>:
 800d764:	3901      	subs	r1, #1
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	1149      	asrs	r1, r1, #5
 800d76a:	6914      	ldr	r4, [r2, #16]
 800d76c:	3101      	adds	r1, #1
 800d76e:	f102 0314 	add.w	r3, r2, #20
 800d772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d77a:	1f05      	subs	r5, r0, #4
 800d77c:	42a3      	cmp	r3, r4
 800d77e:	d30c      	bcc.n	800d79a <__copybits+0x36>
 800d780:	1aa3      	subs	r3, r4, r2
 800d782:	3b11      	subs	r3, #17
 800d784:	f023 0303 	bic.w	r3, r3, #3
 800d788:	3211      	adds	r2, #17
 800d78a:	42a2      	cmp	r2, r4
 800d78c:	bf88      	it	hi
 800d78e:	2300      	movhi	r3, #0
 800d790:	4418      	add	r0, r3
 800d792:	2300      	movs	r3, #0
 800d794:	4288      	cmp	r0, r1
 800d796:	d305      	bcc.n	800d7a4 <__copybits+0x40>
 800d798:	bd70      	pop	{r4, r5, r6, pc}
 800d79a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d79e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7a2:	e7eb      	b.n	800d77c <__copybits+0x18>
 800d7a4:	f840 3b04 	str.w	r3, [r0], #4
 800d7a8:	e7f4      	b.n	800d794 <__copybits+0x30>

0800d7aa <__any_on>:
 800d7aa:	f100 0214 	add.w	r2, r0, #20
 800d7ae:	6900      	ldr	r0, [r0, #16]
 800d7b0:	114b      	asrs	r3, r1, #5
 800d7b2:	4298      	cmp	r0, r3
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	db11      	blt.n	800d7dc <__any_on+0x32>
 800d7b8:	dd0a      	ble.n	800d7d0 <__any_on+0x26>
 800d7ba:	f011 011f 	ands.w	r1, r1, #31
 800d7be:	d007      	beq.n	800d7d0 <__any_on+0x26>
 800d7c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d7c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d7cc:	428c      	cmp	r4, r1
 800d7ce:	d10b      	bne.n	800d7e8 <__any_on+0x3e>
 800d7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d803      	bhi.n	800d7e0 <__any_on+0x36>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e7f7      	b.n	800d7d0 <__any_on+0x26>
 800d7e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7e4:	2900      	cmp	r1, #0
 800d7e6:	d0f5      	beq.n	800d7d4 <__any_on+0x2a>
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e7f6      	b.n	800d7da <__any_on+0x30>

0800d7ec <_strtol_l.constprop.0>:
 800d7ec:	2b24      	cmp	r3, #36	@ 0x24
 800d7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f2:	4686      	mov	lr, r0
 800d7f4:	4690      	mov	r8, r2
 800d7f6:	d801      	bhi.n	800d7fc <_strtol_l.constprop.0+0x10>
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d106      	bne.n	800d80a <_strtol_l.constprop.0+0x1e>
 800d7fc:	f7fe f858 	bl	800b8b0 <__errno>
 800d800:	2316      	movs	r3, #22
 800d802:	6003      	str	r3, [r0, #0]
 800d804:	2000      	movs	r0, #0
 800d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80a:	4834      	ldr	r0, [pc, #208]	@ (800d8dc <_strtol_l.constprop.0+0xf0>)
 800d80c:	460d      	mov	r5, r1
 800d80e:	462a      	mov	r2, r5
 800d810:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d814:	5d06      	ldrb	r6, [r0, r4]
 800d816:	f016 0608 	ands.w	r6, r6, #8
 800d81a:	d1f8      	bne.n	800d80e <_strtol_l.constprop.0+0x22>
 800d81c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d81e:	d12d      	bne.n	800d87c <_strtol_l.constprop.0+0x90>
 800d820:	782c      	ldrb	r4, [r5, #0]
 800d822:	2601      	movs	r6, #1
 800d824:	1c95      	adds	r5, r2, #2
 800d826:	f033 0210 	bics.w	r2, r3, #16
 800d82a:	d109      	bne.n	800d840 <_strtol_l.constprop.0+0x54>
 800d82c:	2c30      	cmp	r4, #48	@ 0x30
 800d82e:	d12a      	bne.n	800d886 <_strtol_l.constprop.0+0x9a>
 800d830:	782a      	ldrb	r2, [r5, #0]
 800d832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d836:	2a58      	cmp	r2, #88	@ 0x58
 800d838:	d125      	bne.n	800d886 <_strtol_l.constprop.0+0x9a>
 800d83a:	786c      	ldrb	r4, [r5, #1]
 800d83c:	2310      	movs	r3, #16
 800d83e:	3502      	adds	r5, #2
 800d840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d844:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d848:	2200      	movs	r2, #0
 800d84a:	fbbc f9f3 	udiv	r9, ip, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	fb03 ca19 	mls	sl, r3, r9, ip
 800d854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d858:	2f09      	cmp	r7, #9
 800d85a:	d81b      	bhi.n	800d894 <_strtol_l.constprop.0+0xa8>
 800d85c:	463c      	mov	r4, r7
 800d85e:	42a3      	cmp	r3, r4
 800d860:	dd27      	ble.n	800d8b2 <_strtol_l.constprop.0+0xc6>
 800d862:	1c57      	adds	r7, r2, #1
 800d864:	d007      	beq.n	800d876 <_strtol_l.constprop.0+0x8a>
 800d866:	4581      	cmp	r9, r0
 800d868:	d320      	bcc.n	800d8ac <_strtol_l.constprop.0+0xc0>
 800d86a:	d101      	bne.n	800d870 <_strtol_l.constprop.0+0x84>
 800d86c:	45a2      	cmp	sl, r4
 800d86e:	db1d      	blt.n	800d8ac <_strtol_l.constprop.0+0xc0>
 800d870:	fb00 4003 	mla	r0, r0, r3, r4
 800d874:	2201      	movs	r2, #1
 800d876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d87a:	e7eb      	b.n	800d854 <_strtol_l.constprop.0+0x68>
 800d87c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d87e:	bf04      	itt	eq
 800d880:	782c      	ldrbeq	r4, [r5, #0]
 800d882:	1c95      	addeq	r5, r2, #2
 800d884:	e7cf      	b.n	800d826 <_strtol_l.constprop.0+0x3a>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1da      	bne.n	800d840 <_strtol_l.constprop.0+0x54>
 800d88a:	2c30      	cmp	r4, #48	@ 0x30
 800d88c:	bf0c      	ite	eq
 800d88e:	2308      	moveq	r3, #8
 800d890:	230a      	movne	r3, #10
 800d892:	e7d5      	b.n	800d840 <_strtol_l.constprop.0+0x54>
 800d894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d898:	2f19      	cmp	r7, #25
 800d89a:	d801      	bhi.n	800d8a0 <_strtol_l.constprop.0+0xb4>
 800d89c:	3c37      	subs	r4, #55	@ 0x37
 800d89e:	e7de      	b.n	800d85e <_strtol_l.constprop.0+0x72>
 800d8a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d8a4:	2f19      	cmp	r7, #25
 800d8a6:	d804      	bhi.n	800d8b2 <_strtol_l.constprop.0+0xc6>
 800d8a8:	3c57      	subs	r4, #87	@ 0x57
 800d8aa:	e7d8      	b.n	800d85e <_strtol_l.constprop.0+0x72>
 800d8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b0:	e7e1      	b.n	800d876 <_strtol_l.constprop.0+0x8a>
 800d8b2:	1c53      	adds	r3, r2, #1
 800d8b4:	d108      	bne.n	800d8c8 <_strtol_l.constprop.0+0xdc>
 800d8b6:	2322      	movs	r3, #34	@ 0x22
 800d8b8:	f8ce 3000 	str.w	r3, [lr]
 800d8bc:	4660      	mov	r0, ip
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	d0a0      	beq.n	800d806 <_strtol_l.constprop.0+0x1a>
 800d8c4:	1e69      	subs	r1, r5, #1
 800d8c6:	e006      	b.n	800d8d6 <_strtol_l.constprop.0+0xea>
 800d8c8:	b106      	cbz	r6, 800d8cc <_strtol_l.constprop.0+0xe0>
 800d8ca:	4240      	negs	r0, r0
 800d8cc:	f1b8 0f00 	cmp.w	r8, #0
 800d8d0:	d099      	beq.n	800d806 <_strtol_l.constprop.0+0x1a>
 800d8d2:	2a00      	cmp	r2, #0
 800d8d4:	d1f6      	bne.n	800d8c4 <_strtol_l.constprop.0+0xd8>
 800d8d6:	f8c8 1000 	str.w	r1, [r8]
 800d8da:	e794      	b.n	800d806 <_strtol_l.constprop.0+0x1a>
 800d8dc:	0800e7f1 	.word	0x0800e7f1

0800d8e0 <_strtol_r>:
 800d8e0:	f7ff bf84 	b.w	800d7ec <_strtol_l.constprop.0>

0800d8e4 <__ascii_wctomb>:
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	4608      	mov	r0, r1
 800d8e8:	b141      	cbz	r1, 800d8fc <__ascii_wctomb+0x18>
 800d8ea:	2aff      	cmp	r2, #255	@ 0xff
 800d8ec:	d904      	bls.n	800d8f8 <__ascii_wctomb+0x14>
 800d8ee:	228a      	movs	r2, #138	@ 0x8a
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f6:	4770      	bx	lr
 800d8f8:	700a      	strb	r2, [r1, #0]
 800d8fa:	2001      	movs	r0, #1
 800d8fc:	4770      	bx	lr

0800d8fe <__ssputs_r>:
 800d8fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d902:	688e      	ldr	r6, [r1, #8]
 800d904:	461f      	mov	r7, r3
 800d906:	42be      	cmp	r6, r7
 800d908:	680b      	ldr	r3, [r1, #0]
 800d90a:	4682      	mov	sl, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	4690      	mov	r8, r2
 800d910:	d82d      	bhi.n	800d96e <__ssputs_r+0x70>
 800d912:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d916:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d91a:	d026      	beq.n	800d96a <__ssputs_r+0x6c>
 800d91c:	6965      	ldr	r5, [r4, #20]
 800d91e:	6909      	ldr	r1, [r1, #16]
 800d920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d924:	eba3 0901 	sub.w	r9, r3, r1
 800d928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d92c:	1c7b      	adds	r3, r7, #1
 800d92e:	444b      	add	r3, r9
 800d930:	106d      	asrs	r5, r5, #1
 800d932:	429d      	cmp	r5, r3
 800d934:	bf38      	it	cc
 800d936:	461d      	movcc	r5, r3
 800d938:	0553      	lsls	r3, r2, #21
 800d93a:	d527      	bpl.n	800d98c <__ssputs_r+0x8e>
 800d93c:	4629      	mov	r1, r5
 800d93e:	f7ff fa05 	bl	800cd4c <_malloc_r>
 800d942:	4606      	mov	r6, r0
 800d944:	b360      	cbz	r0, 800d9a0 <__ssputs_r+0xa2>
 800d946:	6921      	ldr	r1, [r4, #16]
 800d948:	464a      	mov	r2, r9
 800d94a:	f7fd ffe6 	bl	800b91a <memcpy>
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	6126      	str	r6, [r4, #16]
 800d95c:	6165      	str	r5, [r4, #20]
 800d95e:	444e      	add	r6, r9
 800d960:	eba5 0509 	sub.w	r5, r5, r9
 800d964:	6026      	str	r6, [r4, #0]
 800d966:	60a5      	str	r5, [r4, #8]
 800d968:	463e      	mov	r6, r7
 800d96a:	42be      	cmp	r6, r7
 800d96c:	d900      	bls.n	800d970 <__ssputs_r+0x72>
 800d96e:	463e      	mov	r6, r7
 800d970:	6820      	ldr	r0, [r4, #0]
 800d972:	4632      	mov	r2, r6
 800d974:	4641      	mov	r1, r8
 800d976:	f000 f9c5 	bl	800dd04 <memmove>
 800d97a:	68a3      	ldr	r3, [r4, #8]
 800d97c:	1b9b      	subs	r3, r3, r6
 800d97e:	60a3      	str	r3, [r4, #8]
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	4433      	add	r3, r6
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	2000      	movs	r0, #0
 800d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98c:	462a      	mov	r2, r5
 800d98e:	f000 fa15 	bl	800ddbc <_realloc_r>
 800d992:	4606      	mov	r6, r0
 800d994:	2800      	cmp	r0, #0
 800d996:	d1e0      	bne.n	800d95a <__ssputs_r+0x5c>
 800d998:	6921      	ldr	r1, [r4, #16]
 800d99a:	4650      	mov	r0, sl
 800d99c:	f7fe fe28 	bl	800c5f0 <_free_r>
 800d9a0:	230c      	movs	r3, #12
 800d9a2:	f8ca 3000 	str.w	r3, [sl]
 800d9a6:	89a3      	ldrh	r3, [r4, #12]
 800d9a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9ac:	81a3      	strh	r3, [r4, #12]
 800d9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b2:	e7e9      	b.n	800d988 <__ssputs_r+0x8a>

0800d9b4 <_svfiprintf_r>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4698      	mov	r8, r3
 800d9ba:	898b      	ldrh	r3, [r1, #12]
 800d9bc:	061b      	lsls	r3, r3, #24
 800d9be:	b09d      	sub	sp, #116	@ 0x74
 800d9c0:	4607      	mov	r7, r0
 800d9c2:	460d      	mov	r5, r1
 800d9c4:	4614      	mov	r4, r2
 800d9c6:	d510      	bpl.n	800d9ea <_svfiprintf_r+0x36>
 800d9c8:	690b      	ldr	r3, [r1, #16]
 800d9ca:	b973      	cbnz	r3, 800d9ea <_svfiprintf_r+0x36>
 800d9cc:	2140      	movs	r1, #64	@ 0x40
 800d9ce:	f7ff f9bd 	bl	800cd4c <_malloc_r>
 800d9d2:	6028      	str	r0, [r5, #0]
 800d9d4:	6128      	str	r0, [r5, #16]
 800d9d6:	b930      	cbnz	r0, 800d9e6 <_svfiprintf_r+0x32>
 800d9d8:	230c      	movs	r3, #12
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e0:	b01d      	add	sp, #116	@ 0x74
 800d9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e6:	2340      	movs	r3, #64	@ 0x40
 800d9e8:	616b      	str	r3, [r5, #20]
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ee:	2320      	movs	r3, #32
 800d9f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9f8:	2330      	movs	r3, #48	@ 0x30
 800d9fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db98 <_svfiprintf_r+0x1e4>
 800d9fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da02:	f04f 0901 	mov.w	r9, #1
 800da06:	4623      	mov	r3, r4
 800da08:	469a      	mov	sl, r3
 800da0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da0e:	b10a      	cbz	r2, 800da14 <_svfiprintf_r+0x60>
 800da10:	2a25      	cmp	r2, #37	@ 0x25
 800da12:	d1f9      	bne.n	800da08 <_svfiprintf_r+0x54>
 800da14:	ebba 0b04 	subs.w	fp, sl, r4
 800da18:	d00b      	beq.n	800da32 <_svfiprintf_r+0x7e>
 800da1a:	465b      	mov	r3, fp
 800da1c:	4622      	mov	r2, r4
 800da1e:	4629      	mov	r1, r5
 800da20:	4638      	mov	r0, r7
 800da22:	f7ff ff6c 	bl	800d8fe <__ssputs_r>
 800da26:	3001      	adds	r0, #1
 800da28:	f000 80a7 	beq.w	800db7a <_svfiprintf_r+0x1c6>
 800da2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da2e:	445a      	add	r2, fp
 800da30:	9209      	str	r2, [sp, #36]	@ 0x24
 800da32:	f89a 3000 	ldrb.w	r3, [sl]
 800da36:	2b00      	cmp	r3, #0
 800da38:	f000 809f 	beq.w	800db7a <_svfiprintf_r+0x1c6>
 800da3c:	2300      	movs	r3, #0
 800da3e:	f04f 32ff 	mov.w	r2, #4294967295
 800da42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da46:	f10a 0a01 	add.w	sl, sl, #1
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	9307      	str	r3, [sp, #28]
 800da4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da52:	931a      	str	r3, [sp, #104]	@ 0x68
 800da54:	4654      	mov	r4, sl
 800da56:	2205      	movs	r2, #5
 800da58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5c:	484e      	ldr	r0, [pc, #312]	@ (800db98 <_svfiprintf_r+0x1e4>)
 800da5e:	f7f2 fbc7 	bl	80001f0 <memchr>
 800da62:	9a04      	ldr	r2, [sp, #16]
 800da64:	b9d8      	cbnz	r0, 800da9e <_svfiprintf_r+0xea>
 800da66:	06d0      	lsls	r0, r2, #27
 800da68:	bf44      	itt	mi
 800da6a:	2320      	movmi	r3, #32
 800da6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da70:	0711      	lsls	r1, r2, #28
 800da72:	bf44      	itt	mi
 800da74:	232b      	movmi	r3, #43	@ 0x2b
 800da76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da7a:	f89a 3000 	ldrb.w	r3, [sl]
 800da7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da80:	d015      	beq.n	800daae <_svfiprintf_r+0xfa>
 800da82:	9a07      	ldr	r2, [sp, #28]
 800da84:	4654      	mov	r4, sl
 800da86:	2000      	movs	r0, #0
 800da88:	f04f 0c0a 	mov.w	ip, #10
 800da8c:	4621      	mov	r1, r4
 800da8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da92:	3b30      	subs	r3, #48	@ 0x30
 800da94:	2b09      	cmp	r3, #9
 800da96:	d94b      	bls.n	800db30 <_svfiprintf_r+0x17c>
 800da98:	b1b0      	cbz	r0, 800dac8 <_svfiprintf_r+0x114>
 800da9a:	9207      	str	r2, [sp, #28]
 800da9c:	e014      	b.n	800dac8 <_svfiprintf_r+0x114>
 800da9e:	eba0 0308 	sub.w	r3, r0, r8
 800daa2:	fa09 f303 	lsl.w	r3, r9, r3
 800daa6:	4313      	orrs	r3, r2
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	46a2      	mov	sl, r4
 800daac:	e7d2      	b.n	800da54 <_svfiprintf_r+0xa0>
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	1d19      	adds	r1, r3, #4
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	9103      	str	r1, [sp, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bfbb      	ittet	lt
 800daba:	425b      	neglt	r3, r3
 800dabc:	f042 0202 	orrlt.w	r2, r2, #2
 800dac0:	9307      	strge	r3, [sp, #28]
 800dac2:	9307      	strlt	r3, [sp, #28]
 800dac4:	bfb8      	it	lt
 800dac6:	9204      	strlt	r2, [sp, #16]
 800dac8:	7823      	ldrb	r3, [r4, #0]
 800daca:	2b2e      	cmp	r3, #46	@ 0x2e
 800dacc:	d10a      	bne.n	800dae4 <_svfiprintf_r+0x130>
 800dace:	7863      	ldrb	r3, [r4, #1]
 800dad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dad2:	d132      	bne.n	800db3a <_svfiprintf_r+0x186>
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	1d1a      	adds	r2, r3, #4
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	9203      	str	r2, [sp, #12]
 800dadc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dae0:	3402      	adds	r4, #2
 800dae2:	9305      	str	r3, [sp, #20]
 800dae4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dba8 <_svfiprintf_r+0x1f4>
 800dae8:	7821      	ldrb	r1, [r4, #0]
 800daea:	2203      	movs	r2, #3
 800daec:	4650      	mov	r0, sl
 800daee:	f7f2 fb7f 	bl	80001f0 <memchr>
 800daf2:	b138      	cbz	r0, 800db04 <_svfiprintf_r+0x150>
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	eba0 000a 	sub.w	r0, r0, sl
 800dafa:	2240      	movs	r2, #64	@ 0x40
 800dafc:	4082      	lsls	r2, r0
 800dafe:	4313      	orrs	r3, r2
 800db00:	3401      	adds	r4, #1
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db08:	4824      	ldr	r0, [pc, #144]	@ (800db9c <_svfiprintf_r+0x1e8>)
 800db0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db0e:	2206      	movs	r2, #6
 800db10:	f7f2 fb6e 	bl	80001f0 <memchr>
 800db14:	2800      	cmp	r0, #0
 800db16:	d036      	beq.n	800db86 <_svfiprintf_r+0x1d2>
 800db18:	4b21      	ldr	r3, [pc, #132]	@ (800dba0 <_svfiprintf_r+0x1ec>)
 800db1a:	bb1b      	cbnz	r3, 800db64 <_svfiprintf_r+0x1b0>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	3307      	adds	r3, #7
 800db20:	f023 0307 	bic.w	r3, r3, #7
 800db24:	3308      	adds	r3, #8
 800db26:	9303      	str	r3, [sp, #12]
 800db28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db2a:	4433      	add	r3, r6
 800db2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2e:	e76a      	b.n	800da06 <_svfiprintf_r+0x52>
 800db30:	fb0c 3202 	mla	r2, ip, r2, r3
 800db34:	460c      	mov	r4, r1
 800db36:	2001      	movs	r0, #1
 800db38:	e7a8      	b.n	800da8c <_svfiprintf_r+0xd8>
 800db3a:	2300      	movs	r3, #0
 800db3c:	3401      	adds	r4, #1
 800db3e:	9305      	str	r3, [sp, #20]
 800db40:	4619      	mov	r1, r3
 800db42:	f04f 0c0a 	mov.w	ip, #10
 800db46:	4620      	mov	r0, r4
 800db48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db4c:	3a30      	subs	r2, #48	@ 0x30
 800db4e:	2a09      	cmp	r2, #9
 800db50:	d903      	bls.n	800db5a <_svfiprintf_r+0x1a6>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0c6      	beq.n	800dae4 <_svfiprintf_r+0x130>
 800db56:	9105      	str	r1, [sp, #20]
 800db58:	e7c4      	b.n	800dae4 <_svfiprintf_r+0x130>
 800db5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db5e:	4604      	mov	r4, r0
 800db60:	2301      	movs	r3, #1
 800db62:	e7f0      	b.n	800db46 <_svfiprintf_r+0x192>
 800db64:	ab03      	add	r3, sp, #12
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	462a      	mov	r2, r5
 800db6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <_svfiprintf_r+0x1f0>)
 800db6c:	a904      	add	r1, sp, #16
 800db6e:	4638      	mov	r0, r7
 800db70:	f7fc ff48 	bl	800aa04 <_printf_float>
 800db74:	1c42      	adds	r2, r0, #1
 800db76:	4606      	mov	r6, r0
 800db78:	d1d6      	bne.n	800db28 <_svfiprintf_r+0x174>
 800db7a:	89ab      	ldrh	r3, [r5, #12]
 800db7c:	065b      	lsls	r3, r3, #25
 800db7e:	f53f af2d 	bmi.w	800d9dc <_svfiprintf_r+0x28>
 800db82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db84:	e72c      	b.n	800d9e0 <_svfiprintf_r+0x2c>
 800db86:	ab03      	add	r3, sp, #12
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	462a      	mov	r2, r5
 800db8c:	4b05      	ldr	r3, [pc, #20]	@ (800dba4 <_svfiprintf_r+0x1f0>)
 800db8e:	a904      	add	r1, sp, #16
 800db90:	4638      	mov	r0, r7
 800db92:	f7fd f9cf 	bl	800af34 <_printf_i>
 800db96:	e7ed      	b.n	800db74 <_svfiprintf_r+0x1c0>
 800db98:	0800e8f1 	.word	0x0800e8f1
 800db9c:	0800e8fb 	.word	0x0800e8fb
 800dba0:	0800aa05 	.word	0x0800aa05
 800dba4:	0800d8ff 	.word	0x0800d8ff
 800dba8:	0800e8f7 	.word	0x0800e8f7

0800dbac <__sflush_r>:
 800dbac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	0716      	lsls	r6, r2, #28
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	d454      	bmi.n	800dc66 <__sflush_r+0xba>
 800dbbc:	684b      	ldr	r3, [r1, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dc02      	bgt.n	800dbc8 <__sflush_r+0x1c>
 800dbc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd48      	ble.n	800dc5a <__sflush_r+0xae>
 800dbc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	d045      	beq.n	800dc5a <__sflush_r+0xae>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dbd4:	682f      	ldr	r7, [r5, #0]
 800dbd6:	6a21      	ldr	r1, [r4, #32]
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	d030      	beq.n	800dc3e <__sflush_r+0x92>
 800dbdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	0759      	lsls	r1, r3, #29
 800dbe2:	d505      	bpl.n	800dbf0 <__sflush_r+0x44>
 800dbe4:	6863      	ldr	r3, [r4, #4]
 800dbe6:	1ad2      	subs	r2, r2, r3
 800dbe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dbea:	b10b      	cbz	r3, 800dbf0 <__sflush_r+0x44>
 800dbec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbf4:	6a21      	ldr	r1, [r4, #32]
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	47b0      	blx	r6
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	d106      	bne.n	800dc0e <__sflush_r+0x62>
 800dc00:	6829      	ldr	r1, [r5, #0]
 800dc02:	291d      	cmp	r1, #29
 800dc04:	d82b      	bhi.n	800dc5e <__sflush_r+0xb2>
 800dc06:	4a2a      	ldr	r2, [pc, #168]	@ (800dcb0 <__sflush_r+0x104>)
 800dc08:	410a      	asrs	r2, r1
 800dc0a:	07d6      	lsls	r6, r2, #31
 800dc0c:	d427      	bmi.n	800dc5e <__sflush_r+0xb2>
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6062      	str	r2, [r4, #4]
 800dc12:	04d9      	lsls	r1, r3, #19
 800dc14:	6922      	ldr	r2, [r4, #16]
 800dc16:	6022      	str	r2, [r4, #0]
 800dc18:	d504      	bpl.n	800dc24 <__sflush_r+0x78>
 800dc1a:	1c42      	adds	r2, r0, #1
 800dc1c:	d101      	bne.n	800dc22 <__sflush_r+0x76>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	b903      	cbnz	r3, 800dc24 <__sflush_r+0x78>
 800dc22:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc26:	602f      	str	r7, [r5, #0]
 800dc28:	b1b9      	cbz	r1, 800dc5a <__sflush_r+0xae>
 800dc2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	d002      	beq.n	800dc38 <__sflush_r+0x8c>
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7fe fcdc 	bl	800c5f0 <_free_r>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc3c:	e00d      	b.n	800dc5a <__sflush_r+0xae>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b0      	blx	r6
 800dc44:	4602      	mov	r2, r0
 800dc46:	1c50      	adds	r0, r2, #1
 800dc48:	d1c9      	bne.n	800dbde <__sflush_r+0x32>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0c6      	beq.n	800dbde <__sflush_r+0x32>
 800dc50:	2b1d      	cmp	r3, #29
 800dc52:	d001      	beq.n	800dc58 <__sflush_r+0xac>
 800dc54:	2b16      	cmp	r3, #22
 800dc56:	d11e      	bne.n	800dc96 <__sflush_r+0xea>
 800dc58:	602f      	str	r7, [r5, #0]
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	e022      	b.n	800dca4 <__sflush_r+0xf8>
 800dc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	e01b      	b.n	800dc9e <__sflush_r+0xf2>
 800dc66:	690f      	ldr	r7, [r1, #16]
 800dc68:	2f00      	cmp	r7, #0
 800dc6a:	d0f6      	beq.n	800dc5a <__sflush_r+0xae>
 800dc6c:	0793      	lsls	r3, r2, #30
 800dc6e:	680e      	ldr	r6, [r1, #0]
 800dc70:	bf08      	it	eq
 800dc72:	694b      	ldreq	r3, [r1, #20]
 800dc74:	600f      	str	r7, [r1, #0]
 800dc76:	bf18      	it	ne
 800dc78:	2300      	movne	r3, #0
 800dc7a:	eba6 0807 	sub.w	r8, r6, r7
 800dc7e:	608b      	str	r3, [r1, #8]
 800dc80:	f1b8 0f00 	cmp.w	r8, #0
 800dc84:	dde9      	ble.n	800dc5a <__sflush_r+0xae>
 800dc86:	6a21      	ldr	r1, [r4, #32]
 800dc88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dc8a:	4643      	mov	r3, r8
 800dc8c:	463a      	mov	r2, r7
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b0      	blx	r6
 800dc92:	2800      	cmp	r0, #0
 800dc94:	dc08      	bgt.n	800dca8 <__sflush_r+0xfc>
 800dc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	4407      	add	r7, r0
 800dcaa:	eba8 0800 	sub.w	r8, r8, r0
 800dcae:	e7e7      	b.n	800dc80 <__sflush_r+0xd4>
 800dcb0:	dfbffffe 	.word	0xdfbffffe

0800dcb4 <_fflush_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	690b      	ldr	r3, [r1, #16]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b913      	cbnz	r3, 800dcc4 <_fflush_r+0x10>
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	b118      	cbz	r0, 800dcce <_fflush_r+0x1a>
 800dcc6:	6a03      	ldr	r3, [r0, #32]
 800dcc8:	b90b      	cbnz	r3, 800dcce <_fflush_r+0x1a>
 800dcca:	f7fd fcf3 	bl	800b6b4 <__sinit>
 800dcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d0f3      	beq.n	800dcbe <_fflush_r+0xa>
 800dcd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dcd8:	07d0      	lsls	r0, r2, #31
 800dcda:	d404      	bmi.n	800dce6 <_fflush_r+0x32>
 800dcdc:	0599      	lsls	r1, r3, #22
 800dcde:	d402      	bmi.n	800dce6 <_fflush_r+0x32>
 800dce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dce2:	f7fd fe10 	bl	800b906 <__retarget_lock_acquire_recursive>
 800dce6:	4628      	mov	r0, r5
 800dce8:	4621      	mov	r1, r4
 800dcea:	f7ff ff5f 	bl	800dbac <__sflush_r>
 800dcee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dcf0:	07da      	lsls	r2, r3, #31
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	d4e4      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	059b      	lsls	r3, r3, #22
 800dcfa:	d4e1      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dcfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcfe:	f7fd fe03 	bl	800b908 <__retarget_lock_release_recursive>
 800dd02:	e7dd      	b.n	800dcc0 <_fflush_r+0xc>

0800dd04 <memmove>:
 800dd04:	4288      	cmp	r0, r1
 800dd06:	b510      	push	{r4, lr}
 800dd08:	eb01 0402 	add.w	r4, r1, r2
 800dd0c:	d902      	bls.n	800dd14 <memmove+0x10>
 800dd0e:	4284      	cmp	r4, r0
 800dd10:	4623      	mov	r3, r4
 800dd12:	d807      	bhi.n	800dd24 <memmove+0x20>
 800dd14:	1e43      	subs	r3, r0, #1
 800dd16:	42a1      	cmp	r1, r4
 800dd18:	d008      	beq.n	800dd2c <memmove+0x28>
 800dd1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd22:	e7f8      	b.n	800dd16 <memmove+0x12>
 800dd24:	4402      	add	r2, r0
 800dd26:	4601      	mov	r1, r0
 800dd28:	428a      	cmp	r2, r1
 800dd2a:	d100      	bne.n	800dd2e <memmove+0x2a>
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd36:	e7f7      	b.n	800dd28 <memmove+0x24>

0800dd38 <_sbrk_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	@ (800dd54 <_sbrk_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f5 fc76 	bl	8003634 <_sbrk>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_sbrk_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_sbrk_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	2000081c 	.word	0x2000081c

0800dd58 <__assert_func>:
 800dd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd5a:	4614      	mov	r4, r2
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	4b09      	ldr	r3, [pc, #36]	@ (800dd84 <__assert_func+0x2c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4605      	mov	r5, r0
 800dd64:	68d8      	ldr	r0, [r3, #12]
 800dd66:	b954      	cbnz	r4, 800dd7e <__assert_func+0x26>
 800dd68:	4b07      	ldr	r3, [pc, #28]	@ (800dd88 <__assert_func+0x30>)
 800dd6a:	461c      	mov	r4, r3
 800dd6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd70:	9100      	str	r1, [sp, #0]
 800dd72:	462b      	mov	r3, r5
 800dd74:	4905      	ldr	r1, [pc, #20]	@ (800dd8c <__assert_func+0x34>)
 800dd76:	f000 f84f 	bl	800de18 <fiprintf>
 800dd7a:	f000 f85f 	bl	800de3c <abort>
 800dd7e:	4b04      	ldr	r3, [pc, #16]	@ (800dd90 <__assert_func+0x38>)
 800dd80:	e7f4      	b.n	800dd6c <__assert_func+0x14>
 800dd82:	bf00      	nop
 800dd84:	20000188 	.word	0x20000188
 800dd88:	0800e93d 	.word	0x0800e93d
 800dd8c:	0800e90f 	.word	0x0800e90f
 800dd90:	0800e902 	.word	0x0800e902

0800dd94 <_calloc_r>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	fba1 5402 	umull	r5, r4, r1, r2
 800dd9a:	b93c      	cbnz	r4, 800ddac <_calloc_r+0x18>
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	f7fe ffd5 	bl	800cd4c <_malloc_r>
 800dda2:	4606      	mov	r6, r0
 800dda4:	b928      	cbnz	r0, 800ddb2 <_calloc_r+0x1e>
 800dda6:	2600      	movs	r6, #0
 800dda8:	4630      	mov	r0, r6
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	220c      	movs	r2, #12
 800ddae:	6002      	str	r2, [r0, #0]
 800ddb0:	e7f9      	b.n	800dda6 <_calloc_r+0x12>
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	f7fd fd16 	bl	800b7e6 <memset>
 800ddba:	e7f5      	b.n	800dda8 <_calloc_r+0x14>

0800ddbc <_realloc_r>:
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	4680      	mov	r8, r0
 800ddc2:	4615      	mov	r5, r2
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	b921      	cbnz	r1, 800ddd2 <_realloc_r+0x16>
 800ddc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddcc:	4611      	mov	r1, r2
 800ddce:	f7fe bfbd 	b.w	800cd4c <_malloc_r>
 800ddd2:	b92a      	cbnz	r2, 800dde0 <_realloc_r+0x24>
 800ddd4:	f7fe fc0c 	bl	800c5f0 <_free_r>
 800ddd8:	2400      	movs	r4, #0
 800ddda:	4620      	mov	r0, r4
 800dddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde0:	f000 f833 	bl	800de4a <_malloc_usable_size_r>
 800dde4:	4285      	cmp	r5, r0
 800dde6:	4606      	mov	r6, r0
 800dde8:	d802      	bhi.n	800ddf0 <_realloc_r+0x34>
 800ddea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddee:	d8f4      	bhi.n	800ddda <_realloc_r+0x1e>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	f7fe ffaa 	bl	800cd4c <_malloc_r>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d0ec      	beq.n	800ddd8 <_realloc_r+0x1c>
 800ddfe:	42b5      	cmp	r5, r6
 800de00:	462a      	mov	r2, r5
 800de02:	4621      	mov	r1, r4
 800de04:	bf28      	it	cs
 800de06:	4632      	movcs	r2, r6
 800de08:	f7fd fd87 	bl	800b91a <memcpy>
 800de0c:	4621      	mov	r1, r4
 800de0e:	4640      	mov	r0, r8
 800de10:	f7fe fbee 	bl	800c5f0 <_free_r>
 800de14:	463c      	mov	r4, r7
 800de16:	e7e0      	b.n	800ddda <_realloc_r+0x1e>

0800de18 <fiprintf>:
 800de18:	b40e      	push	{r1, r2, r3}
 800de1a:	b503      	push	{r0, r1, lr}
 800de1c:	4601      	mov	r1, r0
 800de1e:	ab03      	add	r3, sp, #12
 800de20:	4805      	ldr	r0, [pc, #20]	@ (800de38 <fiprintf+0x20>)
 800de22:	f853 2b04 	ldr.w	r2, [r3], #4
 800de26:	6800      	ldr	r0, [r0, #0]
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	f000 f83f 	bl	800deac <_vfiprintf_r>
 800de2e:	b002      	add	sp, #8
 800de30:	f85d eb04 	ldr.w	lr, [sp], #4
 800de34:	b003      	add	sp, #12
 800de36:	4770      	bx	lr
 800de38:	20000188 	.word	0x20000188

0800de3c <abort>:
 800de3c:	b508      	push	{r3, lr}
 800de3e:	2006      	movs	r0, #6
 800de40:	f000 fa08 	bl	800e254 <raise>
 800de44:	2001      	movs	r0, #1
 800de46:	f7f5 fb7d 	bl	8003544 <_exit>

0800de4a <_malloc_usable_size_r>:
 800de4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4e:	1f18      	subs	r0, r3, #4
 800de50:	2b00      	cmp	r3, #0
 800de52:	bfbc      	itt	lt
 800de54:	580b      	ldrlt	r3, [r1, r0]
 800de56:	18c0      	addlt	r0, r0, r3
 800de58:	4770      	bx	lr

0800de5a <__sfputc_r>:
 800de5a:	6893      	ldr	r3, [r2, #8]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	b410      	push	{r4}
 800de62:	6093      	str	r3, [r2, #8]
 800de64:	da08      	bge.n	800de78 <__sfputc_r+0x1e>
 800de66:	6994      	ldr	r4, [r2, #24]
 800de68:	42a3      	cmp	r3, r4
 800de6a:	db01      	blt.n	800de70 <__sfputc_r+0x16>
 800de6c:	290a      	cmp	r1, #10
 800de6e:	d103      	bne.n	800de78 <__sfputc_r+0x1e>
 800de70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de74:	f000 b932 	b.w	800e0dc <__swbuf_r>
 800de78:	6813      	ldr	r3, [r2, #0]
 800de7a:	1c58      	adds	r0, r3, #1
 800de7c:	6010      	str	r0, [r2, #0]
 800de7e:	7019      	strb	r1, [r3, #0]
 800de80:	4608      	mov	r0, r1
 800de82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <__sfputs_r>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	4614      	mov	r4, r2
 800de90:	18d5      	adds	r5, r2, r3
 800de92:	42ac      	cmp	r4, r5
 800de94:	d101      	bne.n	800de9a <__sfputs_r+0x12>
 800de96:	2000      	movs	r0, #0
 800de98:	e007      	b.n	800deaa <__sfputs_r+0x22>
 800de9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9e:	463a      	mov	r2, r7
 800dea0:	4630      	mov	r0, r6
 800dea2:	f7ff ffda 	bl	800de5a <__sfputc_r>
 800dea6:	1c43      	adds	r3, r0, #1
 800dea8:	d1f3      	bne.n	800de92 <__sfputs_r+0xa>
 800deaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800deac <_vfiprintf_r>:
 800deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb0:	460d      	mov	r5, r1
 800deb2:	b09d      	sub	sp, #116	@ 0x74
 800deb4:	4614      	mov	r4, r2
 800deb6:	4698      	mov	r8, r3
 800deb8:	4606      	mov	r6, r0
 800deba:	b118      	cbz	r0, 800dec4 <_vfiprintf_r+0x18>
 800debc:	6a03      	ldr	r3, [r0, #32]
 800debe:	b90b      	cbnz	r3, 800dec4 <_vfiprintf_r+0x18>
 800dec0:	f7fd fbf8 	bl	800b6b4 <__sinit>
 800dec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dec6:	07d9      	lsls	r1, r3, #31
 800dec8:	d405      	bmi.n	800ded6 <_vfiprintf_r+0x2a>
 800deca:	89ab      	ldrh	r3, [r5, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d402      	bmi.n	800ded6 <_vfiprintf_r+0x2a>
 800ded0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ded2:	f7fd fd18 	bl	800b906 <__retarget_lock_acquire_recursive>
 800ded6:	89ab      	ldrh	r3, [r5, #12]
 800ded8:	071b      	lsls	r3, r3, #28
 800deda:	d501      	bpl.n	800dee0 <_vfiprintf_r+0x34>
 800dedc:	692b      	ldr	r3, [r5, #16]
 800dede:	b99b      	cbnz	r3, 800df08 <_vfiprintf_r+0x5c>
 800dee0:	4629      	mov	r1, r5
 800dee2:	4630      	mov	r0, r6
 800dee4:	f000 f938 	bl	800e158 <__swsetup_r>
 800dee8:	b170      	cbz	r0, 800df08 <_vfiprintf_r+0x5c>
 800deea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deec:	07dc      	lsls	r4, r3, #31
 800deee:	d504      	bpl.n	800defa <_vfiprintf_r+0x4e>
 800def0:	f04f 30ff 	mov.w	r0, #4294967295
 800def4:	b01d      	add	sp, #116	@ 0x74
 800def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	0598      	lsls	r0, r3, #22
 800defe:	d4f7      	bmi.n	800def0 <_vfiprintf_r+0x44>
 800df00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df02:	f7fd fd01 	bl	800b908 <__retarget_lock_release_recursive>
 800df06:	e7f3      	b.n	800def0 <_vfiprintf_r+0x44>
 800df08:	2300      	movs	r3, #0
 800df0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df0c:	2320      	movs	r3, #32
 800df0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df12:	f8cd 800c 	str.w	r8, [sp, #12]
 800df16:	2330      	movs	r3, #48	@ 0x30
 800df18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e0c8 <_vfiprintf_r+0x21c>
 800df1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df20:	f04f 0901 	mov.w	r9, #1
 800df24:	4623      	mov	r3, r4
 800df26:	469a      	mov	sl, r3
 800df28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df2c:	b10a      	cbz	r2, 800df32 <_vfiprintf_r+0x86>
 800df2e:	2a25      	cmp	r2, #37	@ 0x25
 800df30:	d1f9      	bne.n	800df26 <_vfiprintf_r+0x7a>
 800df32:	ebba 0b04 	subs.w	fp, sl, r4
 800df36:	d00b      	beq.n	800df50 <_vfiprintf_r+0xa4>
 800df38:	465b      	mov	r3, fp
 800df3a:	4622      	mov	r2, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ffa2 	bl	800de88 <__sfputs_r>
 800df44:	3001      	adds	r0, #1
 800df46:	f000 80a7 	beq.w	800e098 <_vfiprintf_r+0x1ec>
 800df4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df4c:	445a      	add	r2, fp
 800df4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df50:	f89a 3000 	ldrb.w	r3, [sl]
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 809f 	beq.w	800e098 <_vfiprintf_r+0x1ec>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f04f 32ff 	mov.w	r2, #4294967295
 800df60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df64:	f10a 0a01 	add.w	sl, sl, #1
 800df68:	9304      	str	r3, [sp, #16]
 800df6a:	9307      	str	r3, [sp, #28]
 800df6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df70:	931a      	str	r3, [sp, #104]	@ 0x68
 800df72:	4654      	mov	r4, sl
 800df74:	2205      	movs	r2, #5
 800df76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7a:	4853      	ldr	r0, [pc, #332]	@ (800e0c8 <_vfiprintf_r+0x21c>)
 800df7c:	f7f2 f938 	bl	80001f0 <memchr>
 800df80:	9a04      	ldr	r2, [sp, #16]
 800df82:	b9d8      	cbnz	r0, 800dfbc <_vfiprintf_r+0x110>
 800df84:	06d1      	lsls	r1, r2, #27
 800df86:	bf44      	itt	mi
 800df88:	2320      	movmi	r3, #32
 800df8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df8e:	0713      	lsls	r3, r2, #28
 800df90:	bf44      	itt	mi
 800df92:	232b      	movmi	r3, #43	@ 0x2b
 800df94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df98:	f89a 3000 	ldrb.w	r3, [sl]
 800df9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9e:	d015      	beq.n	800dfcc <_vfiprintf_r+0x120>
 800dfa0:	9a07      	ldr	r2, [sp, #28]
 800dfa2:	4654      	mov	r4, sl
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f04f 0c0a 	mov.w	ip, #10
 800dfaa:	4621      	mov	r1, r4
 800dfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfb0:	3b30      	subs	r3, #48	@ 0x30
 800dfb2:	2b09      	cmp	r3, #9
 800dfb4:	d94b      	bls.n	800e04e <_vfiprintf_r+0x1a2>
 800dfb6:	b1b0      	cbz	r0, 800dfe6 <_vfiprintf_r+0x13a>
 800dfb8:	9207      	str	r2, [sp, #28]
 800dfba:	e014      	b.n	800dfe6 <_vfiprintf_r+0x13a>
 800dfbc:	eba0 0308 	sub.w	r3, r0, r8
 800dfc0:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	46a2      	mov	sl, r4
 800dfca:	e7d2      	b.n	800df72 <_vfiprintf_r+0xc6>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	1d19      	adds	r1, r3, #4
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	9103      	str	r1, [sp, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfbb      	ittet	lt
 800dfd8:	425b      	neglt	r3, r3
 800dfda:	f042 0202 	orrlt.w	r2, r2, #2
 800dfde:	9307      	strge	r3, [sp, #28]
 800dfe0:	9307      	strlt	r3, [sp, #28]
 800dfe2:	bfb8      	it	lt
 800dfe4:	9204      	strlt	r2, [sp, #16]
 800dfe6:	7823      	ldrb	r3, [r4, #0]
 800dfe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfea:	d10a      	bne.n	800e002 <_vfiprintf_r+0x156>
 800dfec:	7863      	ldrb	r3, [r4, #1]
 800dfee:	2b2a      	cmp	r3, #42	@ 0x2a
 800dff0:	d132      	bne.n	800e058 <_vfiprintf_r+0x1ac>
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	1d1a      	adds	r2, r3, #4
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	9203      	str	r2, [sp, #12]
 800dffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dffe:	3402      	adds	r4, #2
 800e000:	9305      	str	r3, [sp, #20]
 800e002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e0d8 <_vfiprintf_r+0x22c>
 800e006:	7821      	ldrb	r1, [r4, #0]
 800e008:	2203      	movs	r2, #3
 800e00a:	4650      	mov	r0, sl
 800e00c:	f7f2 f8f0 	bl	80001f0 <memchr>
 800e010:	b138      	cbz	r0, 800e022 <_vfiprintf_r+0x176>
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	eba0 000a 	sub.w	r0, r0, sl
 800e018:	2240      	movs	r2, #64	@ 0x40
 800e01a:	4082      	lsls	r2, r0
 800e01c:	4313      	orrs	r3, r2
 800e01e:	3401      	adds	r4, #1
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e026:	4829      	ldr	r0, [pc, #164]	@ (800e0cc <_vfiprintf_r+0x220>)
 800e028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e02c:	2206      	movs	r2, #6
 800e02e:	f7f2 f8df 	bl	80001f0 <memchr>
 800e032:	2800      	cmp	r0, #0
 800e034:	d03f      	beq.n	800e0b6 <_vfiprintf_r+0x20a>
 800e036:	4b26      	ldr	r3, [pc, #152]	@ (800e0d0 <_vfiprintf_r+0x224>)
 800e038:	bb1b      	cbnz	r3, 800e082 <_vfiprintf_r+0x1d6>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	3307      	adds	r3, #7
 800e03e:	f023 0307 	bic.w	r3, r3, #7
 800e042:	3308      	adds	r3, #8
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e048:	443b      	add	r3, r7
 800e04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04c:	e76a      	b.n	800df24 <_vfiprintf_r+0x78>
 800e04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e052:	460c      	mov	r4, r1
 800e054:	2001      	movs	r0, #1
 800e056:	e7a8      	b.n	800dfaa <_vfiprintf_r+0xfe>
 800e058:	2300      	movs	r3, #0
 800e05a:	3401      	adds	r4, #1
 800e05c:	9305      	str	r3, [sp, #20]
 800e05e:	4619      	mov	r1, r3
 800e060:	f04f 0c0a 	mov.w	ip, #10
 800e064:	4620      	mov	r0, r4
 800e066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e06a:	3a30      	subs	r2, #48	@ 0x30
 800e06c:	2a09      	cmp	r2, #9
 800e06e:	d903      	bls.n	800e078 <_vfiprintf_r+0x1cc>
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0c6      	beq.n	800e002 <_vfiprintf_r+0x156>
 800e074:	9105      	str	r1, [sp, #20]
 800e076:	e7c4      	b.n	800e002 <_vfiprintf_r+0x156>
 800e078:	fb0c 2101 	mla	r1, ip, r1, r2
 800e07c:	4604      	mov	r4, r0
 800e07e:	2301      	movs	r3, #1
 800e080:	e7f0      	b.n	800e064 <_vfiprintf_r+0x1b8>
 800e082:	ab03      	add	r3, sp, #12
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	462a      	mov	r2, r5
 800e088:	4b12      	ldr	r3, [pc, #72]	@ (800e0d4 <_vfiprintf_r+0x228>)
 800e08a:	a904      	add	r1, sp, #16
 800e08c:	4630      	mov	r0, r6
 800e08e:	f7fc fcb9 	bl	800aa04 <_printf_float>
 800e092:	4607      	mov	r7, r0
 800e094:	1c78      	adds	r0, r7, #1
 800e096:	d1d6      	bne.n	800e046 <_vfiprintf_r+0x19a>
 800e098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e09a:	07d9      	lsls	r1, r3, #31
 800e09c:	d405      	bmi.n	800e0aa <_vfiprintf_r+0x1fe>
 800e09e:	89ab      	ldrh	r3, [r5, #12]
 800e0a0:	059a      	lsls	r2, r3, #22
 800e0a2:	d402      	bmi.n	800e0aa <_vfiprintf_r+0x1fe>
 800e0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0a6:	f7fd fc2f 	bl	800b908 <__retarget_lock_release_recursive>
 800e0aa:	89ab      	ldrh	r3, [r5, #12]
 800e0ac:	065b      	lsls	r3, r3, #25
 800e0ae:	f53f af1f 	bmi.w	800def0 <_vfiprintf_r+0x44>
 800e0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0b4:	e71e      	b.n	800def4 <_vfiprintf_r+0x48>
 800e0b6:	ab03      	add	r3, sp, #12
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <_vfiprintf_r+0x228>)
 800e0be:	a904      	add	r1, sp, #16
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f7fc ff37 	bl	800af34 <_printf_i>
 800e0c6:	e7e4      	b.n	800e092 <_vfiprintf_r+0x1e6>
 800e0c8:	0800e8f1 	.word	0x0800e8f1
 800e0cc:	0800e8fb 	.word	0x0800e8fb
 800e0d0:	0800aa05 	.word	0x0800aa05
 800e0d4:	0800de89 	.word	0x0800de89
 800e0d8:	0800e8f7 	.word	0x0800e8f7

0800e0dc <__swbuf_r>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	460e      	mov	r6, r1
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	b118      	cbz	r0, 800e0ee <__swbuf_r+0x12>
 800e0e6:	6a03      	ldr	r3, [r0, #32]
 800e0e8:	b90b      	cbnz	r3, 800e0ee <__swbuf_r+0x12>
 800e0ea:	f7fd fae3 	bl	800b6b4 <__sinit>
 800e0ee:	69a3      	ldr	r3, [r4, #24]
 800e0f0:	60a3      	str	r3, [r4, #8]
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	071a      	lsls	r2, r3, #28
 800e0f6:	d501      	bpl.n	800e0fc <__swbuf_r+0x20>
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	b943      	cbnz	r3, 800e10e <__swbuf_r+0x32>
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	4628      	mov	r0, r5
 800e100:	f000 f82a 	bl	800e158 <__swsetup_r>
 800e104:	b118      	cbz	r0, 800e10e <__swbuf_r+0x32>
 800e106:	f04f 37ff 	mov.w	r7, #4294967295
 800e10a:	4638      	mov	r0, r7
 800e10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	6922      	ldr	r2, [r4, #16]
 800e112:	1a98      	subs	r0, r3, r2
 800e114:	6963      	ldr	r3, [r4, #20]
 800e116:	b2f6      	uxtb	r6, r6
 800e118:	4283      	cmp	r3, r0
 800e11a:	4637      	mov	r7, r6
 800e11c:	dc05      	bgt.n	800e12a <__swbuf_r+0x4e>
 800e11e:	4621      	mov	r1, r4
 800e120:	4628      	mov	r0, r5
 800e122:	f7ff fdc7 	bl	800dcb4 <_fflush_r>
 800e126:	2800      	cmp	r0, #0
 800e128:	d1ed      	bne.n	800e106 <__swbuf_r+0x2a>
 800e12a:	68a3      	ldr	r3, [r4, #8]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	60a3      	str	r3, [r4, #8]
 800e130:	6823      	ldr	r3, [r4, #0]
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	6022      	str	r2, [r4, #0]
 800e136:	701e      	strb	r6, [r3, #0]
 800e138:	6962      	ldr	r2, [r4, #20]
 800e13a:	1c43      	adds	r3, r0, #1
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d004      	beq.n	800e14a <__swbuf_r+0x6e>
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	07db      	lsls	r3, r3, #31
 800e144:	d5e1      	bpl.n	800e10a <__swbuf_r+0x2e>
 800e146:	2e0a      	cmp	r6, #10
 800e148:	d1df      	bne.n	800e10a <__swbuf_r+0x2e>
 800e14a:	4621      	mov	r1, r4
 800e14c:	4628      	mov	r0, r5
 800e14e:	f7ff fdb1 	bl	800dcb4 <_fflush_r>
 800e152:	2800      	cmp	r0, #0
 800e154:	d0d9      	beq.n	800e10a <__swbuf_r+0x2e>
 800e156:	e7d6      	b.n	800e106 <__swbuf_r+0x2a>

0800e158 <__swsetup_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4b29      	ldr	r3, [pc, #164]	@ (800e200 <__swsetup_r+0xa8>)
 800e15c:	4605      	mov	r5, r0
 800e15e:	6818      	ldr	r0, [r3, #0]
 800e160:	460c      	mov	r4, r1
 800e162:	b118      	cbz	r0, 800e16c <__swsetup_r+0x14>
 800e164:	6a03      	ldr	r3, [r0, #32]
 800e166:	b90b      	cbnz	r3, 800e16c <__swsetup_r+0x14>
 800e168:	f7fd faa4 	bl	800b6b4 <__sinit>
 800e16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e170:	0719      	lsls	r1, r3, #28
 800e172:	d422      	bmi.n	800e1ba <__swsetup_r+0x62>
 800e174:	06da      	lsls	r2, r3, #27
 800e176:	d407      	bmi.n	800e188 <__swsetup_r+0x30>
 800e178:	2209      	movs	r2, #9
 800e17a:	602a      	str	r2, [r5, #0]
 800e17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	e033      	b.n	800e1f0 <__swsetup_r+0x98>
 800e188:	0758      	lsls	r0, r3, #29
 800e18a:	d512      	bpl.n	800e1b2 <__swsetup_r+0x5a>
 800e18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e18e:	b141      	cbz	r1, 800e1a2 <__swsetup_r+0x4a>
 800e190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e194:	4299      	cmp	r1, r3
 800e196:	d002      	beq.n	800e19e <__swsetup_r+0x46>
 800e198:	4628      	mov	r0, r5
 800e19a:	f7fe fa29 	bl	800c5f0 <_free_r>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1a2:	89a3      	ldrh	r3, [r4, #12]
 800e1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1a8:	81a3      	strh	r3, [r4, #12]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	6063      	str	r3, [r4, #4]
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	f043 0308 	orr.w	r3, r3, #8
 800e1b8:	81a3      	strh	r3, [r4, #12]
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	b94b      	cbnz	r3, 800e1d2 <__swsetup_r+0x7a>
 800e1be:	89a3      	ldrh	r3, [r4, #12]
 800e1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1c8:	d003      	beq.n	800e1d2 <__swsetup_r+0x7a>
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 f883 	bl	800e2d8 <__smakebuf_r>
 800e1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d6:	f013 0201 	ands.w	r2, r3, #1
 800e1da:	d00a      	beq.n	800e1f2 <__swsetup_r+0x9a>
 800e1dc:	2200      	movs	r2, #0
 800e1de:	60a2      	str	r2, [r4, #8]
 800e1e0:	6962      	ldr	r2, [r4, #20]
 800e1e2:	4252      	negs	r2, r2
 800e1e4:	61a2      	str	r2, [r4, #24]
 800e1e6:	6922      	ldr	r2, [r4, #16]
 800e1e8:	b942      	cbnz	r2, 800e1fc <__swsetup_r+0xa4>
 800e1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1ee:	d1c5      	bne.n	800e17c <__swsetup_r+0x24>
 800e1f0:	bd38      	pop	{r3, r4, r5, pc}
 800e1f2:	0799      	lsls	r1, r3, #30
 800e1f4:	bf58      	it	pl
 800e1f6:	6962      	ldrpl	r2, [r4, #20]
 800e1f8:	60a2      	str	r2, [r4, #8]
 800e1fa:	e7f4      	b.n	800e1e6 <__swsetup_r+0x8e>
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e7f7      	b.n	800e1f0 <__swsetup_r+0x98>
 800e200:	20000188 	.word	0x20000188

0800e204 <_raise_r>:
 800e204:	291f      	cmp	r1, #31
 800e206:	b538      	push	{r3, r4, r5, lr}
 800e208:	4605      	mov	r5, r0
 800e20a:	460c      	mov	r4, r1
 800e20c:	d904      	bls.n	800e218 <_raise_r+0x14>
 800e20e:	2316      	movs	r3, #22
 800e210:	6003      	str	r3, [r0, #0]
 800e212:	f04f 30ff 	mov.w	r0, #4294967295
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e21a:	b112      	cbz	r2, 800e222 <_raise_r+0x1e>
 800e21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e220:	b94b      	cbnz	r3, 800e236 <_raise_r+0x32>
 800e222:	4628      	mov	r0, r5
 800e224:	f000 f830 	bl	800e288 <_getpid_r>
 800e228:	4622      	mov	r2, r4
 800e22a:	4601      	mov	r1, r0
 800e22c:	4628      	mov	r0, r5
 800e22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e232:	f000 b817 	b.w	800e264 <_kill_r>
 800e236:	2b01      	cmp	r3, #1
 800e238:	d00a      	beq.n	800e250 <_raise_r+0x4c>
 800e23a:	1c59      	adds	r1, r3, #1
 800e23c:	d103      	bne.n	800e246 <_raise_r+0x42>
 800e23e:	2316      	movs	r3, #22
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	2001      	movs	r0, #1
 800e244:	e7e7      	b.n	800e216 <_raise_r+0x12>
 800e246:	2100      	movs	r1, #0
 800e248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e24c:	4620      	mov	r0, r4
 800e24e:	4798      	blx	r3
 800e250:	2000      	movs	r0, #0
 800e252:	e7e0      	b.n	800e216 <_raise_r+0x12>

0800e254 <raise>:
 800e254:	4b02      	ldr	r3, [pc, #8]	@ (800e260 <raise+0xc>)
 800e256:	4601      	mov	r1, r0
 800e258:	6818      	ldr	r0, [r3, #0]
 800e25a:	f7ff bfd3 	b.w	800e204 <_raise_r>
 800e25e:	bf00      	nop
 800e260:	20000188 	.word	0x20000188

0800e264 <_kill_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d07      	ldr	r5, [pc, #28]	@ (800e284 <_kill_r+0x20>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	f7f5 f957 	bl	8003524 <_kill>
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	d102      	bne.n	800e280 <_kill_r+0x1c>
 800e27a:	682b      	ldr	r3, [r5, #0]
 800e27c:	b103      	cbz	r3, 800e280 <_kill_r+0x1c>
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	bd38      	pop	{r3, r4, r5, pc}
 800e282:	bf00      	nop
 800e284:	2000081c 	.word	0x2000081c

0800e288 <_getpid_r>:
 800e288:	f7f5 b944 	b.w	8003514 <_getpid>

0800e28c <__swhatbuf_r>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	460c      	mov	r4, r1
 800e290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e294:	2900      	cmp	r1, #0
 800e296:	b096      	sub	sp, #88	@ 0x58
 800e298:	4615      	mov	r5, r2
 800e29a:	461e      	mov	r6, r3
 800e29c:	da0d      	bge.n	800e2ba <__swhatbuf_r+0x2e>
 800e29e:	89a3      	ldrh	r3, [r4, #12]
 800e2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2a4:	f04f 0100 	mov.w	r1, #0
 800e2a8:	bf14      	ite	ne
 800e2aa:	2340      	movne	r3, #64	@ 0x40
 800e2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	6031      	str	r1, [r6, #0]
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	b016      	add	sp, #88	@ 0x58
 800e2b8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ba:	466a      	mov	r2, sp
 800e2bc:	f000 f848 	bl	800e350 <_fstat_r>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	dbec      	blt.n	800e29e <__swhatbuf_r+0x12>
 800e2c4:	9901      	ldr	r1, [sp, #4]
 800e2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2ce:	4259      	negs	r1, r3
 800e2d0:	4159      	adcs	r1, r3
 800e2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2d6:	e7eb      	b.n	800e2b0 <__swhatbuf_r+0x24>

0800e2d8 <__smakebuf_r>:
 800e2d8:	898b      	ldrh	r3, [r1, #12]
 800e2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2dc:	079d      	lsls	r5, r3, #30
 800e2de:	4606      	mov	r6, r0
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	d507      	bpl.n	800e2f4 <__smakebuf_r+0x1c>
 800e2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	6123      	str	r3, [r4, #16]
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	6163      	str	r3, [r4, #20]
 800e2f0:	b003      	add	sp, #12
 800e2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f4:	ab01      	add	r3, sp, #4
 800e2f6:	466a      	mov	r2, sp
 800e2f8:	f7ff ffc8 	bl	800e28c <__swhatbuf_r>
 800e2fc:	9f00      	ldr	r7, [sp, #0]
 800e2fe:	4605      	mov	r5, r0
 800e300:	4639      	mov	r1, r7
 800e302:	4630      	mov	r0, r6
 800e304:	f7fe fd22 	bl	800cd4c <_malloc_r>
 800e308:	b948      	cbnz	r0, 800e31e <__smakebuf_r+0x46>
 800e30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30e:	059a      	lsls	r2, r3, #22
 800e310:	d4ee      	bmi.n	800e2f0 <__smakebuf_r+0x18>
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	f043 0302 	orr.w	r3, r3, #2
 800e31a:	81a3      	strh	r3, [r4, #12]
 800e31c:	e7e2      	b.n	800e2e4 <__smakebuf_r+0xc>
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	6020      	str	r0, [r4, #0]
 800e322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e326:	81a3      	strh	r3, [r4, #12]
 800e328:	9b01      	ldr	r3, [sp, #4]
 800e32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e32e:	b15b      	cbz	r3, 800e348 <__smakebuf_r+0x70>
 800e330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e334:	4630      	mov	r0, r6
 800e336:	f000 f81d 	bl	800e374 <_isatty_r>
 800e33a:	b128      	cbz	r0, 800e348 <__smakebuf_r+0x70>
 800e33c:	89a3      	ldrh	r3, [r4, #12]
 800e33e:	f023 0303 	bic.w	r3, r3, #3
 800e342:	f043 0301 	orr.w	r3, r3, #1
 800e346:	81a3      	strh	r3, [r4, #12]
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	431d      	orrs	r5, r3
 800e34c:	81a5      	strh	r5, [r4, #12]
 800e34e:	e7cf      	b.n	800e2f0 <__smakebuf_r+0x18>

0800e350 <_fstat_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4d07      	ldr	r5, [pc, #28]	@ (800e370 <_fstat_r+0x20>)
 800e354:	2300      	movs	r3, #0
 800e356:	4604      	mov	r4, r0
 800e358:	4608      	mov	r0, r1
 800e35a:	4611      	mov	r1, r2
 800e35c:	602b      	str	r3, [r5, #0]
 800e35e:	f7f5 f941 	bl	80035e4 <_fstat>
 800e362:	1c43      	adds	r3, r0, #1
 800e364:	d102      	bne.n	800e36c <_fstat_r+0x1c>
 800e366:	682b      	ldr	r3, [r5, #0]
 800e368:	b103      	cbz	r3, 800e36c <_fstat_r+0x1c>
 800e36a:	6023      	str	r3, [r4, #0]
 800e36c:	bd38      	pop	{r3, r4, r5, pc}
 800e36e:	bf00      	nop
 800e370:	2000081c 	.word	0x2000081c

0800e374 <_isatty_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d06      	ldr	r5, [pc, #24]	@ (800e390 <_isatty_r+0x1c>)
 800e378:	2300      	movs	r3, #0
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	602b      	str	r3, [r5, #0]
 800e380:	f7f5 f940 	bl	8003604 <_isatty>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_isatty_r+0x1a>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_isatty_r+0x1a>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	2000081c 	.word	0x2000081c

0800e394 <fmax>:
 800e394:	b508      	push	{r3, lr}
 800e396:	ed2d 8b04 	vpush	{d8-d9}
 800e39a:	eeb0 8a40 	vmov.f32	s16, s0
 800e39e:	eef0 8a60 	vmov.f32	s17, s1
 800e3a2:	eeb0 9a41 	vmov.f32	s18, s2
 800e3a6:	eef0 9a61 	vmov.f32	s19, s3
 800e3aa:	f000 f847 	bl	800e43c <__fpclassifyd>
 800e3ae:	b950      	cbnz	r0, 800e3c6 <fmax+0x32>
 800e3b0:	eeb0 8a49 	vmov.f32	s16, s18
 800e3b4:	eef0 8a69 	vmov.f32	s17, s19
 800e3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e3bc:	eef0 0a68 	vmov.f32	s1, s17
 800e3c0:	ecbd 8b04 	vpop	{d8-d9}
 800e3c4:	bd08      	pop	{r3, pc}
 800e3c6:	eeb0 0a49 	vmov.f32	s0, s18
 800e3ca:	eef0 0a69 	vmov.f32	s1, s19
 800e3ce:	f000 f835 	bl	800e43c <__fpclassifyd>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d0f0      	beq.n	800e3b8 <fmax+0x24>
 800e3d6:	ec53 2b19 	vmov	r2, r3, d9
 800e3da:	ec51 0b18 	vmov	r0, r1, d8
 800e3de:	f7f2 fbab 	bl	8000b38 <__aeabi_dcmpgt>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0e4      	beq.n	800e3b0 <fmax+0x1c>
 800e3e6:	e7e7      	b.n	800e3b8 <fmax+0x24>

0800e3e8 <fmin>:
 800e3e8:	b508      	push	{r3, lr}
 800e3ea:	ed2d 8b04 	vpush	{d8-d9}
 800e3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800e3f2:	eef0 8a60 	vmov.f32	s17, s1
 800e3f6:	eeb0 9a41 	vmov.f32	s18, s2
 800e3fa:	eef0 9a61 	vmov.f32	s19, s3
 800e3fe:	f000 f81d 	bl	800e43c <__fpclassifyd>
 800e402:	b950      	cbnz	r0, 800e41a <fmin+0x32>
 800e404:	eeb0 8a49 	vmov.f32	s16, s18
 800e408:	eef0 8a69 	vmov.f32	s17, s19
 800e40c:	eeb0 0a48 	vmov.f32	s0, s16
 800e410:	eef0 0a68 	vmov.f32	s1, s17
 800e414:	ecbd 8b04 	vpop	{d8-d9}
 800e418:	bd08      	pop	{r3, pc}
 800e41a:	eeb0 0a49 	vmov.f32	s0, s18
 800e41e:	eef0 0a69 	vmov.f32	s1, s19
 800e422:	f000 f80b 	bl	800e43c <__fpclassifyd>
 800e426:	2800      	cmp	r0, #0
 800e428:	d0f0      	beq.n	800e40c <fmin+0x24>
 800e42a:	ec53 2b19 	vmov	r2, r3, d9
 800e42e:	ec51 0b18 	vmov	r0, r1, d8
 800e432:	f7f2 fb63 	bl	8000afc <__aeabi_dcmplt>
 800e436:	2800      	cmp	r0, #0
 800e438:	d0e4      	beq.n	800e404 <fmin+0x1c>
 800e43a:	e7e7      	b.n	800e40c <fmin+0x24>

0800e43c <__fpclassifyd>:
 800e43c:	ec51 0b10 	vmov	r0, r1, d0
 800e440:	b510      	push	{r4, lr}
 800e442:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e446:	460b      	mov	r3, r1
 800e448:	d019      	beq.n	800e47e <__fpclassifyd+0x42>
 800e44a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e44e:	490e      	ldr	r1, [pc, #56]	@ (800e488 <__fpclassifyd+0x4c>)
 800e450:	428a      	cmp	r2, r1
 800e452:	d90e      	bls.n	800e472 <__fpclassifyd+0x36>
 800e454:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e458:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e45c:	428a      	cmp	r2, r1
 800e45e:	d908      	bls.n	800e472 <__fpclassifyd+0x36>
 800e460:	4a0a      	ldr	r2, [pc, #40]	@ (800e48c <__fpclassifyd+0x50>)
 800e462:	4213      	tst	r3, r2
 800e464:	d007      	beq.n	800e476 <__fpclassifyd+0x3a>
 800e466:	4294      	cmp	r4, r2
 800e468:	d107      	bne.n	800e47a <__fpclassifyd+0x3e>
 800e46a:	fab0 f080 	clz	r0, r0
 800e46e:	0940      	lsrs	r0, r0, #5
 800e470:	bd10      	pop	{r4, pc}
 800e472:	2004      	movs	r0, #4
 800e474:	e7fc      	b.n	800e470 <__fpclassifyd+0x34>
 800e476:	2003      	movs	r0, #3
 800e478:	e7fa      	b.n	800e470 <__fpclassifyd+0x34>
 800e47a:	2000      	movs	r0, #0
 800e47c:	e7f8      	b.n	800e470 <__fpclassifyd+0x34>
 800e47e:	2800      	cmp	r0, #0
 800e480:	d1ee      	bne.n	800e460 <__fpclassifyd+0x24>
 800e482:	2002      	movs	r0, #2
 800e484:	e7f4      	b.n	800e470 <__fpclassifyd+0x34>
 800e486:	bf00      	nop
 800e488:	7fdfffff 	.word	0x7fdfffff
 800e48c:	7ff00000 	.word	0x7ff00000

0800e490 <_init>:
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	bf00      	nop
 800e494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e496:	bc08      	pop	{r3}
 800e498:	469e      	mov	lr, r3
 800e49a:	4770      	bx	lr

0800e49c <_fini>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr
